
Lab4_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008b28  08008b28  00018b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b44  08008b44  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008b44  08008b44  00018b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b4c  08008b4c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b4c  08008b4c  00018b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b50  08008b50  00018b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000844  20000090  08008be4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  08008be4  000208d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d2b0  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c30  00000000  00000000  0003d370  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001710  00000000  00000000  00040fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001578  00000000  00000000  000426b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000251e6  00000000  00000000  00043c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000150ad  00000000  00000000  00068e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6aa3  00000000  00000000  0007debb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015495e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000632c  00000000  00000000  001549dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008b10 	.word	0x08008b10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008b10 	.word	0x08008b10

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fd9f 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f855 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 fa31 	bl	800093c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004da:	f000 f925 	bl	8000728 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004de:	f000 f951 	bl	8000784 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e2:	f000 f97f 	bl	80007e4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e6:	f007 ff0f 	bl	8008308 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 80004ea:	f000 f9b1 	bl	8000850 <MX_TIM4_Init>
  MX_ADC1_Init();
 80004ee:	f000 f8c9 	bl	8000684 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80004f2:	2108      	movs	r1, #8
 80004f4:	481d      	ldr	r0, [pc, #116]	; (800056c <main+0xa4>)
 80004f6:	f004 fca9 	bl	8004e4c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004fa:	f007 ff2b 	bl	8008354 <MX_USB_HOST_Process>
    HAL_ADC_Start(&hadc1);
 80004fe:	481c      	ldr	r0, [pc, #112]	; (8000570 <main+0xa8>)
 8000500:	f000 fe5e 	bl	80011c0 <HAL_ADC_Start>
    value = HAL_ADC_GetValue(&hadc1);
 8000504:	481a      	ldr	r0, [pc, #104]	; (8000570 <main+0xa8>)
 8000506:	f000 ff21 	bl	800134c <HAL_ADC_GetValue>
 800050a:	4603      	mov	r3, r0
 800050c:	617b      	str	r3, [r7, #20]
    float C = 350 - value;
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 8000514:	ee07 3a90 	vmov	s15, r3
 8000518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800051c:	edc7 7a04 	vstr	s15, [r7, #16]
    float P = 300;
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <main+0xac>)
 8000522:	60fb      	str	r3, [r7, #12]
    float k = C/P;
 8000524:	edd7 6a04 	vldr	s13, [r7, #16]
 8000528:	ed97 7a03 	vldr	s14, [r7, #12]
 800052c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000530:	edc7 7a02 	vstr	s15, [r7, #8]
    float h = (1-(C/P))*100;
 8000534:	edd7 6a04 	vldr	s13, [r7, #16]
 8000538:	ed97 7a03 	vldr	s14, [r7, #12]
 800053c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000548:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000578 <main+0xb0>
 800054c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000550:	edc7 7a01 	vstr	s15, [r7, #4]
    TIM4->CCR3 = (int) h;
 8000554:	edd7 7a01 	vldr	s15, [r7, #4]
 8000558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <main+0xb4>)
 800055e:	ee17 2a90 	vmov	r2, s15
 8000562:	63da      	str	r2, [r3, #60]	; 0x3c
    //TIM4->CCR3 = (1-(C/P))*100;
    HAL_Delay(10);
 8000564:	200a      	movs	r0, #10
 8000566:	f000 fdc5 	bl	80010f4 <HAL_Delay>
  {
 800056a:	e7c6      	b.n	80004fa <main+0x32>
 800056c:	200000c0 	.word	0x200000c0
 8000570:	20000154 	.word	0x20000154
 8000574:	43960000 	.word	0x43960000
 8000578:	42c80000 	.word	0x42c80000
 800057c:	40000800 	.word	0x40000800

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b098      	sub	sp, #96	; 0x60
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800058a:	2230      	movs	r2, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f008 f9fc 	bl	800898c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 031c 	add.w	r3, r7, #28
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	4b31      	ldr	r3, [pc, #196]	; (800067c <SystemClock_Config+0xfc>)
 80005b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ba:	4a30      	ldr	r2, [pc, #192]	; (800067c <SystemClock_Config+0xfc>)
 80005bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c0:	6413      	str	r3, [r2, #64]	; 0x40
 80005c2:	4b2e      	ldr	r3, [pc, #184]	; (800067c <SystemClock_Config+0xfc>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <SystemClock_Config+0x100>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a2a      	ldr	r2, [pc, #168]	; (8000680 <SystemClock_Config+0x100>)
 80005d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	4b28      	ldr	r3, [pc, #160]	; (8000680 <SystemClock_Config+0x100>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ea:	2301      	movs	r3, #1
 80005ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005fe:	2308      	movs	r3, #8
 8000600:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000602:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000606:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060c:	2307      	movs	r3, #7
 800060e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000614:	4618      	mov	r0, r3
 8000616:	f003 fdc9 	bl	80041ac <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000620:	f000 fa8a 	bl	8000b38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000630:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000634:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	2105      	movs	r1, #5
 8000642:	4618      	mov	r0, r3
 8000644:	f004 f822 	bl	800468c <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800064e:	f000 fa73 	bl	8000b38 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000652:	2301      	movs	r3, #1
 8000654:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000656:	23c0      	movs	r3, #192	; 0xc0
 8000658:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800065a:	2302      	movs	r3, #2
 800065c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	4618      	mov	r0, r3
 8000664:	f004 f9f0 	bl	8004a48 <HAL_RCCEx_PeriphCLKConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800066e:	f000 fa63 	bl	8000b38 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3760      	adds	r7, #96	; 0x60
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800068a:	463b      	mov	r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000696:	4b21      	ldr	r3, [pc, #132]	; (800071c <MX_ADC1_Init+0x98>)
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <MX_ADC1_Init+0x9c>)
 800069a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_ADC1_Init+0x98>)
 800069e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_ADC1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_ADC1_Init+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_ADC1_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_ADC1_Init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_ADC1_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_ADC1_Init+0x98>)
 80006c6:	4a17      	ldr	r2, [pc, #92]	; (8000724 <MX_ADC1_Init+0xa0>)
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_ADC1_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_ADC1_Init+0x98>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_ADC1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_ADC1_Init+0x98>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_ADC1_Init+0x98>)
 80006e6:	f000 fd27 	bl	8001138 <HAL_ADC_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006f0:	f000 fa22 	bl	8000b38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_ADC1_Init+0x98>)
 8000706:	f000 fe2f 	bl	8001368 <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000710:	f000 fa12 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000154 	.word	0x20000154
 8000720:	40012000 	.word	0x40012000
 8000724:	0f000001 	.word	0x0f000001

08000728 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_I2C1_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_I2C1_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_I2C1_Init+0x50>)
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_I2C1_Init+0x58>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_I2C1_Init+0x50>)
 8000746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_I2C1_Init+0x50>)
 8000766:	f002 ff49 	bl	80035fc <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 f9e2 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000100 	.word	0x20000100
 800077c:	40005400 	.word	0x40005400
 8000780:	000186a0 	.word	0x000186a0

08000784 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_I2S3_Init+0x54>)
 800078a:	4a14      	ldr	r2, [pc, #80]	; (80007dc <MX_I2S3_Init+0x58>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_I2S3_Init+0x54>)
 8000790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000794:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_I2S3_Init+0x54>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_I2S3_Init+0x54>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <MX_I2S3_Init+0x54>)
 80007a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_I2S3_Init+0x54>)
 80007ac:	4a0c      	ldr	r2, [pc, #48]	; (80007e0 <MX_I2S3_Init+0x5c>)
 80007ae:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_I2S3_Init+0x54>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_I2S3_Init+0x54>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_I2S3_Init+0x54>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_I2S3_Init+0x54>)
 80007c4:	f003 f852 	bl	800386c <HAL_I2S_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ce:	f000 f9b3 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200001f4 	.word	0x200001f4
 80007dc:	40003c00 	.word	0x40003c00
 80007e0:	00017700 	.word	0x00017700

080007e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_SPI1_Init+0x64>)
 80007ea:	4a18      	ldr	r2, [pc, #96]	; (800084c <MX_SPI1_Init+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_SPI1_Init+0x64>)
 80007f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_SPI1_Init+0x64>)
 8000810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000814:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_SPI1_Init+0x64>)
 8000830:	220a      	movs	r2, #10
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_SPI1_Init+0x64>)
 8000836:	f004 fa45 	bl	8004cc4 <HAL_SPI_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000840:	f000 f97a 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000019c 	.word	0x2000019c
 800084c:	40013000 	.word	0x40013000

08000850 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	; 0x38
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000864:	f107 0320 	add.w	r3, r7, #32
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
 800087c:	615a      	str	r2, [r3, #20]
 800087e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000880:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <MX_TIM4_Init+0xe4>)
 8000882:	4a2d      	ldr	r2, [pc, #180]	; (8000938 <MX_TIM4_Init+0xe8>)
 8000884:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8000886:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <MX_TIM4_Init+0xe4>)
 8000888:	2254      	movs	r2, #84	; 0x54
 800088a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <MX_TIM4_Init+0xe4>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000892:	4b28      	ldr	r3, [pc, #160]	; (8000934 <MX_TIM4_Init+0xe4>)
 8000894:	2263      	movs	r2, #99	; 0x63
 8000896:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000898:	4b26      	ldr	r3, [pc, #152]	; (8000934 <MX_TIM4_Init+0xe4>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800089e:	4b25      	ldr	r3, [pc, #148]	; (8000934 <MX_TIM4_Init+0xe4>)
 80008a0:	2280      	movs	r2, #128	; 0x80
 80008a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008a4:	4823      	ldr	r0, [pc, #140]	; (8000934 <MX_TIM4_Init+0xe4>)
 80008a6:	f004 fa71 	bl	8004d8c <HAL_TIM_Base_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80008b0:	f000 f942 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008be:	4619      	mov	r1, r3
 80008c0:	481c      	ldr	r0, [pc, #112]	; (8000934 <MX_TIM4_Init+0xe4>)
 80008c2:	f004 fbc7 	bl	8005054 <HAL_TIM_ConfigClockSource>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80008cc:	f000 f934 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008d0:	4818      	ldr	r0, [pc, #96]	; (8000934 <MX_TIM4_Init+0xe4>)
 80008d2:	f004 fa86 	bl	8004de2 <HAL_TIM_PWM_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80008dc:	f000 f92c 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	4619      	mov	r1, r3
 80008ee:	4811      	ldr	r0, [pc, #68]	; (8000934 <MX_TIM4_Init+0xe4>)
 80008f0:	f004 ff78 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80008fa:	f000 f91d 	bl	8000b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fe:	2360      	movs	r3, #96	; 0x60
 8000900:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2208      	movs	r2, #8
 8000912:	4619      	mov	r1, r3
 8000914:	4807      	ldr	r0, [pc, #28]	; (8000934 <MX_TIM4_Init+0xe4>)
 8000916:	f004 fad7 	bl	8004ec8 <HAL_TIM_PWM_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000920:	f000 f90a 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000924:	4803      	ldr	r0, [pc, #12]	; (8000934 <MX_TIM4_Init+0xe4>)
 8000926:	f000 fa95 	bl	8000e54 <HAL_TIM_MspPostInit>

}
 800092a:	bf00      	nop
 800092c:	3738      	adds	r7, #56	; 0x38
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200000c0 	.word	0x200000c0
 8000938:	40000800 	.word	0x40000800

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	4b71      	ldr	r3, [pc, #452]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a70      	ldr	r2, [pc, #448]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b6e      	ldr	r3, [pc, #440]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0310 	and.w	r3, r3, #16
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	4b6a      	ldr	r3, [pc, #424]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a69      	ldr	r2, [pc, #420]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b67      	ldr	r3, [pc, #412]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b63      	ldr	r3, [pc, #396]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a62      	ldr	r2, [pc, #392]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b60      	ldr	r3, [pc, #384]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b5c      	ldr	r3, [pc, #368]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a5b      	ldr	r2, [pc, #364]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b59      	ldr	r3, [pc, #356]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b55      	ldr	r3, [pc, #340]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a54      	ldr	r2, [pc, #336]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b52      	ldr	r3, [pc, #328]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b4e      	ldr	r3, [pc, #312]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a4d      	ldr	r2, [pc, #308]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b4b      	ldr	r3, [pc, #300]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2108      	movs	r1, #8
 80009fe:	4848      	ldr	r0, [pc, #288]	; (8000b20 <MX_GPIO_Init+0x1e4>)
 8000a00:	f001 f97c 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2101      	movs	r1, #1
 8000a08:	4846      	ldr	r0, [pc, #280]	; (8000b24 <MX_GPIO_Init+0x1e8>)
 8000a0a:	f001 f977 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f24b 0110 	movw	r1, #45072	; 0xb010
 8000a14:	4844      	ldr	r0, [pc, #272]	; (8000b28 <MX_GPIO_Init+0x1ec>)
 8000a16:	f001 f971 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	483b      	ldr	r0, [pc, #236]	; (8000b20 <MX_GPIO_Init+0x1e4>)
 8000a32:	f000 ffc9 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4835      	ldr	r0, [pc, #212]	; (8000b24 <MX_GPIO_Init+0x1e8>)
 8000a4e:	f000 ffbb 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a52:	2308      	movs	r3, #8
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a62:	2305      	movs	r3, #5
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	482d      	ldr	r0, [pc, #180]	; (8000b24 <MX_GPIO_Init+0x1e8>)
 8000a6e:	f000 ffab 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <MX_GPIO_Init+0x1f0>)
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	482a      	ldr	r0, [pc, #168]	; (8000b30 <MX_GPIO_Init+0x1f4>)
 8000a86:	f000 ff9f 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4825      	ldr	r0, [pc, #148]	; (8000b34 <MX_GPIO_Init+0x1f8>)
 8000a9e:	f000 ff93 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ab4:	2305      	movs	r3, #5
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	481d      	ldr	r0, [pc, #116]	; (8000b34 <MX_GPIO_Init+0x1f8>)
 8000ac0:	f000 ff82 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD6_Pin|Audio_RST_Pin;
 8000ac4:	f24b 0310 	movw	r3, #45072	; 0xb010
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4812      	ldr	r0, [pc, #72]	; (8000b28 <MX_GPIO_Init+0x1ec>)
 8000ade:	f000 ff73 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ae2:	2320      	movs	r3, #32
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	480c      	ldr	r0, [pc, #48]	; (8000b28 <MX_GPIO_Init+0x1ec>)
 8000af6:	f000 ff67 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_GPIO_Init+0x1f0>)
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_GPIO_Init+0x1e4>)
 8000b0e:	f000 ff5b 	bl	80019c8 <HAL_GPIO_Init>

}
 8000b12:	bf00      	nop
 8000b14:	3730      	adds	r7, #48	; 0x30
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40020c00 	.word	0x40020c00
 8000b2c:	10120000 	.word	0x10120000
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40020400 	.word	0x40020400

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000b86:	2005      	movs	r0, #5
 8000b88:	f000 fedc 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <HAL_ADC_MspInit+0x7c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d127      	bne.n	8000c0a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <HAL_ADC_MspInit+0x80>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <HAL_ADC_MspInit+0x80>)
 8000bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <HAL_ADC_MspInit+0x80>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_ADC_MspInit+0x80>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HAL_ADC_MspInit+0x80>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_ADC_MspInit+0x80>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <HAL_ADC_MspInit+0x84>)
 8000c06:	f000 fedf 	bl	80019c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40012000 	.word	0x40012000
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_I2C_MspInit+0x84>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d12c      	bne.n	8000c9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c5e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c64:	2312      	movs	r3, #18
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c70:	2304      	movs	r3, #4
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480c      	ldr	r0, [pc, #48]	; (8000cac <HAL_I2C_MspInit+0x8c>)
 8000c7c:	f000 fea4 	bl	80019c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3728      	adds	r7, #40	; 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020400 	.word	0x40020400

08000cb0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a28      	ldr	r2, [pc, #160]	; (8000d70 <HAL_I2S_MspInit+0xc0>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d14a      	bne.n	8000d68 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <HAL_I2S_MspInit+0xc4>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a26      	ldr	r2, [pc, #152]	; (8000d74 <HAL_I2S_MspInit+0xc4>)
 8000cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <HAL_I2S_MspInit+0xc4>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <HAL_I2S_MspInit+0xc4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a1f      	ldr	r2, [pc, #124]	; (8000d74 <HAL_I2S_MspInit+0xc4>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <HAL_I2S_MspInit+0xc4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <HAL_I2S_MspInit+0xc4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <HAL_I2S_MspInit+0xc4>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <HAL_I2S_MspInit+0xc4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d26:	2310      	movs	r3, #16
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d36:	2306      	movs	r3, #6
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <HAL_I2S_MspInit+0xc8>)
 8000d42:	f000 fe41 	bl	80019c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d46:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d58:	2306      	movs	r3, #6
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <HAL_I2S_MspInit+0xcc>)
 8000d64:	f000 fe30 	bl	80019c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	; 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40003c00 	.word	0x40003c00
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	40020800 	.word	0x40020800

08000d80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <HAL_SPI_MspInit+0x84>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d12b      	bne.n	8000dfa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000dac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000db0:	6453      	str	r3, [r2, #68]	; 0x44
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dda:	23e0      	movs	r3, #224	; 0xe0
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dea:	2305      	movs	r3, #5
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_SPI_MspInit+0x8c>)
 8000df6:	f000 fde7 	bl	80019c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40013000 	.word	0x40013000
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000

08000e10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <HAL_TIM_Base_MspInit+0x3c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d10d      	bne.n	8000e3e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_TIM_Base_MspInit+0x40>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <HAL_TIM_Base_MspInit+0x40>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <HAL_TIM_Base_MspInit+0x40>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40000800 	.word	0x40000800
 8000e50:	40023800 	.word	0x40023800

08000e54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <HAL_TIM_MspPostInit+0x68>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d11e      	bne.n	8000eb4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_TIM_MspPostInit+0x6c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <HAL_TIM_MspPostInit+0x6c>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_TIM_MspPostInit+0x6c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0308 	and.w	r3, r3, #8
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4619      	mov	r1, r3
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_TIM_MspPostInit+0x70>)
 8000eb0:	f000 fd8a 	bl	80019c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3720      	adds	r7, #32
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40000800 	.word	0x40000800
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020c00 	.word	0x40020c00

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <HardFault_Handler+0x4>

08000edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <MemManage_Handler+0x4>

08000ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <UsageFault_Handler+0x4>

08000eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1c:	f000 f8ca 	bl	80010b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <OTG_FS_IRQHandler+0x10>)
 8000f2a:	f001 f985 	bl	8002238 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000060c 	.word	0x2000060c

08000f38 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <_sbrk+0x50>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x16>
		heap_end = &end;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <_sbrk+0x50>)
 8000f4a:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <_sbrk+0x54>)
 8000f4c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <_sbrk+0x50>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <_sbrk+0x50>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	466a      	mov	r2, sp
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d907      	bls.n	8000f72 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f62:	f007 fcd9 	bl	8008918 <__errno>
 8000f66:	4602      	mov	r2, r0
 8000f68:	230c      	movs	r3, #12
 8000f6a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f70:	e006      	b.n	8000f80 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <_sbrk+0x50>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a03      	ldr	r2, [pc, #12]	; (8000f88 <_sbrk+0x50>)
 8000f7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200000ac 	.word	0x200000ac
 8000f8c:	200008d8 	.word	0x200008d8

08000f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <SystemInit+0x28>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <SystemInit+0x28>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SystemInit+0x28>)
 8000fa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000faa:	609a      	str	r2, [r3, #8]
#endif
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fc2:	e003      	b.n	8000fcc <LoopCopyDataInit>

08000fc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fca:	3104      	adds	r1, #4

08000fcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fcc:	480b      	ldr	r0, [pc, #44]	; (8000ffc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fd4:	d3f6      	bcc.n	8000fc4 <CopyDataInit>
  ldr  r2, =_sbss
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fd8:	e002      	b.n	8000fe0 <LoopFillZerobss>

08000fda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fdc:	f842 3b04 	str.w	r3, [r2], #4

08000fe0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fe2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fe4:	d3f9      	bcc.n	8000fda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fe6:	f7ff ffd3 	bl	8000f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fea:	f007 fc9b 	bl	8008924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fee:	f7ff fa6b 	bl	80004c8 <main>
  bx  lr    
 8000ff2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ff4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ff8:	08008b54 	.word	0x08008b54
  ldr  r0, =_sdata
 8000ffc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001000:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001004:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001008:	200008d4 	.word	0x200008d4

0800100c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC_IRQHandler>
	...

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <HAL_Init+0x40>)
 800101a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_Init+0x40>)
 8001026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800102a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <HAL_Init+0x40>)
 8001032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001036:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001038:	2003      	movs	r0, #3
 800103a:	f000 fc83 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	2000      	movs	r0, #0
 8001040:	f000 f808 	bl	8001054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001044:	f7ff fd80 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023c00 	.word	0x40023c00

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x54>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_InitTick+0x58>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	fbb3 f3f1 	udiv	r3, r3, r1
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fc9b 	bl	80019ae <HAL_SYSTICK_Config>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e00e      	b.n	80010a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b0f      	cmp	r3, #15
 8001086:	d80a      	bhi.n	800109e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001088:	2200      	movs	r2, #0
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001090:	f000 fc63 	bl	800195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001094:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <HAL_InitTick+0x5c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000004 	.word	0x20000004

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008
 80010d8:	2000023c 	.word	0x2000023c

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	2000023c 	.word	0x2000023c

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff ffee 	bl	80010dc <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800110c:	d005      	beq.n	800111a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_Delay+0x40>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800111a:	bf00      	nop
 800111c:	f7ff ffde 	bl	80010dc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8f7      	bhi.n	800111c <HAL_Delay+0x28>
  {
  }
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000008 	.word	0x20000008

08001138 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e033      	b.n	80011b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fd1e 	bl	8000b98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	2b00      	cmp	r3, #0
 8001174:	d118      	bne.n	80011a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800117e:	f023 0302 	bic.w	r3, r3, #2
 8001182:	f043 0202 	orr.w	r2, r3, #2
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 fa0e 	bl	80015ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f023 0303 	bic.w	r3, r3, #3
 800119e:	f043 0201 	orr.w	r2, r3, #1
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40
 80011a6:	e001      	b.n	80011ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <HAL_ADC_Start+0x1a>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e0a5      	b.n	8001326 <HAL_ADC_Start+0x166>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d018      	beq.n	8001222 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0201 	orr.w	r2, r2, #1
 80011fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001200:	4b4c      	ldr	r3, [pc, #304]	; (8001334 <HAL_ADC_Start+0x174>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a4c      	ldr	r2, [pc, #304]	; (8001338 <HAL_ADC_Start+0x178>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	0c9a      	lsrs	r2, r3, #18
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001214:	e002      	b.n	800121c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	3b01      	subs	r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f9      	bne.n	8001216 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b01      	cmp	r3, #1
 800122e:	d179      	bne.n	8001324 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001238:	f023 0301 	bic.w	r3, r3, #1
 800123c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800125a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800126a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800126e:	d106      	bne.n	800127e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001274:	f023 0206 	bic.w	r2, r3, #6
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	645a      	str	r2, [r3, #68]	; 0x44
 800127c:	e002      	b.n	8001284 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800128c:	4b2b      	ldr	r3, [pc, #172]	; (800133c <HAL_ADC_Start+0x17c>)
 800128e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001298:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d12a      	bne.n	80012fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a25      	ldr	r2, [pc, #148]	; (8001340 <HAL_ADC_Start+0x180>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d015      	beq.n	80012dc <HAL_ADC_Start+0x11c>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a23      	ldr	r2, [pc, #140]	; (8001344 <HAL_ADC_Start+0x184>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d105      	bne.n	80012c6 <HAL_ADC_Start+0x106>
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_ADC_Start+0x17c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 031f 	and.w	r3, r3, #31
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00a      	beq.n	80012dc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a1f      	ldr	r2, [pc, #124]	; (8001348 <HAL_ADC_Start+0x188>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d129      	bne.n	8001324 <HAL_ADC_Start+0x164>
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <HAL_ADC_Start+0x17c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 031f 	and.w	r3, r3, #31
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d823      	bhi.n	8001324 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d11c      	bne.n	8001324 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	e013      	b.n	8001324 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <HAL_ADC_Start+0x180>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d10e      	bne.n	8001324 <HAL_ADC_Start+0x164>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d107      	bne.n	8001324 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001322:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000000 	.word	0x20000000
 8001338:	431bde83 	.word	0x431bde83
 800133c:	40012300 	.word	0x40012300
 8001340:	40012000 	.word	0x40012000
 8001344:	40012100 	.word	0x40012100
 8001348:	40012200 	.word	0x40012200

0800134c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800137c:	2b01      	cmp	r3, #1
 800137e:	d101      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1c>
 8001380:	2302      	movs	r3, #2
 8001382:	e105      	b.n	8001590 <HAL_ADC_ConfigChannel+0x228>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b09      	cmp	r3, #9
 8001392:	d925      	bls.n	80013e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68d9      	ldr	r1, [r3, #12]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	461a      	mov	r2, r3
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	3b1e      	subs	r3, #30
 80013aa:	2207      	movs	r2, #7
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43da      	mvns	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	400a      	ands	r2, r1
 80013b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68d9      	ldr	r1, [r3, #12]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	4603      	mov	r3, r0
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4403      	add	r3, r0
 80013d2:	3b1e      	subs	r3, #30
 80013d4:	409a      	lsls	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	e022      	b.n	8001426 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6919      	ldr	r1, [r3, #16]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	2207      	movs	r2, #7
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	400a      	ands	r2, r1
 8001402:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6919      	ldr	r1, [r3, #16]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	4603      	mov	r3, r0
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4403      	add	r3, r0
 800141c:	409a      	lsls	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b06      	cmp	r3, #6
 800142c:	d824      	bhi.n	8001478 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	3b05      	subs	r3, #5
 8001440:	221f      	movs	r2, #31
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	400a      	ands	r2, r1
 800144e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	3b05      	subs	r3, #5
 800146a:	fa00 f203 	lsl.w	r2, r0, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	635a      	str	r2, [r3, #52]	; 0x34
 8001476:	e04c      	b.n	8001512 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b0c      	cmp	r3, #12
 800147e:	d824      	bhi.n	80014ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	3b23      	subs	r3, #35	; 0x23
 8001492:	221f      	movs	r2, #31
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43da      	mvns	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	400a      	ands	r2, r1
 80014a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3b23      	subs	r3, #35	; 0x23
 80014bc:	fa00 f203 	lsl.w	r2, r0, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
 80014c8:	e023      	b.n	8001512 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	3b41      	subs	r3, #65	; 0x41
 80014dc:	221f      	movs	r2, #31
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	400a      	ands	r2, r1
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	3b41      	subs	r3, #65	; 0x41
 8001506:	fa00 f203 	lsl.w	r2, r0, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001512:	4b22      	ldr	r3, [pc, #136]	; (800159c <HAL_ADC_ConfigChannel+0x234>)
 8001514:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a21      	ldr	r2, [pc, #132]	; (80015a0 <HAL_ADC_ConfigChannel+0x238>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d109      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x1cc>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b12      	cmp	r3, #18
 8001526:	d105      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <HAL_ADC_ConfigChannel+0x238>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d123      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x21e>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b10      	cmp	r3, #16
 8001544:	d003      	beq.n	800154e <HAL_ADC_ConfigChannel+0x1e6>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b11      	cmp	r3, #17
 800154c:	d11b      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b10      	cmp	r3, #16
 8001560:	d111      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_ADC_ConfigChannel+0x23c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a10      	ldr	r2, [pc, #64]	; (80015a8 <HAL_ADC_ConfigChannel+0x240>)
 8001568:	fba2 2303 	umull	r2, r3, r2, r3
 800156c:	0c9a      	lsrs	r2, r3, #18
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001578:	e002      	b.n	8001580 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3b01      	subs	r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f9      	bne.n	800157a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	40012300 	.word	0x40012300
 80015a0:	40012000 	.word	0x40012000
 80015a4:	20000000 	.word	0x20000000
 80015a8:	431bde83 	.word	0x431bde83

080015ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b4:	4b79      	ldr	r3, [pc, #484]	; (800179c <ADC_Init+0x1f0>)
 80015b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	431a      	orrs	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	021a      	lsls	r2, r3, #8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6899      	ldr	r1, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	4a58      	ldr	r2, [pc, #352]	; (80017a0 <ADC_Init+0x1f4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d022      	beq.n	800168a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001652:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6899      	ldr	r1, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6899      	ldr	r1, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	e00f      	b.n	80016aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0202 	bic.w	r2, r2, #2
 80016b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6899      	ldr	r1, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7e1b      	ldrb	r3, [r3, #24]
 80016c4:	005a      	lsls	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d01b      	beq.n	8001710 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6859      	ldr	r1, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	3b01      	subs	r3, #1
 8001704:	035a      	lsls	r2, r3, #13
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	e007      	b.n	8001720 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800171e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	3b01      	subs	r3, #1
 800173c:	051a      	lsls	r2, r3, #20
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6899      	ldr	r1, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001762:	025a      	lsls	r2, r3, #9
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800177a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6899      	ldr	r1, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	029a      	lsls	r2, r3, #10
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	609a      	str	r2, [r3, #8]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40012300 	.word	0x40012300
 80017a0:	0f000001 	.word	0x0f000001

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4907      	ldr	r1, [pc, #28]	; (8001840 <__NVIC_EnableIRQ+0x38>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001924:	f7ff ff8e 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff29 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff3e 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff8e 	bl	8001898 <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5d 	bl	8001844 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff31 	bl	8001808 <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa2 	bl	8001900 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	e16b      	b.n	8001cbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e4:	2201      	movs	r2, #1
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	f040 815a 	bne.w	8001cb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d00b      	beq.n	8001a22 <HAL_GPIO_Init+0x5a>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d007      	beq.n	8001a22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a16:	2b11      	cmp	r3, #17
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b12      	cmp	r3, #18
 8001a20:	d130      	bne.n	8001a84 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 0201 	and.w	r2, r3, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0xfc>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b12      	cmp	r3, #18
 8001ac2:	d123      	bne.n	8001b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	08da      	lsrs	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	69b9      	ldr	r1, [r7, #24]
 8001b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0203 	and.w	r2, r3, #3
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80b4 	beq.w	8001cb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b5f      	ldr	r3, [pc, #380]	; (8001cd0 <HAL_GPIO_Init+0x308>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	4a5e      	ldr	r2, [pc, #376]	; (8001cd0 <HAL_GPIO_Init+0x308>)
 8001b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5e:	4b5c      	ldr	r3, [pc, #368]	; (8001cd0 <HAL_GPIO_Init+0x308>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6a:	4a5a      	ldr	r2, [pc, #360]	; (8001cd4 <HAL_GPIO_Init+0x30c>)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	220f      	movs	r2, #15
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a51      	ldr	r2, [pc, #324]	; (8001cd8 <HAL_GPIO_Init+0x310>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d02b      	beq.n	8001bee <HAL_GPIO_Init+0x226>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a50      	ldr	r2, [pc, #320]	; (8001cdc <HAL_GPIO_Init+0x314>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d025      	beq.n	8001bea <HAL_GPIO_Init+0x222>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4f      	ldr	r2, [pc, #316]	; (8001ce0 <HAL_GPIO_Init+0x318>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d01f      	beq.n	8001be6 <HAL_GPIO_Init+0x21e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4e      	ldr	r2, [pc, #312]	; (8001ce4 <HAL_GPIO_Init+0x31c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d019      	beq.n	8001be2 <HAL_GPIO_Init+0x21a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4d      	ldr	r2, [pc, #308]	; (8001ce8 <HAL_GPIO_Init+0x320>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_GPIO_Init+0x216>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4c      	ldr	r2, [pc, #304]	; (8001cec <HAL_GPIO_Init+0x324>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00d      	beq.n	8001bda <HAL_GPIO_Init+0x212>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4b      	ldr	r2, [pc, #300]	; (8001cf0 <HAL_GPIO_Init+0x328>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d007      	beq.n	8001bd6 <HAL_GPIO_Init+0x20e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4a      	ldr	r2, [pc, #296]	; (8001cf4 <HAL_GPIO_Init+0x32c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_GPIO_Init+0x20a>
 8001bce:	2307      	movs	r3, #7
 8001bd0:	e00e      	b.n	8001bf0 <HAL_GPIO_Init+0x228>
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	e00c      	b.n	8001bf0 <HAL_GPIO_Init+0x228>
 8001bd6:	2306      	movs	r3, #6
 8001bd8:	e00a      	b.n	8001bf0 <HAL_GPIO_Init+0x228>
 8001bda:	2305      	movs	r3, #5
 8001bdc:	e008      	b.n	8001bf0 <HAL_GPIO_Init+0x228>
 8001bde:	2304      	movs	r3, #4
 8001be0:	e006      	b.n	8001bf0 <HAL_GPIO_Init+0x228>
 8001be2:	2303      	movs	r3, #3
 8001be4:	e004      	b.n	8001bf0 <HAL_GPIO_Init+0x228>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e002      	b.n	8001bf0 <HAL_GPIO_Init+0x228>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <HAL_GPIO_Init+0x228>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	f002 0203 	and.w	r2, r2, #3
 8001bf6:	0092      	lsls	r2, r2, #2
 8001bf8:	4093      	lsls	r3, r2
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c00:	4934      	ldr	r1, [pc, #208]	; (8001cd4 <HAL_GPIO_Init+0x30c>)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	3302      	adds	r3, #2
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c0e:	4b3a      	ldr	r3, [pc, #232]	; (8001cf8 <HAL_GPIO_Init+0x330>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c32:	4a31      	ldr	r2, [pc, #196]	; (8001cf8 <HAL_GPIO_Init+0x330>)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c38:	4b2f      	ldr	r3, [pc, #188]	; (8001cf8 <HAL_GPIO_Init+0x330>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c5c:	4a26      	ldr	r2, [pc, #152]	; (8001cf8 <HAL_GPIO_Init+0x330>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c62:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <HAL_GPIO_Init+0x330>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c86:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <HAL_GPIO_Init+0x330>)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <HAL_GPIO_Init+0x330>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb0:	4a11      	ldr	r2, [pc, #68]	; (8001cf8 <HAL_GPIO_Init+0x330>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2b0f      	cmp	r3, #15
 8001cc0:	f67f ae90 	bls.w	80019e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	3724      	adds	r7, #36	; 0x24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40013800 	.word	0x40013800
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020c00 	.word	0x40020c00
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40021400 	.word	0x40021400
 8001cf0:	40021800 	.word	0x40021800
 8001cf4:	40021c00 	.word	0x40021c00
 8001cf8:	40013c00 	.word	0x40013c00

08001cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d0c:	787b      	ldrb	r3, [r7, #1]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d18:	e003      	b.n	8001d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d1a:	887b      	ldrh	r3, [r7, #2]
 8001d1c:	041a      	lsls	r2, r3, #16
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	619a      	str	r2, [r3, #24]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d30:	b08f      	sub	sp, #60	; 0x3c
 8001d32:	af0a      	add	r7, sp, #40	; 0x28
 8001d34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e054      	b.n	8001dea <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f006 fb32 	bl	80083c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2203      	movs	r2, #3
 8001d64:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 fe1e 	bl	80059c0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	687e      	ldr	r6, [r7, #4]
 8001d8c:	466d      	mov	r5, sp
 8001d8e:	f106 0410 	add.w	r4, r6, #16
 8001d92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001da2:	1d33      	adds	r3, r6, #4
 8001da4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001da6:	6838      	ldr	r0, [r7, #0]
 8001da8:	f003 fd98 	bl	80058dc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2101      	movs	r1, #1
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 fe15 	bl	80059e2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	687e      	ldr	r6, [r7, #4]
 8001dc0:	466d      	mov	r5, sp
 8001dc2:	f106 0410 	add.w	r4, r6, #16
 8001dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dd6:	1d33      	adds	r3, r6, #4
 8001dd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dda:	6838      	ldr	r0, [r7, #0]
 8001ddc:	f003 ff28 	bl	8005c30 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001df2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001df2:	b590      	push	{r4, r7, lr}
 8001df4:	b089      	sub	sp, #36	; 0x24
 8001df6:	af04      	add	r7, sp, #16
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	4608      	mov	r0, r1
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4603      	mov	r3, r0
 8001e02:	70fb      	strb	r3, [r7, #3]
 8001e04:	460b      	mov	r3, r1
 8001e06:	70bb      	strb	r3, [r7, #2]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_HCD_HC_Init+0x28>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e07f      	b.n	8001f1a <HAL_HCD_HC_Init+0x128>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e22:	78fa      	ldrb	r2, [r7, #3]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	333d      	adds	r3, #61	; 0x3d
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e36:	78fa      	ldrb	r2, [r7, #3]
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	3338      	adds	r3, #56	; 0x38
 8001e46:	787a      	ldrb	r2, [r7, #1]
 8001e48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001e4a:	78fa      	ldrb	r2, [r7, #3]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	3340      	adds	r3, #64	; 0x40
 8001e5a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e5c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e5e:	78fa      	ldrb	r2, [r7, #3]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	440b      	add	r3, r1
 8001e6c:	3339      	adds	r3, #57	; 0x39
 8001e6e:	78fa      	ldrb	r2, [r7, #3]
 8001e70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	440b      	add	r3, r1
 8001e80:	333f      	adds	r3, #63	; 0x3f
 8001e82:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	78bb      	ldrb	r3, [r7, #2]
 8001e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e90:	b2d8      	uxtb	r0, r3
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	333a      	adds	r3, #58	; 0x3a
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001ea4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	da0a      	bge.n	8001ec2 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001eac:	78fa      	ldrb	r2, [r7, #3]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	440b      	add	r3, r1
 8001eba:	333b      	adds	r3, #59	; 0x3b
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
 8001ec0:	e009      	b.n	8001ed6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	333b      	adds	r3, #59	; 0x3b
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001ed6:	78fa      	ldrb	r2, [r7, #3]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	333c      	adds	r3, #60	; 0x3c
 8001ee6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001eea:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	787c      	ldrb	r4, [r7, #1]
 8001ef2:	78ba      	ldrb	r2, [r7, #2]
 8001ef4:	78f9      	ldrb	r1, [r7, #3]
 8001ef6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ef8:	9302      	str	r3, [sp, #8]
 8001efa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	4623      	mov	r3, r4
 8001f08:	f004 f814 	bl	8005f34 <USB_HC_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd90      	pop	{r4, r7, pc}

08001f22 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_HCD_HC_Halt+0x1e>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e00f      	b.n	8001f60 <HAL_HCD_HC_Halt+0x3e>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	78fa      	ldrb	r2, [r7, #3]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f004 fa4e 	bl	80063f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	4608      	mov	r0, r1
 8001f72:	4611      	mov	r1, r2
 8001f74:	461a      	mov	r2, r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	70fb      	strb	r3, [r7, #3]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	70bb      	strb	r3, [r7, #2]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	333b      	adds	r3, #59	; 0x3b
 8001f92:	78ba      	ldrb	r2, [r7, #2]
 8001f94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	440b      	add	r3, r1
 8001fa4:	333f      	adds	r3, #63	; 0x3f
 8001fa6:	787a      	ldrb	r2, [r7, #1]
 8001fa8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001faa:	7c3b      	ldrb	r3, [r7, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3342      	adds	r3, #66	; 0x42
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e009      	b.n	8001fda <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fc6:	78fa      	ldrb	r2, [r7, #3]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3342      	adds	r3, #66	; 0x42
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001fda:	787b      	ldrb	r3, [r7, #1]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	f200 80d6 	bhi.w	800218e <HAL_HCD_HC_SubmitRequest+0x226>
 8001fe2:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe8:	08001ff9 	.word	0x08001ff9
 8001fec:	08002179 	.word	0x08002179
 8001ff0:	08002065 	.word	0x08002065
 8001ff4:	080020ef 	.word	0x080020ef
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ff8:	7c3b      	ldrb	r3, [r7, #16]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	f040 80c9 	bne.w	8002192 <HAL_HCD_HC_SubmitRequest+0x22a>
 8002000:	78bb      	ldrb	r3, [r7, #2]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 80c5 	bne.w	8002192 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002008:	8b3b      	ldrh	r3, [r7, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800200e:	78fa      	ldrb	r2, [r7, #3]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	440b      	add	r3, r1
 800201c:	3351      	adds	r3, #81	; 0x51
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	440b      	add	r3, r1
 8002030:	3351      	adds	r3, #81	; 0x51
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10a      	bne.n	800204e <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	440b      	add	r3, r1
 8002046:	3342      	adds	r3, #66	; 0x42
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800204c:	e0a1      	b.n	8002192 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800204e:	78fa      	ldrb	r2, [r7, #3]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	3342      	adds	r3, #66	; 0x42
 800205e:	2202      	movs	r2, #2
 8002060:	701a      	strb	r2, [r3, #0]
      break;
 8002062:	e096      	b.n	8002192 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002064:	78bb      	ldrb	r3, [r7, #2]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d120      	bne.n	80020ac <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	440b      	add	r3, r1
 8002078:	3351      	adds	r3, #81	; 0x51
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10a      	bne.n	8002096 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	440b      	add	r3, r1
 800208e:	3342      	adds	r3, #66	; 0x42
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002094:	e07e      	b.n	8002194 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	3342      	adds	r3, #66	; 0x42
 80020a6:	2202      	movs	r2, #2
 80020a8:	701a      	strb	r2, [r3, #0]
      break;
 80020aa:	e073      	b.n	8002194 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020ac:	78fa      	ldrb	r2, [r7, #3]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	3350      	adds	r3, #80	; 0x50
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10a      	bne.n	80020d8 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	3342      	adds	r3, #66	; 0x42
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
      break;
 80020d6:	e05d      	b.n	8002194 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	440b      	add	r3, r1
 80020e6:	3342      	adds	r3, #66	; 0x42
 80020e8:	2202      	movs	r2, #2
 80020ea:	701a      	strb	r2, [r3, #0]
      break;
 80020ec:	e052      	b.n	8002194 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80020ee:	78bb      	ldrb	r3, [r7, #2]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d120      	bne.n	8002136 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	3351      	adds	r3, #81	; 0x51
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10a      	bne.n	8002120 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800210a:	78fa      	ldrb	r2, [r7, #3]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	440b      	add	r3, r1
 8002118:	3342      	adds	r3, #66	; 0x42
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800211e:	e039      	b.n	8002194 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002120:	78fa      	ldrb	r2, [r7, #3]
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	3342      	adds	r3, #66	; 0x42
 8002130:	2202      	movs	r2, #2
 8002132:	701a      	strb	r2, [r3, #0]
      break;
 8002134:	e02e      	b.n	8002194 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002136:	78fa      	ldrb	r2, [r7, #3]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	3350      	adds	r3, #80	; 0x50
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10a      	bne.n	8002162 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	440b      	add	r3, r1
 800215a:	3342      	adds	r3, #66	; 0x42
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
      break;
 8002160:	e018      	b.n	8002194 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	440b      	add	r3, r1
 8002170:	3342      	adds	r3, #66	; 0x42
 8002172:	2202      	movs	r2, #2
 8002174:	701a      	strb	r2, [r3, #0]
      break;
 8002176:	e00d      	b.n	8002194 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	3342      	adds	r3, #66	; 0x42
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
      break;
 800218c:	e002      	b.n	8002194 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800218e:	bf00      	nop
 8002190:	e000      	b.n	8002194 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8002192:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	440b      	add	r3, r1
 80021a2:	3344      	adds	r3, #68	; 0x44
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	8b39      	ldrh	r1, [r7, #24]
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4403      	add	r3, r0
 80021b8:	3348      	adds	r3, #72	; 0x48
 80021ba:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	335c      	adds	r3, #92	; 0x5c
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	334c      	adds	r3, #76	; 0x4c
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	440b      	add	r3, r1
 80021f2:	3339      	adds	r3, #57	; 0x39
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	335d      	adds	r3, #93	; 0x5d
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	3338      	adds	r3, #56	; 0x38
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	18d1      	adds	r1, r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
 8002228:	f003 ff8e 	bl	8006148 <USB_HC_StartXfer>
 800222c:	4603      	mov	r3, r0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop

08002238 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f003 fcab 	bl	8005baa <USB_GetMode>
 8002254:	4603      	mov	r3, r0
 8002256:	2b01      	cmp	r3, #1
 8002258:	f040 80f1 	bne.w	800243e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f003 fc8f 	bl	8005b84 <USB_ReadInterrupts>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80e7 	beq.w	800243c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f003 fc86 	bl	8005b84 <USB_ReadInterrupts>
 8002278:	4603      	mov	r3, r0
 800227a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002282:	d104      	bne.n	800228e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800228c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f003 fc76 	bl	8005b84 <USB_ReadInterrupts>
 8002298:	4603      	mov	r3, r0
 800229a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022a2:	d104      	bne.n	80022ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f003 fc66 	bl	8005b84 <USB_ReadInterrupts>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c2:	d104      	bne.n	80022ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 fc56 	bl	8005b84 <USB_ReadInterrupts>
 80022d8:	4603      	mov	r3, r0
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d103      	bne.n	80022ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2202      	movs	r2, #2
 80022e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f003 fc48 	bl	8005b84 <USB_ReadInterrupts>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022fe:	d117      	bne.n	8002330 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800230e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002312:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f006 f8d3 	bl	80084c0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2101      	movs	r1, #1
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fd41 	bl	8005da8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800232e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f003 fc25 	bl	8005b84 <USB_ReadInterrupts>
 800233a:	4603      	mov	r3, r0
 800233c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002344:	d102      	bne.n	800234c <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f001 f8c8 	bl	80034dc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f003 fc17 	bl	8005b84 <USB_ReadInterrupts>
 8002356:	4603      	mov	r3, r0
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b08      	cmp	r3, #8
 800235e:	d106      	bne.n	800236e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f006 f891 	bl	8008488 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2208      	movs	r2, #8
 800236c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f003 fc06 	bl	8005b84 <USB_ReadInterrupts>
 8002378:	4603      	mov	r3, r0
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002382:	d138      	bne.n	80023f6 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f004 f821 	bl	80063d0 <USB_HC_ReadInterrupt>
 800238e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	e025      	b.n	80023e2 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	fa22 f303 	lsr.w	r3, r2, r3
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d018      	beq.n	80023dc <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023c0:	d106      	bne.n	80023d0 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	4619      	mov	r1, r3
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f8cf 	bl	800256c <HCD_HC_IN_IRQHandler>
 80023ce:	e005      	b.n	80023dc <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	4619      	mov	r1, r3
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fc5f 	bl	8002c9a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3301      	adds	r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d3d4      	bcc.n	8002396 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 fbc2 	bl	8005b84 <USB_ReadInterrupts>
 8002400:	4603      	mov	r3, r0
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	2b10      	cmp	r3, #16
 8002408:	d101      	bne.n	800240e <HAL_HCD_IRQHandler+0x1d6>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_HCD_IRQHandler+0x1d8>
 800240e:	2300      	movs	r3, #0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d014      	beq.n	800243e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699a      	ldr	r2, [r3, #24]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0210 	bic.w	r2, r2, #16
 8002422:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 ffad 	bl	8003384 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699a      	ldr	r2, [r3, #24]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0210 	orr.w	r2, r2, #16
 8002438:	619a      	str	r2, [r3, #24]
 800243a:	e000      	b.n	800243e <HAL_HCD_IRQHandler+0x206>
      return;
 800243c:	bf00      	nop
    }
  }
}
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_HCD_Start+0x16>
 8002456:	2302      	movs	r3, #2
 8002458:	e013      	b.n	8002482 <HAL_HCD_Start+0x3e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f003 fa99 	bl	800599e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2101      	movs	r1, #1
 8002472:	4618      	mov	r0, r3
 8002474:	f003 fcfc 	bl	8005e70 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_HCD_Stop+0x16>
 800249c:	2302      	movs	r3, #2
 800249e:	e00d      	b.n	80024bc <HAL_HCD_Stop+0x32>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f004 f8db 	bl	8006668 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f003 fca3 	bl	8005e1c <USB_ResetPort>
 80024d6:	4603      	mov	r3, r0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	335c      	adds	r3, #92	; 0x5c
 80024fc:	781b      	ldrb	r3, [r3, #0]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	460b      	mov	r3, r1
 8002514:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002516:	78fa      	ldrb	r2, [r7, #3]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	334c      	adds	r3, #76	; 0x4c
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f003 fce5 	bl	8005f10 <USB_GetCurrentFrame>
 8002546:	4603      	mov	r3, r0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f003 fcc0 	bl	8005ee2 <USB_GetHostSpeed>
 8002562:	4603      	mov	r3, r0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b04      	cmp	r3, #4
 800259a:	d119      	bne.n	80025d0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	461a      	mov	r2, r3
 80025aa:	2304      	movs	r3, #4
 80025ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	0151      	lsls	r1, r2, #5
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	440a      	add	r2, r1
 80025c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	60d3      	str	r3, [r2, #12]
 80025ce:	e095      	b.n	80026fc <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	d109      	bne.n	80025fa <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f2:	461a      	mov	r2, r3
 80025f4:	2320      	movs	r3, #32
 80025f6:	6093      	str	r3, [r2, #8]
 80025f8:	e080      	b.n	80026fc <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b08      	cmp	r3, #8
 800260e:	d134      	bne.n	800267a <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	0151      	lsls	r1, r2, #5
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	440a      	add	r2, r1
 8002626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800262a:	f043 0302 	orr.w	r3, r3, #2
 800262e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	440b      	add	r3, r1
 800263e:	335d      	adds	r3, #93	; 0x5d
 8002640:	2205      	movs	r2, #5
 8002642:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	461a      	mov	r2, r3
 8002652:	2310      	movs	r3, #16
 8002654:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4413      	add	r3, r2
 800265e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002662:	461a      	mov	r2, r3
 8002664:	2308      	movs	r3, #8
 8002666:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f003 febd 	bl	80063f2 <USB_HC_Halt>
 8002678:	e040      	b.n	80026fc <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002690:	d134      	bne.n	80026fc <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	0151      	lsls	r1, r2, #5
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	440a      	add	r2, r1
 80026a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f003 fe98 	bl	80063f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	461a      	mov	r2, r3
 80026d0:	2310      	movs	r3, #16
 80026d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	440b      	add	r3, r1
 80026e2:	335d      	adds	r3, #93	; 0x5d
 80026e4:	2208      	movs	r2, #8
 80026e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	461a      	mov	r2, r3
 80026f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026fa:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800270e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002712:	d122      	bne.n	800275a <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	0151      	lsls	r1, r2, #5
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	440a      	add	r2, r1
 800272a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800272e:	f043 0302 	orr.w	r3, r3, #2
 8002732:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f003 fe57 	bl	80063f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	461a      	mov	r2, r3
 8002752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002756:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002758:	e29b      	b.n	8002c92 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4413      	add	r3, r2
 8002762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	f040 80c1 	bne.w	80028f4 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d01b      	beq.n	80027b2 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	440b      	add	r3, r1
 8002788:	3348      	adds	r3, #72	; 0x48
 800278a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	0159      	lsls	r1, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	440b      	add	r3, r1
 8002794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800279e:	1ad1      	subs	r1, r2, r3
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4403      	add	r3, r0
 80027ae:	334c      	adds	r3, #76	; 0x4c
 80027b0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	335d      	adds	r3, #93	; 0x5d
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	440b      	add	r3, r1
 80027d4:	3358      	adds	r3, #88	; 0x58
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	461a      	mov	r2, r3
 80027e8:	2301      	movs	r3, #1
 80027ea:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	440b      	add	r3, r1
 80027fa:	333f      	adds	r3, #63	; 0x3f
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	440b      	add	r3, r1
 8002810:	333f      	adds	r3, #63	; 0x3f
 8002812:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002814:	2b02      	cmp	r3, #2
 8002816:	d121      	bne.n	800285c <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	0151      	lsls	r1, r2, #5
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	440a      	add	r2, r1
 800282e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002832:	f043 0302 	orr.w	r3, r3, #2
 8002836:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f003 fdd5 	bl	80063f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	461a      	mov	r2, r3
 8002856:	2310      	movs	r3, #16
 8002858:	6093      	str	r3, [r2, #8]
 800285a:	e034      	b.n	80028c6 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	440b      	add	r3, r1
 800286a:	333f      	adds	r3, #63	; 0x3f
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b03      	cmp	r3, #3
 8002870:	d129      	bne.n	80028c6 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	0151      	lsls	r1, r2, #5
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	440a      	add	r2, r1
 8002888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800288c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002890:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	335c      	adds	r3, #92	; 0x5c
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	b2d8      	uxtb	r0, r3
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	440b      	add	r3, r1
 80028b8:	335c      	adds	r3, #92	; 0x5c
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	4601      	mov	r1, r0
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f005 fe0b 	bl	80084dc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	440b      	add	r3, r1
 80028d4:	3350      	adds	r3, #80	; 0x50
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	f083 0301 	eor.w	r3, r3, #1
 80028dc:	b2d8      	uxtb	r0, r3
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	440b      	add	r3, r1
 80028ec:	3350      	adds	r3, #80	; 0x50
 80028ee:	4602      	mov	r2, r0
 80028f0:	701a      	strb	r2, [r3, #0]
}
 80028f2:	e1ce      	b.n	8002c92 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b02      	cmp	r3, #2
 8002908:	f040 80f1 	bne.w	8002aee <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	0151      	lsls	r1, r2, #5
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	440a      	add	r2, r1
 8002922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002926:	f023 0302 	bic.w	r3, r3, #2
 800292a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	440b      	add	r3, r1
 800293a:	335d      	adds	r3, #93	; 0x5d
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d10a      	bne.n	8002958 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	440b      	add	r3, r1
 8002950:	335c      	adds	r3, #92	; 0x5c
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	e0b0      	b.n	8002aba <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	440b      	add	r3, r1
 8002966:	335d      	adds	r3, #93	; 0x5d
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b05      	cmp	r3, #5
 800296c:	d10a      	bne.n	8002984 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	440b      	add	r3, r1
 800297c:	335c      	adds	r3, #92	; 0x5c
 800297e:	2205      	movs	r2, #5
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	e09a      	b.n	8002aba <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	335d      	adds	r3, #93	; 0x5d
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b06      	cmp	r3, #6
 8002998:	d00a      	beq.n	80029b0 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	440b      	add	r3, r1
 80029a8:	335d      	adds	r3, #93	; 0x5d
 80029aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d156      	bne.n	8002a5e <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	440b      	add	r3, r1
 80029be:	3358      	adds	r3, #88	; 0x58
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	1c59      	adds	r1, r3, #1
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4403      	add	r3, r0
 80029d2:	3358      	adds	r3, #88	; 0x58
 80029d4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	440b      	add	r3, r1
 80029e4:	3358      	adds	r3, #88	; 0x58
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d914      	bls.n	8002a16 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	440b      	add	r3, r1
 80029fa:	3358      	adds	r3, #88	; 0x58
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	335c      	adds	r3, #92	; 0x5c
 8002a10:	2204      	movs	r2, #4
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e009      	b.n	8002a2a <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	335c      	adds	r3, #92	; 0x5c
 8002a26:	2202      	movs	r2, #2
 8002a28:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a40:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a48:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a56:	461a      	mov	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	e02d      	b.n	8002aba <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	335d      	adds	r3, #93	; 0x5d
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d122      	bne.n	8002aba <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	440b      	add	r3, r1
 8002a82:	335c      	adds	r3, #92	; 0x5c
 8002a84:	2202      	movs	r2, #2
 8002a86:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a9e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002aa6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2302      	movs	r3, #2
 8002aca:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	b2d8      	uxtb	r0, r3
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	335c      	adds	r3, #92	; 0x5c
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4601      	mov	r1, r0
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f005 fcf8 	bl	80084dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002aec:	e0d1      	b.n	8002c92 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b00:	2b80      	cmp	r3, #128	; 0x80
 8002b02:	d13e      	bne.n	8002b82 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	0151      	lsls	r1, r2, #5
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	440a      	add	r2, r1
 8002b1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b1e:	f043 0302 	orr.w	r3, r3, #2
 8002b22:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	3358      	adds	r3, #88	; 0x58
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	1c59      	adds	r1, r3, #1
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4403      	add	r3, r0
 8002b46:	3358      	adds	r3, #88	; 0x58
 8002b48:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	440b      	add	r3, r1
 8002b58:	335d      	adds	r3, #93	; 0x5d
 8002b5a:	2206      	movs	r2, #6
 8002b5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f003 fc42 	bl	80063f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	6093      	str	r3, [r2, #8]
}
 8002b80:	e087      	b.n	8002c92 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d17c      	bne.n	8002c92 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	333f      	adds	r3, #63	; 0x3f
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d122      	bne.n	8002bf4 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	3358      	adds	r3, #88	; 0x58
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	0151      	lsls	r1, r2, #5
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	440a      	add	r2, r1
 8002bd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bdc:	f043 0302 	orr.w	r3, r3, #2
 8002be0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f003 fc00 	bl	80063f2 <USB_HC_Halt>
 8002bf2:	e045      	b.n	8002c80 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	333f      	adds	r3, #63	; 0x3f
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	333f      	adds	r3, #63	; 0x3f
 8002c1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d12f      	bne.n	8002c80 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3358      	adds	r3, #88	; 0x58
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d121      	bne.n	8002c80 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	440b      	add	r3, r1
 8002c4a:	335d      	adds	r3, #93	; 0x5d
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	0151      	lsls	r1, r2, #5
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	440a      	add	r2, r1
 8002c66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c6a:	f043 0302 	orr.w	r3, r3, #2
 8002c6e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f003 fbb9 	bl	80063f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	2310      	movs	r3, #16
 8002c90:	6093      	str	r3, [r2, #8]
}
 8002c92:	bf00      	nop
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b086      	sub	sp, #24
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d119      	bne.n	8002cfe <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2304      	movs	r3, #4
 8002cda:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	0151      	lsls	r1, r2, #5
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	440a      	add	r2, r1
 8002cf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cf6:	f043 0302 	orr.w	r3, r3, #2
 8002cfa:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002cfc:	e33e      	b.n	800337c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d141      	bne.n	8002d98 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d20:	461a      	mov	r2, r3
 8002d22:	2320      	movs	r3, #32
 8002d24:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	440b      	add	r3, r1
 8002d34:	333d      	adds	r3, #61	; 0x3d
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	f040 831f 	bne.w	800337c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	333d      	adds	r3, #61	; 0x3d
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	440b      	add	r3, r1
 8002d60:	335c      	adds	r3, #92	; 0x5c
 8002d62:	2202      	movs	r2, #2
 8002d64:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	0151      	lsls	r1, r2, #5
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	440a      	add	r2, r1
 8002d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d80:	f043 0302 	orr.w	r3, r3, #2
 8002d84:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f003 fb2e 	bl	80063f2 <USB_HC_Halt>
}
 8002d96:	e2f1      	b.n	800337c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d13f      	bne.n	8002e2e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	440b      	add	r3, r1
 8002dbc:	335d      	adds	r3, #93	; 0x5d
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	333d      	adds	r3, #61	; 0x3d
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	440b      	add	r3, r1
 8002de4:	3358      	adds	r3, #88	; 0x58
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	0151      	lsls	r1, r2, #5
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	440a      	add	r2, r1
 8002e00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 faec 	bl	80063f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e26:	461a      	mov	r2, r3
 8002e28:	2340      	movs	r3, #64	; 0x40
 8002e2a:	6093      	str	r3, [r2, #8]
}
 8002e2c:	e2a6      	b.n	800337c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e44:	d122      	bne.n	8002e8c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	0151      	lsls	r1, r2, #5
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	440a      	add	r2, r1
 8002e5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e60:	f043 0302 	orr.w	r3, r3, #2
 8002e64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f003 fabe 	bl	80063f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	461a      	mov	r2, r3
 8002e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e88:	6093      	str	r3, [r2, #8]
}
 8002e8a:	e277      	b.n	800337c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d135      	bne.n	8002f0e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	3358      	adds	r3, #88	; 0x58
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	0151      	lsls	r1, r2, #5
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	440a      	add	r2, r1
 8002ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 fa86 	bl	80063f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	440b      	add	r3, r1
 8002f06:	335d      	adds	r3, #93	; 0x5d
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
}
 8002f0c:	e236      	b.n	800337c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d12b      	bne.n	8002f7c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f30:	461a      	mov	r2, r3
 8002f32:	2308      	movs	r3, #8
 8002f34:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	0151      	lsls	r1, r2, #5
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	440a      	add	r2, r1
 8002f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 fa46 	bl	80063f2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	440b      	add	r3, r1
 8002f74:	335d      	adds	r3, #93	; 0x5d
 8002f76:	2205      	movs	r2, #5
 8002f78:	701a      	strb	r2, [r3, #0]
}
 8002f7a:	e1ff      	b.n	800337c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d155      	bne.n	800303e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3358      	adds	r3, #88	; 0x58
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	440b      	add	r3, r1
 8002fb4:	335d      	adds	r3, #93	; 0x5d
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	440b      	add	r3, r1
 8002fc8:	333d      	adds	r3, #61	; 0x3d
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d114      	bne.n	8002ffa <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	440b      	add	r3, r1
 8002fde:	333c      	adds	r3, #60	; 0x3c
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	440b      	add	r3, r1
 8002ff4:	333d      	adds	r3, #61	; 0x3d
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4413      	add	r3, r2
 8003002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	0151      	lsls	r1, r2, #5
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	440a      	add	r2, r1
 8003010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f003 f9e4 	bl	80063f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003036:	461a      	mov	r2, r3
 8003038:	2310      	movs	r3, #16
 800303a:	6093      	str	r3, [r2, #8]
}
 800303c:	e19e      	b.n	800337c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003050:	2b80      	cmp	r3, #128	; 0x80
 8003052:	d12b      	bne.n	80030ac <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	0151      	lsls	r1, r2, #5
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	440a      	add	r2, r1
 800306a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800306e:	f043 0302 	orr.w	r3, r3, #2
 8003072:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	4611      	mov	r1, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f003 f9b7 	bl	80063f2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	440b      	add	r3, r1
 8003092:	335d      	adds	r3, #93	; 0x5d
 8003094:	2206      	movs	r2, #6
 8003096:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a4:	461a      	mov	r2, r3
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	6093      	str	r3, [r2, #8]
}
 80030aa:	e167      	b.n	800337c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c2:	d135      	bne.n	8003130 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	0151      	lsls	r1, r2, #5
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	440a      	add	r2, r1
 80030da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030de:	f043 0302 	orr.w	r3, r3, #2
 80030e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	4611      	mov	r1, r2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f003 f97f 	bl	80063f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003100:	461a      	mov	r2, r3
 8003102:	2310      	movs	r3, #16
 8003104:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4413      	add	r3, r2
 800310e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003112:	461a      	mov	r2, r3
 8003114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003118:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	440b      	add	r3, r1
 8003128:	335d      	adds	r3, #93	; 0x5d
 800312a:	2208      	movs	r2, #8
 800312c:	701a      	strb	r2, [r3, #0]
}
 800312e:	e125      	b.n	800337c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b02      	cmp	r3, #2
 8003144:	f040 811a 	bne.w	800337c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	0151      	lsls	r1, r2, #5
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	440a      	add	r2, r1
 800315e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003162:	f023 0302 	bic.w	r3, r3, #2
 8003166:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	440b      	add	r3, r1
 8003176:	335d      	adds	r3, #93	; 0x5d
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d137      	bne.n	80031ee <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	440b      	add	r3, r1
 800318c:	335c      	adds	r3, #92	; 0x5c
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	440b      	add	r3, r1
 80031a0:	333f      	adds	r3, #63	; 0x3f
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d00b      	beq.n	80031c0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	440b      	add	r3, r1
 80031b6:	333f      	adds	r3, #63	; 0x3f
 80031b8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	f040 80c5 	bne.w	800334a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	440b      	add	r3, r1
 80031ce:	3351      	adds	r3, #81	; 0x51
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	f083 0301 	eor.w	r3, r3, #1
 80031d6:	b2d8      	uxtb	r0, r3
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	440b      	add	r3, r1
 80031e6:	3351      	adds	r3, #81	; 0x51
 80031e8:	4602      	mov	r2, r0
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	e0ad      	b.n	800334a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	440b      	add	r3, r1
 80031fc:	335d      	adds	r3, #93	; 0x5d
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d10a      	bne.n	800321a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	440b      	add	r3, r1
 8003212:	335c      	adds	r3, #92	; 0x5c
 8003214:	2202      	movs	r2, #2
 8003216:	701a      	strb	r2, [r3, #0]
 8003218:	e097      	b.n	800334a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	440b      	add	r3, r1
 8003228:	335d      	adds	r3, #93	; 0x5d
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b04      	cmp	r3, #4
 800322e:	d10a      	bne.n	8003246 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	440b      	add	r3, r1
 800323e:	335c      	adds	r3, #92	; 0x5c
 8003240:	2202      	movs	r2, #2
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	e081      	b.n	800334a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	440b      	add	r3, r1
 8003254:	335d      	adds	r3, #93	; 0x5d
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b05      	cmp	r3, #5
 800325a:	d10a      	bne.n	8003272 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	440b      	add	r3, r1
 800326a:	335c      	adds	r3, #92	; 0x5c
 800326c:	2205      	movs	r2, #5
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	e06b      	b.n	800334a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	335d      	adds	r3, #93	; 0x5d
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b06      	cmp	r3, #6
 8003286:	d00a      	beq.n	800329e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	440b      	add	r3, r1
 8003296:	335d      	adds	r3, #93	; 0x5d
 8003298:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800329a:	2b08      	cmp	r3, #8
 800329c:	d155      	bne.n	800334a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	440b      	add	r3, r1
 80032ac:	3358      	adds	r3, #88	; 0x58
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	1c59      	adds	r1, r3, #1
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4403      	add	r3, r0
 80032c0:	3358      	adds	r3, #88	; 0x58
 80032c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	440b      	add	r3, r1
 80032d2:	3358      	adds	r3, #88	; 0x58
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d914      	bls.n	8003304 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	440b      	add	r3, r1
 80032e8:	3358      	adds	r3, #88	; 0x58
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	440b      	add	r3, r1
 80032fc:	335c      	adds	r3, #92	; 0x5c
 80032fe:	2204      	movs	r2, #4
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	e009      	b.n	8003318 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	440b      	add	r3, r1
 8003312:	335c      	adds	r3, #92	; 0x5c
 8003314:	2202      	movs	r2, #2
 8003316:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4413      	add	r3, r2
 8003320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800332e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003336:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4413      	add	r3, r2
 8003340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003344:	461a      	mov	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003356:	461a      	mov	r2, r3
 8003358:	2302      	movs	r3, #2
 800335a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	b2d8      	uxtb	r0, r3
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	440b      	add	r3, r1
 800336e:	335c      	adds	r3, #92	; 0x5c
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	4601      	mov	r1, r0
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f005 f8b0 	bl	80084dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800337c:	bf00      	nop
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	; 0x28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	0c5b      	lsrs	r3, r3, #17
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033b8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d003      	beq.n	80033c8 <HCD_RXQLVL_IRQHandler+0x44>
 80033c0:	2b05      	cmp	r3, #5
 80033c2:	f000 8082 	beq.w	80034ca <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033c6:	e083      	b.n	80034d0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d07f      	beq.n	80034ce <HCD_RXQLVL_IRQHandler+0x14a>
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	440b      	add	r3, r1
 80033dc:	3344      	adds	r3, #68	; 0x44
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d074      	beq.n	80034ce <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6818      	ldr	r0, [r3, #0]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	440b      	add	r3, r1
 80033f6:	3344      	adds	r3, #68	; 0x44
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	b292      	uxth	r2, r2
 80033fe:	4619      	mov	r1, r3
 8003400:	f002 fb97 	bl	8005b32 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	440b      	add	r3, r1
 8003412:	3344      	adds	r3, #68	; 0x44
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	18d1      	adds	r1, r2, r3
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4403      	add	r3, r0
 8003428:	3344      	adds	r3, #68	; 0x44
 800342a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	440b      	add	r3, r1
 800343a:	334c      	adds	r3, #76	; 0x4c
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	18d1      	adds	r1, r2, r3
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	4403      	add	r3, r0
 8003450:	334c      	adds	r3, #76	; 0x4c
 8003452:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	4413      	add	r3, r2
 800345c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HCD_RXQLVL_IRQHandler+0x154>)
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d031      	beq.n	80034ce <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	4413      	add	r3, r2
 8003472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003480:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003488:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	4413      	add	r3, r2
 8003492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003496:	461a      	mov	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	440b      	add	r3, r1
 80034aa:	3350      	adds	r3, #80	; 0x50
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	f083 0301 	eor.w	r3, r3, #1
 80034b2:	b2d8      	uxtb	r0, r3
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	440b      	add	r3, r1
 80034c2:	3350      	adds	r3, #80	; 0x50
 80034c4:	4602      	mov	r2, r0
 80034c6:	701a      	strb	r2, [r3, #0]
      break;
 80034c8:	e001      	b.n	80034ce <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80034ca:	bf00      	nop
 80034cc:	e000      	b.n	80034d0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80034ce:	bf00      	nop
  }
}
 80034d0:	bf00      	nop
 80034d2:	3728      	adds	r7, #40	; 0x28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	1ff80000 	.word	0x1ff80000

080034dc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003508:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b02      	cmp	r3, #2
 8003512:	d113      	bne.n	800353c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b01      	cmp	r3, #1
 800351c:	d10a      	bne.n	8003534 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699a      	ldr	r2, [r3, #24]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800352c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f004 ffb8 	bl	80084a4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f043 0302 	orr.w	r3, r3, #2
 800353a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b08      	cmp	r3, #8
 8003544:	d147      	bne.n	80035d6 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f043 0308 	orr.w	r3, r3, #8
 800354c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b04      	cmp	r3, #4
 8003556:	d129      	bne.n	80035ac <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d113      	bne.n	8003588 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003566:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800356a:	d106      	bne.n	800357a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2102      	movs	r1, #2
 8003572:	4618      	mov	r0, r3
 8003574:	f002 fc18 	bl	8005da8 <USB_InitFSLSPClkSel>
 8003578:	e011      	b.n	800359e <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2101      	movs	r1, #1
 8003580:	4618      	mov	r0, r3
 8003582:	f002 fc11 	bl	8005da8 <USB_InitFSLSPClkSel>
 8003586:	e00a      	b.n	800359e <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d106      	bne.n	800359e <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003596:	461a      	mov	r2, r3
 8003598:	f64e 2360 	movw	r3, #60000	; 0xea60
 800359c:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f004 ffaa 	bl	80084f8 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f004 ff7d 	bl	80084a4 <HAL_HCD_Connect_Callback>
 80035aa:	e014      	b.n	80035d6 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f004 ffb1 	bl	8008514 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80035c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80035c4:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699a      	ldr	r2, [r3, #24]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80035d4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d103      	bne.n	80035e8 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f043 0320 	orr.w	r3, r3, #32
 80035e6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035ee:	461a      	mov	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	6013      	str	r3, [r2, #0]
}
 80035f4:	bf00      	nop
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e11f      	b.n	800384e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fd fafc 	bl	8000c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2224      	movs	r2, #36	; 0x24
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800364e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800365e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003660:	f001 f9de 	bl	8004a20 <HAL_RCC_GetPCLK1Freq>
 8003664:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	4a7b      	ldr	r2, [pc, #492]	; (8003858 <HAL_I2C_Init+0x25c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d807      	bhi.n	8003680 <HAL_I2C_Init+0x84>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4a7a      	ldr	r2, [pc, #488]	; (800385c <HAL_I2C_Init+0x260>)
 8003674:	4293      	cmp	r3, r2
 8003676:	bf94      	ite	ls
 8003678:	2301      	movls	r3, #1
 800367a:	2300      	movhi	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	e006      	b.n	800368e <HAL_I2C_Init+0x92>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4a77      	ldr	r2, [pc, #476]	; (8003860 <HAL_I2C_Init+0x264>)
 8003684:	4293      	cmp	r3, r2
 8003686:	bf94      	ite	ls
 8003688:	2301      	movls	r3, #1
 800368a:	2300      	movhi	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e0db      	b.n	800384e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4a72      	ldr	r2, [pc, #456]	; (8003864 <HAL_I2C_Init+0x268>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	0c9b      	lsrs	r3, r3, #18
 80036a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	4a64      	ldr	r2, [pc, #400]	; (8003858 <HAL_I2C_Init+0x25c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d802      	bhi.n	80036d0 <HAL_I2C_Init+0xd4>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	3301      	adds	r3, #1
 80036ce:	e009      	b.n	80036e4 <HAL_I2C_Init+0xe8>
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036d6:	fb02 f303 	mul.w	r3, r2, r3
 80036da:	4a63      	ldr	r2, [pc, #396]	; (8003868 <HAL_I2C_Init+0x26c>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	099b      	lsrs	r3, r3, #6
 80036e2:	3301      	adds	r3, #1
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4956      	ldr	r1, [pc, #344]	; (8003858 <HAL_I2C_Init+0x25c>)
 8003700:	428b      	cmp	r3, r1
 8003702:	d80d      	bhi.n	8003720 <HAL_I2C_Init+0x124>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1e59      	subs	r1, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003712:	3301      	adds	r3, #1
 8003714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003718:	2b04      	cmp	r3, #4
 800371a:	bf38      	it	cc
 800371c:	2304      	movcc	r3, #4
 800371e:	e04f      	b.n	80037c0 <HAL_I2C_Init+0x1c4>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d111      	bne.n	800374c <HAL_I2C_Init+0x150>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1e58      	subs	r0, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6859      	ldr	r1, [r3, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	440b      	add	r3, r1
 8003736:	fbb0 f3f3 	udiv	r3, r0, r3
 800373a:	3301      	adds	r3, #1
 800373c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	e012      	b.n	8003772 <HAL_I2C_Init+0x176>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1e58      	subs	r0, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	0099      	lsls	r1, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003762:	3301      	adds	r3, #1
 8003764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003768:	2b00      	cmp	r3, #0
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_Init+0x17e>
 8003776:	2301      	movs	r3, #1
 8003778:	e022      	b.n	80037c0 <HAL_I2C_Init+0x1c4>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10e      	bne.n	80037a0 <HAL_I2C_Init+0x1a4>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1e58      	subs	r0, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6859      	ldr	r1, [r3, #4]
 800378a:	460b      	mov	r3, r1
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	440b      	add	r3, r1
 8003790:	fbb0 f3f3 	udiv	r3, r0, r3
 8003794:	3301      	adds	r3, #1
 8003796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800379e:	e00f      	b.n	80037c0 <HAL_I2C_Init+0x1c4>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1e58      	subs	r0, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	0099      	lsls	r1, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b6:	3301      	adds	r3, #1
 80037b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	6809      	ldr	r1, [r1, #0]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6911      	ldr	r1, [r2, #16]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68d2      	ldr	r2, [r2, #12]
 80037fa:	4311      	orrs	r1, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	430b      	orrs	r3, r1
 8003802:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695a      	ldr	r2, [r3, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	000186a0 	.word	0x000186a0
 800385c:	001e847f 	.word	0x001e847f
 8003860:	003d08ff 	.word	0x003d08ff
 8003864:	431bde83 	.word	0x431bde83
 8003868:	10624dd3 	.word	0x10624dd3

0800386c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e128      	b.n	8003ad0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a90      	ldr	r2, [pc, #576]	; (8003ad8 <HAL_I2S_Init+0x26c>)
 8003896:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7fd fa09 	bl	8000cb0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038b4:	f023 030f 	bic.w	r3, r3, #15
 80038b8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2202      	movs	r2, #2
 80038c0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d060      	beq.n	800398c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d102      	bne.n	80038d8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80038d2:	2310      	movs	r3, #16
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	e001      	b.n	80038dc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80038d8:	2320      	movs	r3, #32
 80038da:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d802      	bhi.n	80038ea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80038ea:	2001      	movs	r0, #1
 80038ec:	f001 f98e 	bl	8004c0c <HAL_RCCEx_GetPeriphCLKFreq>
 80038f0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038fa:	d125      	bne.n	8003948 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d010      	beq.n	8003926 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	fbb2 f2f3 	udiv	r2, r2, r3
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	461a      	mov	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	3305      	adds	r3, #5
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	e01f      	b.n	8003966 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	461a      	mov	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003942:	3305      	adds	r3, #5
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	e00e      	b.n	8003966 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	461a      	mov	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003962:	3305      	adds	r3, #5
 8003964:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4a5c      	ldr	r2, [pc, #368]	; (8003adc <HAL_I2S_Init+0x270>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	08db      	lsrs	r3, r3, #3
 8003970:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	085b      	lsrs	r3, r3, #1
 8003982:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	e003      	b.n	8003994 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800398c:	2302      	movs	r3, #2
 800398e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d902      	bls.n	80039a0 <HAL_I2S_Init+0x134>
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	2bff      	cmp	r3, #255	; 0xff
 800399e:	d907      	bls.n	80039b0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a4:	f043 0210 	orr.w	r2, r3, #16
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e08f      	b.n	8003ad0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	ea42 0103 	orr.w	r1, r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039ce:	f023 030f 	bic.w	r3, r3, #15
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6851      	ldr	r1, [r2, #4]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6892      	ldr	r2, [r2, #8]
 80039da:	4311      	orrs	r1, r2
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68d2      	ldr	r2, [r2, #12]
 80039e0:	4311      	orrs	r1, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6992      	ldr	r2, [r2, #24]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039f2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d161      	bne.n	8003ac0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a38      	ldr	r2, [pc, #224]	; (8003ae0 <HAL_I2S_Init+0x274>)
 8003a00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a37      	ldr	r2, [pc, #220]	; (8003ae4 <HAL_I2S_Init+0x278>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d101      	bne.n	8003a10 <HAL_I2S_Init+0x1a4>
 8003a0c:	4b36      	ldr	r3, [pc, #216]	; (8003ae8 <HAL_I2S_Init+0x27c>)
 8003a0e:	e001      	b.n	8003a14 <HAL_I2S_Init+0x1a8>
 8003a10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	4932      	ldr	r1, [pc, #200]	; (8003ae4 <HAL_I2S_Init+0x278>)
 8003a1c:	428a      	cmp	r2, r1
 8003a1e:	d101      	bne.n	8003a24 <HAL_I2S_Init+0x1b8>
 8003a20:	4a31      	ldr	r2, [pc, #196]	; (8003ae8 <HAL_I2S_Init+0x27c>)
 8003a22:	e001      	b.n	8003a28 <HAL_I2S_Init+0x1bc>
 8003a24:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003a28:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a2c:	f023 030f 	bic.w	r3, r3, #15
 8003a30:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2b      	ldr	r2, [pc, #172]	; (8003ae4 <HAL_I2S_Init+0x278>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d101      	bne.n	8003a40 <HAL_I2S_Init+0x1d4>
 8003a3c:	4b2a      	ldr	r3, [pc, #168]	; (8003ae8 <HAL_I2S_Init+0x27c>)
 8003a3e:	e001      	b.n	8003a44 <HAL_I2S_Init+0x1d8>
 8003a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a44:	2202      	movs	r2, #2
 8003a46:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a25      	ldr	r2, [pc, #148]	; (8003ae4 <HAL_I2S_Init+0x278>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d101      	bne.n	8003a56 <HAL_I2S_Init+0x1ea>
 8003a52:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <HAL_I2S_Init+0x27c>)
 8003a54:	e001      	b.n	8003a5a <HAL_I2S_Init+0x1ee>
 8003a56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a66:	d003      	beq.n	8003a70 <HAL_I2S_Init+0x204>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d103      	bne.n	8003a78 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003a70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	e001      	b.n	8003a7c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	b299      	uxth	r1, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003a92:	4303      	orrs	r3, r0
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	430b      	orrs	r3, r1
 8003a98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	897b      	ldrh	r3, [r7, #10]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003aa8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a0d      	ldr	r2, [pc, #52]	; (8003ae4 <HAL_I2S_Init+0x278>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d101      	bne.n	8003ab8 <HAL_I2S_Init+0x24c>
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <HAL_I2S_Init+0x27c>)
 8003ab6:	e001      	b.n	8003abc <HAL_I2S_Init+0x250>
 8003ab8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003abc:	897a      	ldrh	r2, [r7, #10]
 8003abe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3720      	adds	r7, #32
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	08003be3 	.word	0x08003be3
 8003adc:	cccccccd 	.word	0xcccccccd
 8003ae0:	08003cf9 	.word	0x08003cf9
 8003ae4:	40003800 	.word	0x40003800
 8003ae8:	40003400 	.word	0x40003400

08003aec <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	881a      	ldrh	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	1c9a      	adds	r2, r3, #2
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10e      	bne.n	8003b7c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b6c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff ffb8 	bl	8003aec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	b292      	uxth	r2, r2
 8003b98:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	1c9a      	adds	r2, r3, #2
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10e      	bne.n	8003bda <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff ff93 	bl	8003b00 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b086      	sub	sp, #24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d13a      	bne.n	8003c74 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d109      	bne.n	8003c1c <I2S_IRQHandler+0x3a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	d102      	bne.n	8003c1c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff ffb4 	bl	8003b84 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b40      	cmp	r3, #64	; 0x40
 8003c24:	d126      	bne.n	8003c74 <I2S_IRQHandler+0x92>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d11f      	bne.n	8003c74 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c42:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	f043 0202 	orr.w	r2, r3, #2
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ff50 	bl	8003b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d136      	bne.n	8003cee <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d109      	bne.n	8003c9e <I2S_IRQHandler+0xbc>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c94:	2b80      	cmp	r3, #128	; 0x80
 8003c96:	d102      	bne.n	8003c9e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff ff45 	bl	8003b28 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d122      	bne.n	8003cee <I2S_IRQHandler+0x10c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	d11b      	bne.n	8003cee <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cc4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce0:	f043 0204 	orr.w	r2, r3, #4
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff ff13 	bl	8003b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cee:	bf00      	nop
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4aa2      	ldr	r2, [pc, #648]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d101      	bne.n	8003d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d12:	4ba2      	ldr	r3, [pc, #648]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d14:	e001      	b.n	8003d1a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a9b      	ldr	r2, [pc, #620]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d101      	bne.n	8003d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d30:	4b9a      	ldr	r3, [pc, #616]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d32:	e001      	b.n	8003d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d44:	d004      	beq.n	8003d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 8099 	bne.w	8003e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d107      	bne.n	8003d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f925 	bl	8003fb4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d107      	bne.n	8003d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f9c8 	bl	8004114 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d13a      	bne.n	8003e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f003 0320 	and.w	r3, r3, #32
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d035      	beq.n	8003e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a7e      	ldr	r2, [pc, #504]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003da2:	4b7e      	ldr	r3, [pc, #504]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003da4:	e001      	b.n	8003daa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003da6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4979      	ldr	r1, [pc, #484]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003db2:	428b      	cmp	r3, r1
 8003db4:	d101      	bne.n	8003dba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003db6:	4b79      	ldr	r3, [pc, #484]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003db8:	e001      	b.n	8003dbe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003dba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dc2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dd2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	f043 0202 	orr.w	r2, r3, #2
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff fe88 	bl	8003b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	f040 80be 	bne.w	8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80b8 	beq.w	8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e2a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a59      	ldr	r2, [pc, #356]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d101      	bne.n	8003e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e36:	4b59      	ldr	r3, [pc, #356]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e38:	e001      	b.n	8003e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4954      	ldr	r1, [pc, #336]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e46:	428b      	cmp	r3, r1
 8003e48:	d101      	bne.n	8003e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e4a:	4b54      	ldr	r3, [pc, #336]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e4c:	e001      	b.n	8003e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e56:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	f043 0204 	orr.w	r2, r3, #4
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff fe4a 	bl	8003b14 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e80:	e084      	b.n	8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d107      	bne.n	8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f8be 	bl	8004018 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d107      	bne.n	8003eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f8fd 	bl	80040b0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	2b40      	cmp	r3, #64	; 0x40
 8003ebe:	d12f      	bne.n	8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d02a      	beq.n	8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ed8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a2e      	ldr	r2, [pc, #184]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d101      	bne.n	8003ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ee4:	4b2d      	ldr	r3, [pc, #180]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ee6:	e001      	b.n	8003eec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ee8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4929      	ldr	r1, [pc, #164]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ef4:	428b      	cmp	r3, r1
 8003ef6:	d101      	bne.n	8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003ef8:	4b28      	ldr	r3, [pc, #160]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003efa:	e001      	b.n	8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f04:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	f043 0202 	orr.w	r2, r3, #2
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fdfa 	bl	8003b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d131      	bne.n	8003f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d02c      	beq.n	8003f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a17      	ldr	r2, [pc, #92]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d101      	bne.n	8003f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f3e:	4b17      	ldr	r3, [pc, #92]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f40:	e001      	b.n	8003f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4912      	ldr	r1, [pc, #72]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f4e:	428b      	cmp	r3, r1
 8003f50:	d101      	bne.n	8003f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f54:	e001      	b.n	8003f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003f56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f5e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f6e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7c:	f043 0204 	orr.w	r2, r3, #4
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7ff fdc5 	bl	8003b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f8a:	e000      	b.n	8003f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f8c:	bf00      	nop
}
 8003f8e:	bf00      	nop
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40003800 	.word	0x40003800
 8003f9c:	40003400 	.word	0x40003400

08003fa0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	1c99      	adds	r1, r3, #2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6251      	str	r1, [r2, #36]	; 0x24
 8003fc6:	881a      	ldrh	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d113      	bne.n	800400e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ff4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d106      	bne.n	800400e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff ffc9 	bl	8003fa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	1c99      	adds	r1, r3, #2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6251      	str	r1, [r2, #36]	; 0x24
 800402a:	8819      	ldrh	r1, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a1d      	ldr	r2, [pc, #116]	; (80040a8 <I2SEx_TxISR_I2SExt+0x90>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d101      	bne.n	800403a <I2SEx_TxISR_I2SExt+0x22>
 8004036:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <I2SEx_TxISR_I2SExt+0x94>)
 8004038:	e001      	b.n	800403e <I2SEx_TxISR_I2SExt+0x26>
 800403a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800403e:	460a      	mov	r2, r1
 8004040:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d121      	bne.n	800409e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a12      	ldr	r2, [pc, #72]	; (80040a8 <I2SEx_TxISR_I2SExt+0x90>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d101      	bne.n	8004068 <I2SEx_TxISR_I2SExt+0x50>
 8004064:	4b11      	ldr	r3, [pc, #68]	; (80040ac <I2SEx_TxISR_I2SExt+0x94>)
 8004066:	e001      	b.n	800406c <I2SEx_TxISR_I2SExt+0x54>
 8004068:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	490d      	ldr	r1, [pc, #52]	; (80040a8 <I2SEx_TxISR_I2SExt+0x90>)
 8004074:	428b      	cmp	r3, r1
 8004076:	d101      	bne.n	800407c <I2SEx_TxISR_I2SExt+0x64>
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <I2SEx_TxISR_I2SExt+0x94>)
 800407a:	e001      	b.n	8004080 <I2SEx_TxISR_I2SExt+0x68>
 800407c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004080:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004084:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d106      	bne.n	800409e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff ff81 	bl	8003fa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40003800 	.word	0x40003800
 80040ac:	40003400 	.word	0x40003400

080040b0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68d8      	ldr	r0, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	1c99      	adds	r1, r3, #2
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80040c8:	b282      	uxth	r2, r0
 80040ca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d113      	bne.n	800410c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040f2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff ff4a 	bl	8003fa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800410c:	bf00      	nop
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a20      	ldr	r2, [pc, #128]	; (80041a4 <I2SEx_RxISR_I2SExt+0x90>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d101      	bne.n	800412a <I2SEx_RxISR_I2SExt+0x16>
 8004126:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <I2SEx_RxISR_I2SExt+0x94>)
 8004128:	e001      	b.n	800412e <I2SEx_RxISR_I2SExt+0x1a>
 800412a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800412e:	68d8      	ldr	r0, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	1c99      	adds	r1, r3, #2
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	62d1      	str	r1, [r2, #44]	; 0x2c
 800413a:	b282      	uxth	r2, r0
 800413c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d121      	bne.n	800419a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a12      	ldr	r2, [pc, #72]	; (80041a4 <I2SEx_RxISR_I2SExt+0x90>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d101      	bne.n	8004164 <I2SEx_RxISR_I2SExt+0x50>
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <I2SEx_RxISR_I2SExt+0x94>)
 8004162:	e001      	b.n	8004168 <I2SEx_RxISR_I2SExt+0x54>
 8004164:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	490d      	ldr	r1, [pc, #52]	; (80041a4 <I2SEx_RxISR_I2SExt+0x90>)
 8004170:	428b      	cmp	r3, r1
 8004172:	d101      	bne.n	8004178 <I2SEx_RxISR_I2SExt+0x64>
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <I2SEx_RxISR_I2SExt+0x94>)
 8004176:	e001      	b.n	800417c <I2SEx_RxISR_I2SExt+0x68>
 8004178:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800417c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004180:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d106      	bne.n	800419a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff ff03 	bl	8003fa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40003800 	.word	0x40003800
 80041a8:	40003400 	.word	0x40003400

080041ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e25b      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d075      	beq.n	80042b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ca:	4ba3      	ldr	r3, [pc, #652]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d00c      	beq.n	80041f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d6:	4ba0      	ldr	r3, [pc, #640]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d112      	bne.n	8004208 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041e2:	4b9d      	ldr	r3, [pc, #628]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ee:	d10b      	bne.n	8004208 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f0:	4b99      	ldr	r3, [pc, #612]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d05b      	beq.n	80042b4 <HAL_RCC_OscConfig+0x108>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d157      	bne.n	80042b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e236      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004210:	d106      	bne.n	8004220 <HAL_RCC_OscConfig+0x74>
 8004212:	4b91      	ldr	r3, [pc, #580]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a90      	ldr	r2, [pc, #576]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e01d      	b.n	800425c <HAL_RCC_OscConfig+0xb0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004228:	d10c      	bne.n	8004244 <HAL_RCC_OscConfig+0x98>
 800422a:	4b8b      	ldr	r3, [pc, #556]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a8a      	ldr	r2, [pc, #552]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 8004230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b88      	ldr	r3, [pc, #544]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a87      	ldr	r2, [pc, #540]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e00b      	b.n	800425c <HAL_RCC_OscConfig+0xb0>
 8004244:	4b84      	ldr	r3, [pc, #528]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a83      	ldr	r2, [pc, #524]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 800424a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	4b81      	ldr	r3, [pc, #516]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a80      	ldr	r2, [pc, #512]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 8004256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800425a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d013      	beq.n	800428c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004264:	f7fc ff3a 	bl	80010dc <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800426c:	f7fc ff36 	bl	80010dc <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e1fb      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	4b76      	ldr	r3, [pc, #472]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0xc0>
 800428a:	e014      	b.n	80042b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428c:	f7fc ff26 	bl	80010dc <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004294:	f7fc ff22 	bl	80010dc <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	; 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e1e7      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	4b6c      	ldr	r3, [pc, #432]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0xe8>
 80042b2:	e000      	b.n	80042b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d063      	beq.n	800438a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042c2:	4b65      	ldr	r3, [pc, #404]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ce:	4b62      	ldr	r3, [pc, #392]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d11c      	bne.n	8004314 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042da:	4b5f      	ldr	r3, [pc, #380]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d116      	bne.n	8004314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e6:	4b5c      	ldr	r3, [pc, #368]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_RCC_OscConfig+0x152>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d001      	beq.n	80042fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e1bb      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fe:	4b56      	ldr	r3, [pc, #344]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	4952      	ldr	r1, [pc, #328]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004312:	e03a      	b.n	800438a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d020      	beq.n	800435e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800431c:	4b4f      	ldr	r3, [pc, #316]	; (800445c <HAL_RCC_OscConfig+0x2b0>)
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004322:	f7fc fedb 	bl	80010dc <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800432a:	f7fc fed7 	bl	80010dc <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e19c      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433c:	4b46      	ldr	r3, [pc, #280]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f0      	beq.n	800432a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004348:	4b43      	ldr	r3, [pc, #268]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4940      	ldr	r1, [pc, #256]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	4313      	orrs	r3, r2
 800435a:	600b      	str	r3, [r1, #0]
 800435c:	e015      	b.n	800438a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800435e:	4b3f      	ldr	r3, [pc, #252]	; (800445c <HAL_RCC_OscConfig+0x2b0>)
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004364:	f7fc feba 	bl	80010dc <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800436c:	f7fc feb6 	bl	80010dc <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e17b      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437e:	4b36      	ldr	r3, [pc, #216]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d030      	beq.n	80043f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d016      	beq.n	80043cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800439e:	4b30      	ldr	r3, [pc, #192]	; (8004460 <HAL_RCC_OscConfig+0x2b4>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a4:	f7fc fe9a 	bl	80010dc <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ac:	f7fc fe96 	bl	80010dc <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e15b      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043be:	4b26      	ldr	r3, [pc, #152]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCC_OscConfig+0x200>
 80043ca:	e015      	b.n	80043f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043cc:	4b24      	ldr	r3, [pc, #144]	; (8004460 <HAL_RCC_OscConfig+0x2b4>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d2:	f7fc fe83 	bl	80010dc <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043da:	f7fc fe7f 	bl	80010dc <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e144      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ec:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 80043ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1f0      	bne.n	80043da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80a0 	beq.w	8004546 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004406:	2300      	movs	r3, #0
 8004408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440a:	4b13      	ldr	r3, [pc, #76]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10f      	bne.n	8004436 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	4a0e      	ldr	r2, [pc, #56]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 8004420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004424:	6413      	str	r3, [r2, #64]	; 0x40
 8004426:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <HAL_RCC_OscConfig+0x2ac>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004432:	2301      	movs	r3, #1
 8004434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <HAL_RCC_OscConfig+0x2b8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d121      	bne.n	8004486 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004442:	4b08      	ldr	r3, [pc, #32]	; (8004464 <HAL_RCC_OscConfig+0x2b8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a07      	ldr	r2, [pc, #28]	; (8004464 <HAL_RCC_OscConfig+0x2b8>)
 8004448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800444e:	f7fc fe45 	bl	80010dc <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004454:	e011      	b.n	800447a <HAL_RCC_OscConfig+0x2ce>
 8004456:	bf00      	nop
 8004458:	40023800 	.word	0x40023800
 800445c:	42470000 	.word	0x42470000
 8004460:	42470e80 	.word	0x42470e80
 8004464:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004468:	f7fc fe38 	bl	80010dc <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e0fd      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447a:	4b81      	ldr	r3, [pc, #516]	; (8004680 <HAL_RCC_OscConfig+0x4d4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d106      	bne.n	800449c <HAL_RCC_OscConfig+0x2f0>
 800448e:	4b7d      	ldr	r3, [pc, #500]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	4a7c      	ldr	r2, [pc, #496]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	6713      	str	r3, [r2, #112]	; 0x70
 800449a:	e01c      	b.n	80044d6 <HAL_RCC_OscConfig+0x32a>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b05      	cmp	r3, #5
 80044a2:	d10c      	bne.n	80044be <HAL_RCC_OscConfig+0x312>
 80044a4:	4b77      	ldr	r3, [pc, #476]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a8:	4a76      	ldr	r2, [pc, #472]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 80044aa:	f043 0304 	orr.w	r3, r3, #4
 80044ae:	6713      	str	r3, [r2, #112]	; 0x70
 80044b0:	4b74      	ldr	r3, [pc, #464]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 80044b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b4:	4a73      	ldr	r2, [pc, #460]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	6713      	str	r3, [r2, #112]	; 0x70
 80044bc:	e00b      	b.n	80044d6 <HAL_RCC_OscConfig+0x32a>
 80044be:	4b71      	ldr	r3, [pc, #452]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	4a70      	ldr	r2, [pc, #448]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 80044c4:	f023 0301 	bic.w	r3, r3, #1
 80044c8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ca:	4b6e      	ldr	r3, [pc, #440]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	4a6d      	ldr	r2, [pc, #436]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 80044d0:	f023 0304 	bic.w	r3, r3, #4
 80044d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d015      	beq.n	800450a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044de:	f7fc fdfd 	bl	80010dc <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e4:	e00a      	b.n	80044fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e6:	f7fc fdf9 	bl	80010dc <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e0bc      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fc:	4b61      	ldr	r3, [pc, #388]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0ee      	beq.n	80044e6 <HAL_RCC_OscConfig+0x33a>
 8004508:	e014      	b.n	8004534 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450a:	f7fc fde7 	bl	80010dc <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004510:	e00a      	b.n	8004528 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004512:	f7fc fde3 	bl	80010dc <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e0a6      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004528:	4b56      	ldr	r3, [pc, #344]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1ee      	bne.n	8004512 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004534:	7dfb      	ldrb	r3, [r7, #23]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d105      	bne.n	8004546 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800453a:	4b52      	ldr	r3, [pc, #328]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	4a51      	ldr	r2, [pc, #324]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 8004540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004544:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 8092 	beq.w	8004674 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004550:	4b4c      	ldr	r3, [pc, #304]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 030c 	and.w	r3, r3, #12
 8004558:	2b08      	cmp	r3, #8
 800455a:	d05c      	beq.n	8004616 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d141      	bne.n	80045e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004564:	4b48      	ldr	r3, [pc, #288]	; (8004688 <HAL_RCC_OscConfig+0x4dc>)
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456a:	f7fc fdb7 	bl	80010dc <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004572:	f7fc fdb3 	bl	80010dc <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e078      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004584:	4b3f      	ldr	r3, [pc, #252]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f0      	bne.n	8004572 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	019b      	lsls	r3, r3, #6
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a6:	085b      	lsrs	r3, r3, #1
 80045a8:	3b01      	subs	r3, #1
 80045aa:	041b      	lsls	r3, r3, #16
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	061b      	lsls	r3, r3, #24
 80045b4:	4933      	ldr	r1, [pc, #204]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ba:	4b33      	ldr	r3, [pc, #204]	; (8004688 <HAL_RCC_OscConfig+0x4dc>)
 80045bc:	2201      	movs	r2, #1
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fc fd8c 	bl	80010dc <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fc fd88 	bl	80010dc <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e04d      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045da:	4b2a      	ldr	r3, [pc, #168]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCC_OscConfig+0x41c>
 80045e6:	e045      	b.n	8004674 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e8:	4b27      	ldr	r3, [pc, #156]	; (8004688 <HAL_RCC_OscConfig+0x4dc>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ee:	f7fc fd75 	bl	80010dc <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f6:	f7fc fd71 	bl	80010dc <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e036      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004608:	4b1e      	ldr	r3, [pc, #120]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <HAL_RCC_OscConfig+0x44a>
 8004614:	e02e      	b.n	8004674 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e029      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004622:	4b18      	ldr	r3, [pc, #96]	; (8004684 <HAL_RCC_OscConfig+0x4d8>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	429a      	cmp	r2, r3
 8004634:	d11c      	bne.n	8004670 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004640:	429a      	cmp	r2, r3
 8004642:	d115      	bne.n	8004670 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800464a:	4013      	ands	r3, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004650:	4293      	cmp	r3, r2
 8004652:	d10d      	bne.n	8004670 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800465e:	429a      	cmp	r2, r3
 8004660:	d106      	bne.n	8004670 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40007000 	.word	0x40007000
 8004684:	40023800 	.word	0x40023800
 8004688:	42470060 	.word	0x42470060

0800468c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0cc      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046a0:	4b68      	ldr	r3, [pc, #416]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 030f 	and.w	r3, r3, #15
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d90c      	bls.n	80046c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ae:	4b65      	ldr	r3, [pc, #404]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b6:	4b63      	ldr	r3, [pc, #396]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0b8      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d020      	beq.n	8004716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046e0:	4b59      	ldr	r3, [pc, #356]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4a58      	ldr	r2, [pc, #352]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046f8:	4b53      	ldr	r3, [pc, #332]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	4a52      	ldr	r2, [pc, #328]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004704:	4b50      	ldr	r3, [pc, #320]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	494d      	ldr	r1, [pc, #308]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d044      	beq.n	80047ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d107      	bne.n	800473a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472a:	4b47      	ldr	r3, [pc, #284]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d119      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e07f      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d003      	beq.n	800474a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004746:	2b03      	cmp	r3, #3
 8004748:	d107      	bne.n	800475a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474a:	4b3f      	ldr	r3, [pc, #252]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e06f      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475a:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e067      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800476a:	4b37      	ldr	r3, [pc, #220]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f023 0203 	bic.w	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	4934      	ldr	r1, [pc, #208]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	4313      	orrs	r3, r2
 800477a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800477c:	f7fc fcae 	bl	80010dc <HAL_GetTick>
 8004780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004782:	e00a      	b.n	800479a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004784:	f7fc fcaa 	bl	80010dc <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e04f      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479a:	4b2b      	ldr	r3, [pc, #172]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 020c 	and.w	r2, r3, #12
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d1eb      	bne.n	8004784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047ac:	4b25      	ldr	r3, [pc, #148]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d20c      	bcs.n	80047d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b22      	ldr	r3, [pc, #136]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b20      	ldr	r3, [pc, #128]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e032      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047e0:	4b19      	ldr	r3, [pc, #100]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	4916      	ldr	r1, [pc, #88]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047fe:	4b12      	ldr	r3, [pc, #72]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	490e      	ldr	r1, [pc, #56]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004812:	f000 f821 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8004816:	4601      	mov	r1, r0
 8004818:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	4a0a      	ldr	r2, [pc, #40]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 8004824:	5cd3      	ldrb	r3, [r2, r3]
 8004826:	fa21 f303 	lsr.w	r3, r1, r3
 800482a:	4a09      	ldr	r2, [pc, #36]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800482e:	4b09      	ldr	r3, [pc, #36]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7fc fc0e 	bl	8001054 <HAL_InitTick>

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40023c00 	.word	0x40023c00
 8004848:	40023800 	.word	0x40023800
 800484c:	08008b2c 	.word	0x08008b2c
 8004850:	20000000 	.word	0x20000000
 8004854:	20000004 	.word	0x20000004

08004858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	607b      	str	r3, [r7, #4]
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	2300      	movs	r3, #0
 8004868:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800486e:	4b63      	ldr	r3, [pc, #396]	; (80049fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 030c 	and.w	r3, r3, #12
 8004876:	2b04      	cmp	r3, #4
 8004878:	d007      	beq.n	800488a <HAL_RCC_GetSysClockFreq+0x32>
 800487a:	2b08      	cmp	r3, #8
 800487c:	d008      	beq.n	8004890 <HAL_RCC_GetSysClockFreq+0x38>
 800487e:	2b00      	cmp	r3, #0
 8004880:	f040 80b4 	bne.w	80049ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004884:	4b5e      	ldr	r3, [pc, #376]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004886:	60bb      	str	r3, [r7, #8]
       break;
 8004888:	e0b3      	b.n	80049f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800488a:	4b5e      	ldr	r3, [pc, #376]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800488c:	60bb      	str	r3, [r7, #8]
      break;
 800488e:	e0b0      	b.n	80049f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004890:	4b5a      	ldr	r3, [pc, #360]	; (80049fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004898:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800489a:	4b58      	ldr	r3, [pc, #352]	; (80049fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d04a      	beq.n	800493c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048a6:	4b55      	ldr	r3, [pc, #340]	; (80049fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	099b      	lsrs	r3, r3, #6
 80048ac:	f04f 0400 	mov.w	r4, #0
 80048b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	ea03 0501 	and.w	r5, r3, r1
 80048bc:	ea04 0602 	and.w	r6, r4, r2
 80048c0:	4629      	mov	r1, r5
 80048c2:	4632      	mov	r2, r6
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	f04f 0400 	mov.w	r4, #0
 80048cc:	0154      	lsls	r4, r2, #5
 80048ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048d2:	014b      	lsls	r3, r1, #5
 80048d4:	4619      	mov	r1, r3
 80048d6:	4622      	mov	r2, r4
 80048d8:	1b49      	subs	r1, r1, r5
 80048da:	eb62 0206 	sbc.w	r2, r2, r6
 80048de:	f04f 0300 	mov.w	r3, #0
 80048e2:	f04f 0400 	mov.w	r4, #0
 80048e6:	0194      	lsls	r4, r2, #6
 80048e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048ec:	018b      	lsls	r3, r1, #6
 80048ee:	1a5b      	subs	r3, r3, r1
 80048f0:	eb64 0402 	sbc.w	r4, r4, r2
 80048f4:	f04f 0100 	mov.w	r1, #0
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	00e2      	lsls	r2, r4, #3
 80048fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004902:	00d9      	lsls	r1, r3, #3
 8004904:	460b      	mov	r3, r1
 8004906:	4614      	mov	r4, r2
 8004908:	195b      	adds	r3, r3, r5
 800490a:	eb44 0406 	adc.w	r4, r4, r6
 800490e:	f04f 0100 	mov.w	r1, #0
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	0262      	lsls	r2, r4, #9
 8004918:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800491c:	0259      	lsls	r1, r3, #9
 800491e:	460b      	mov	r3, r1
 8004920:	4614      	mov	r4, r2
 8004922:	4618      	mov	r0, r3
 8004924:	4621      	mov	r1, r4
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f04f 0400 	mov.w	r4, #0
 800492c:	461a      	mov	r2, r3
 800492e:	4623      	mov	r3, r4
 8004930:	f7fb fc4a 	bl	80001c8 <__aeabi_uldivmod>
 8004934:	4603      	mov	r3, r0
 8004936:	460c      	mov	r4, r1
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	e049      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800493c:	4b2f      	ldr	r3, [pc, #188]	; (80049fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	099b      	lsrs	r3, r3, #6
 8004942:	f04f 0400 	mov.w	r4, #0
 8004946:	f240 11ff 	movw	r1, #511	; 0x1ff
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	ea03 0501 	and.w	r5, r3, r1
 8004952:	ea04 0602 	and.w	r6, r4, r2
 8004956:	4629      	mov	r1, r5
 8004958:	4632      	mov	r2, r6
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	f04f 0400 	mov.w	r4, #0
 8004962:	0154      	lsls	r4, r2, #5
 8004964:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004968:	014b      	lsls	r3, r1, #5
 800496a:	4619      	mov	r1, r3
 800496c:	4622      	mov	r2, r4
 800496e:	1b49      	subs	r1, r1, r5
 8004970:	eb62 0206 	sbc.w	r2, r2, r6
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	f04f 0400 	mov.w	r4, #0
 800497c:	0194      	lsls	r4, r2, #6
 800497e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004982:	018b      	lsls	r3, r1, #6
 8004984:	1a5b      	subs	r3, r3, r1
 8004986:	eb64 0402 	sbc.w	r4, r4, r2
 800498a:	f04f 0100 	mov.w	r1, #0
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	00e2      	lsls	r2, r4, #3
 8004994:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004998:	00d9      	lsls	r1, r3, #3
 800499a:	460b      	mov	r3, r1
 800499c:	4614      	mov	r4, r2
 800499e:	195b      	adds	r3, r3, r5
 80049a0:	eb44 0406 	adc.w	r4, r4, r6
 80049a4:	f04f 0100 	mov.w	r1, #0
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	02a2      	lsls	r2, r4, #10
 80049ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049b2:	0299      	lsls	r1, r3, #10
 80049b4:	460b      	mov	r3, r1
 80049b6:	4614      	mov	r4, r2
 80049b8:	4618      	mov	r0, r3
 80049ba:	4621      	mov	r1, r4
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f04f 0400 	mov.w	r4, #0
 80049c2:	461a      	mov	r2, r3
 80049c4:	4623      	mov	r3, r4
 80049c6:	f7fb fbff 	bl	80001c8 <__aeabi_uldivmod>
 80049ca:	4603      	mov	r3, r0
 80049cc:	460c      	mov	r4, r1
 80049ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049d0:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	0c1b      	lsrs	r3, r3, #16
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	3301      	adds	r3, #1
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e8:	60bb      	str	r3, [r7, #8]
      break;
 80049ea:	e002      	b.n	80049f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049ec:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80049ee:	60bb      	str	r3, [r7, #8]
      break;
 80049f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049f2:	68bb      	ldr	r3, [r7, #8]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049fc:	40023800 	.word	0x40023800
 8004a00:	00f42400 	.word	0x00f42400
 8004a04:	007a1200 	.word	0x007a1200

08004a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a0c:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	20000000 	.word	0x20000000

08004a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a24:	f7ff fff0 	bl	8004a08 <HAL_RCC_GetHCLKFreq>
 8004a28:	4601      	mov	r1, r0
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	0a9b      	lsrs	r3, r3, #10
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	4a03      	ldr	r2, [pc, #12]	; (8004a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a36:	5cd3      	ldrb	r3, [r2, r3]
 8004a38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40023800 	.word	0x40023800
 8004a44:	08008b3c 	.word	0x08008b3c

08004a48 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d105      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d035      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a70:	4b62      	ldr	r3, [pc, #392]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a76:	f7fc fb31 	bl	80010dc <HAL_GetTick>
 8004a7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a7e:	f7fc fb2d 	bl	80010dc <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e0b0      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a90:	4b5b      	ldr	r3, [pc, #364]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1f0      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	019a      	lsls	r2, r3, #6
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	071b      	lsls	r3, r3, #28
 8004aa8:	4955      	ldr	r1, [pc, #340]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ab0:	4b52      	ldr	r3, [pc, #328]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ab6:	f7fc fb11 	bl	80010dc <HAL_GetTick>
 8004aba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004abe:	f7fc fb0d 	bl	80010dc <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e090      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ad0:	4b4b      	ldr	r3, [pc, #300]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 8083 	beq.w	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	4b44      	ldr	r3, [pc, #272]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	4a43      	ldr	r2, [pc, #268]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af8:	6413      	str	r3, [r2, #64]	; 0x40
 8004afa:	4b41      	ldr	r3, [pc, #260]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b06:	4b3f      	ldr	r3, [pc, #252]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a3e      	ldr	r2, [pc, #248]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b10:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b12:	f7fc fae3 	bl	80010dc <HAL_GetTick>
 8004b16:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b18:	e008      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b1a:	f7fc fadf 	bl	80010dc <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e062      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b2c:	4b35      	ldr	r3, [pc, #212]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b38:	4b31      	ldr	r3, [pc, #196]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b40:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d02f      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d028      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b56:	4b2a      	ldr	r3, [pc, #168]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b5e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b60:	4b29      	ldr	r3, [pc, #164]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b66:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b6c:	4a24      	ldr	r2, [pc, #144]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b72:	4b23      	ldr	r3, [pc, #140]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d114      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b7e:	f7fc faad 	bl	80010dc <HAL_GetTick>
 8004b82:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b84:	e00a      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b86:	f7fc faa9 	bl	80010dc <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e02a      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9c:	4b18      	ldr	r3, [pc, #96]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0ee      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bb4:	d10d      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004bb6:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bca:	490d      	ldr	r1, [pc, #52]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	608b      	str	r3, [r1, #8]
 8004bd0:	e005      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	4a0a      	ldr	r2, [pc, #40]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bdc:	6093      	str	r3, [r2, #8]
 8004bde:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004be0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bea:	4905      	ldr	r1, [pc, #20]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	42470068 	.word	0x42470068
 8004c00:	40023800 	.word	0x40023800
 8004c04:	40007000 	.word	0x40007000
 8004c08:	42470e40 	.word	0x42470e40

08004c0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d13d      	bne.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c2a:	4b22      	ldr	r3, [pc, #136]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c32:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d004      	beq.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d12f      	bne.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c3e:	4b1e      	ldr	r3, [pc, #120]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c40:	617b      	str	r3, [r7, #20]
          break;
 8004c42:	e02f      	b.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c44:	4b1b      	ldr	r3, [pc, #108]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c50:	d108      	bne.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c52:	4b18      	ldr	r3, [pc, #96]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c5a:	4a18      	ldr	r2, [pc, #96]	; (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	e007      	b.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c64:	4b13      	ldr	r3, [pc, #76]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c6c:	4a14      	ldr	r2, [pc, #80]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c72:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c74:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c7a:	099b      	lsrs	r3, r3, #6
 8004c7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	fb02 f303 	mul.w	r3, r2, r3
 8004c86:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c8e:	0f1b      	lsrs	r3, r3, #28
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	617b      	str	r3, [r7, #20]
          break;
 8004c9c:	e002      	b.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]
          break;
 8004ca2:	bf00      	nop
        }
      }
      break;
 8004ca4:	bf00      	nop
    }
  }
  return frequency;
 8004ca6:	697b      	ldr	r3, [r7, #20]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	371c      	adds	r7, #28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	00bb8000 	.word	0x00bb8000
 8004cbc:	007a1200 	.word	0x007a1200
 8004cc0:	00f42400 	.word	0x00f42400

08004cc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e056      	b.n	8004d84 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7fc f845 	bl	8000d80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d0c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	ea42 0103 	orr.w	r1, r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	0c1b      	lsrs	r3, r3, #16
 8004d54:	f003 0104 	and.w	r1, r3, #4
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69da      	ldr	r2, [r3, #28]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e01d      	b.n	8004dda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fc f82c 	bl	8000e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4610      	mov	r0, r2
 8004dcc:	f000 f9fa 	bl	80051c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b082      	sub	sp, #8
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e01d      	b.n	8004e30 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d106      	bne.n	8004e0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f815 	bl	8004e38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4610      	mov	r0, r2
 8004e22:	f000 f9cf 	bl	80051c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	6839      	ldr	r1, [r7, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fc9a 	bl	8005798 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <HAL_TIM_PWM_Start+0x74>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d004      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x2c>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a14      	ldr	r2, [pc, #80]	; (8004ec4 <HAL_TIM_PWM_Start+0x78>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d101      	bne.n	8004e7c <HAL_TIM_PWM_Start+0x30>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <HAL_TIM_PWM_Start+0x32>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d007      	beq.n	8004e92 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b06      	cmp	r3, #6
 8004ea2:	d007      	beq.n	8004eb4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40010400 	.word	0x40010400

08004ec8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e0b4      	b.n	800504c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2202      	movs	r2, #2
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b0c      	cmp	r3, #12
 8004ef6:	f200 809f 	bhi.w	8005038 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f35 	.word	0x08004f35
 8004f04:	08005039 	.word	0x08005039
 8004f08:	08005039 	.word	0x08005039
 8004f0c:	08005039 	.word	0x08005039
 8004f10:	08004f75 	.word	0x08004f75
 8004f14:	08005039 	.word	0x08005039
 8004f18:	08005039 	.word	0x08005039
 8004f1c:	08005039 	.word	0x08005039
 8004f20:	08004fb7 	.word	0x08004fb7
 8004f24:	08005039 	.word	0x08005039
 8004f28:	08005039 	.word	0x08005039
 8004f2c:	08005039 	.word	0x08005039
 8004f30:	08004ff7 	.word	0x08004ff7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 f9e2 	bl	8005304 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0208 	orr.w	r2, r2, #8
 8004f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0204 	bic.w	r2, r2, #4
 8004f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6999      	ldr	r1, [r3, #24]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	619a      	str	r2, [r3, #24]
      break;
 8004f72:	e062      	b.n	800503a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fa32 	bl	80053e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6999      	ldr	r1, [r3, #24]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	021a      	lsls	r2, r3, #8
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	619a      	str	r2, [r3, #24]
      break;
 8004fb4:	e041      	b.n	800503a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fa87 	bl	80054d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0208 	orr.w	r2, r2, #8
 8004fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0204 	bic.w	r2, r2, #4
 8004fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69d9      	ldr	r1, [r3, #28]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	61da      	str	r2, [r3, #28]
      break;
 8004ff4:	e021      	b.n	800503a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fadb 	bl	80055b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69d9      	ldr	r1, [r3, #28]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	021a      	lsls	r2, r3, #8
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	61da      	str	r2, [r3, #28]
      break;
 8005036:	e000      	b.n	800503a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005038:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_TIM_ConfigClockSource+0x18>
 8005068:	2302      	movs	r3, #2
 800506a:	e0a6      	b.n	80051ba <HAL_TIM_ConfigClockSource+0x166>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800508a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005092:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b40      	cmp	r3, #64	; 0x40
 80050a2:	d067      	beq.n	8005174 <HAL_TIM_ConfigClockSource+0x120>
 80050a4:	2b40      	cmp	r3, #64	; 0x40
 80050a6:	d80b      	bhi.n	80050c0 <HAL_TIM_ConfigClockSource+0x6c>
 80050a8:	2b10      	cmp	r3, #16
 80050aa:	d073      	beq.n	8005194 <HAL_TIM_ConfigClockSource+0x140>
 80050ac:	2b10      	cmp	r3, #16
 80050ae:	d802      	bhi.n	80050b6 <HAL_TIM_ConfigClockSource+0x62>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d06f      	beq.n	8005194 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80050b4:	e078      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d06c      	beq.n	8005194 <HAL_TIM_ConfigClockSource+0x140>
 80050ba:	2b30      	cmp	r3, #48	; 0x30
 80050bc:	d06a      	beq.n	8005194 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80050be:	e073      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050c0:	2b70      	cmp	r3, #112	; 0x70
 80050c2:	d00d      	beq.n	80050e0 <HAL_TIM_ConfigClockSource+0x8c>
 80050c4:	2b70      	cmp	r3, #112	; 0x70
 80050c6:	d804      	bhi.n	80050d2 <HAL_TIM_ConfigClockSource+0x7e>
 80050c8:	2b50      	cmp	r3, #80	; 0x50
 80050ca:	d033      	beq.n	8005134 <HAL_TIM_ConfigClockSource+0xe0>
 80050cc:	2b60      	cmp	r3, #96	; 0x60
 80050ce:	d041      	beq.n	8005154 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80050d0:	e06a      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d6:	d066      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0x152>
 80050d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050dc:	d017      	beq.n	800510e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80050de:	e063      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	6899      	ldr	r1, [r3, #8]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f000 fb32 	bl	8005758 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005102:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	609a      	str	r2, [r3, #8]
      break;
 800510c:	e04c      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6899      	ldr	r1, [r3, #8]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f000 fb1b 	bl	8005758 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005130:	609a      	str	r2, [r3, #8]
      break;
 8005132:	e039      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	6859      	ldr	r1, [r3, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	461a      	mov	r2, r3
 8005142:	f000 fa8f 	bl	8005664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2150      	movs	r1, #80	; 0x50
 800514c:	4618      	mov	r0, r3
 800514e:	f000 fae8 	bl	8005722 <TIM_ITRx_SetConfig>
      break;
 8005152:	e029      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	6859      	ldr	r1, [r3, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	461a      	mov	r2, r3
 8005162:	f000 faae 	bl	80056c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2160      	movs	r1, #96	; 0x60
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fad8 	bl	8005722 <TIM_ITRx_SetConfig>
      break;
 8005172:	e019      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	6859      	ldr	r1, [r3, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	461a      	mov	r2, r3
 8005182:	f000 fa6f 	bl	8005664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2140      	movs	r1, #64	; 0x40
 800518c:	4618      	mov	r0, r3
 800518e:	f000 fac8 	bl	8005722 <TIM_ITRx_SetConfig>
      break;
 8005192:	e009      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4619      	mov	r1, r3
 800519e:	4610      	mov	r0, r2
 80051a0:	f000 fabf 	bl	8005722 <TIM_ITRx_SetConfig>
      break;
 80051a4:	e000      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80051a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a40      	ldr	r2, [pc, #256]	; (80052d8 <TIM_Base_SetConfig+0x114>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d013      	beq.n	8005204 <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e2:	d00f      	beq.n	8005204 <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a3d      	ldr	r2, [pc, #244]	; (80052dc <TIM_Base_SetConfig+0x118>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00b      	beq.n	8005204 <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a3c      	ldr	r2, [pc, #240]	; (80052e0 <TIM_Base_SetConfig+0x11c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d007      	beq.n	8005204 <TIM_Base_SetConfig+0x40>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a3b      	ldr	r2, [pc, #236]	; (80052e4 <TIM_Base_SetConfig+0x120>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d003      	beq.n	8005204 <TIM_Base_SetConfig+0x40>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a3a      	ldr	r2, [pc, #232]	; (80052e8 <TIM_Base_SetConfig+0x124>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d108      	bne.n	8005216 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a2f      	ldr	r2, [pc, #188]	; (80052d8 <TIM_Base_SetConfig+0x114>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d02b      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005224:	d027      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2c      	ldr	r2, [pc, #176]	; (80052dc <TIM_Base_SetConfig+0x118>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d023      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a2b      	ldr	r2, [pc, #172]	; (80052e0 <TIM_Base_SetConfig+0x11c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d01f      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a2a      	ldr	r2, [pc, #168]	; (80052e4 <TIM_Base_SetConfig+0x120>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d01b      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a29      	ldr	r2, [pc, #164]	; (80052e8 <TIM_Base_SetConfig+0x124>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d017      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a28      	ldr	r2, [pc, #160]	; (80052ec <TIM_Base_SetConfig+0x128>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d013      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a27      	ldr	r2, [pc, #156]	; (80052f0 <TIM_Base_SetConfig+0x12c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00f      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a26      	ldr	r2, [pc, #152]	; (80052f4 <TIM_Base_SetConfig+0x130>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00b      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a25      	ldr	r2, [pc, #148]	; (80052f8 <TIM_Base_SetConfig+0x134>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d007      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a24      	ldr	r2, [pc, #144]	; (80052fc <TIM_Base_SetConfig+0x138>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d003      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a23      	ldr	r2, [pc, #140]	; (8005300 <TIM_Base_SetConfig+0x13c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d108      	bne.n	8005288 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a0a      	ldr	r2, [pc, #40]	; (80052d8 <TIM_Base_SetConfig+0x114>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_Base_SetConfig+0xf8>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a0c      	ldr	r2, [pc, #48]	; (80052e8 <TIM_Base_SetConfig+0x124>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d103      	bne.n	80052c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	615a      	str	r2, [r3, #20]
}
 80052ca:	bf00      	nop
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	40010000 	.word	0x40010000
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800
 80052e4:	40000c00 	.word	0x40000c00
 80052e8:	40010400 	.word	0x40010400
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40014400 	.word	0x40014400
 80052f4:	40014800 	.word	0x40014800
 80052f8:	40001800 	.word	0x40001800
 80052fc:	40001c00 	.word	0x40001c00
 8005300:	40002000 	.word	0x40002000

08005304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f023 0201 	bic.w	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0303 	bic.w	r3, r3, #3
 800533a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f023 0302 	bic.w	r3, r3, #2
 800534c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a20      	ldr	r2, [pc, #128]	; (80053dc <TIM_OC1_SetConfig+0xd8>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_OC1_SetConfig+0x64>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a1f      	ldr	r2, [pc, #124]	; (80053e0 <TIM_OC1_SetConfig+0xdc>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d10c      	bne.n	8005382 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f023 0308 	bic.w	r3, r3, #8
 800536e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f023 0304 	bic.w	r3, r3, #4
 8005380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a15      	ldr	r2, [pc, #84]	; (80053dc <TIM_OC1_SetConfig+0xd8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d003      	beq.n	8005392 <TIM_OC1_SetConfig+0x8e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a14      	ldr	r2, [pc, #80]	; (80053e0 <TIM_OC1_SetConfig+0xdc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d111      	bne.n	80053b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	621a      	str	r2, [r3, #32]
}
 80053d0:	bf00      	nop
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40010400 	.word	0x40010400

080053e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	f023 0210 	bic.w	r2, r3, #16
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f023 0320 	bic.w	r3, r3, #32
 800542e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a22      	ldr	r2, [pc, #136]	; (80054c8 <TIM_OC2_SetConfig+0xe4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d003      	beq.n	800544c <TIM_OC2_SetConfig+0x68>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a21      	ldr	r2, [pc, #132]	; (80054cc <TIM_OC2_SetConfig+0xe8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d10d      	bne.n	8005468 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005466:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <TIM_OC2_SetConfig+0xe4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d003      	beq.n	8005478 <TIM_OC2_SetConfig+0x94>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a16      	ldr	r2, [pc, #88]	; (80054cc <TIM_OC2_SetConfig+0xe8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d113      	bne.n	80054a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800547e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	621a      	str	r2, [r3, #32]
}
 80054ba:	bf00      	nop
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	40010000 	.word	0x40010000
 80054cc:	40010400 	.word	0x40010400

080054d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0303 	bic.w	r3, r3, #3
 8005506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	021b      	lsls	r3, r3, #8
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a21      	ldr	r2, [pc, #132]	; (80055b0 <TIM_OC3_SetConfig+0xe0>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d003      	beq.n	8005536 <TIM_OC3_SetConfig+0x66>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a20      	ldr	r2, [pc, #128]	; (80055b4 <TIM_OC3_SetConfig+0xe4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d10d      	bne.n	8005552 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800553c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a16      	ldr	r2, [pc, #88]	; (80055b0 <TIM_OC3_SetConfig+0xe0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d003      	beq.n	8005562 <TIM_OC3_SetConfig+0x92>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a15      	ldr	r2, [pc, #84]	; (80055b4 <TIM_OC3_SetConfig+0xe4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d113      	bne.n	800558a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	621a      	str	r2, [r3, #32]
}
 80055a4:	bf00      	nop
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40010400 	.word	0x40010400

080055b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	021b      	lsls	r3, r3, #8
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	031b      	lsls	r3, r3, #12
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a12      	ldr	r2, [pc, #72]	; (800565c <TIM_OC4_SetConfig+0xa4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <TIM_OC4_SetConfig+0x68>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a11      	ldr	r2, [pc, #68]	; (8005660 <TIM_OC4_SetConfig+0xa8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d109      	bne.n	8005634 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005626:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	019b      	lsls	r3, r3, #6
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	621a      	str	r2, [r3, #32]
}
 800564e:	bf00      	nop
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	40010000 	.word	0x40010000
 8005660:	40010400 	.word	0x40010400

08005664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f023 0201 	bic.w	r2, r3, #1
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800568e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f023 030a 	bic.w	r3, r3, #10
 80056a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b087      	sub	sp, #28
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f023 0210 	bic.w	r2, r3, #16
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	031b      	lsls	r3, r3, #12
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	621a      	str	r2, [r3, #32]
}
 8005716:	bf00      	nop
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005722:	b480      	push	{r7}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	f043 0307 	orr.w	r3, r3, #7
 8005744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	609a      	str	r2, [r3, #8]
}
 800574c:	bf00      	nop
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	021a      	lsls	r2, r3, #8
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	431a      	orrs	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4313      	orrs	r3, r2
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	609a      	str	r2, [r3, #8]
}
 800578c:	bf00      	nop
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	2201      	movs	r2, #1
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1a      	ldr	r2, [r3, #32]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	43db      	mvns	r3, r3
 80057ba:	401a      	ands	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1a      	ldr	r2, [r3, #32]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f003 031f 	and.w	r3, r3, #31
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	fa01 f303 	lsl.w	r3, r1, r3
 80057d0:	431a      	orrs	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	621a      	str	r2, [r3, #32]
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e05a      	b.n	80058b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005822:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a21      	ldr	r2, [pc, #132]	; (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d022      	beq.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005848:	d01d      	beq.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1d      	ldr	r2, [pc, #116]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d018      	beq.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d013      	beq.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a1a      	ldr	r2, [pc, #104]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00e      	beq.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a18      	ldr	r2, [pc, #96]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d009      	beq.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a17      	ldr	r2, [pc, #92]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d004      	beq.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a15      	ldr	r2, [pc, #84]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d10c      	bne.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800588c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	4313      	orrs	r3, r2
 8005896:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	40010000 	.word	0x40010000
 80058c4:	40000400 	.word	0x40000400
 80058c8:	40000800 	.word	0x40000800
 80058cc:	40000c00 	.word	0x40000c00
 80058d0:	40010400 	.word	0x40010400
 80058d4:	40014000 	.word	0x40014000
 80058d8:	40001800 	.word	0x40001800

080058dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058dc:	b084      	sub	sp, #16
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	f107 001c 	add.w	r0, r7, #28
 80058ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d122      	bne.n	800593a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800591c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591e:	2b01      	cmp	r3, #1
 8005920:	d105      	bne.n	800592e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f94a 	bl	8005bc8 <USB_CoreReset>
 8005934:	4603      	mov	r3, r0
 8005936:	73fb      	strb	r3, [r7, #15]
 8005938:	e01a      	b.n	8005970 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f93e 	bl	8005bc8 <USB_CoreReset>
 800594c:	4603      	mov	r3, r0
 800594e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d106      	bne.n	8005964 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	639a      	str	r2, [r3, #56]	; 0x38
 8005962:	e005      	b.n	8005970 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	2b01      	cmp	r3, #1
 8005974:	d10b      	bne.n	800598e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f043 0206 	orr.w	r2, r3, #6
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f043 0220 	orr.w	r2, r3, #32
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800598e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800599a:	b004      	add	sp, #16
 800599c:	4770      	bx	lr

0800599e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f043 0201 	orr.w	r2, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f023 0201 	bic.w	r2, r3, #1
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b082      	sub	sp, #8
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	460b      	mov	r3, r1
 80059ec:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d106      	bne.n	8005a0e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	60da      	str	r2, [r3, #12]
 8005a0c:	e00b      	b.n	8005a26 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d106      	bne.n	8005a22 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	60da      	str	r2, [r3, #12]
 8005a20:	e001      	b.n	8005a26 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e003      	b.n	8005a2e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005a26:	2032      	movs	r0, #50	; 0x32
 8005a28:	f7fb fb64 	bl	80010f4 <HAL_Delay>

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	019b      	lsls	r3, r3, #6
 8005a4a:	f043 0220 	orr.w	r2, r3, #32
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3301      	adds	r3, #1
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4a09      	ldr	r2, [pc, #36]	; (8005a80 <USB_FlushTxFifo+0x48>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d901      	bls.n	8005a64 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e006      	b.n	8005a72 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d0f0      	beq.n	8005a52 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	00030d40 	.word	0x00030d40

08005a84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2210      	movs	r2, #16
 8005a94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4a09      	ldr	r2, [pc, #36]	; (8005ac4 <USB_FlushRxFifo+0x40>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d901      	bls.n	8005aa8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e006      	b.n	8005ab6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	f003 0310 	and.w	r3, r3, #16
 8005ab0:	2b10      	cmp	r3, #16
 8005ab2:	d0f0      	beq.n	8005a96 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	00030d40 	.word	0x00030d40

08005ac8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b089      	sub	sp, #36	; 0x24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	71fb      	strb	r3, [r7, #7]
 8005ada:	4613      	mov	r3, r2
 8005adc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005ae6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d11a      	bne.n	8005b24 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005aee:	88bb      	ldrh	r3, [r7, #4]
 8005af0:	3303      	adds	r3, #3
 8005af2:	089b      	lsrs	r3, r3, #2
 8005af4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005af6:	2300      	movs	r3, #0
 8005af8:	61bb      	str	r3, [r7, #24]
 8005afa:	e00f      	b.n	8005b1c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005afc:	79fb      	ldrb	r3, [r7, #7]
 8005afe:	031a      	lsls	r2, r3, #12
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b08:	461a      	mov	r2, r3
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	3304      	adds	r3, #4
 8005b14:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	61bb      	str	r3, [r7, #24]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d3eb      	bcc.n	8005afc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3724      	adds	r7, #36	; 0x24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b089      	sub	sp, #36	; 0x24
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005b48:	88fb      	ldrh	r3, [r7, #6]
 8005b4a:	3303      	adds	r3, #3
 8005b4c:	089b      	lsrs	r3, r3, #2
 8005b4e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005b50:	2300      	movs	r3, #0
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	e00b      	b.n	8005b6e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	3304      	adds	r3, #4
 8005b66:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	61bb      	str	r3, [r7, #24]
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d3ef      	bcc.n	8005b56 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005b76:	69fb      	ldr	r3, [r7, #28]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3724      	adds	r7, #36	; 0x24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
	...

08005bc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <USB_CoreReset+0x64>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d901      	bls.n	8005be6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e01b      	b.n	8005c1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	daf2      	bge.n	8005bd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f043 0201 	orr.w	r2, r3, #1
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3301      	adds	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4a09      	ldr	r2, [pc, #36]	; (8005c2c <USB_CoreReset+0x64>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d901      	bls.n	8005c10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e006      	b.n	8005c1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d0f0      	beq.n	8005bfe <USB_CoreReset+0x36>

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	00030d40 	.word	0x00030d40

08005c30 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c30:	b084      	sub	sp, #16
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	f107 001c 	add.w	r0, r7, #28
 8005c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	2300      	movs	r3, #0
 8005c50:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d018      	beq.n	8005cb4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d10a      	bne.n	8005c9e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c96:	f043 0304 	orr.w	r3, r3, #4
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	e014      	b.n	8005cc8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cac:	f023 0304 	bic.w	r3, r3, #4
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	e009      	b.n	8005cc8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cc2:	f023 0304 	bic.w	r3, r3, #4
 8005cc6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005cc8:	2110      	movs	r1, #16
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff feb4 	bl	8005a38 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff fed7 	bl	8005a84 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	e015      	b.n	8005d08 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce8:	461a      	mov	r2, r3
 8005cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3301      	adds	r3, #1
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d3e5      	bcc.n	8005cdc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005d10:	2101      	movs	r1, #1
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f8ac 	bl	8005e70 <USB_DriveVbus>

  HAL_Delay(200U);
 8005d18:	20c8      	movs	r0, #200	; 0xc8
 8005d1a:	f7fb f9eb 	bl	80010f4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d2a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00b      	beq.n	8005d50 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d3e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a14      	ldr	r2, [pc, #80]	; (8005d94 <USB_HostInit+0x164>)
 8005d44:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a13      	ldr	r2, [pc, #76]	; (8005d98 <USB_HostInit+0x168>)
 8005d4a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d4e:	e009      	b.n	8005d64 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2280      	movs	r2, #128	; 0x80
 8005d54:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a10      	ldr	r2, [pc, #64]	; (8005d9c <USB_HostInit+0x16c>)
 8005d5a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a10      	ldr	r2, [pc, #64]	; (8005da0 <USB_HostInit+0x170>)
 8005d60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d105      	bne.n	8005d76 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	f043 0210 	orr.w	r2, r3, #16
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699a      	ldr	r2, [r3, #24]
 8005d7a:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <USB_HostInit+0x174>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d8e:	b004      	add	sp, #16
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	01000200 	.word	0x01000200
 8005d98:	00e00300 	.word	0x00e00300
 8005d9c:	00600080 	.word	0x00600080
 8005da0:	004000e0 	.word	0x004000e0
 8005da4:	a3200008 	.word	0xa3200008

08005da8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005dc6:	f023 0303 	bic.w	r3, r3, #3
 8005dca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	68f9      	ldr	r1, [r7, #12]
 8005ddc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005de0:	4313      	orrs	r3, r2
 8005de2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d107      	bne.n	8005dfa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005df0:	461a      	mov	r2, r3
 8005df2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005df6:	6053      	str	r3, [r2, #4]
 8005df8:	e009      	b.n	8005e0e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d106      	bne.n	8005e0e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e06:	461a      	mov	r2, r3
 8005e08:	f241 7370 	movw	r3, #6000	; 0x1770
 8005e0c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e3c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e4a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005e4c:	2064      	movs	r0, #100	; 0x64
 8005e4e:	f7fb f951 	bl	80010f4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e5e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005e60:	200a      	movs	r0, #10
 8005e62:	f7fb f947 	bl	80010f4 <HAL_Delay>

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e94:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d109      	bne.n	8005eb4 <USB_DriveVbus+0x44>
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d106      	bne.n	8005eb4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005eae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005eb2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ebe:	d109      	bne.n	8005ed4 <USB_DriveVbus+0x64>
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ece:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ed2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b085      	sub	sp, #20
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	0c5b      	lsrs	r3, r3, #17
 8005f00:	f003 0303 	and.w	r3, r3, #3
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	b29b      	uxth	r3, r3
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
	...

08005f34 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	4611      	mov	r1, r2
 8005f40:	461a      	mov	r2, r3
 8005f42:	4603      	mov	r3, r0
 8005f44:	70fb      	strb	r3, [r7, #3]
 8005f46:	460b      	mov	r3, r1
 8005f48:	70bb      	strb	r3, [r7, #2]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f62:	461a      	mov	r2, r3
 8005f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f68:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005f6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d87e      	bhi.n	8006070 <USB_HC_Init+0x13c>
 8005f72:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <USB_HC_Init+0x44>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005f89 	.word	0x08005f89
 8005f7c:	08006033 	.word	0x08006033
 8005f80:	08005f89 	.word	0x08005f89
 8005f84:	08005ff5 	.word	0x08005ff5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f94:	461a      	mov	r2, r3
 8005f96:	f240 439d 	movw	r3, #1181	; 0x49d
 8005f9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	da10      	bge.n	8005fc6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	78fa      	ldrb	r2, [r7, #3]
 8005fb4:	0151      	lsls	r1, r2, #5
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	440a      	add	r2, r1
 8005fba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005fc4:	e057      	b.n	8006076 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d051      	beq.n	8006076 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005fd2:	78fb      	ldrb	r3, [r7, #3]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	78fa      	ldrb	r2, [r7, #3]
 8005fe2:	0151      	lsls	r1, r2, #5
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	440a      	add	r2, r1
 8005fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ff0:	60d3      	str	r3, [r2, #12]
      break;
 8005ff2:	e040      	b.n	8006076 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ff4:	78fb      	ldrb	r3, [r7, #3]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006000:	461a      	mov	r2, r3
 8006002:	f240 639d 	movw	r3, #1693	; 0x69d
 8006006:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006008:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800600c:	2b00      	cmp	r3, #0
 800600e:	da34      	bge.n	800607a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4413      	add	r3, r2
 8006018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	78fa      	ldrb	r2, [r7, #3]
 8006020:	0151      	lsls	r1, r2, #5
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	440a      	add	r2, r1
 8006026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800602e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006030:	e023      	b.n	800607a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006032:	78fb      	ldrb	r3, [r7, #3]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	4413      	add	r3, r2
 800603a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603e:	461a      	mov	r2, r3
 8006040:	f240 2325 	movw	r3, #549	; 0x225
 8006044:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006046:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800604a:	2b00      	cmp	r3, #0
 800604c:	da17      	bge.n	800607e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	4413      	add	r3, r2
 8006056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	78fa      	ldrb	r2, [r7, #3]
 800605e:	0151      	lsls	r1, r2, #5
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	440a      	add	r2, r1
 8006064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006068:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800606c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800606e:	e006      	b.n	800607e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	75fb      	strb	r3, [r7, #23]
      break;
 8006074:	e004      	b.n	8006080 <USB_HC_Init+0x14c>
      break;
 8006076:	bf00      	nop
 8006078:	e002      	b.n	8006080 <USB_HC_Init+0x14c>
      break;
 800607a:	bf00      	nop
 800607c:	e000      	b.n	8006080 <USB_HC_Init+0x14c>
      break;
 800607e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006086:	699a      	ldr	r2, [r3, #24]
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	f003 030f 	and.w	r3, r3, #15
 800608e:	2101      	movs	r1, #1
 8006090:	fa01 f303 	lsl.w	r3, r1, r3
 8006094:	68b9      	ldr	r1, [r7, #8]
 8006096:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800609a:	4313      	orrs	r3, r2
 800609c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80060aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	da03      	bge.n	80060ba <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80060b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060b6:	613b      	str	r3, [r7, #16]
 80060b8:	e001      	b.n	80060be <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80060be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d103      	bne.n	80060ce <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80060c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	e001      	b.n	80060d2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060d2:	787b      	ldrb	r3, [r7, #1]
 80060d4:	059b      	lsls	r3, r3, #22
 80060d6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060da:	78bb      	ldrb	r3, [r7, #2]
 80060dc:	02db      	lsls	r3, r3, #11
 80060de:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060e2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80060e8:	049b      	lsls	r3, r3, #18
 80060ea:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060ee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80060f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060f6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	0159      	lsls	r1, r3, #5
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	440b      	add	r3, r1
 8006104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006108:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800610e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006110:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006114:	2b03      	cmp	r3, #3
 8006116:	d10f      	bne.n	8006138 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4413      	add	r3, r2
 8006120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	78fa      	ldrb	r2, [r7, #3]
 8006128:	0151      	lsls	r1, r2, #5
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	440a      	add	r2, r1
 800612e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006132:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006136:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006138:	7dfb      	ldrb	r3, [r7, #23]
}
 800613a:	4618      	mov	r0, r3
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop

08006148 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08c      	sub	sp, #48	; 0x30
 800614c:	af02      	add	r7, sp, #8
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	4613      	mov	r3, r2
 8006154:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	785b      	ldrb	r3, [r3, #1]
 800615e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006164:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800616e:	2b00      	cmp	r3, #0
 8006170:	d028      	beq.n	80061c4 <USB_HC_StartXfer+0x7c>
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	791b      	ldrb	r3, [r3, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d124      	bne.n	80061c4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10b      	bne.n	8006198 <USB_HC_StartXfer+0x50>
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	795b      	ldrb	r3, [r3, #5]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d107      	bne.n	8006198 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	785b      	ldrb	r3, [r3, #1]
 800618c:	4619      	mov	r1, r3
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 fa2e 	bl	80065f0 <USB_DoPing>
      return HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	e112      	b.n	80063be <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8006198:	79fb      	ldrb	r3, [r7, #7]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d112      	bne.n	80061c4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	69fa      	ldr	r2, [r7, #28]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	6a3a      	ldr	r2, [r7, #32]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061b8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80061bc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2200      	movs	r2, #0
 80061c2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d018      	beq.n	80061fe <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	8912      	ldrh	r2, [r2, #8]
 80061d4:	4413      	add	r3, r2
 80061d6:	3b01      	subs	r3, #1
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	8912      	ldrh	r2, [r2, #8]
 80061dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80061e0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80061e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061e4:	8b7b      	ldrh	r3, [r7, #26]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d90b      	bls.n	8006202 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80061ea:	8b7b      	ldrh	r3, [r7, #26]
 80061ec:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80061ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	8912      	ldrh	r2, [r2, #8]
 80061f4:	fb02 f203 	mul.w	r2, r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	611a      	str	r2, [r3, #16]
 80061fc:	e001      	b.n	8006202 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80061fe:	2301      	movs	r3, #1
 8006200:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	78db      	ldrb	r3, [r3, #3]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d006      	beq.n	8006218 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800620a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	8912      	ldrh	r2, [r2, #8]
 8006210:	fb02 f203 	mul.w	r2, r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006220:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006222:	04d9      	lsls	r1, r3, #19
 8006224:	4b68      	ldr	r3, [pc, #416]	; (80063c8 <USB_HC_StartXfer+0x280>)
 8006226:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006228:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	7a9b      	ldrb	r3, [r3, #10]
 800622e:	075b      	lsls	r3, r3, #29
 8006230:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006234:	69f9      	ldr	r1, [r7, #28]
 8006236:	0148      	lsls	r0, r1, #5
 8006238:	6a39      	ldr	r1, [r7, #32]
 800623a:	4401      	add	r1, r0
 800623c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006240:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006242:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d009      	beq.n	800625e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	68d9      	ldr	r1, [r3, #12]
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	4413      	add	r3, r2
 8006256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625a:	460a      	mov	r2, r1
 800625c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	bf0c      	ite	eq
 800626e:	2301      	moveq	r3, #1
 8006270:	2300      	movne	r3, #0
 8006272:	b2db      	uxtb	r3, r3
 8006274:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	4413      	add	r3, r2
 800627e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	0151      	lsls	r1, r2, #5
 8006288:	6a3a      	ldr	r2, [r7, #32]
 800628a:	440a      	add	r2, r1
 800628c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006290:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006294:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	4413      	add	r3, r2
 800629e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	7e7b      	ldrb	r3, [r7, #25]
 80062a6:	075b      	lsls	r3, r3, #29
 80062a8:	69f9      	ldr	r1, [r7, #28]
 80062aa:	0148      	lsls	r0, r1, #5
 80062ac:	6a39      	ldr	r1, [r7, #32]
 80062ae:	4401      	add	r1, r0
 80062b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80062b4:	4313      	orrs	r3, r2
 80062b6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a41      	ldr	r2, [pc, #260]	; (80063cc <USB_HC_StartXfer+0x284>)
 80062c8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062ca:	4b40      	ldr	r3, [pc, #256]	; (80063cc <USB_HC_StartXfer+0x284>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062d2:	4a3e      	ldr	r2, [pc, #248]	; (80063cc <USB_HC_StartXfer+0x284>)
 80062d4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	78db      	ldrb	r3, [r3, #3]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d006      	beq.n	80062ec <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80062de:	4b3b      	ldr	r3, [pc, #236]	; (80063cc <USB_HC_StartXfer+0x284>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e6:	4a39      	ldr	r2, [pc, #228]	; (80063cc <USB_HC_StartXfer+0x284>)
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	e005      	b.n	80062f8 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80062ec:	4b37      	ldr	r3, [pc, #220]	; (80063cc <USB_HC_StartXfer+0x284>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062f4:	4a35      	ldr	r2, [pc, #212]	; (80063cc <USB_HC_StartXfer+0x284>)
 80062f6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062f8:	4b34      	ldr	r3, [pc, #208]	; (80063cc <USB_HC_StartXfer+0x284>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006300:	4a32      	ldr	r2, [pc, #200]	; (80063cc <USB_HC_StartXfer+0x284>)
 8006302:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	4413      	add	r3, r2
 800630c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006310:	461a      	mov	r2, r3
 8006312:	4b2e      	ldr	r3, [pc, #184]	; (80063cc <USB_HC_StartXfer+0x284>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d14e      	bne.n	80063bc <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	78db      	ldrb	r3, [r3, #3]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d14a      	bne.n	80063bc <USB_HC_StartXfer+0x274>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d046      	beq.n	80063bc <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	79db      	ldrb	r3, [r3, #7]
 8006332:	2b03      	cmp	r3, #3
 8006334:	d830      	bhi.n	8006398 <USB_HC_StartXfer+0x250>
 8006336:	a201      	add	r2, pc, #4	; (adr r2, 800633c <USB_HC_StartXfer+0x1f4>)
 8006338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633c:	0800634d 	.word	0x0800634d
 8006340:	08006371 	.word	0x08006371
 8006344:	0800634d 	.word	0x0800634d
 8006348:	08006371 	.word	0x08006371
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	3303      	adds	r3, #3
 8006352:	089b      	lsrs	r3, r3, #2
 8006354:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006356:	8afa      	ldrh	r2, [r7, #22]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	b29b      	uxth	r3, r3
 800635e:	429a      	cmp	r2, r3
 8006360:	d91c      	bls.n	800639c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	f043 0220 	orr.w	r2, r3, #32
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	619a      	str	r2, [r3, #24]
          }
          break;
 800636e:	e015      	b.n	800639c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	3303      	adds	r3, #3
 8006376:	089b      	lsrs	r3, r3, #2
 8006378:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800637a:	8afa      	ldrh	r2, [r7, #22]
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	b29b      	uxth	r3, r3
 8006386:	429a      	cmp	r2, r3
 8006388:	d90a      	bls.n	80063a0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	619a      	str	r2, [r3, #24]
          }
          break;
 8006396:	e003      	b.n	80063a0 <USB_HC_StartXfer+0x258>

        default:
          break;
 8006398:	bf00      	nop
 800639a:	e002      	b.n	80063a2 <USB_HC_StartXfer+0x25a>
          break;
 800639c:	bf00      	nop
 800639e:	e000      	b.n	80063a2 <USB_HC_StartXfer+0x25a>
          break;
 80063a0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	68d9      	ldr	r1, [r3, #12]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	785a      	ldrb	r2, [r3, #1]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	b298      	uxth	r0, r3
 80063b0:	2300      	movs	r3, #0
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	4603      	mov	r3, r0
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f7ff fb86 	bl	8005ac8 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3728      	adds	r7, #40	; 0x28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	1ff80000 	.word	0x1ff80000
 80063cc:	200000b0 	.word	0x200000b0

080063d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	b29b      	uxth	r3, r3
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b087      	sub	sp, #28
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	460b      	mov	r3, r1
 80063fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006402:	78fb      	ldrb	r3, [r7, #3]
 8006404:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006406:	2300      	movs	r3, #0
 8006408:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	4413      	add	r3, r2
 8006412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	0c9b      	lsrs	r3, r3, #18
 800641a:	f003 0303 	and.w	r3, r3, #3
 800641e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <USB_HC_Halt+0x3a>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b02      	cmp	r3, #2
 800642a:	d16c      	bne.n	8006506 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	4413      	add	r3, r2
 8006434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	0151      	lsls	r1, r2, #5
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	440a      	add	r2, r1
 8006442:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006446:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800644a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d143      	bne.n	80064e0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	4413      	add	r3, r2
 8006460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	0151      	lsls	r1, r2, #5
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	440a      	add	r2, r1
 800646e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006472:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006476:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	4413      	add	r3, r2
 8006480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	0151      	lsls	r1, r2, #5
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	440a      	add	r2, r1
 800648e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006492:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006496:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	0151      	lsls	r1, r2, #5
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	440a      	add	r2, r1
 80064ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064b6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	3301      	adds	r3, #1
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064c4:	d81d      	bhi.n	8006502 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064dc:	d0ec      	beq.n	80064b8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80064de:	e080      	b.n	80065e2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	0151      	lsls	r1, r2, #5
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	440a      	add	r2, r1
 80064f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064fe:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006500:	e06f      	b.n	80065e2 <USB_HC_Halt+0x1f0>
          break;
 8006502:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006504:	e06d      	b.n	80065e2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	4413      	add	r3, r2
 800650e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	0151      	lsls	r1, r2, #5
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	440a      	add	r2, r1
 800651c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006524:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d143      	bne.n	80065be <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	4413      	add	r3, r2
 800653e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	0151      	lsls	r1, r2, #5
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	440a      	add	r2, r1
 800654c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006554:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	4413      	add	r3, r2
 800655e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	0151      	lsls	r1, r2, #5
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	440a      	add	r2, r1
 800656c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006570:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006574:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	4413      	add	r3, r2
 800657e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	0151      	lsls	r1, r2, #5
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	440a      	add	r2, r1
 800658c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006590:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006594:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	3301      	adds	r3, #1
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065a2:	d81d      	bhi.n	80065e0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065ba:	d0ec      	beq.n	8006596 <USB_HC_Halt+0x1a4>
 80065bc:	e011      	b.n	80065e2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e000      	b.n	80065e2 <USB_HC_Halt+0x1f0>
          break;
 80065e0:	bf00      	nop
    }
  }

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	371c      	adds	r7, #28
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	460b      	mov	r3, r1
 80065fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006604:	2301      	movs	r3, #1
 8006606:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	04da      	lsls	r2, r3, #19
 800660c:	4b15      	ldr	r3, [pc, #84]	; (8006664 <USB_DoPing+0x74>)
 800660e:	4013      	ands	r3, r2
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	0151      	lsls	r1, r2, #5
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	440a      	add	r2, r1
 8006618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800661c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006620:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	4413      	add	r3, r2
 800662a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006638:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006640:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	4413      	add	r3, r2
 800664a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664e:	461a      	mov	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	1ff80000 	.word	0x1ff80000

08006668 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff f9a1 	bl	80059c0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800667e:	2110      	movs	r1, #16
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7ff f9d9 	bl	8005a38 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff f9fc 	bl	8005a84 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800668c:	2300      	movs	r3, #0
 800668e:	613b      	str	r3, [r7, #16]
 8006690:	e01f      	b.n	80066d2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4413      	add	r3, r2
 800669a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066b0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066b8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c6:	461a      	mov	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	3301      	adds	r3, #1
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	2b0f      	cmp	r3, #15
 80066d6:	d9dc      	bls.n	8006692 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80066d8:	2300      	movs	r3, #0
 80066da:	613b      	str	r3, [r7, #16]
 80066dc:	e034      	b.n	8006748 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066f4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006704:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006712:	461a      	mov	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	3301      	adds	r3, #1
 800671c:	617b      	str	r3, [r7, #20]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006724:	d80c      	bhi.n	8006740 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4413      	add	r3, r2
 800672e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800673c:	d0ec      	beq.n	8006718 <USB_StopHost+0xb0>
 800673e:	e000      	b.n	8006742 <USB_StopHost+0xda>
        break;
 8006740:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	3301      	adds	r3, #1
 8006746:	613b      	str	r3, [r7, #16]
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2b0f      	cmp	r3, #15
 800674c:	d9c7      	bls.n	80066de <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006754:	461a      	mov	r2, r3
 8006756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800675a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006762:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7ff f91a 	bl	800599e <USB_EnableGlobalInt>

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8006774:	b590      	push	{r4, r7, lr}
 8006776:	b089      	sub	sp, #36	; 0x24
 8006778:	af04      	add	r7, sp, #16
 800677a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800677c:	2302      	movs	r3, #2
 800677e:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006780:	2301      	movs	r3, #1
 8006782:	2202      	movs	r2, #2
 8006784:	2102      	movs	r1, #2
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fc3a 	bl	8007000 <USBH_FindInterface>
 800678c:	4603      	mov	r3, r0
 800678e:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006790:	7bbb      	ldrb	r3, [r7, #14]
 8006792:	2bff      	cmp	r3, #255	; 0xff
 8006794:	f000 812a 	beq.w	80069ec <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8006798:	7bbb      	ldrb	r3, [r7, #14]
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fc13 	bl	8006fc8 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80067a8:	2050      	movs	r0, #80	; 0x50
 80067aa:	f002 f8df 	bl	800896c <malloc>
 80067ae:	4603      	mov	r3, r0
 80067b0:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80067bc:	7bbb      	ldrb	r3, [r7, #14]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	211a      	movs	r1, #26
 80067c2:	fb01 f303 	mul.w	r3, r1, r3
 80067c6:	4413      	add	r3, r2
 80067c8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	b25b      	sxtb	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	da15      	bge.n	8006800 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	211a      	movs	r1, #26
 80067da:	fb01 f303 	mul.w	r3, r1, r3
 80067de:	4413      	add	r3, r2
 80067e0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80067e4:	781a      	ldrb	r2, [r3, #0]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067ea:	7bbb      	ldrb	r3, [r7, #14]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	211a      	movs	r1, #26
 80067f0:	fb01 f303 	mul.w	r3, r1, r3
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80067fa:	881a      	ldrh	r2, [r3, #0]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	785b      	ldrb	r3, [r3, #1]
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 fd21 	bl	800824e <USBH_AllocPipe>
 800680c:	4603      	mov	r3, r0
 800680e:	461a      	mov	r2, r3
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	7819      	ldrb	r1, [r3, #0]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	7858      	ldrb	r0, [r3, #1]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	8952      	ldrh	r2, [r2, #10]
 800682c:	9202      	str	r2, [sp, #8]
 800682e:	2203      	movs	r2, #3
 8006830:	9201      	str	r2, [sp, #4]
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	4623      	mov	r3, r4
 8006836:	4602      	mov	r2, r0
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 fcd9 	bl	80081f0 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2200      	movs	r2, #0
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f001 ffe0 	bl	800880c <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800684c:	2300      	movs	r3, #0
 800684e:	2200      	movs	r2, #0
 8006850:	210a      	movs	r1, #10
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fbd4 	bl	8007000 <USBH_FindInterface>
 8006858:	4603      	mov	r3, r0
 800685a:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800685c:	7bbb      	ldrb	r3, [r7, #14]
 800685e:	2bff      	cmp	r3, #255	; 0xff
 8006860:	f000 80c4 	beq.w	80069ec <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006864:	7bbb      	ldrb	r3, [r7, #14]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	211a      	movs	r1, #26
 800686a:	fb01 f303 	mul.w	r3, r1, r3
 800686e:	4413      	add	r3, r2
 8006870:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	b25b      	sxtb	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	da16      	bge.n	80068aa <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800687c:	7bbb      	ldrb	r3, [r7, #14]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	211a      	movs	r1, #26
 8006882:	fb01 f303 	mul.w	r3, r1, r3
 8006886:	4413      	add	r3, r2
 8006888:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800688c:	781a      	ldrb	r2, [r3, #0]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006892:	7bbb      	ldrb	r3, [r7, #14]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	211a      	movs	r1, #26
 8006898:	fb01 f303 	mul.w	r3, r1, r3
 800689c:	4413      	add	r3, r2
 800689e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80068a2:	881a      	ldrh	r2, [r3, #0]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	835a      	strh	r2, [r3, #26]
 80068a8:	e015      	b.n	80068d6 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068aa:	7bbb      	ldrb	r3, [r7, #14]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	211a      	movs	r1, #26
 80068b0:	fb01 f303 	mul.w	r3, r1, r3
 80068b4:	4413      	add	r3, r2
 80068b6:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80068ba:	781a      	ldrb	r2, [r3, #0]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068c0:	7bbb      	ldrb	r3, [r7, #14]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	211a      	movs	r1, #26
 80068c6:	fb01 f303 	mul.w	r3, r1, r3
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80068d0:	881a      	ldrh	r2, [r3, #0]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80068d6:	7bbb      	ldrb	r3, [r7, #14]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	211a      	movs	r1, #26
 80068dc:	fb01 f303 	mul.w	r3, r1, r3
 80068e0:	4413      	add	r3, r2
 80068e2:	f203 3352 	addw	r3, r3, #850	; 0x352
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	b25b      	sxtb	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	da16      	bge.n	800691c <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80068ee:	7bbb      	ldrb	r3, [r7, #14]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	211a      	movs	r1, #26
 80068f4:	fb01 f303 	mul.w	r3, r1, r3
 80068f8:	4413      	add	r3, r2
 80068fa:	f203 3352 	addw	r3, r3, #850	; 0x352
 80068fe:	781a      	ldrb	r2, [r3, #0]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006904:	7bbb      	ldrb	r3, [r7, #14]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	211a      	movs	r1, #26
 800690a:	fb01 f303 	mul.w	r3, r1, r3
 800690e:	4413      	add	r3, r2
 8006910:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006914:	881a      	ldrh	r2, [r3, #0]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	835a      	strh	r2, [r3, #26]
 800691a:	e015      	b.n	8006948 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800691c:	7bbb      	ldrb	r3, [r7, #14]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	211a      	movs	r1, #26
 8006922:	fb01 f303 	mul.w	r3, r1, r3
 8006926:	4413      	add	r3, r2
 8006928:	f203 3352 	addw	r3, r3, #850	; 0x352
 800692c:	781a      	ldrb	r2, [r3, #0]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006932:	7bbb      	ldrb	r3, [r7, #14]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	211a      	movs	r1, #26
 8006938:	fb01 f303 	mul.w	r3, r1, r3
 800693c:	4413      	add	r3, r2
 800693e:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006942:	881a      	ldrh	r2, [r3, #0]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	7b9b      	ldrb	r3, [r3, #14]
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f001 fc7d 	bl	800824e <USBH_AllocPipe>
 8006954:	4603      	mov	r3, r0
 8006956:	461a      	mov	r2, r3
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	7bdb      	ldrb	r3, [r3, #15]
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 fc73 	bl	800824e <USBH_AllocPipe>
 8006968:	4603      	mov	r3, r0
 800696a:	461a      	mov	r2, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	7b59      	ldrb	r1, [r3, #13]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	7b98      	ldrb	r0, [r3, #14]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	8b12      	ldrh	r2, [r2, #24]
 8006988:	9202      	str	r2, [sp, #8]
 800698a:	2202      	movs	r2, #2
 800698c:	9201      	str	r2, [sp, #4]
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	4623      	mov	r3, r4
 8006992:	4602      	mov	r2, r0
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 fc2b 	bl	80081f0 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	7b19      	ldrb	r1, [r3, #12]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	7bd8      	ldrb	r0, [r3, #15]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	8b52      	ldrh	r2, [r2, #26]
 80069b2:	9202      	str	r2, [sp, #8]
 80069b4:	2202      	movs	r2, #2
 80069b6:	9201      	str	r2, [sp, #4]
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	4623      	mov	r3, r4
 80069bc:	4602      	mov	r2, r0
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 fc16 	bl	80081f0 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	7b5b      	ldrb	r3, [r3, #13]
 80069d0:	2200      	movs	r2, #0
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 ff19 	bl	800880c <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	7b1b      	ldrb	r3, [r3, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 ff12 	bl	800880c <USBH_LL_SetToggle>
      status = USBH_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd90      	pop	{r4, r7, pc}

080069f6 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b084      	sub	sp, #16
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00e      	beq.n	8006a2e <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 fc09 	bl	800822e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 fc31 	bl	800828a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	7b1b      	ldrb	r3, [r3, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00e      	beq.n	8006a54 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	7b1b      	ldrb	r3, [r3, #12]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 fbf6 	bl	800822e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	7b1b      	ldrb	r3, [r3, #12]
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 fc1e 	bl	800828a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	7b5b      	ldrb	r3, [r3, #13]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00e      	beq.n	8006a7a <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	7b5b      	ldrb	r3, [r3, #13]
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f001 fbe3 	bl	800822e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	7b5b      	ldrb	r3, [r3, #13]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f001 fc0b 	bl	800828a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00b      	beq.n	8006a9e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f001 ff74 	bl	800897c <free>
    phost->pActiveClass->pData = 0U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	3340      	adds	r3, #64	; 0x40
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f8b2 	bl	8006c2e <GetLineCoding>
 8006aca:	4603      	mov	r3, r0
 8006acc:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d105      	bne.n	8006ae0 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ada:	2102      	movs	r1, #2
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4798      	blx	r3
  }
  return status;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006af4:	2301      	movs	r3, #1
 8006af6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d877      	bhi.n	8006c00 <USBH_CDC_Process+0x114>
 8006b10:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <USBH_CDC_Process+0x2c>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006b2d 	.word	0x08006b2d
 8006b1c:	08006b33 	.word	0x08006b33
 8006b20:	08006b63 	.word	0x08006b63
 8006b24:	08006bd7 	.word	0x08006bd7
 8006b28:	08006be5 	.word	0x08006be5
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	73fb      	strb	r3, [r7, #15]
    break;
 8006b30:	e06d      	b.n	8006c0e <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f897 	bl	8006c6c <SetLineCoding>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006b42:	7bbb      	ldrb	r3, [r7, #14]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006b50:	e058      	b.n	8006c04 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8006b52:	7bbb      	ldrb	r3, [r7, #14]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d055      	beq.n	8006c04 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2204      	movs	r2, #4
 8006b5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006b60:	e050      	b.n	8006c04 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	3340      	adds	r3, #64	; 0x40
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f860 	bl	8006c2e <GetLineCoding>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006b72:	7bbb      	ldrb	r3, [r7, #14]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d126      	bne.n	8006bc6 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b8a:	791b      	ldrb	r3, [r3, #4]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d13b      	bne.n	8006c08 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b9a:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d133      	bne.n	8006c08 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006baa:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d12b      	bne.n	8006c08 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb8:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d124      	bne.n	8006c08 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f95a 	bl	8006e78 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006bc4:	e020      	b.n	8006c08 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8006bc6:	7bbb      	ldrb	r3, [r7, #14]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d01d      	beq.n	8006c08 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2204      	movs	r2, #4
 8006bd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006bd4:	e018      	b.n	8006c08 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f867 	bl	8006caa <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f8dc 	bl	8006d9a <CDC_ProcessReception>
    break;
 8006be2:	e014      	b.n	8006c0e <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006be4:	2100      	movs	r1, #0
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fece 	bl	8007988 <USBH_ClrFeature>
 8006bec:	4603      	mov	r3, r0
 8006bee:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10a      	bne.n	8006c0c <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8006bfe:	e005      	b.n	8006c0c <USBH_CDC_Process+0x120>

  default:
    break;
 8006c00:	bf00      	nop
 8006c02:	e004      	b.n	8006c0e <USBH_CDC_Process+0x122>
    break;
 8006c04:	bf00      	nop
 8006c06:	e002      	b.n	8006c0e <USBH_CDC_Process+0x122>
    break;
 8006c08:	bf00      	nop
 8006c0a:	e000      	b.n	8006c0e <USBH_CDC_Process+0x122>
    break;
 8006c0c:	bf00      	nop

  }

  return status;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	22a1      	movs	r2, #161	; 0xa1
 8006c3c:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2221      	movs	r2, #33	; 0x21
 8006c42:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2207      	movs	r2, #7
 8006c54:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2207      	movs	r2, #7
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 f873 	bl	8007d48 <USBH_CtlReq>
 8006c62:	4603      	mov	r3, r0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2221      	movs	r2, #33	; 0x21
 8006c7a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2207      	movs	r2, #7
 8006c92:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2207      	movs	r2, #7
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 f854 	bl	8007d48 <USBH_CtlReq>
 8006ca0:	4603      	mov	r3, r0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b086      	sub	sp, #24
 8006cae:	af02      	add	r7, sp, #8
 8006cb0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d002      	beq.n	8006cd0 <CDC_ProcessTransmission+0x26>
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d025      	beq.n	8006d1a <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8006cce:	e060      	b.n	8006d92 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	8b12      	ldrh	r2, [r2, #24]
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d90c      	bls.n	8006cf6 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	69d9      	ldr	r1, [r3, #28]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8b1a      	ldrh	r2, [r3, #24]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	7b58      	ldrb	r0, [r3, #13]
 8006ce8:	2301      	movs	r3, #1
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	4603      	mov	r3, r0
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f001 fa3b 	bl	800816a <USBH_BulkSendData>
 8006cf4:	e00c      	b.n	8006d10 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	7b58      	ldrb	r0, [r3, #13]
 8006d04:	2301      	movs	r3, #1
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	4603      	mov	r3, r0
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 fa2d 	bl	800816a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006d18:	e03b      	b.n	8006d92 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	7b5b      	ldrb	r3, [r3, #13]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 fd49 	bl	80087b8 <USBH_LL_GetURBState>
 8006d26:	4603      	mov	r3, r0
 8006d28:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006d2a:	7afb      	ldrb	r3, [r7, #11]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d128      	bne.n	8006d82 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	8b12      	ldrh	r2, [r2, #24]
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d90e      	bls.n	8006d5a <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	8b12      	ldrh	r2, [r2, #24]
 8006d44:	1a9a      	subs	r2, r3, r2
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	8b12      	ldrh	r2, [r2, #24]
 8006d52:	441a      	add	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	61da      	str	r2, [r3, #28]
 8006d58:	e002      	b.n	8006d60 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d004      	beq.n	8006d72 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006d70:	e00e      	b.n	8006d90 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f868 	bl	8006e50 <USBH_CDC_TransmitCallback>
    break;
 8006d80:	e006      	b.n	8006d90 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8006d82:	7afb      	ldrb	r3, [r7, #11]
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d103      	bne.n	8006d90 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006d90:	bf00      	nop
  }
}
 8006d92:	bf00      	nop
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b086      	sub	sp, #24
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006dac:	2300      	movs	r3, #0
 8006dae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d002      	beq.n	8006dc0 <CDC_ProcessReception+0x26>
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d00e      	beq.n	8006ddc <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8006dbe:	e043      	b.n	8006e48 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	6a19      	ldr	r1, [r3, #32]
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	8b5a      	ldrh	r2, [r3, #26]
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	7b1b      	ldrb	r3, [r3, #12]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 f9f1 	bl	80081b4 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2204      	movs	r2, #4
 8006dd6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006dda:	e035      	b.n	8006e48 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	7b1b      	ldrb	r3, [r3, #12]
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 fce8 	bl	80087b8 <USBH_LL_GetURBState>
 8006de8:	4603      	mov	r3, r0
 8006dea:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006dec:	7cfb      	ldrb	r3, [r7, #19]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d129      	bne.n	8006e46 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	7b1b      	ldrb	r3, [r3, #12]
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 fc4b 	bl	8008694 <USBH_LL_GetLastXferSize>
 8006dfe:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d016      	beq.n	8006e38 <CDC_ProcessReception+0x9e>
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	8b5b      	ldrh	r3, [r3, #26]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d910      	bls.n	8006e38 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	1ad2      	subs	r2, r2, r3
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	6a1a      	ldr	r2, [r3, #32]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	441a      	add	r2, r3
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2203      	movs	r2, #3
 8006e32:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006e36:	e006      	b.n	8006e46 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f80f 	bl	8006e64 <USBH_CDC_ReceiveCallback>
    break;
 8006e46:	bf00      	nop
  }
}
 8006e48:	bf00      	nop
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]

}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]

}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]

}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	4613      	mov	r3, r2
 8006e98:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e019      	b.n	8006ed8 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	79fa      	ldrb	r2, [r7, #7]
 8006ea8:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 f80f 	bl	8006ee0 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f001 fb2d 	bl	8008530 <USBH_LL_Init>

  return USBH_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006eec:	e008      	b.n	8006f00 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	32e0      	adds	r2, #224	; 0xe0
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3301      	adds	r3, #1
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b0e      	cmp	r3, #14
 8006f04:	d9f3      	bls.n	8006eee <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	e009      	b.n	8006f20 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f26:	d3f1      	bcc.n	8006f0c <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2240      	movs	r2, #64	; 0x40
 8006f4c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b085      	sub	sp, #20
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d017      	beq.n	8006fb6 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10f      	bne.n	8006fb0 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f96:	1c59      	adds	r1, r3, #1
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	33dc      	adds	r3, #220	; 0xdc
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	73fb      	strb	r3, [r7, #15]
 8006fae:	e004      	b.n	8006fba <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	73fb      	strb	r3, [r7, #15]
 8006fb4:	e001      	b.n	8006fba <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006fde:	78fa      	ldrb	r2, [r7, #3]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d204      	bcs.n	8006fee <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	78fa      	ldrb	r2, [r7, #3]
 8006fe8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006fec:	e001      	b.n	8006ff2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006fee:	2302      	movs	r3, #2
 8006ff0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	4608      	mov	r0, r1
 800700a:	4611      	mov	r1, r2
 800700c:	461a      	mov	r2, r3
 800700e:	4603      	mov	r3, r0
 8007010:	70fb      	strb	r3, [r7, #3]
 8007012:	460b      	mov	r3, r1
 8007014:	70bb      	strb	r3, [r7, #2]
 8007016:	4613      	mov	r3, r2
 8007018:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800701e:	2300      	movs	r3, #0
 8007020:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007028:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800702a:	e025      	b.n	8007078 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800702c:	7dfb      	ldrb	r3, [r7, #23]
 800702e:	221a      	movs	r2, #26
 8007030:	fb02 f303 	mul.w	r3, r2, r3
 8007034:	3308      	adds	r3, #8
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4413      	add	r3, r2
 800703a:	3302      	adds	r3, #2
 800703c:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	795b      	ldrb	r3, [r3, #5]
 8007042:	78fa      	ldrb	r2, [r7, #3]
 8007044:	429a      	cmp	r2, r3
 8007046:	d002      	beq.n	800704e <USBH_FindInterface+0x4e>
 8007048:	78fb      	ldrb	r3, [r7, #3]
 800704a:	2bff      	cmp	r3, #255	; 0xff
 800704c:	d111      	bne.n	8007072 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8007052:	78ba      	ldrb	r2, [r7, #2]
 8007054:	429a      	cmp	r2, r3
 8007056:	d002      	beq.n	800705e <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007058:	78bb      	ldrb	r3, [r7, #2]
 800705a:	2bff      	cmp	r3, #255	; 0xff
 800705c:	d109      	bne.n	8007072 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007062:	787a      	ldrb	r2, [r7, #1]
 8007064:	429a      	cmp	r2, r3
 8007066:	d002      	beq.n	800706e <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007068:	787b      	ldrb	r3, [r7, #1]
 800706a:	2bff      	cmp	r3, #255	; 0xff
 800706c:	d101      	bne.n	8007072 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800706e:	7dfb      	ldrb	r3, [r7, #23]
 8007070:	e006      	b.n	8007080 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007072:	7dfb      	ldrb	r3, [r7, #23]
 8007074:	3301      	adds	r3, #1
 8007076:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d9d6      	bls.n	800702c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800707e:	23ff      	movs	r3, #255	; 0xff
}
 8007080:	4618      	mov	r0, r3
 8007082:	371c      	adds	r7, #28
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f001 fa87 	bl	80085a8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800709a:	2101      	movs	r1, #1
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 fb9e 	bl	80087de <USBH_LL_DriverVBUS>

  return USBH_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b088      	sub	sp, #32
 80070b0:	af04      	add	r7, sp, #16
 80070b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80070b4:	2302      	movs	r3, #2
 80070b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 faec 	bl	800769a <USBH_IsPortEnabled>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10c      	bne.n	80070e2 <USBH_Process+0x36>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d007      	beq.n	80070e2 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b03      	cmp	r3, #3
 80070da:	d002      	beq.n	80070e2 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2203      	movs	r2, #3
 80070e0:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b0b      	cmp	r3, #11
 80070ea:	f200 814c 	bhi.w	8007386 <USBH_Process+0x2da>
 80070ee:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <USBH_Process+0x48>)
 80070f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f4:	08007125 	.word	0x08007125
 80070f8:	08007147 	.word	0x08007147
 80070fc:	0800715b 	.word	0x0800715b
 8007100:	08007361 	.word	0x08007361
 8007104:	08007387 	.word	0x08007387
 8007108:	080071e9 	.word	0x080071e9
 800710c:	08007317 	.word	0x08007317
 8007110:	08007219 	.word	0x08007219
 8007114:	08007239 	.word	0x08007239
 8007118:	08007259 	.word	0x08007259
 800711c:	08007287 	.word	0x08007287
 8007120:	08007349 	.word	0x08007349
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 812c 	beq.w	800738a <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8007138:	20c8      	movs	r0, #200	; 0xc8
 800713a:	f001 fb9a 	bl	8008872 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f001 fa8d 	bl	800865e <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007144:	e121      	b.n	800738a <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800714c:	2b01      	cmp	r3, #1
 800714e:	f040 811e 	bne.w	800738e <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2202      	movs	r2, #2
 8007156:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007158:	e119      	b.n	800738e <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800715a:	2064      	movs	r0, #100	; 0x64
 800715c:	f001 fb89 	bl	8008872 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f001 fa57 	bl	8008614 <USBH_LL_GetSpeed>
 8007166:	4603      	mov	r3, r0
 8007168:	461a      	mov	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2205      	movs	r2, #5
 8007174:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8007176:	2100      	movs	r1, #0
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 f868 	bl	800824e <USBH_AllocPipe>
 800717e:	4603      	mov	r3, r0
 8007180:	461a      	mov	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8007186:	2180      	movs	r1, #128	; 0x80
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f001 f860 	bl	800824e <USBH_AllocPipe>
 800718e:	4603      	mov	r3, r0
 8007190:	461a      	mov	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	7919      	ldrb	r1, [r3, #4]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80071aa:	b292      	uxth	r2, r2
 80071ac:	9202      	str	r2, [sp, #8]
 80071ae:	2200      	movs	r2, #0
 80071b0:	9201      	str	r2, [sp, #4]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	4603      	mov	r3, r0
 80071b6:	2280      	movs	r2, #128	; 0x80
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 f819 	bl	80081f0 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	7959      	ldrb	r1, [r3, #5]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80071d2:	b292      	uxth	r2, r2
 80071d4:	9202      	str	r2, [sp, #8]
 80071d6:	2200      	movs	r2, #0
 80071d8:	9201      	str	r2, [sp, #4]
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	4603      	mov	r3, r0
 80071de:	2200      	movs	r2, #0
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f001 f805 	bl	80081f0 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80071e6:	e0e3      	b.n	80073b0 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f8e7 	bl	80073bc <USBH_HandleEnum>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f040 80ce 	bne.w	8007392 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8007204:	2b01      	cmp	r3, #1
 8007206:	d103      	bne.n	8007210 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2208      	movs	r2, #8
 800720c:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800720e:	e0c0      	b.n	8007392 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2207      	movs	r2, #7
 8007214:	701a      	strb	r2, [r3, #0]
    break;
 8007216:	e0bc      	b.n	8007392 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 80b9 	beq.w	8007396 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800722a:	2101      	movs	r1, #1
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2208      	movs	r2, #8
 8007234:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007236:	e0ae      	b.n	8007396 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800723e:	b29b      	uxth	r3, r3
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fb59 	bl	80078fa <USBH_SetCfg>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	f040 80a5 	bne.w	800739a <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2209      	movs	r2, #9
 8007254:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007256:	e0a0      	b.n	800739a <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00b      	beq.n	800727e <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007266:	2101      	movs	r1, #1
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fb69 	bl	8007940 <USBH_SetFeature>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	f040 8094 	bne.w	800739e <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	220a      	movs	r2, #10
 800727a:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800727c:	e08f      	b.n	800739e <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	220a      	movs	r2, #10
 8007282:	701a      	strb	r2, [r3, #0]
    break;
 8007284:	e08b      	b.n	800739e <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 8088 	beq.w	80073a2 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
 800729e:	e017      	b.n	80072d0 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	33dc      	adds	r3, #220	; 0xdc
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	791a      	ldrb	r2, [r3, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d108      	bne.n	80072ca <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	33dc      	adds	r3, #220	; 0xdc
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	3301      	adds	r3, #1
 80072ce:	73fb      	strb	r3, [r7, #15]
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d0e4      	beq.n	80072a0 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d016      	beq.n	800730e <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	4798      	blx	r3
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d109      	bne.n	8007306 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2206      	movs	r2, #6
 80072f6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072fe:	2103      	movs	r1, #3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007304:	e04d      	b.n	80073a2 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	220d      	movs	r2, #13
 800730a:	701a      	strb	r2, [r3, #0]
    break;
 800730c:	e049      	b.n	80073a2 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	220d      	movs	r2, #13
 8007312:	701a      	strb	r2, [r3, #0]
    break;
 8007314:	e045      	b.n	80073a2 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00f      	beq.n	8007340 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	4798      	blx	r3
 800732c:	4603      	mov	r3, r0
 800732e:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8007330:	7bbb      	ldrb	r3, [r7, #14]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d136      	bne.n	80073a6 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	220b      	movs	r2, #11
 800733c:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800733e:	e032      	b.n	80073a6 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	220d      	movs	r2, #13
 8007344:	701a      	strb	r2, [r3, #0]
    break;
 8007346:	e02e      	b.n	80073a6 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800734e:	2b00      	cmp	r3, #0
 8007350:	d02b      	beq.n	80073aa <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	4798      	blx	r3
    }
    break;
 800735e:	e024      	b.n	80073aa <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff fdbd 	bl	8006ee0 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01e      	beq.n	80073ae <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8007384:	e013      	b.n	80073ae <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8007386:	bf00      	nop
 8007388:	e012      	b.n	80073b0 <USBH_Process+0x304>
    break;
 800738a:	bf00      	nop
 800738c:	e010      	b.n	80073b0 <USBH_Process+0x304>
    break;
 800738e:	bf00      	nop
 8007390:	e00e      	b.n	80073b0 <USBH_Process+0x304>
    break;
 8007392:	bf00      	nop
 8007394:	e00c      	b.n	80073b0 <USBH_Process+0x304>
    break;
 8007396:	bf00      	nop
 8007398:	e00a      	b.n	80073b0 <USBH_Process+0x304>
    break;
 800739a:	bf00      	nop
 800739c:	e008      	b.n	80073b0 <USBH_Process+0x304>
    break;
 800739e:	bf00      	nop
 80073a0:	e006      	b.n	80073b0 <USBH_Process+0x304>
    break;
 80073a2:	bf00      	nop
 80073a4:	e004      	b.n	80073b0 <USBH_Process+0x304>
    break;
 80073a6:	bf00      	nop
 80073a8:	e002      	b.n	80073b0 <USBH_Process+0x304>
    break;
 80073aa:	bf00      	nop
 80073ac:	e000      	b.n	80073b0 <USBH_Process+0x304>
    break;
 80073ae:	bf00      	nop
  }
 return USBH_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop

080073bc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b088      	sub	sp, #32
 80073c0:	af04      	add	r7, sp, #16
 80073c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80073c4:	2301      	movs	r3, #1
 80073c6:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	785b      	ldrb	r3, [r3, #1]
 80073cc:	2b07      	cmp	r3, #7
 80073ce:	f200 80f8 	bhi.w	80075c2 <USBH_HandleEnum+0x206>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <USBH_HandleEnum+0x1c>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	080073f9 	.word	0x080073f9
 80073dc:	0800746b 	.word	0x0800746b
 80073e0:	08007483 	.word	0x08007483
 80073e4:	080074f9 	.word	0x080074f9
 80073e8:	0800750f 	.word	0x0800750f
 80073ec:	0800752b 	.word	0x0800752b
 80073f0:	0800755f 	.word	0x0800755f
 80073f4:	08007593 	.word	0x08007593
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80073f8:	2108      	movs	r1, #8
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f9ad 	bl	800775a <USBH_Get_DevDesc>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	f040 80df 	bne.w	80075c6 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	7919      	ldrb	r1, [r3, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800742c:	b292      	uxth	r2, r2
 800742e:	9202      	str	r2, [sp, #8]
 8007430:	2200      	movs	r2, #0
 8007432:	9201      	str	r2, [sp, #4]
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	4603      	mov	r3, r0
 8007438:	2280      	movs	r2, #128	; 0x80
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fed8 	bl	80081f0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	7959      	ldrb	r1, [r3, #5]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007454:	b292      	uxth	r2, r2
 8007456:	9202      	str	r2, [sp, #8]
 8007458:	2200      	movs	r2, #0
 800745a:	9201      	str	r2, [sp, #4]
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	4603      	mov	r3, r0
 8007460:	2200      	movs	r2, #0
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fec4 	bl	80081f0 <USBH_OpenPipe>

    }
    break;
 8007468:	e0ad      	b.n	80075c6 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800746a:	2112      	movs	r1, #18
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f974 	bl	800775a <USBH_Get_DevDesc>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	f040 80a8 	bne.w	80075ca <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2202      	movs	r2, #2
 800747e:	705a      	strb	r2, [r3, #1]

    }
    break;
 8007480:	e0a3      	b.n	80075ca <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8007482:	2101      	movs	r1, #1
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fa14 	bl	80078b2 <USBH_SetAddress>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	f040 809e 	bne.w	80075ce <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8007492:	2002      	movs	r0, #2
 8007494:	f001 f9ed 	bl	8008872 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2203      	movs	r2, #3
 80074a4:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	7919      	ldrb	r1, [r3, #4]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80074ba:	b292      	uxth	r2, r2
 80074bc:	9202      	str	r2, [sp, #8]
 80074be:	2200      	movs	r2, #0
 80074c0:	9201      	str	r2, [sp, #4]
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	4603      	mov	r3, r0
 80074c6:	2280      	movs	r2, #128	; 0x80
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fe91 	bl	80081f0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	7959      	ldrb	r1, [r3, #5]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80074e2:	b292      	uxth	r2, r2
 80074e4:	9202      	str	r2, [sp, #8]
 80074e6:	2200      	movs	r2, #0
 80074e8:	9201      	str	r2, [sp, #4]
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	4603      	mov	r3, r0
 80074ee:	2200      	movs	r2, #0
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fe7d 	bl	80081f0 <USBH_OpenPipe>
    }
    break;
 80074f6:	e06a      	b.n	80075ce <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80074f8:	2109      	movs	r1, #9
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f955 	bl	80077aa <USBH_Get_CfgDesc>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d165      	bne.n	80075d2 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2204      	movs	r2, #4
 800750a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800750c:	e061      	b.n	80075d2 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f947 	bl	80077aa <USBH_Get_CfgDesc>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d159      	bne.n	80075d6 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2205      	movs	r2, #5
 8007526:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007528:	e055      	b.n	80075d6 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007530:	2b00      	cmp	r3, #0
 8007532:	d010      	beq.n	8007556 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007540:	23ff      	movs	r3, #255	; 0xff
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f955 	bl	80077f2 <USBH_Get_StringDesc>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d145      	bne.n	80075da <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2206      	movs	r2, #6
 8007552:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007554:	e041      	b.n	80075da <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2206      	movs	r2, #6
 800755a:	705a      	strb	r2, [r3, #1]
    break;
 800755c:	e03d      	b.n	80075da <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8007564:	2b00      	cmp	r3, #0
 8007566:	d010      	beq.n	800758a <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007574:	23ff      	movs	r3, #255	; 0xff
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f93b 	bl	80077f2 <USBH_Get_StringDesc>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d12d      	bne.n	80075de <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2207      	movs	r2, #7
 8007586:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007588:	e029      	b.n	80075de <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2207      	movs	r2, #7
 800758e:	705a      	strb	r2, [r3, #1]
    break;
 8007590:	e025      	b.n	80075de <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00f      	beq.n	80075bc <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80075a8:	23ff      	movs	r3, #255	; 0xff
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f921 	bl	80077f2 <USBH_Get_StringDesc>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d115      	bne.n	80075e2 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80075ba:	e012      	b.n	80075e2 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	73fb      	strb	r3, [r7, #15]
    break;
 80075c0:	e00f      	b.n	80075e2 <USBH_HandleEnum+0x226>

  default:
    break;
 80075c2:	bf00      	nop
 80075c4:	e00e      	b.n	80075e4 <USBH_HandleEnum+0x228>
    break;
 80075c6:	bf00      	nop
 80075c8:	e00c      	b.n	80075e4 <USBH_HandleEnum+0x228>
    break;
 80075ca:	bf00      	nop
 80075cc:	e00a      	b.n	80075e4 <USBH_HandleEnum+0x228>
    break;
 80075ce:	bf00      	nop
 80075d0:	e008      	b.n	80075e4 <USBH_HandleEnum+0x228>
    break;
 80075d2:	bf00      	nop
 80075d4:	e006      	b.n	80075e4 <USBH_HandleEnum+0x228>
    break;
 80075d6:	bf00      	nop
 80075d8:	e004      	b.n	80075e4 <USBH_HandleEnum+0x228>
    break;
 80075da:	bf00      	nop
 80075dc:	e002      	b.n	80075e4 <USBH_HandleEnum+0x228>
    break;
 80075de:	bf00      	nop
 80075e0:	e000      	b.n	80075e4 <USBH_HandleEnum+0x228>
    break;
 80075e2:	bf00      	nop
  }
  return Status;
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop

080075f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8007602:	bf00      	nop
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b082      	sub	sp, #8
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800761c:	1c5a      	adds	r2, r3, #1
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f804 	bl	8007632 <USBH_HandleSof>
}
 800762a:	bf00      	nop
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b0b      	cmp	r3, #11
 8007642:	d10a      	bne.n	800765a <USBH_HandleSof+0x28>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	4798      	blx	r3
  }
}
 800765a:	bf00      	nop
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007672:	bf00      	nop
}
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800768e:	bf00      	nop
}
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10f      	bne.n	80076e6 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00e      	beq.n	80076f6 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076de:	2104      	movs	r1, #4
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	4798      	blx	r3
 80076e4:	e007      	b.n	80076f6 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d102      	bne.n	80076f6 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 ff68 	bl	80085de <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	791b      	ldrb	r3, [r3, #4]
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fdb8 	bl	800828a <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	795b      	ldrb	r3, [r3, #5]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fdb2 	bl	800828a <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007734:	2b00      	cmp	r3, #0
 8007736:	d005      	beq.n	8007744 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800773e:	2105      	movs	r1, #5
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 ff2f 	bl	80085a8 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2203      	movs	r2, #3
 800774e:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b086      	sub	sp, #24
 800775e:	af02      	add	r7, sp, #8
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	460b      	mov	r3, r1
 8007764:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	b29b      	uxth	r3, r3
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	4613      	mov	r3, r2
 8007774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007778:	2100      	movs	r1, #0
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f864 	bl	8007848 <USBH_GetDescriptor>
 8007780:	4603      	mov	r3, r0
 8007782:	73fb      	strb	r3, [r7, #15]
 8007784:	7bfb      	ldrb	r3, [r7, #15]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10a      	bne.n	80077a0 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007796:	78fa      	ldrb	r2, [r7, #3]
 8007798:	b292      	uxth	r2, r2
 800779a:	4619      	mov	r1, r3
 800779c:	f000 f918 	bl	80079d0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b086      	sub	sp, #24
 80077ae:	af02      	add	r7, sp, #8
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	460b      	mov	r3, r1
 80077b4:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	331c      	adds	r3, #28
 80077ba:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80077bc:	887b      	ldrh	r3, [r7, #2]
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077c6:	2100      	movs	r1, #0
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f83d 	bl	8007848 <USBH_GetDescriptor>
 80077ce:	4603      	mov	r3, r0
 80077d0:	72fb      	strb	r3, [r7, #11]
 80077d2:	7afb      	ldrb	r3, [r7, #11]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d107      	bne.n	80077e8 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80077de:	887a      	ldrh	r2, [r7, #2]
 80077e0:	68f9      	ldr	r1, [r7, #12]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 f964 	bl	8007ab0 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80077e8:	7afb      	ldrb	r3, [r7, #11]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b088      	sub	sp, #32
 80077f6:	af02      	add	r7, sp, #8
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	607a      	str	r2, [r7, #4]
 80077fc:	461a      	mov	r2, r3
 80077fe:	460b      	mov	r3, r1
 8007800:	72fb      	strb	r3, [r7, #11]
 8007802:	4613      	mov	r3, r2
 8007804:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8007806:	7afb      	ldrb	r3, [r7, #11]
 8007808:	b29b      	uxth	r3, r3
 800780a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800780e:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007816:	893b      	ldrh	r3, [r7, #8]
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	460b      	mov	r3, r1
 800781c:	2100      	movs	r1, #0
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 f812 	bl	8007848 <USBH_GetDescriptor>
 8007824:	4603      	mov	r3, r0
 8007826:	75fb      	strb	r3, [r7, #23]
 8007828:	7dfb      	ldrb	r3, [r7, #23]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d107      	bne.n	800783e <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007834:	893a      	ldrh	r2, [r7, #8]
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	4618      	mov	r0, r3
 800783a:	f000 fa37 	bl	8007cac <USBH_ParseStringDesc>
  }
  return status;
 800783e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	607b      	str	r3, [r7, #4]
 8007852:	460b      	mov	r3, r1
 8007854:	72fb      	strb	r3, [r7, #11]
 8007856:	4613      	mov	r3, r2
 8007858:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	789b      	ldrb	r3, [r3, #2]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d11c      	bne.n	800789c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007862:	7afb      	ldrb	r3, [r7, #11]
 8007864:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007868:	b2da      	uxtb	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2206      	movs	r2, #6
 8007872:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	893a      	ldrh	r2, [r7, #8]
 8007878:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800787a:	893b      	ldrh	r3, [r7, #8]
 800787c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007880:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007884:	d104      	bne.n	8007890 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f240 4209 	movw	r2, #1033	; 0x409
 800788c:	829a      	strh	r2, [r3, #20]
 800788e:	e002      	b.n	8007896 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8b3a      	ldrh	r2, [r7, #24]
 800789a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800789c:	8b3b      	ldrh	r3, [r7, #24]
 800789e:	461a      	mov	r2, r3
 80078a0:	6879      	ldr	r1, [r7, #4]
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f000 fa50 	bl	8007d48 <USBH_CtlReq>
 80078a8:	4603      	mov	r3, r0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	460b      	mov	r3, r1
 80078bc:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	789b      	ldrb	r3, [r3, #2]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d10f      	bne.n	80078e6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2205      	movs	r2, #5
 80078d0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80078d2:	78fb      	ldrb	r3, [r7, #3]
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80078e6:	2200      	movs	r2, #0
 80078e8:	2100      	movs	r1, #0
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa2c 	bl	8007d48 <USBH_CtlReq>
 80078f0:	4603      	mov	r3, r0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b082      	sub	sp, #8
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	460b      	mov	r3, r1
 8007904:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	789b      	ldrb	r3, [r3, #2]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d10e      	bne.n	800792c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2209      	movs	r2, #9
 8007918:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	887a      	ldrh	r2, [r7, #2]
 800791e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800792c:	2200      	movs	r2, #0
 800792e:	2100      	movs	r1, #0
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fa09 	bl	8007d48 <USBH_CtlReq>
 8007936:	4603      	mov	r3, r0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	789b      	ldrb	r3, [r3, #2]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d10f      	bne.n	8007974 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2203      	movs	r2, #3
 800795e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007960:	78fb      	ldrb	r3, [r7, #3]
 8007962:	b29a      	uxth	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007974:	2200      	movs	r2, #0
 8007976:	2100      	movs	r1, #0
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f9e5 	bl	8007d48 <USBH_CtlReq>
 800797e:	4603      	mov	r3, r0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	789b      	ldrb	r3, [r3, #2]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d10f      	bne.n	80079bc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80079ae:	78fb      	ldrb	r3, [r7, #3]
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80079bc:	2200      	movs	r2, #0
 80079be:	2100      	movs	r1, #0
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f9c1 	bl	8007d48 <USBH_CtlReq>
 80079c6:	4603      	mov	r3, r0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	4613      	mov	r3, r2
 80079dc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	781a      	ldrb	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	785a      	ldrb	r2, [r3, #1]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	3302      	adds	r3, #2
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	3303      	adds	r3, #3
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	021b      	lsls	r3, r3, #8
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	4313      	orrs	r3, r2
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	791a      	ldrb	r2, [r3, #4]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	795a      	ldrb	r2, [r3, #5]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	799a      	ldrb	r2, [r3, #6]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	79da      	ldrb	r2, [r3, #7]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007a2a:	88fb      	ldrh	r3, [r7, #6]
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d939      	bls.n	8007aa4 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	3308      	adds	r3, #8
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	3309      	adds	r3, #9
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	021b      	lsls	r3, r3, #8
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	4313      	orrs	r3, r2
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	330a      	adds	r3, #10
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	330b      	adds	r3, #11
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	021b      	lsls	r3, r3, #8
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	4313      	orrs	r3, r2
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	330c      	adds	r3, #12
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	330d      	adds	r3, #13
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	021b      	lsls	r3, r3, #8
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	7b9a      	ldrb	r2, [r3, #14]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	7bda      	ldrb	r2, [r3, #15]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	7c1a      	ldrb	r2, [r3, #16]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	7c5a      	ldrb	r2, [r3, #17]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	745a      	strb	r2, [r3, #17]
  }
}
 8007aa4:	bf00      	nop
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b08a      	sub	sp, #40	; 0x28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	4613      	mov	r3, r2
 8007abc:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	781a      	ldrb	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	785a      	ldrb	r2, [r3, #1]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	3302      	adds	r3, #2
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	3303      	adds	r3, #3
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	021b      	lsls	r3, r3, #8
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	4313      	orrs	r3, r2
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	791a      	ldrb	r2, [r3, #4]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	795a      	ldrb	r2, [r3, #5]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	799a      	ldrb	r2, [r3, #6]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	79da      	ldrb	r2, [r3, #7]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	7a1a      	ldrb	r2, [r3, #8]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007b26:	88fb      	ldrh	r3, [r7, #6]
 8007b28:	2b09      	cmp	r3, #9
 8007b2a:	d95f      	bls.n	8007bec <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007b2c:	2309      	movs	r3, #9
 8007b2e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007b30:	2300      	movs	r3, #0
 8007b32:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b34:	e051      	b.n	8007bda <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007b36:	f107 0316 	add.w	r3, r7, #22
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b3e:	f000 f8e8 	bl	8007d12 <USBH_GetNextDesc>
 8007b42:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	785b      	ldrb	r3, [r3, #1]
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d146      	bne.n	8007bda <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007b4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b50:	221a      	movs	r2, #26
 8007b52:	fb02 f303 	mul.w	r3, r2, r3
 8007b56:	3308      	adds	r3, #8
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	3302      	adds	r3, #2
 8007b5e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b62:	69f8      	ldr	r0, [r7, #28]
 8007b64:	f000 f846 	bl	8007bf4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b72:	e022      	b.n	8007bba <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8007b74:	f107 0316 	add.w	r3, r7, #22
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b7c:	f000 f8c9 	bl	8007d12 <USBH_GetNextDesc>
 8007b80:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	785b      	ldrb	r3, [r3, #1]
 8007b86:	2b05      	cmp	r3, #5
 8007b88:	d117      	bne.n	8007bba <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007b8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b8e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007b92:	3201      	adds	r2, #1
 8007b94:	00d2      	lsls	r2, r2, #3
 8007b96:	211a      	movs	r1, #26
 8007b98:	fb01 f303 	mul.w	r3, r1, r3
 8007b9c:	4413      	add	r3, r2
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8007ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007baa:	69b8      	ldr	r0, [r7, #24]
 8007bac:	f000 f851 	bl	8007c52 <USBH_ParseEPDesc>
            ep_ix++;
 8007bb0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	791b      	ldrb	r3, [r3, #4]
 8007bbe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d204      	bcs.n	8007bd0 <USBH_ParseCfgDesc+0x120>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	885a      	ldrh	r2, [r3, #2]
 8007bca:	8afb      	ldrh	r3, [r7, #22]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d8d1      	bhi.n	8007b74 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007bd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007bda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d804      	bhi.n	8007bec <USBH_ParseCfgDesc+0x13c>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	885a      	ldrh	r2, [r3, #2]
 8007be6:	8afb      	ldrh	r3, [r7, #22]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d8a4      	bhi.n	8007b36 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007bec:	bf00      	nop
 8007bee:	3728      	adds	r7, #40	; 0x28
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781a      	ldrb	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	785a      	ldrb	r2, [r3, #1]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	789a      	ldrb	r2, [r3, #2]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	78da      	ldrb	r2, [r3, #3]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	791a      	ldrb	r2, [r3, #4]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	795a      	ldrb	r2, [r3, #5]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	799a      	ldrb	r2, [r3, #6]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	79da      	ldrb	r2, [r3, #7]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	7a1a      	ldrb	r2, [r3, #8]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	721a      	strb	r2, [r3, #8]
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	781a      	ldrb	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	785a      	ldrb	r2, [r3, #1]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	789a      	ldrb	r2, [r3, #2]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	78da      	ldrb	r2, [r3, #3]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	3305      	adds	r3, #5
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	021b      	lsls	r3, r3, #8
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	4313      	orrs	r3, r2
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	799a      	ldrb	r2, [r3, #6]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	719a      	strb	r2, [r3, #6]
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	2b03      	cmp	r3, #3
 8007cc2:	d120      	bne.n	8007d06 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	1e9a      	subs	r2, r3, #2
 8007cca:	88fb      	ldrh	r3, [r7, #6]
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	bf28      	it	cs
 8007cd0:	4613      	movcs	r3, r2
 8007cd2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3302      	adds	r3, #2
 8007cd8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007cda:	2300      	movs	r3, #0
 8007cdc:	82fb      	strh	r3, [r7, #22]
 8007cde:	e00b      	b.n	8007cf8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007ce0:	8afb      	ldrh	r3, [r7, #22]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	781a      	ldrb	r2, [r3, #0]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007cf2:	8afb      	ldrh	r3, [r7, #22]
 8007cf4:	3302      	adds	r3, #2
 8007cf6:	82fb      	strh	r3, [r7, #22]
 8007cf8:	8afa      	ldrh	r2, [r7, #22]
 8007cfa:	8abb      	ldrh	r3, [r7, #20]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d3ef      	bcc.n	8007ce0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2200      	movs	r2, #0
 8007d04:	701a      	strb	r2, [r3, #0]
  }
}
 8007d06:	bf00      	nop
 8007d08:	371c      	adds	r7, #28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b085      	sub	sp, #20
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	881a      	ldrh	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	4413      	add	r3, r2
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4413      	add	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	4613      	mov	r3, r2
 8007d54:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007d56:	2301      	movs	r3, #1
 8007d58:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	789b      	ldrb	r3, [r3, #2]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d002      	beq.n	8007d68 <USBH_CtlReq+0x20>
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d00f      	beq.n	8007d86 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8007d66:	e034      	b.n	8007dd2 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	88fa      	ldrh	r2, [r7, #6]
 8007d72:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2201      	movs	r2, #1
 8007d78:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007d80:	2301      	movs	r3, #1
 8007d82:	75fb      	strb	r3, [r7, #23]
    break;
 8007d84:	e025      	b.n	8007dd2 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 f828 	bl	8007ddc <USBH_HandleControl>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d108      	bne.n	8007da8 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	75fb      	strb	r3, [r7, #23]
    break;
 8007da6:	e013      	b.n	8007dd0 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d108      	bne.n	8007dc0 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2201      	movs	r2, #1
 8007db2:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	75fb      	strb	r3, [r7, #23]
    break;
 8007dbe:	e007      	b.n	8007dd0 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d104      	bne.n	8007dd0 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007dcc:	2302      	movs	r3, #2
 8007dce:	75fb      	strb	r3, [r7, #23]
    break;
 8007dd0:	bf00      	nop
  }
  return status;
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3718      	adds	r7, #24
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af02      	add	r7, sp, #8
 8007de2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007de4:	2301      	movs	r3, #1
 8007de6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	7e1b      	ldrb	r3, [r3, #24]
 8007df0:	3b01      	subs	r3, #1
 8007df2:	2b0a      	cmp	r3, #10
 8007df4:	f200 814c 	bhi.w	8008090 <USBH_HandleControl+0x2b4>
 8007df8:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <USBH_HandleControl+0x24>)
 8007dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfe:	bf00      	nop
 8007e00:	08007e2d 	.word	0x08007e2d
 8007e04:	08007e47 	.word	0x08007e47
 8007e08:	08007eb1 	.word	0x08007eb1
 8007e0c:	08007ed7 	.word	0x08007ed7
 8007e10:	08007f0f 	.word	0x08007f0f
 8007e14:	08007f3b 	.word	0x08007f3b
 8007e18:	08007f8d 	.word	0x08007f8d
 8007e1c:	08007faf 	.word	0x08007faf
 8007e20:	08007feb 	.word	0x08007feb
 8007e24:	08008013 	.word	0x08008013
 8007e28:	08008051 	.word	0x08008051
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f103 0110 	add.w	r1, r3, #16
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	795b      	ldrb	r3, [r3, #5]
 8007e36:	461a      	mov	r2, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f939 	bl	80080b0 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2202      	movs	r2, #2
 8007e42:	761a      	strb	r2, [r3, #24]
    break;
 8007e44:	e12f      	b.n	80080a6 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	795b      	ldrb	r3, [r3, #5]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fcb3 	bl	80087b8 <USBH_LL_GetURBState>
 8007e52:	4603      	mov	r3, r0
 8007e54:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d11e      	bne.n	8007e9a <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	7c1b      	ldrb	r3, [r3, #16]
 8007e60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e64:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	8adb      	ldrh	r3, [r3, #22]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00a      	beq.n	8007e84 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007e6e:	7b7b      	ldrb	r3, [r7, #13]
 8007e70:	2b80      	cmp	r3, #128	; 0x80
 8007e72:	d103      	bne.n	8007e7c <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2203      	movs	r2, #3
 8007e78:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007e7a:	e10b      	b.n	8008094 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2205      	movs	r2, #5
 8007e80:	761a      	strb	r2, [r3, #24]
    break;
 8007e82:	e107      	b.n	8008094 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007e84:	7b7b      	ldrb	r3, [r7, #13]
 8007e86:	2b80      	cmp	r3, #128	; 0x80
 8007e88:	d103      	bne.n	8007e92 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2209      	movs	r2, #9
 8007e8e:	761a      	strb	r2, [r3, #24]
    break;
 8007e90:	e100      	b.n	8008094 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2207      	movs	r2, #7
 8007e96:	761a      	strb	r2, [r3, #24]
    break;
 8007e98:	e0fc      	b.n	8008094 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	d003      	beq.n	8007ea8 <USBH_HandleControl+0xcc>
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	f040 80f6 	bne.w	8008094 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	220b      	movs	r2, #11
 8007eac:	761a      	strb	r2, [r3, #24]
    break;
 8007eae:	e0f1      	b.n	8008094 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6899      	ldr	r1, [r3, #8]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	899a      	ldrh	r2, [r3, #12]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	791b      	ldrb	r3, [r3, #4]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f930 	bl	800812e <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2204      	movs	r2, #4
 8007ed2:	761a      	strb	r2, [r3, #24]
    break;
 8007ed4:	e0e7      	b.n	80080a6 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	791b      	ldrb	r3, [r3, #4]
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fc6b 	bl	80087b8 <USBH_LL_GetURBState>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d102      	bne.n	8007ef2 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2209      	movs	r2, #9
 8007ef0:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007ef2:	7bbb      	ldrb	r3, [r7, #14]
 8007ef4:	2b05      	cmp	r3, #5
 8007ef6:	d102      	bne.n	8007efe <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007efc:	e0cc      	b.n	8008098 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
 8007f00:	2b04      	cmp	r3, #4
 8007f02:	f040 80c9 	bne.w	8008098 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	220b      	movs	r2, #11
 8007f0a:	761a      	strb	r2, [r3, #24]
    break;
 8007f0c:	e0c4      	b.n	8008098 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6899      	ldr	r1, [r3, #8]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	899a      	ldrh	r2, [r3, #12]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	7958      	ldrb	r0, [r3, #5]
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	4603      	mov	r3, r0
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f8df 	bl	80080e4 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2206      	movs	r2, #6
 8007f36:	761a      	strb	r2, [r3, #24]
    break;
 8007f38:	e0b5      	b.n	80080a6 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	795b      	ldrb	r3, [r3, #5]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fc39 	bl	80087b8 <USBH_LL_GetURBState>
 8007f46:	4603      	mov	r3, r0
 8007f48:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d103      	bne.n	8007f58 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2207      	movs	r2, #7
 8007f54:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007f56:	e0a1      	b.n	800809c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	2b05      	cmp	r3, #5
 8007f5c:	d105      	bne.n	8007f6a <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	220c      	movs	r2, #12
 8007f62:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007f64:	2303      	movs	r3, #3
 8007f66:	73fb      	strb	r3, [r7, #15]
    break;
 8007f68:	e098      	b.n	800809c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007f6a:	7bbb      	ldrb	r3, [r7, #14]
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d103      	bne.n	8007f78 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2205      	movs	r2, #5
 8007f74:	761a      	strb	r2, [r3, #24]
    break;
 8007f76:	e091      	b.n	800809c <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	f040 808e 	bne.w	800809c <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	220b      	movs	r2, #11
 8007f84:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007f86:	2302      	movs	r3, #2
 8007f88:	73fb      	strb	r3, [r7, #15]
    break;
 8007f8a:	e087      	b.n	800809c <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	791b      	ldrb	r3, [r3, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	2100      	movs	r1, #0
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f8ca 	bl	800812e <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2208      	movs	r2, #8
 8007faa:	761a      	strb	r2, [r3, #24]

    break;
 8007fac:	e07b      	b.n	80080a6 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	791b      	ldrb	r3, [r3, #4]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fbff 	bl	80087b8 <USBH_LL_GetURBState>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d105      	bne.n	8007fd0 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	220d      	movs	r2, #13
 8007fc8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007fce:	e067      	b.n	80080a0 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	2b04      	cmp	r3, #4
 8007fd4:	d103      	bne.n	8007fde <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	220b      	movs	r2, #11
 8007fda:	761a      	strb	r2, [r3, #24]
    break;
 8007fdc:	e060      	b.n	80080a0 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007fde:	7bbb      	ldrb	r3, [r7, #14]
 8007fe0:	2b05      	cmp	r3, #5
 8007fe2:	d15d      	bne.n	80080a0 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fe8:	e05a      	b.n	80080a0 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	795a      	ldrb	r2, [r3, #5]
 8007fee:	2301      	movs	r3, #1
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f873 	bl	80080e4 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008004:	b29a      	uxth	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	220a      	movs	r2, #10
 800800e:	761a      	strb	r2, [r3, #24]
    break;
 8008010:	e049      	b.n	80080a6 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	795b      	ldrb	r3, [r3, #5]
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fbcd 	bl	80087b8 <USBH_LL_GetURBState>
 800801e:	4603      	mov	r3, r0
 8008020:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8008022:	7bbb      	ldrb	r3, [r7, #14]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d105      	bne.n	8008034 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	220d      	movs	r2, #13
 8008030:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8008032:	e037      	b.n	80080a4 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008034:	7bbb      	ldrb	r3, [r7, #14]
 8008036:	2b02      	cmp	r3, #2
 8008038:	d103      	bne.n	8008042 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2209      	movs	r2, #9
 800803e:	761a      	strb	r2, [r3, #24]
    break;
 8008040:	e030      	b.n	80080a4 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8008042:	7bbb      	ldrb	r3, [r7, #14]
 8008044:	2b04      	cmp	r3, #4
 8008046:	d12d      	bne.n	80080a4 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	220b      	movs	r2, #11
 800804c:	761a      	strb	r2, [r3, #24]
    break;
 800804e:	e029      	b.n	80080a4 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	7e5b      	ldrb	r3, [r3, #25]
 8008054:	3301      	adds	r3, #1
 8008056:	b2da      	uxtb	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	765a      	strb	r2, [r3, #25]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	7e5b      	ldrb	r3, [r3, #25]
 8008060:	2b02      	cmp	r3, #2
 8008062:	d809      	bhi.n	8008078 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 faba 	bl	80085de <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8008076:	e016      	b.n	80080a6 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800807e:	2106      	movs	r1, #6
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800808a:	2302      	movs	r3, #2
 800808c:	73fb      	strb	r3, [r7, #15]
    break;
 800808e:	e00a      	b.n	80080a6 <USBH_HandleControl+0x2ca>

  default:
    break;
 8008090:	bf00      	nop
 8008092:	e008      	b.n	80080a6 <USBH_HandleControl+0x2ca>
    break;
 8008094:	bf00      	nop
 8008096:	e006      	b.n	80080a6 <USBH_HandleControl+0x2ca>
    break;
 8008098:	bf00      	nop
 800809a:	e004      	b.n	80080a6 <USBH_HandleControl+0x2ca>
    break;
 800809c:	bf00      	nop
 800809e:	e002      	b.n	80080a6 <USBH_HandleControl+0x2ca>
    break;
 80080a0:	bf00      	nop
 80080a2:	e000      	b.n	80080a6 <USBH_HandleControl+0x2ca>
    break;
 80080a4:	bf00      	nop
  }
  return status;
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af04      	add	r7, sp, #16
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	4613      	mov	r3, r2
 80080bc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80080be:	79f9      	ldrb	r1, [r7, #7]
 80080c0:	2300      	movs	r3, #0
 80080c2:	9303      	str	r3, [sp, #12]
 80080c4:	2308      	movs	r3, #8
 80080c6:	9302      	str	r3, [sp, #8]
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	9301      	str	r3, [sp, #4]
 80080cc:	2300      	movs	r3, #0
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	2300      	movs	r3, #0
 80080d2:	2200      	movs	r2, #0
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 fb3e 	bl	8008756 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af04      	add	r7, sp, #16
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	4611      	mov	r1, r2
 80080f0:	461a      	mov	r2, r3
 80080f2:	460b      	mov	r3, r1
 80080f4:	80fb      	strh	r3, [r7, #6]
 80080f6:	4613      	mov	r3, r2
 80080f8:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008108:	7979      	ldrb	r1, [r7, #5]
 800810a:	7e3b      	ldrb	r3, [r7, #24]
 800810c:	9303      	str	r3, [sp, #12]
 800810e:	88fb      	ldrh	r3, [r7, #6]
 8008110:	9302      	str	r3, [sp, #8]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	2301      	movs	r3, #1
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	2300      	movs	r3, #0
 800811c:	2200      	movs	r2, #0
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 fb19 	bl	8008756 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b088      	sub	sp, #32
 8008132:	af04      	add	r7, sp, #16
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	60b9      	str	r1, [r7, #8]
 8008138:	4611      	mov	r1, r2
 800813a:	461a      	mov	r2, r3
 800813c:	460b      	mov	r3, r1
 800813e:	80fb      	strh	r3, [r7, #6]
 8008140:	4613      	mov	r3, r2
 8008142:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008144:	7979      	ldrb	r1, [r7, #5]
 8008146:	2300      	movs	r3, #0
 8008148:	9303      	str	r3, [sp, #12]
 800814a:	88fb      	ldrh	r3, [r7, #6]
 800814c:	9302      	str	r3, [sp, #8]
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	9301      	str	r3, [sp, #4]
 8008152:	2301      	movs	r3, #1
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	2300      	movs	r3, #0
 8008158:	2201      	movs	r2, #1
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 fafb 	bl	8008756 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008160:	2300      	movs	r3, #0

}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b088      	sub	sp, #32
 800816e:	af04      	add	r7, sp, #16
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	4611      	mov	r1, r2
 8008176:	461a      	mov	r2, r3
 8008178:	460b      	mov	r3, r1
 800817a:	80fb      	strh	r3, [r7, #6]
 800817c:	4613      	mov	r3, r2
 800817e:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800818e:	7979      	ldrb	r1, [r7, #5]
 8008190:	7e3b      	ldrb	r3, [r7, #24]
 8008192:	9303      	str	r3, [sp, #12]
 8008194:	88fb      	ldrh	r3, [r7, #6]
 8008196:	9302      	str	r3, [sp, #8]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	9301      	str	r3, [sp, #4]
 800819c:	2301      	movs	r3, #1
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	2302      	movs	r3, #2
 80081a2:	2200      	movs	r2, #0
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 fad6 	bl	8008756 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af04      	add	r7, sp, #16
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	4611      	mov	r1, r2
 80081c0:	461a      	mov	r2, r3
 80081c2:	460b      	mov	r3, r1
 80081c4:	80fb      	strh	r3, [r7, #6]
 80081c6:	4613      	mov	r3, r2
 80081c8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80081ca:	7979      	ldrb	r1, [r7, #5]
 80081cc:	2300      	movs	r3, #0
 80081ce:	9303      	str	r3, [sp, #12]
 80081d0:	88fb      	ldrh	r3, [r7, #6]
 80081d2:	9302      	str	r3, [sp, #8]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	9301      	str	r3, [sp, #4]
 80081d8:	2301      	movs	r3, #1
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	2302      	movs	r3, #2
 80081de:	2201      	movs	r2, #1
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 fab8 	bl	8008756 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af04      	add	r7, sp, #16
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	4608      	mov	r0, r1
 80081fa:	4611      	mov	r1, r2
 80081fc:	461a      	mov	r2, r3
 80081fe:	4603      	mov	r3, r0
 8008200:	70fb      	strb	r3, [r7, #3]
 8008202:	460b      	mov	r3, r1
 8008204:	70bb      	strb	r3, [r7, #2]
 8008206:	4613      	mov	r3, r2
 8008208:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800820a:	7878      	ldrb	r0, [r7, #1]
 800820c:	78ba      	ldrb	r2, [r7, #2]
 800820e:	78f9      	ldrb	r1, [r7, #3]
 8008210:	8b3b      	ldrh	r3, [r7, #24]
 8008212:	9302      	str	r3, [sp, #8]
 8008214:	7d3b      	ldrb	r3, [r7, #20]
 8008216:	9301      	str	r3, [sp, #4]
 8008218:	7c3b      	ldrb	r3, [r7, #16]
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	4603      	mov	r3, r0
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fa4b 	bl	80086ba <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8008224:	2300      	movs	r3, #0

}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b082      	sub	sp, #8
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	460b      	mov	r3, r1
 8008238:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fa6a 	bl	8008718 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008244:	2300      	movs	r3, #0

}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	460b      	mov	r3, r1
 8008258:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f831 	bl	80082c2 <USBH_GetFreePipe>
 8008260:	4603      	mov	r3, r0
 8008262:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008264:	89fb      	ldrh	r3, [r7, #14]
 8008266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800826a:	4293      	cmp	r3, r2
 800826c:	d007      	beq.n	800827e <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800826e:	78fb      	ldrb	r3, [r7, #3]
 8008270:	89fa      	ldrh	r2, [r7, #14]
 8008272:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	32e0      	adds	r2, #224	; 0xe0
 800827a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800827e:	89fb      	ldrh	r3, [r7, #14]
 8008280:	b2db      	uxtb	r3, r3
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800828a:	b480      	push	{r7}
 800828c:	b083      	sub	sp, #12
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8008296:	78fb      	ldrb	r3, [r7, #3]
 8008298:	2b0a      	cmp	r3, #10
 800829a:	d80b      	bhi.n	80082b4 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800829c:	78fa      	ldrb	r2, [r7, #3]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	32e0      	adds	r2, #224	; 0xe0
 80082a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a6:	78fa      	ldrb	r2, [r7, #3]
 80082a8:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	32e0      	adds	r2, #224	; 0xe0
 80082b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b085      	sub	sp, #20
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80082ce:	2300      	movs	r3, #0
 80082d0:	73fb      	strb	r3, [r7, #15]
 80082d2:	e00e      	b.n	80082f2 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80082d4:	7bfa      	ldrb	r2, [r7, #15]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	32e0      	adds	r2, #224	; 0xe0
 80082da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d102      	bne.n	80082ec <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	e007      	b.n	80082fc <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	3301      	adds	r3, #1
 80082f0:	73fb      	strb	r3, [r7, #15]
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	2b0a      	cmp	r3, #10
 80082f6:	d9ed      	bls.n	80082d4 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 80082f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800830c:	2201      	movs	r2, #1
 800830e:	490e      	ldr	r1, [pc, #56]	; (8008348 <MX_USB_HOST_Init+0x40>)
 8008310:	480e      	ldr	r0, [pc, #56]	; (800834c <MX_USB_HOST_Init+0x44>)
 8008312:	f7fe fdbb 	bl	8006e8c <USBH_Init>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800831c:	f7f8 fc0c 	bl	8000b38 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008320:	490b      	ldr	r1, [pc, #44]	; (8008350 <MX_USB_HOST_Init+0x48>)
 8008322:	480a      	ldr	r0, [pc, #40]	; (800834c <MX_USB_HOST_Init+0x44>)
 8008324:	f7fe fe25 	bl	8006f72 <USBH_RegisterClass>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800832e:	f7f8 fc03 	bl	8000b38 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008332:	4806      	ldr	r0, [pc, #24]	; (800834c <MX_USB_HOST_Init+0x44>)
 8008334:	f7fe feaa 	bl	800708c <USBH_Start>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800833e:	f7f8 fbfb 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008342:	bf00      	nop
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	08008369 	.word	0x08008369
 800834c:	20000240 	.word	0x20000240
 8008350:	2000000c 	.word	0x2000000c

08008354 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008358:	4802      	ldr	r0, [pc, #8]	; (8008364 <MX_USB_HOST_Process+0x10>)
 800835a:	f7fe fea7 	bl	80070ac <USBH_Process>
}
 800835e:	bf00      	nop
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20000240 	.word	0x20000240

08008368 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	460b      	mov	r3, r1
 8008372:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008374:	78fb      	ldrb	r3, [r7, #3]
 8008376:	3b01      	subs	r3, #1
 8008378:	2b04      	cmp	r3, #4
 800837a:	d819      	bhi.n	80083b0 <USBH_UserProcess+0x48>
 800837c:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <USBH_UserProcess+0x1c>)
 800837e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008382:	bf00      	nop
 8008384:	080083b1 	.word	0x080083b1
 8008388:	080083a1 	.word	0x080083a1
 800838c:	080083b1 	.word	0x080083b1
 8008390:	080083a9 	.word	0x080083a9
 8008394:	08008399 	.word	0x08008399
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008398:	4b09      	ldr	r3, [pc, #36]	; (80083c0 <USBH_UserProcess+0x58>)
 800839a:	2203      	movs	r2, #3
 800839c:	701a      	strb	r2, [r3, #0]
  break;
 800839e:	e008      	b.n	80083b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80083a0:	4b07      	ldr	r3, [pc, #28]	; (80083c0 <USBH_UserProcess+0x58>)
 80083a2:	2202      	movs	r2, #2
 80083a4:	701a      	strb	r2, [r3, #0]
  break;
 80083a6:	e004      	b.n	80083b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80083a8:	4b05      	ldr	r3, [pc, #20]	; (80083c0 <USBH_UserProcess+0x58>)
 80083aa:	2201      	movs	r2, #1
 80083ac:	701a      	strb	r2, [r3, #0]
  break;
 80083ae:	e000      	b.n	80083b2 <USBH_UserProcess+0x4a>

  default:
  break;
 80083b0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80083b2:	bf00      	nop
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	200000b4 	.word	0x200000b4

080083c4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b08a      	sub	sp, #40	; 0x28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083cc:	f107 0314 	add.w	r3, r7, #20
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	605a      	str	r2, [r3, #4]
 80083d6:	609a      	str	r2, [r3, #8]
 80083d8:	60da      	str	r2, [r3, #12]
 80083da:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083e4:	d147      	bne.n	8008476 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083e6:	2300      	movs	r3, #0
 80083e8:	613b      	str	r3, [r7, #16]
 80083ea:	4b25      	ldr	r3, [pc, #148]	; (8008480 <HAL_HCD_MspInit+0xbc>)
 80083ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ee:	4a24      	ldr	r2, [pc, #144]	; (8008480 <HAL_HCD_MspInit+0xbc>)
 80083f0:	f043 0301 	orr.w	r3, r3, #1
 80083f4:	6313      	str	r3, [r2, #48]	; 0x30
 80083f6:	4b22      	ldr	r3, [pc, #136]	; (8008480 <HAL_HCD_MspInit+0xbc>)
 80083f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	613b      	str	r3, [r7, #16]
 8008400:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008408:	2300      	movs	r3, #0
 800840a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800840c:	2300      	movs	r3, #0
 800840e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008410:	f107 0314 	add.w	r3, r7, #20
 8008414:	4619      	mov	r1, r3
 8008416:	481b      	ldr	r0, [pc, #108]	; (8008484 <HAL_HCD_MspInit+0xc0>)
 8008418:	f7f9 fad6 	bl	80019c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800841c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008422:	2302      	movs	r3, #2
 8008424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008426:	2300      	movs	r3, #0
 8008428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800842a:	2300      	movs	r3, #0
 800842c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800842e:	230a      	movs	r3, #10
 8008430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008432:	f107 0314 	add.w	r3, r7, #20
 8008436:	4619      	mov	r1, r3
 8008438:	4812      	ldr	r0, [pc, #72]	; (8008484 <HAL_HCD_MspInit+0xc0>)
 800843a:	f7f9 fac5 	bl	80019c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800843e:	4b10      	ldr	r3, [pc, #64]	; (8008480 <HAL_HCD_MspInit+0xbc>)
 8008440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008442:	4a0f      	ldr	r2, [pc, #60]	; (8008480 <HAL_HCD_MspInit+0xbc>)
 8008444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008448:	6353      	str	r3, [r2, #52]	; 0x34
 800844a:	2300      	movs	r3, #0
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	4b0c      	ldr	r3, [pc, #48]	; (8008480 <HAL_HCD_MspInit+0xbc>)
 8008450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008452:	4a0b      	ldr	r2, [pc, #44]	; (8008480 <HAL_HCD_MspInit+0xbc>)
 8008454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008458:	6453      	str	r3, [r2, #68]	; 0x44
 800845a:	4b09      	ldr	r3, [pc, #36]	; (8008480 <HAL_HCD_MspInit+0xbc>)
 800845c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800845e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008462:	60fb      	str	r3, [r7, #12]
 8008464:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008466:	2200      	movs	r2, #0
 8008468:	2100      	movs	r1, #0
 800846a:	2043      	movs	r0, #67	; 0x43
 800846c:	f7f9 fa75 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008470:	2043      	movs	r0, #67	; 0x43
 8008472:	f7f9 fa8e 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008476:	bf00      	nop
 8008478:	3728      	adds	r7, #40	; 0x28
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	40023800 	.word	0x40023800
 8008484:	40020000 	.word	0x40020000

08008488 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008496:	4618      	mov	r0, r3
 8008498:	f7ff f8b9 	bl	800760e <USBH_LL_IncTimer>
}
 800849c:	bf00      	nop
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7ff f8fe 	bl	80076b4 <USBH_LL_Connect>
}
 80084b8:	bf00      	nop
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7ff f916 	bl	8007700 <USBH_LL_Disconnect>
}
 80084d4:	bf00      	nop
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	70fb      	strb	r3, [r7, #3]
 80084e8:	4613      	mov	r3, r2
 80084ea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008506:	4618      	mov	r0, r3
 8008508:	f7ff f8ab 	bl	8007662 <USBH_LL_PortEnabled>
} 
 800850c:	bf00      	nop
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff f8ab 	bl	800767e <USBH_LL_PortDisabled>
} 
 8008528:	bf00      	nop
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800853e:	2b01      	cmp	r3, #1
 8008540:	d12a      	bne.n	8008598 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008542:	4a18      	ldr	r2, [pc, #96]	; (80085a4 <USBH_LL_Init+0x74>)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a15      	ldr	r2, [pc, #84]	; (80085a4 <USBH_LL_Init+0x74>)
 800854e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008552:	4b14      	ldr	r3, [pc, #80]	; (80085a4 <USBH_LL_Init+0x74>)
 8008554:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008558:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800855a:	4b12      	ldr	r3, [pc, #72]	; (80085a4 <USBH_LL_Init+0x74>)
 800855c:	2208      	movs	r2, #8
 800855e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008560:	4b10      	ldr	r3, [pc, #64]	; (80085a4 <USBH_LL_Init+0x74>)
 8008562:	2201      	movs	r2, #1
 8008564:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008566:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <USBH_LL_Init+0x74>)
 8008568:	2200      	movs	r2, #0
 800856a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800856c:	4b0d      	ldr	r3, [pc, #52]	; (80085a4 <USBH_LL_Init+0x74>)
 800856e:	2202      	movs	r2, #2
 8008570:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008572:	4b0c      	ldr	r3, [pc, #48]	; (80085a4 <USBH_LL_Init+0x74>)
 8008574:	2200      	movs	r2, #0
 8008576:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008578:	480a      	ldr	r0, [pc, #40]	; (80085a4 <USBH_LL_Init+0x74>)
 800857a:	f7f9 fbd8 	bl	8001d2e <HAL_HCD_Init>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008584:	f7f8 fad8 	bl	8000b38 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008588:	4806      	ldr	r0, [pc, #24]	; (80085a4 <USBH_LL_Init+0x74>)
 800858a:	f7f9 ffd3 	bl	8002534 <HAL_HCD_GetCurrentFrame>
 800858e:	4603      	mov	r3, r0
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff f82c 	bl	80075f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	2000060c 	.word	0x2000060c

080085a8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085be:	4618      	mov	r0, r3
 80085c0:	f7f9 ff40 	bl	8002444 <HAL_HCD_Start>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 f95c 	bl	8008888 <USBH_Get_USB_Status>
 80085d0:	4603      	mov	r3, r0
 80085d2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7f9 ff48 	bl	800248a <HAL_HCD_Stop>
 80085fa:	4603      	mov	r3, r0
 80085fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	4618      	mov	r0, r3
 8008602:	f000 f941 	bl	8008888 <USBH_Get_USB_Status>
 8008606:	4603      	mov	r3, r0
 8008608:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800860a:	7bbb      	ldrb	r3, [r7, #14]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800861c:	2301      	movs	r3, #1
 800861e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008626:	4618      	mov	r0, r3
 8008628:	f7f9 ff92 	bl	8002550 <HAL_HCD_GetCurrentSpeed>
 800862c:	4603      	mov	r3, r0
 800862e:	2b01      	cmp	r3, #1
 8008630:	d007      	beq.n	8008642 <USBH_LL_GetSpeed+0x2e>
 8008632:	2b01      	cmp	r3, #1
 8008634:	d302      	bcc.n	800863c <USBH_LL_GetSpeed+0x28>
 8008636:	2b02      	cmp	r3, #2
 8008638:	d006      	beq.n	8008648 <USBH_LL_GetSpeed+0x34>
 800863a:	e008      	b.n	800864e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800863c:	2300      	movs	r3, #0
 800863e:	73fb      	strb	r3, [r7, #15]
    break;
 8008640:	e008      	b.n	8008654 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008642:	2301      	movs	r3, #1
 8008644:	73fb      	strb	r3, [r7, #15]
    break;
 8008646:	e005      	b.n	8008654 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008648:	2302      	movs	r3, #2
 800864a:	73fb      	strb	r3, [r7, #15]
    break;
 800864c:	e002      	b.n	8008654 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800864e:	2301      	movs	r3, #1
 8008650:	73fb      	strb	r3, [r7, #15]
    break;
 8008652:	bf00      	nop
  }
  return  speed;
 8008654:	7bfb      	ldrb	r3, [r7, #15]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008674:	4618      	mov	r0, r3
 8008676:	f7f9 ff25 	bl	80024c4 <HAL_HCD_ResetPort>
 800867a:	4603      	mov	r3, r0
 800867c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	4618      	mov	r0, r3
 8008682:	f000 f901 	bl	8008888 <USBH_Get_USB_Status>
 8008686:	4603      	mov	r3, r0
 8008688:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800868a:	7bbb      	ldrb	r3, [r7, #14]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	460b      	mov	r3, r1
 800869e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086a6:	78fa      	ldrb	r2, [r7, #3]
 80086a8:	4611      	mov	r1, r2
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7f9 ff2d 	bl	800250a <HAL_HCD_HC_GetXferCount>
 80086b0:	4603      	mov	r3, r0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80086ba:	b590      	push	{r4, r7, lr}
 80086bc:	b089      	sub	sp, #36	; 0x24
 80086be:	af04      	add	r7, sp, #16
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	4608      	mov	r0, r1
 80086c4:	4611      	mov	r1, r2
 80086c6:	461a      	mov	r2, r3
 80086c8:	4603      	mov	r3, r0
 80086ca:	70fb      	strb	r3, [r7, #3]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70bb      	strb	r3, [r7, #2]
 80086d0:	4613      	mov	r3, r2
 80086d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086d4:	2300      	movs	r3, #0
 80086d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80086e2:	787c      	ldrb	r4, [r7, #1]
 80086e4:	78ba      	ldrb	r2, [r7, #2]
 80086e6:	78f9      	ldrb	r1, [r7, #3]
 80086e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086ea:	9302      	str	r3, [sp, #8]
 80086ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80086f0:	9301      	str	r3, [sp, #4]
 80086f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	4623      	mov	r3, r4
 80086fa:	f7f9 fb7a 	bl	8001df2 <HAL_HCD_HC_Init>
 80086fe:	4603      	mov	r3, r0
 8008700:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	4618      	mov	r0, r3
 8008706:	f000 f8bf 	bl	8008888 <USBH_Get_USB_Status>
 800870a:	4603      	mov	r3, r0
 800870c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800870e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	bd90      	pop	{r4, r7, pc}

08008718 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008732:	78fa      	ldrb	r2, [r7, #3]
 8008734:	4611      	mov	r1, r2
 8008736:	4618      	mov	r0, r3
 8008738:	f7f9 fbf3 	bl	8001f22 <HAL_HCD_HC_Halt>
 800873c:	4603      	mov	r3, r0
 800873e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008740:	7bfb      	ldrb	r3, [r7, #15]
 8008742:	4618      	mov	r0, r3
 8008744:	f000 f8a0 	bl	8008888 <USBH_Get_USB_Status>
 8008748:	4603      	mov	r3, r0
 800874a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800874c:	7bbb      	ldrb	r3, [r7, #14]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008756:	b590      	push	{r4, r7, lr}
 8008758:	b089      	sub	sp, #36	; 0x24
 800875a:	af04      	add	r7, sp, #16
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	4608      	mov	r0, r1
 8008760:	4611      	mov	r1, r2
 8008762:	461a      	mov	r2, r3
 8008764:	4603      	mov	r3, r0
 8008766:	70fb      	strb	r3, [r7, #3]
 8008768:	460b      	mov	r3, r1
 800876a:	70bb      	strb	r3, [r7, #2]
 800876c:	4613      	mov	r3, r2
 800876e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800877e:	787c      	ldrb	r4, [r7, #1]
 8008780:	78ba      	ldrb	r2, [r7, #2]
 8008782:	78f9      	ldrb	r1, [r7, #3]
 8008784:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008788:	9303      	str	r3, [sp, #12]
 800878a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800878c:	9302      	str	r3, [sp, #8]
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	4623      	mov	r3, r4
 800879a:	f7f9 fbe5 	bl	8001f68 <HAL_HCD_HC_SubmitRequest>
 800879e:	4603      	mov	r3, r0
 80087a0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f000 f86f 	bl	8008888 <USBH_Get_USB_Status>
 80087aa:	4603      	mov	r3, r0
 80087ac:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80087ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd90      	pop	{r4, r7, pc}

080087b8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087ca:	78fa      	ldrb	r2, [r7, #3]
 80087cc:	4611      	mov	r1, r2
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7f9 fe86 	bl	80024e0 <HAL_HCD_HC_GetURBState>
 80087d4:	4603      	mov	r3, r0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b082      	sub	sp, #8
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	460b      	mov	r3, r1
 80087e8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d103      	bne.n	80087fc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80087f4:	78fb      	ldrb	r3, [r7, #3]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 f872 	bl	80088e0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80087fc:	20c8      	movs	r0, #200	; 0xc8
 80087fe:	f7f8 fc79 	bl	80010f4 <HAL_Delay>
  return USBH_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	460b      	mov	r3, r1
 8008816:	70fb      	strb	r3, [r7, #3]
 8008818:	4613      	mov	r3, r2
 800881a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008822:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008824:	78fa      	ldrb	r2, [r7, #3]
 8008826:	68f9      	ldr	r1, [r7, #12]
 8008828:	4613      	mov	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	00db      	lsls	r3, r3, #3
 8008830:	440b      	add	r3, r1
 8008832:	333b      	adds	r3, #59	; 0x3b
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00a      	beq.n	8008850 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800883a:	78fa      	ldrb	r2, [r7, #3]
 800883c:	68f9      	ldr	r1, [r7, #12]
 800883e:	4613      	mov	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4413      	add	r3, r2
 8008844:	00db      	lsls	r3, r3, #3
 8008846:	440b      	add	r3, r1
 8008848:	3350      	adds	r3, #80	; 0x50
 800884a:	78ba      	ldrb	r2, [r7, #2]
 800884c:	701a      	strb	r2, [r3, #0]
 800884e:	e009      	b.n	8008864 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008850:	78fa      	ldrb	r2, [r7, #3]
 8008852:	68f9      	ldr	r1, [r7, #12]
 8008854:	4613      	mov	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	00db      	lsls	r3, r3, #3
 800885c:	440b      	add	r3, r1
 800885e:	3351      	adds	r3, #81	; 0x51
 8008860:	78ba      	ldrb	r2, [r7, #2]
 8008862:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7f8 fc3a 	bl	80010f4 <HAL_Delay>
}
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008896:	79fb      	ldrb	r3, [r7, #7]
 8008898:	2b03      	cmp	r3, #3
 800889a:	d817      	bhi.n	80088cc <USBH_Get_USB_Status+0x44>
 800889c:	a201      	add	r2, pc, #4	; (adr r2, 80088a4 <USBH_Get_USB_Status+0x1c>)
 800889e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a2:	bf00      	nop
 80088a4:	080088b5 	.word	0x080088b5
 80088a8:	080088bb 	.word	0x080088bb
 80088ac:	080088c1 	.word	0x080088c1
 80088b0:	080088c7 	.word	0x080088c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73fb      	strb	r3, [r7, #15]
    break;
 80088b8:	e00b      	b.n	80088d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80088ba:	2302      	movs	r3, #2
 80088bc:	73fb      	strb	r3, [r7, #15]
    break;
 80088be:	e008      	b.n	80088d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80088c0:	2301      	movs	r3, #1
 80088c2:	73fb      	strb	r3, [r7, #15]
    break;
 80088c4:	e005      	b.n	80088d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80088c6:	2302      	movs	r3, #2
 80088c8:	73fb      	strb	r3, [r7, #15]
    break;
 80088ca:	e002      	b.n	80088d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80088cc:	2302      	movs	r3, #2
 80088ce:	73fb      	strb	r3, [r7, #15]
    break;
 80088d0:	bf00      	nop
  }
  return usb_status;
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	4603      	mov	r3, r0
 80088e8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80088ee:	79fb      	ldrb	r3, [r7, #7]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d102      	bne.n	80088fa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80088f4:	2301      	movs	r3, #1
 80088f6:	73fb      	strb	r3, [r7, #15]
 80088f8:	e001      	b.n	80088fe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80088fa:	2300      	movs	r3, #0
 80088fc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	461a      	mov	r2, r3
 8008902:	2101      	movs	r1, #1
 8008904:	4803      	ldr	r0, [pc, #12]	; (8008914 <MX_DriverVbusFS+0x34>)
 8008906:	f7f9 f9f9 	bl	8001cfc <HAL_GPIO_WritePin>
}
 800890a:	bf00      	nop
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	40020800 	.word	0x40020800

08008918 <__errno>:
 8008918:	4b01      	ldr	r3, [pc, #4]	; (8008920 <__errno+0x8>)
 800891a:	6818      	ldr	r0, [r3, #0]
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	2000002c 	.word	0x2000002c

08008924 <__libc_init_array>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	4e0d      	ldr	r6, [pc, #52]	; (800895c <__libc_init_array+0x38>)
 8008928:	4c0d      	ldr	r4, [pc, #52]	; (8008960 <__libc_init_array+0x3c>)
 800892a:	1ba4      	subs	r4, r4, r6
 800892c:	10a4      	asrs	r4, r4, #2
 800892e:	2500      	movs	r5, #0
 8008930:	42a5      	cmp	r5, r4
 8008932:	d109      	bne.n	8008948 <__libc_init_array+0x24>
 8008934:	4e0b      	ldr	r6, [pc, #44]	; (8008964 <__libc_init_array+0x40>)
 8008936:	4c0c      	ldr	r4, [pc, #48]	; (8008968 <__libc_init_array+0x44>)
 8008938:	f000 f8ea 	bl	8008b10 <_init>
 800893c:	1ba4      	subs	r4, r4, r6
 800893e:	10a4      	asrs	r4, r4, #2
 8008940:	2500      	movs	r5, #0
 8008942:	42a5      	cmp	r5, r4
 8008944:	d105      	bne.n	8008952 <__libc_init_array+0x2e>
 8008946:	bd70      	pop	{r4, r5, r6, pc}
 8008948:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800894c:	4798      	blx	r3
 800894e:	3501      	adds	r5, #1
 8008950:	e7ee      	b.n	8008930 <__libc_init_array+0xc>
 8008952:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008956:	4798      	blx	r3
 8008958:	3501      	adds	r5, #1
 800895a:	e7f2      	b.n	8008942 <__libc_init_array+0x1e>
 800895c:	08008b4c 	.word	0x08008b4c
 8008960:	08008b4c 	.word	0x08008b4c
 8008964:	08008b4c 	.word	0x08008b4c
 8008968:	08008b50 	.word	0x08008b50

0800896c <malloc>:
 800896c:	4b02      	ldr	r3, [pc, #8]	; (8008978 <malloc+0xc>)
 800896e:	4601      	mov	r1, r0
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	f000 b861 	b.w	8008a38 <_malloc_r>
 8008976:	bf00      	nop
 8008978:	2000002c 	.word	0x2000002c

0800897c <free>:
 800897c:	4b02      	ldr	r3, [pc, #8]	; (8008988 <free+0xc>)
 800897e:	4601      	mov	r1, r0
 8008980:	6818      	ldr	r0, [r3, #0]
 8008982:	f000 b80b 	b.w	800899c <_free_r>
 8008986:	bf00      	nop
 8008988:	2000002c 	.word	0x2000002c

0800898c <memset>:
 800898c:	4402      	add	r2, r0
 800898e:	4603      	mov	r3, r0
 8008990:	4293      	cmp	r3, r2
 8008992:	d100      	bne.n	8008996 <memset+0xa>
 8008994:	4770      	bx	lr
 8008996:	f803 1b01 	strb.w	r1, [r3], #1
 800899a:	e7f9      	b.n	8008990 <memset+0x4>

0800899c <_free_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4605      	mov	r5, r0
 80089a0:	2900      	cmp	r1, #0
 80089a2:	d045      	beq.n	8008a30 <_free_r+0x94>
 80089a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089a8:	1f0c      	subs	r4, r1, #4
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	bfb8      	it	lt
 80089ae:	18e4      	addlt	r4, r4, r3
 80089b0:	f000 f8ac 	bl	8008b0c <__malloc_lock>
 80089b4:	4a1f      	ldr	r2, [pc, #124]	; (8008a34 <_free_r+0x98>)
 80089b6:	6813      	ldr	r3, [r2, #0]
 80089b8:	4610      	mov	r0, r2
 80089ba:	b933      	cbnz	r3, 80089ca <_free_r+0x2e>
 80089bc:	6063      	str	r3, [r4, #4]
 80089be:	6014      	str	r4, [r2, #0]
 80089c0:	4628      	mov	r0, r5
 80089c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089c6:	f000 b8a2 	b.w	8008b0e <__malloc_unlock>
 80089ca:	42a3      	cmp	r3, r4
 80089cc:	d90c      	bls.n	80089e8 <_free_r+0x4c>
 80089ce:	6821      	ldr	r1, [r4, #0]
 80089d0:	1862      	adds	r2, r4, r1
 80089d2:	4293      	cmp	r3, r2
 80089d4:	bf04      	itt	eq
 80089d6:	681a      	ldreq	r2, [r3, #0]
 80089d8:	685b      	ldreq	r3, [r3, #4]
 80089da:	6063      	str	r3, [r4, #4]
 80089dc:	bf04      	itt	eq
 80089de:	1852      	addeq	r2, r2, r1
 80089e0:	6022      	streq	r2, [r4, #0]
 80089e2:	6004      	str	r4, [r0, #0]
 80089e4:	e7ec      	b.n	80089c0 <_free_r+0x24>
 80089e6:	4613      	mov	r3, r2
 80089e8:	685a      	ldr	r2, [r3, #4]
 80089ea:	b10a      	cbz	r2, 80089f0 <_free_r+0x54>
 80089ec:	42a2      	cmp	r2, r4
 80089ee:	d9fa      	bls.n	80089e6 <_free_r+0x4a>
 80089f0:	6819      	ldr	r1, [r3, #0]
 80089f2:	1858      	adds	r0, r3, r1
 80089f4:	42a0      	cmp	r0, r4
 80089f6:	d10b      	bne.n	8008a10 <_free_r+0x74>
 80089f8:	6820      	ldr	r0, [r4, #0]
 80089fa:	4401      	add	r1, r0
 80089fc:	1858      	adds	r0, r3, r1
 80089fe:	4282      	cmp	r2, r0
 8008a00:	6019      	str	r1, [r3, #0]
 8008a02:	d1dd      	bne.n	80089c0 <_free_r+0x24>
 8008a04:	6810      	ldr	r0, [r2, #0]
 8008a06:	6852      	ldr	r2, [r2, #4]
 8008a08:	605a      	str	r2, [r3, #4]
 8008a0a:	4401      	add	r1, r0
 8008a0c:	6019      	str	r1, [r3, #0]
 8008a0e:	e7d7      	b.n	80089c0 <_free_r+0x24>
 8008a10:	d902      	bls.n	8008a18 <_free_r+0x7c>
 8008a12:	230c      	movs	r3, #12
 8008a14:	602b      	str	r3, [r5, #0]
 8008a16:	e7d3      	b.n	80089c0 <_free_r+0x24>
 8008a18:	6820      	ldr	r0, [r4, #0]
 8008a1a:	1821      	adds	r1, r4, r0
 8008a1c:	428a      	cmp	r2, r1
 8008a1e:	bf04      	itt	eq
 8008a20:	6811      	ldreq	r1, [r2, #0]
 8008a22:	6852      	ldreq	r2, [r2, #4]
 8008a24:	6062      	str	r2, [r4, #4]
 8008a26:	bf04      	itt	eq
 8008a28:	1809      	addeq	r1, r1, r0
 8008a2a:	6021      	streq	r1, [r4, #0]
 8008a2c:	605c      	str	r4, [r3, #4]
 8008a2e:	e7c7      	b.n	80089c0 <_free_r+0x24>
 8008a30:	bd38      	pop	{r3, r4, r5, pc}
 8008a32:	bf00      	nop
 8008a34:	200000b8 	.word	0x200000b8

08008a38 <_malloc_r>:
 8008a38:	b570      	push	{r4, r5, r6, lr}
 8008a3a:	1ccd      	adds	r5, r1, #3
 8008a3c:	f025 0503 	bic.w	r5, r5, #3
 8008a40:	3508      	adds	r5, #8
 8008a42:	2d0c      	cmp	r5, #12
 8008a44:	bf38      	it	cc
 8008a46:	250c      	movcc	r5, #12
 8008a48:	2d00      	cmp	r5, #0
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	db01      	blt.n	8008a52 <_malloc_r+0x1a>
 8008a4e:	42a9      	cmp	r1, r5
 8008a50:	d903      	bls.n	8008a5a <_malloc_r+0x22>
 8008a52:	230c      	movs	r3, #12
 8008a54:	6033      	str	r3, [r6, #0]
 8008a56:	2000      	movs	r0, #0
 8008a58:	bd70      	pop	{r4, r5, r6, pc}
 8008a5a:	f000 f857 	bl	8008b0c <__malloc_lock>
 8008a5e:	4a21      	ldr	r2, [pc, #132]	; (8008ae4 <_malloc_r+0xac>)
 8008a60:	6814      	ldr	r4, [r2, #0]
 8008a62:	4621      	mov	r1, r4
 8008a64:	b991      	cbnz	r1, 8008a8c <_malloc_r+0x54>
 8008a66:	4c20      	ldr	r4, [pc, #128]	; (8008ae8 <_malloc_r+0xb0>)
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	b91b      	cbnz	r3, 8008a74 <_malloc_r+0x3c>
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f000 f83d 	bl	8008aec <_sbrk_r>
 8008a72:	6020      	str	r0, [r4, #0]
 8008a74:	4629      	mov	r1, r5
 8008a76:	4630      	mov	r0, r6
 8008a78:	f000 f838 	bl	8008aec <_sbrk_r>
 8008a7c:	1c43      	adds	r3, r0, #1
 8008a7e:	d124      	bne.n	8008aca <_malloc_r+0x92>
 8008a80:	230c      	movs	r3, #12
 8008a82:	6033      	str	r3, [r6, #0]
 8008a84:	4630      	mov	r0, r6
 8008a86:	f000 f842 	bl	8008b0e <__malloc_unlock>
 8008a8a:	e7e4      	b.n	8008a56 <_malloc_r+0x1e>
 8008a8c:	680b      	ldr	r3, [r1, #0]
 8008a8e:	1b5b      	subs	r3, r3, r5
 8008a90:	d418      	bmi.n	8008ac4 <_malloc_r+0x8c>
 8008a92:	2b0b      	cmp	r3, #11
 8008a94:	d90f      	bls.n	8008ab6 <_malloc_r+0x7e>
 8008a96:	600b      	str	r3, [r1, #0]
 8008a98:	50cd      	str	r5, [r1, r3]
 8008a9a:	18cc      	adds	r4, r1, r3
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f000 f836 	bl	8008b0e <__malloc_unlock>
 8008aa2:	f104 000b 	add.w	r0, r4, #11
 8008aa6:	1d23      	adds	r3, r4, #4
 8008aa8:	f020 0007 	bic.w	r0, r0, #7
 8008aac:	1ac3      	subs	r3, r0, r3
 8008aae:	d0d3      	beq.n	8008a58 <_malloc_r+0x20>
 8008ab0:	425a      	negs	r2, r3
 8008ab2:	50e2      	str	r2, [r4, r3]
 8008ab4:	e7d0      	b.n	8008a58 <_malloc_r+0x20>
 8008ab6:	428c      	cmp	r4, r1
 8008ab8:	684b      	ldr	r3, [r1, #4]
 8008aba:	bf16      	itet	ne
 8008abc:	6063      	strne	r3, [r4, #4]
 8008abe:	6013      	streq	r3, [r2, #0]
 8008ac0:	460c      	movne	r4, r1
 8008ac2:	e7eb      	b.n	8008a9c <_malloc_r+0x64>
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	6849      	ldr	r1, [r1, #4]
 8008ac8:	e7cc      	b.n	8008a64 <_malloc_r+0x2c>
 8008aca:	1cc4      	adds	r4, r0, #3
 8008acc:	f024 0403 	bic.w	r4, r4, #3
 8008ad0:	42a0      	cmp	r0, r4
 8008ad2:	d005      	beq.n	8008ae0 <_malloc_r+0xa8>
 8008ad4:	1a21      	subs	r1, r4, r0
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	f000 f808 	bl	8008aec <_sbrk_r>
 8008adc:	3001      	adds	r0, #1
 8008ade:	d0cf      	beq.n	8008a80 <_malloc_r+0x48>
 8008ae0:	6025      	str	r5, [r4, #0]
 8008ae2:	e7db      	b.n	8008a9c <_malloc_r+0x64>
 8008ae4:	200000b8 	.word	0x200000b8
 8008ae8:	200000bc 	.word	0x200000bc

08008aec <_sbrk_r>:
 8008aec:	b538      	push	{r3, r4, r5, lr}
 8008aee:	4c06      	ldr	r4, [pc, #24]	; (8008b08 <_sbrk_r+0x1c>)
 8008af0:	2300      	movs	r3, #0
 8008af2:	4605      	mov	r5, r0
 8008af4:	4608      	mov	r0, r1
 8008af6:	6023      	str	r3, [r4, #0]
 8008af8:	f7f8 fa1e 	bl	8000f38 <_sbrk>
 8008afc:	1c43      	adds	r3, r0, #1
 8008afe:	d102      	bne.n	8008b06 <_sbrk_r+0x1a>
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	b103      	cbz	r3, 8008b06 <_sbrk_r+0x1a>
 8008b04:	602b      	str	r3, [r5, #0]
 8008b06:	bd38      	pop	{r3, r4, r5, pc}
 8008b08:	200008d0 	.word	0x200008d0

08008b0c <__malloc_lock>:
 8008b0c:	4770      	bx	lr

08008b0e <__malloc_unlock>:
 8008b0e:	4770      	bx	lr

08008b10 <_init>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	bf00      	nop
 8008b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b16:	bc08      	pop	{r3}
 8008b18:	469e      	mov	lr, r3
 8008b1a:	4770      	bx	lr

08008b1c <_fini>:
 8008b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1e:	bf00      	nop
 8008b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b22:	bc08      	pop	{r3}
 8008b24:	469e      	mov	lr, r3
 8008b26:	4770      	bx	lr
