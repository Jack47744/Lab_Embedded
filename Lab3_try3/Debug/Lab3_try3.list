
Lab3_try3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800772c  0800772c  0001772c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007748  08007748  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007748  08007748  00017748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007750  08007750  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007750  08007750  00017750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007754  08007754  00017754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c0  20000090  080077e8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000850  080077e8  00020850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185ea  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003599  00000000  00000000  000386aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  0003bc48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  0003cd50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023871  00000000  00000000  0003dcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011310  00000000  00000000  00061561  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca6c2  00000000  00000000  00072871  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013cf33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047b8  00000000  00000000  0013cfb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007714 	.word	0x08007714

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007714 	.word	0x08007714

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_GPIO_EXTI_Callback>:
static void MX_I2S3_Init(void);
static void MX_SPI1_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
	//HAL_Delay(200);
	mode++;
 80004d2:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <HAL_GPIO_EXTI_Callback+0x28>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3301      	adds	r3, #1
 80004d8:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <HAL_GPIO_EXTI_Callback+0x28>)
 80004da:	6013      	str	r3, [r2, #0]
	HAL_Delay(200);
 80004dc:	20c8      	movs	r0, #200	; 0xc8
 80004de:	f000 fcb5 	bl	8000e4c <HAL_Delay>
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80004e2:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	6153      	str	r3, [r2, #20]
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	200000ac 	.word	0x200000ac
 80004f4:	40013c00 	.word	0x40013c00

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fc34 	bl	8000d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f840 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f954 	bl	80007b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000508:	f000 f8be 	bl	8000688 <MX_I2C1_Init>
  MX_I2S3_Init();
 800050c:	f000 f8ea 	bl	80006e4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000510:	f000 f918 	bl	8000744 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000514:	f006 fcfa 	bl	8006f0c <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000518:	f006 fd1e 	bl	8006f58 <MX_USB_HOST_Process>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800051c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000520:	4815      	ldr	r0, [pc, #84]	; (8000578 <main+0x80>)
 8000522:	f000 ff7a 	bl	800141a <HAL_GPIO_TogglePin>
    if(mode%3 == 0) HAL_Delay(200);
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <main+0x84>)
 8000528:	6819      	ldr	r1, [r3, #0]
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <main+0x88>)
 800052c:	fb83 3201 	smull	r3, r2, r3, r1
 8000530:	17cb      	asrs	r3, r1, #31
 8000532:	1ad2      	subs	r2, r2, r3
 8000534:	4613      	mov	r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	4413      	add	r3, r2
 800053a:	1aca      	subs	r2, r1, r3
 800053c:	2a00      	cmp	r2, #0
 800053e:	d103      	bne.n	8000548 <main+0x50>
 8000540:	20c8      	movs	r0, #200	; 0xc8
 8000542:	f000 fc83 	bl	8000e4c <HAL_Delay>
 8000546:	e7e7      	b.n	8000518 <main+0x20>
    else if(mode%3 == 1) HAL_Delay(1000);
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <main+0x84>)
 800054a:	6819      	ldr	r1, [r3, #0]
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <main+0x88>)
 800054e:	fb83 3201 	smull	r3, r2, r3, r1
 8000552:	17cb      	asrs	r3, r1, #31
 8000554:	1ad2      	subs	r2, r2, r3
 8000556:	4613      	mov	r3, r2
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	4413      	add	r3, r2
 800055c:	1aca      	subs	r2, r1, r3
 800055e:	2a01      	cmp	r2, #1
 8000560:	d104      	bne.n	800056c <main+0x74>
 8000562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000566:	f000 fc71 	bl	8000e4c <HAL_Delay>
 800056a:	e7d5      	b.n	8000518 <main+0x20>
    else HAL_Delay(5000);
 800056c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000570:	f000 fc6c 	bl	8000e4c <HAL_Delay>
    MX_USB_HOST_Process();
 8000574:	e7d0      	b.n	8000518 <main+0x20>
 8000576:	bf00      	nop
 8000578:	40020c00 	.word	0x40020c00
 800057c:	200000ac 	.word	0x200000ac
 8000580:	55555556 	.word	0x55555556

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b098      	sub	sp, #96	; 0x60
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f006 fffc 	bl	8007590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 031c 	add.w	r3, r7, #28
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	4b31      	ldr	r3, [pc, #196]	; (8000680 <SystemClock_Config+0xfc>)
 80005bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005be:	4a30      	ldr	r2, [pc, #192]	; (8000680 <SystemClock_Config+0xfc>)
 80005c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c4:	6413      	str	r3, [r2, #64]	; 0x40
 80005c6:	4b2e      	ldr	r3, [pc, #184]	; (8000680 <SystemClock_Config+0xfc>)
 80005c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <SystemClock_Config+0x100>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <SystemClock_Config+0x100>)
 80005dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e0:	6013      	str	r3, [r2, #0]
 80005e2:	4b28      	ldr	r3, [pc, #160]	; (8000684 <SystemClock_Config+0x100>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ee:	2301      	movs	r3, #1
 80005f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000600:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000602:	2308      	movs	r3, #8
 8000604:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000606:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800060a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000610:	2307      	movs	r3, #7
 8000612:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000618:	4618      	mov	r0, r3
 800061a:	f003 f971 	bl	8003900 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000624:	f000 f9cc 	bl	80009c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000634:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000638:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	2105      	movs	r1, #5
 8000646:	4618      	mov	r0, r3
 8000648:	f003 fbca 	bl	8003de0 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000652:	f000 f9b5 	bl	80009c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000656:	2301      	movs	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800065a:	23c0      	movs	r3, #192	; 0xc0
 800065c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800065e:	2302      	movs	r3, #2
 8000660:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	4618      	mov	r0, r3
 8000668:	f003 fd98 	bl	800419c <HAL_RCCEx_PeriphCLKConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000672:	f000 f9a5 	bl	80009c0 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3760      	adds	r7, #96	; 0x60
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <MX_I2C1_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C1_Init+0x50>)
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x58>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c6:	f002 fb43 	bl	8002d50 <HAL_I2C_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 f976 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000c4 	.word	0x200000c4
 80006dc:	40005400 	.word	0x40005400
 80006e0:	000186a0 	.word	0x000186a0

080006e4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_I2S3_Init+0x54>)
 80006ea:	4a14      	ldr	r2, [pc, #80]	; (800073c <MX_I2S3_Init+0x58>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2S3_Init+0x54>)
 80006f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_I2S3_Init+0x54>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_I2S3_Init+0x54>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_I2S3_Init+0x54>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_I2S3_Init+0x54>)
 800070c:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <MX_I2S3_Init+0x5c>)
 800070e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_I2S3_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_I2S3_Init+0x54>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_I2S3_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_I2S3_Init+0x54>)
 8000724:	f002 fc4c 	bl	8002fc0 <HAL_I2S_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800072e:	f000 f947 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000170 	.word	0x20000170
 800073c:	40003c00 	.word	0x40003c00
 8000740:	00017700 	.word	0x00017700

08000744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_SPI1_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_SPI1_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000796:	f003 fe3f 	bl	8004418 <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f90e 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000118 	.word	0x20000118
 80007ac:	40013000 	.word	0x40013000

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	4b75      	ldr	r3, [pc, #468]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a74      	ldr	r2, [pc, #464]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 80007d0:	f043 0310 	orr.w	r3, r3, #16
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b72      	ldr	r3, [pc, #456]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0310 	and.w	r3, r3, #16
 80007de:	61bb      	str	r3, [r7, #24]
 80007e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	4b6e      	ldr	r3, [pc, #440]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a6d      	ldr	r2, [pc, #436]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b6b      	ldr	r3, [pc, #428]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b67      	ldr	r3, [pc, #412]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a66      	ldr	r2, [pc, #408]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b64      	ldr	r3, [pc, #400]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b60      	ldr	r3, [pc, #384]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a5f      	ldr	r2, [pc, #380]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b5d      	ldr	r3, [pc, #372]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b59      	ldr	r3, [pc, #356]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a58      	ldr	r2, [pc, #352]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b56      	ldr	r3, [pc, #344]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b52      	ldr	r3, [pc, #328]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a51      	ldr	r2, [pc, #324]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b4f      	ldr	r3, [pc, #316]	; (80009a0 <MX_GPIO_Init+0x1f0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2108      	movs	r1, #8
 8000872:	484c      	ldr	r0, [pc, #304]	; (80009a4 <MX_GPIO_Init+0x1f4>)
 8000874:	f000 fdb8 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2101      	movs	r1, #1
 800087c:	484a      	ldr	r0, [pc, #296]	; (80009a8 <MX_GPIO_Init+0x1f8>)
 800087e:	f000 fdb3 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000882:	2200      	movs	r2, #0
 8000884:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000888:	4848      	ldr	r0, [pc, #288]	; (80009ac <MX_GPIO_Init+0x1fc>)
 800088a:	f000 fdad 	bl	80013e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800088e:	2308      	movs	r3, #8
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	483f      	ldr	r0, [pc, #252]	; (80009a4 <MX_GPIO_Init+0x1f4>)
 80008a6:	f000 fc05 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4839      	ldr	r0, [pc, #228]	; (80009a8 <MX_GPIO_Init+0x1f8>)
 80008c2:	f000 fbf7 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008c6:	2308      	movs	r3, #8
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d6:	2305      	movs	r3, #5
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4831      	ldr	r0, [pc, #196]	; (80009a8 <MX_GPIO_Init+0x1f8>)
 80008e2:	f000 fbe7 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ea:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <MX_GPIO_Init+0x200>)
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	482e      	ldr	r0, [pc, #184]	; (80009b4 <MX_GPIO_Init+0x204>)
 80008fa:	f000 fbdb 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008fe:	2304      	movs	r3, #4
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4829      	ldr	r0, [pc, #164]	; (80009b8 <MX_GPIO_Init+0x208>)
 8000912:	f000 fbcf 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000928:	2305      	movs	r3, #5
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4821      	ldr	r0, [pc, #132]	; (80009b8 <MX_GPIO_Init+0x208>)
 8000934:	f000 fbbe 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000938:	f24f 0310 	movw	r3, #61456	; 0xf010
 800093c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4816      	ldr	r0, [pc, #88]	; (80009ac <MX_GPIO_Init+0x1fc>)
 8000952:	f000 fbaf 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000956:	2320      	movs	r3, #32
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4810      	ldr	r0, [pc, #64]	; (80009ac <MX_GPIO_Init+0x1fc>)
 800096a:	f000 fba3 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800096e:	2302      	movs	r3, #2
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_GPIO_Init+0x20c>)
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4808      	ldr	r0, [pc, #32]	; (80009a4 <MX_GPIO_Init+0x1f4>)
 8000982:	f000 fb97 	bl	80010b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2102      	movs	r1, #2
 800098a:	2006      	movs	r0, #6
 800098c:	f000 fb5b 	bl	8001046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000990:	2006      	movs	r0, #6
 8000992:	f000 fb74 	bl	800107e <HAL_NVIC_EnableIRQ>

}
 8000996:	bf00      	nop
 8000998:	3730      	adds	r7, #48	; 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	10110000 	.word	0x10110000
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020400 	.word	0x40020400
 80009bc:	10120000 	.word	0x10120000

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	; 0x44
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_MspInit+0x4c>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000a0e:	2005      	movs	r0, #5
 8000a10:	f000 fb0e 	bl	8001030 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <HAL_I2C_MspInit+0x84>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d12c      	bne.n	8000a9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a5e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a64:	2312      	movs	r3, #18
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a70:	2304      	movs	r3, #4
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <HAL_I2C_MspInit+0x8c>)
 8000a7c:	f000 fb1a 	bl	80010b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	; 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020400 	.word	0x40020400

08000ab0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a28      	ldr	r2, [pc, #160]	; (8000b70 <HAL_I2S_MspInit+0xc0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d14a      	bne.n	8000b68 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a26      	ldr	r2, [pc, #152]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a1f      	ldr	r2, [pc, #124]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b26:	2310      	movs	r3, #16
 8000b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b36:	2306      	movs	r3, #6
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <HAL_I2S_MspInit+0xc8>)
 8000b42:	f000 fab7 	bl	80010b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b46:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b58:	2306      	movs	r3, #6
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4806      	ldr	r0, [pc, #24]	; (8000b7c <HAL_I2S_MspInit+0xcc>)
 8000b64:	f000 faa6 	bl	80010b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40003c00 	.word	0x40003c00
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40020800 	.word	0x40020800

08000b80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <HAL_SPI_MspInit+0x84>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d12b      	bne.n	8000bfa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bda:	23e0      	movs	r3, #224	; 0xe0
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bea:	2305      	movs	r3, #5
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <HAL_SPI_MspInit+0x8c>)
 8000bf6:	f000 fa5d 	bl	80010b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40013000 	.word	0x40013000
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 f8d2 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f000 fbed 	bl	8001450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <OTG_FS_IRQHandler+0x10>)
 8000c82:	f000 fe83 	bl	800198c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000588 	.word	0x20000588

08000c90 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <_sbrk+0x50>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <_sbrk+0x16>
		heap_end = &end;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <_sbrk+0x50>)
 8000ca2:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <_sbrk+0x54>)
 8000ca4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <_sbrk+0x50>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <_sbrk+0x50>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	466a      	mov	r2, sp
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d907      	bls.n	8000cca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000cba:	f006 fc2f 	bl	800751c <__errno>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	230c      	movs	r3, #12
 8000cc2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cc8:	e006      	b.n	8000cd8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <_sbrk+0x50>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a03      	ldr	r2, [pc, #12]	; (8000ce0 <_sbrk+0x50>)
 8000cd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200000b0 	.word	0x200000b0
 8000ce4:	20000850 	.word	0x20000850

08000ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <SystemInit+0x28>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf2:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <SystemInit+0x28>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <SystemInit+0x28>)
 8000cfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d02:	609a      	str	r2, [r3, #8]
#endif
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d1a:	e003      	b.n	8000d24 <LoopCopyDataInit>

08000d1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d22:	3104      	adds	r1, #4

08000d24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d2c:	d3f6      	bcc.n	8000d1c <CopyDataInit>
  ldr  r2, =_sbss
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d30:	e002      	b.n	8000d38 <LoopFillZerobss>

08000d32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d34:	f842 3b04 	str.w	r3, [r2], #4

08000d38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d3c:	d3f9      	bcc.n	8000d32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d3e:	f7ff ffd3 	bl	8000ce8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d42:	f006 fbf1 	bl	8007528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d46:	f7ff fbd7 	bl	80004f8 <main>
  bx  lr    
 8000d4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d50:	08007758 	.word	0x08007758
  ldr  r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d58:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000d5c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000d60:	20000850 	.word	0x20000850

08000d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <HAL_Init+0x40>)
 8000d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_Init+0x40>)
 8000d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <HAL_Init+0x40>)
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f94d 	bl	8001030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 f808 	bl	8000dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9c:	f7ff fe18 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x54>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x58>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f965 	bl	800109a <HAL_SYSTICK_Config>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00e      	b.n	8000df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d80a      	bhi.n	8000df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000de8:	f000 f92d 	bl	8001046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <HAL_InitTick+0x5c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	200001b8 	.word	0x200001b8

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200001b8 	.word	0x200001b8

08000e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff ffee 	bl	8000e34 <HAL_GetTick>
 8000e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e64:	d005      	beq.n	8000e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_Delay+0x40>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e72:	bf00      	nop
 8000e74:	f7ff ffde 	bl	8000e34 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d8f7      	bhi.n	8000e74 <HAL_Delay+0x28>
  {
  }
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000008 	.word	0x20000008

08000e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	60d3      	str	r3, [r2, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0b      	blt.n	8000f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f003 021f 	and.w	r2, r3, #31
 8000f0c:	4907      	ldr	r1, [pc, #28]	; (8000f2c <__NVIC_EnableIRQ+0x38>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	2001      	movs	r0, #1
 8000f16:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ffc:	d301      	bcc.n	8001002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00f      	b.n	8001022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <SysTick_Config+0x40>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100a:	210f      	movs	r1, #15
 800100c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001010:	f7ff ff8e 	bl	8000f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SysTick_Config+0x40>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <SysTick_Config+0x40>)
 800101c:	2207      	movs	r2, #7
 800101e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	e000e010 	.word	0xe000e010

08001030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ff29 	bl	8000e90 <__NVIC_SetPriorityGrouping>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001058:	f7ff ff3e 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 800105c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	6978      	ldr	r0, [r7, #20]
 8001064:	f7ff ff8e 	bl	8000f84 <NVIC_EncodePriority>
 8001068:	4602      	mov	r2, r0
 800106a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff5d 	bl	8000f30 <__NVIC_SetPriority>
}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff31 	bl	8000ef4 <__NVIC_EnableIRQ>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffa2 	bl	8000fec <SysTick_Config>
 80010a8:	4603      	mov	r3, r0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	e16b      	b.n	80013a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	f040 815a 	bne.w	80013a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d00b      	beq.n	800110e <HAL_GPIO_Init+0x5a>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001102:	2b11      	cmp	r3, #17
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b12      	cmp	r3, #18
 800110c:	d130      	bne.n	8001170 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f003 0201 	and.w	r2, r3, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0xfc>
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b12      	cmp	r3, #18
 80011ae:	d123      	bne.n	80011f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	08da      	lsrs	r2, r3, #3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3208      	adds	r2, #8
 80011b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	08da      	lsrs	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3208      	adds	r2, #8
 80011f2:	69b9      	ldr	r1, [r7, #24]
 80011f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0203 	and.w	r2, r3, #3
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 80b4 	beq.w	80013a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b5f      	ldr	r3, [pc, #380]	; (80013bc <HAL_GPIO_Init+0x308>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a5e      	ldr	r2, [pc, #376]	; (80013bc <HAL_GPIO_Init+0x308>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b5c      	ldr	r3, [pc, #368]	; (80013bc <HAL_GPIO_Init+0x308>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001256:	4a5a      	ldr	r2, [pc, #360]	; (80013c0 <HAL_GPIO_Init+0x30c>)
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a51      	ldr	r2, [pc, #324]	; (80013c4 <HAL_GPIO_Init+0x310>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d02b      	beq.n	80012da <HAL_GPIO_Init+0x226>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a50      	ldr	r2, [pc, #320]	; (80013c8 <HAL_GPIO_Init+0x314>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d025      	beq.n	80012d6 <HAL_GPIO_Init+0x222>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4f      	ldr	r2, [pc, #316]	; (80013cc <HAL_GPIO_Init+0x318>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d01f      	beq.n	80012d2 <HAL_GPIO_Init+0x21e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4e      	ldr	r2, [pc, #312]	; (80013d0 <HAL_GPIO_Init+0x31c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d019      	beq.n	80012ce <HAL_GPIO_Init+0x21a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4d      	ldr	r2, [pc, #308]	; (80013d4 <HAL_GPIO_Init+0x320>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d013      	beq.n	80012ca <HAL_GPIO_Init+0x216>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4c      	ldr	r2, [pc, #304]	; (80013d8 <HAL_GPIO_Init+0x324>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00d      	beq.n	80012c6 <HAL_GPIO_Init+0x212>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4b      	ldr	r2, [pc, #300]	; (80013dc <HAL_GPIO_Init+0x328>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <HAL_GPIO_Init+0x20e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4a      	ldr	r2, [pc, #296]	; (80013e0 <HAL_GPIO_Init+0x32c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_GPIO_Init+0x20a>
 80012ba:	2307      	movs	r3, #7
 80012bc:	e00e      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012be:	2308      	movs	r3, #8
 80012c0:	e00c      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012c2:	2306      	movs	r3, #6
 80012c4:	e00a      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012c6:	2305      	movs	r3, #5
 80012c8:	e008      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e004      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012da:	2300      	movs	r3, #0
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	f002 0203 	and.w	r2, r2, #3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4093      	lsls	r3, r2
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ec:	4934      	ldr	r1, [pc, #208]	; (80013c0 <HAL_GPIO_Init+0x30c>)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <HAL_GPIO_Init+0x330>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800131e:	4a31      	ldr	r2, [pc, #196]	; (80013e4 <HAL_GPIO_Init+0x330>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <HAL_GPIO_Init+0x330>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001348:	4a26      	ldr	r2, [pc, #152]	; (80013e4 <HAL_GPIO_Init+0x330>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800134e:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <HAL_GPIO_Init+0x330>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001372:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <HAL_GPIO_Init+0x330>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <HAL_GPIO_Init+0x330>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800139c:	4a11      	ldr	r2, [pc, #68]	; (80013e4 <HAL_GPIO_Init+0x330>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	f67f ae90 	bls.w	80010d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b0:	bf00      	nop
 80013b2:	3724      	adds	r7, #36	; 0x24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40013800 	.word	0x40013800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40020400 	.word	0x40020400
 80013cc:	40020800 	.word	0x40020800
 80013d0:	40020c00 	.word	0x40020c00
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40021400 	.word	0x40021400
 80013dc:	40021800 	.word	0x40021800
 80013e0:	40021c00 	.word	0x40021c00
 80013e4:	40013c00 	.word	0x40013c00

080013e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
 80013f4:	4613      	mov	r3, r2
 80013f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f8:	787b      	ldrb	r3, [r7, #1]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013fe:	887a      	ldrh	r2, [r7, #2]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001404:	e003      	b.n	800140e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	041a      	lsls	r2, r3, #16
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	619a      	str	r2, [r3, #24]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	460b      	mov	r3, r1
 8001424:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695a      	ldr	r2, [r3, #20]
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	401a      	ands	r2, r3
 800142e:	887b      	ldrh	r3, [r7, #2]
 8001430:	429a      	cmp	r2, r3
 8001432:	d104      	bne.n	800143e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001434:	887b      	ldrh	r3, [r7, #2]
 8001436:	041a      	lsls	r2, r3, #16
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800143c:	e002      	b.n	8001444 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d006      	beq.n	8001474 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f82a 	bl	80004c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40013c00 	.word	0x40013c00

08001480 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001482:	b08f      	sub	sp, #60	; 0x3c
 8001484:	af0a      	add	r7, sp, #40	; 0x28
 8001486:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e054      	b.n	800153c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d106      	bne.n	80014b2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f005 fd8b 	bl	8006fc8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2203      	movs	r2, #3
 80014b6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 f877 	bl	80045c4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	687e      	ldr	r6, [r7, #4]
 80014de:	466d      	mov	r5, sp
 80014e0:	f106 0410 	add.w	r4, r6, #16
 80014e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80014f4:	1d33      	adds	r3, r6, #4
 80014f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f8:	6838      	ldr	r0, [r7, #0]
 80014fa:	f002 fff1 	bl	80044e0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2101      	movs	r1, #1
 8001504:	4618      	mov	r0, r3
 8001506:	f003 f86e 	bl	80045e6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	687e      	ldr	r6, [r7, #4]
 8001512:	466d      	mov	r5, sp
 8001514:	f106 0410 	add.w	r4, r6, #16
 8001518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001520:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001524:	e885 0003 	stmia.w	r5, {r0, r1}
 8001528:	1d33      	adds	r3, r6, #4
 800152a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800152c:	6838      	ldr	r0, [r7, #0]
 800152e:	f003 f981 	bl	8004834 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001544 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b089      	sub	sp, #36	; 0x24
 8001548:	af04      	add	r7, sp, #16
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	4608      	mov	r0, r1
 800154e:	4611      	mov	r1, r2
 8001550:	461a      	mov	r2, r3
 8001552:	4603      	mov	r3, r0
 8001554:	70fb      	strb	r3, [r7, #3]
 8001556:	460b      	mov	r3, r1
 8001558:	70bb      	strb	r3, [r7, #2]
 800155a:	4613      	mov	r3, r2
 800155c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_HCD_HC_Init+0x28>
 8001568:	2302      	movs	r3, #2
 800156a:	e07f      	b.n	800166c <HAL_HCD_HC_Init+0x128>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001574:	78fa      	ldrb	r2, [r7, #3]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	333d      	adds	r3, #61	; 0x3d
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001588:	78fa      	ldrb	r2, [r7, #3]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	3338      	adds	r3, #56	; 0x38
 8001598:	787a      	ldrb	r2, [r7, #1]
 800159a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800159c:	78fa      	ldrb	r2, [r7, #3]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	3340      	adds	r3, #64	; 0x40
 80015ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015ae:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015b0:	78fa      	ldrb	r2, [r7, #3]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	3339      	adds	r3, #57	; 0x39
 80015c0:	78fa      	ldrb	r2, [r7, #3]
 80015c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015c4:	78fa      	ldrb	r2, [r7, #3]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	333f      	adds	r3, #63	; 0x3f
 80015d4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015da:	78fa      	ldrb	r2, [r7, #3]
 80015dc:	78bb      	ldrb	r3, [r7, #2]
 80015de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015e2:	b2d8      	uxtb	r0, r3
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	333a      	adds	r3, #58	; 0x3a
 80015f2:	4602      	mov	r2, r0
 80015f4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80015f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	da0a      	bge.n	8001614 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015fe:	78fa      	ldrb	r2, [r7, #3]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	440b      	add	r3, r1
 800160c:	333b      	adds	r3, #59	; 0x3b
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	e009      	b.n	8001628 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001614:	78fa      	ldrb	r2, [r7, #3]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	333b      	adds	r3, #59	; 0x3b
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	333c      	adds	r3, #60	; 0x3c
 8001638:	f897 2020 	ldrb.w	r2, [r7, #32]
 800163c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	787c      	ldrb	r4, [r7, #1]
 8001644:	78ba      	ldrb	r2, [r7, #2]
 8001646:	78f9      	ldrb	r1, [r7, #3]
 8001648:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	4623      	mov	r3, r4
 800165a:	f003 fa6d 	bl	8004b38 <USB_HC_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	bd90      	pop	{r4, r7, pc}

08001674 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_HCD_HC_Halt+0x1e>
 800168e:	2302      	movs	r3, #2
 8001690:	e00f      	b.n	80016b2 <HAL_HCD_HC_Halt+0x3e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	78fa      	ldrb	r2, [r7, #3]
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 fca7 	bl	8004ff6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	4608      	mov	r0, r1
 80016c6:	4611      	mov	r1, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	4603      	mov	r3, r0
 80016cc:	70fb      	strb	r3, [r7, #3]
 80016ce:	460b      	mov	r3, r1
 80016d0:	70bb      	strb	r3, [r7, #2]
 80016d2:	4613      	mov	r3, r2
 80016d4:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80016d6:	78fa      	ldrb	r2, [r7, #3]
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	440b      	add	r3, r1
 80016e4:	333b      	adds	r3, #59	; 0x3b
 80016e6:	78ba      	ldrb	r2, [r7, #2]
 80016e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016ea:	78fa      	ldrb	r2, [r7, #3]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	440b      	add	r3, r1
 80016f8:	333f      	adds	r3, #63	; 0x3f
 80016fa:	787a      	ldrb	r2, [r7, #1]
 80016fc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016fe:	7c3b      	ldrb	r3, [r7, #16]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10a      	bne.n	800171a <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001704:	78fa      	ldrb	r2, [r7, #3]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	440b      	add	r3, r1
 8001712:	3342      	adds	r3, #66	; 0x42
 8001714:	2203      	movs	r2, #3
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	e009      	b.n	800172e <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800171a:	78fa      	ldrb	r2, [r7, #3]
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	440b      	add	r3, r1
 8001728:	3342      	adds	r3, #66	; 0x42
 800172a:	2202      	movs	r2, #2
 800172c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800172e:	787b      	ldrb	r3, [r7, #1]
 8001730:	2b03      	cmp	r3, #3
 8001732:	f200 80d6 	bhi.w	80018e2 <HAL_HCD_HC_SubmitRequest+0x226>
 8001736:	a201      	add	r2, pc, #4	; (adr r2, 800173c <HAL_HCD_HC_SubmitRequest+0x80>)
 8001738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173c:	0800174d 	.word	0x0800174d
 8001740:	080018cd 	.word	0x080018cd
 8001744:	080017b9 	.word	0x080017b9
 8001748:	08001843 	.word	0x08001843
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800174c:	7c3b      	ldrb	r3, [r7, #16]
 800174e:	2b01      	cmp	r3, #1
 8001750:	f040 80c9 	bne.w	80018e6 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001754:	78bb      	ldrb	r3, [r7, #2]
 8001756:	2b00      	cmp	r3, #0
 8001758:	f040 80c5 	bne.w	80018e6 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 800175c:	8b3b      	ldrh	r3, [r7, #24]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d109      	bne.n	8001776 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001762:	78fa      	ldrb	r2, [r7, #3]
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	440b      	add	r3, r1
 8001770:	3351      	adds	r3, #81	; 0x51
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001776:	78fa      	ldrb	r2, [r7, #3]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	440b      	add	r3, r1
 8001784:	3351      	adds	r3, #81	; 0x51
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10a      	bne.n	80017a2 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	440b      	add	r3, r1
 800179a:	3342      	adds	r3, #66	; 0x42
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017a0:	e0a1      	b.n	80018e6 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017a2:	78fa      	ldrb	r2, [r7, #3]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	440b      	add	r3, r1
 80017b0:	3342      	adds	r3, #66	; 0x42
 80017b2:	2202      	movs	r2, #2
 80017b4:	701a      	strb	r2, [r3, #0]
      break;
 80017b6:	e096      	b.n	80018e6 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017b8:	78bb      	ldrb	r3, [r7, #2]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d120      	bne.n	8001800 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	3351      	adds	r3, #81	; 0x51
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10a      	bne.n	80017ea <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	3342      	adds	r3, #66	; 0x42
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017e8:	e07e      	b.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ea:	78fa      	ldrb	r2, [r7, #3]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	3342      	adds	r3, #66	; 0x42
 80017fa:	2202      	movs	r2, #2
 80017fc:	701a      	strb	r2, [r3, #0]
      break;
 80017fe:	e073      	b.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001800:	78fa      	ldrb	r2, [r7, #3]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	440b      	add	r3, r1
 800180e:	3350      	adds	r3, #80	; 0x50
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10a      	bne.n	800182c <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001816:	78fa      	ldrb	r2, [r7, #3]
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	440b      	add	r3, r1
 8001824:	3342      	adds	r3, #66	; 0x42
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
      break;
 800182a:	e05d      	b.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	3342      	adds	r3, #66	; 0x42
 800183c:	2202      	movs	r2, #2
 800183e:	701a      	strb	r2, [r3, #0]
      break;
 8001840:	e052      	b.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001842:	78bb      	ldrb	r3, [r7, #2]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d120      	bne.n	800188a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	440b      	add	r3, r1
 8001856:	3351      	adds	r3, #81	; 0x51
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10a      	bne.n	8001874 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800185e:	78fa      	ldrb	r2, [r7, #3]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	440b      	add	r3, r1
 800186c:	3342      	adds	r3, #66	; 0x42
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001872:	e039      	b.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	3342      	adds	r3, #66	; 0x42
 8001884:	2202      	movs	r2, #2
 8001886:	701a      	strb	r2, [r3, #0]
      break;
 8001888:	e02e      	b.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	3350      	adds	r3, #80	; 0x50
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10a      	bne.n	80018b6 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	3342      	adds	r3, #66	; 0x42
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
      break;
 80018b4:	e018      	b.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	440b      	add	r3, r1
 80018c4:	3342      	adds	r3, #66	; 0x42
 80018c6:	2202      	movs	r2, #2
 80018c8:	701a      	strb	r2, [r3, #0]
      break;
 80018ca:	e00d      	b.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	440b      	add	r3, r1
 80018da:	3342      	adds	r3, #66	; 0x42
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
      break;
 80018e0:	e002      	b.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80018e2:	bf00      	nop
 80018e4:	e000      	b.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80018e6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	3344      	adds	r3, #68	; 0x44
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	8b39      	ldrh	r1, [r7, #24]
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4403      	add	r3, r0
 800190c:	3348      	adds	r3, #72	; 0x48
 800190e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	335c      	adds	r3, #92	; 0x5c
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	334c      	adds	r3, #76	; 0x4c
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	3339      	adds	r3, #57	; 0x39
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	335d      	adds	r3, #93	; 0x5d
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	78fa      	ldrb	r2, [r7, #3]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	3338      	adds	r3, #56	; 0x38
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	18d1      	adds	r1, r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	f003 f9e6 	bl	8004d4c <USB_HC_StartXfer>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop

0800198c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 ff03 	bl	80047ae <USB_GetMode>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	f040 80f1 	bne.w	8001b92 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 fee7 	bl	8004788 <USB_ReadInterrupts>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80e7 	beq.w	8001b90 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 fede 	bl	8004788 <USB_ReadInterrupts>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019d6:	d104      	bne.n	80019e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 fece 	bl	8004788 <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019f6:	d104      	bne.n	8001a02 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 febe 	bl	8004788 <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a16:	d104      	bne.n	8001a22 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 feae 	bl	8004788 <USB_ReadInterrupts>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d103      	bne.n	8001a3e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f002 fea0 	bl	8004788 <USB_ReadInterrupts>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a52:	d117      	bne.n	8001a84 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001a62:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001a66:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f005 fb2b 	bl	80070c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2101      	movs	r1, #1
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 ff99 	bl	80049ac <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f002 fe7d 	bl	8004788 <USB_ReadInterrupts>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a98:	d102      	bne.n	8001aa0 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f001 f8c8 	bl	8002c30 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 fe6f 	bl	8004788 <USB_ReadInterrupts>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d106      	bne.n	8001ac2 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f005 fae9 	bl	800708c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2208      	movs	r2, #8
 8001ac0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 fe5e 	bl	8004788 <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ad6:	d138      	bne.n	8001b4a <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f003 fa79 	bl	8004fd4 <USB_HC_ReadInterrupt>
 8001ae2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	e025      	b.n	8001b36 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	fa22 f303 	lsr.w	r3, r2, r3
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d018      	beq.n	8001b30 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	015a      	lsls	r2, r3, #5
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b14:	d106      	bne.n	8001b24 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f8cf 	bl	8001cc0 <HCD_HC_IN_IRQHandler>
 8001b22:	e005      	b.n	8001b30 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4619      	mov	r1, r3
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 fc5f 	bl	80023ee <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d3d4      	bcc.n	8001aea <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 fe1a 	bl	8004788 <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	2b10      	cmp	r3, #16
 8001b5c:	d101      	bne.n	8001b62 <HAL_HCD_IRQHandler+0x1d6>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_HCD_IRQHandler+0x1d8>
 8001b62:	2300      	movs	r3, #0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d014      	beq.n	8001b92 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0210 	bic.w	r2, r2, #16
 8001b76:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 ffad 	bl	8002ad8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699a      	ldr	r2, [r3, #24]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0210 	orr.w	r2, r2, #16
 8001b8c:	619a      	str	r2, [r3, #24]
 8001b8e:	e000      	b.n	8001b92 <HAL_HCD_IRQHandler+0x206>
      return;
 8001b90:	bf00      	nop
    }
  }
}
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_HCD_Start+0x16>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e013      	b.n	8001bd6 <HAL_HCD_Start+0x3e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 fcf1 	bl	80045a2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f002 ff54 	bl	8004a74 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_HCD_Stop+0x16>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e00d      	b.n	8001c10 <HAL_HCD_Stop+0x32>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f003 fb33 	bl	800526c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f002 fefb 	bl	8004a20 <USB_ResetPort>
 8001c2a:	4603      	mov	r3, r0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c40:	78fa      	ldrb	r2, [r7, #3]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	440b      	add	r3, r1
 8001c4e:	335c      	adds	r3, #92	; 0x5c
 8001c50:	781b      	ldrb	r3, [r3, #0]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c6a:	78fa      	ldrb	r2, [r7, #3]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	440b      	add	r3, r1
 8001c78:	334c      	adds	r3, #76	; 0x4c
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f002 ff3d 	bl	8004b14 <USB_GetCurrentFrame>
 8001c9a:	4603      	mov	r3, r0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f002 ff18 	bl	8004ae6 <USB_GetHostSpeed>
 8001cb6:	4603      	mov	r3, r0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d119      	bne.n	8001d24 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2304      	movs	r3, #4
 8001d00:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	0151      	lsls	r1, r2, #5
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	440a      	add	r2, r1
 8001d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	60d3      	str	r3, [r2, #12]
 8001d22:	e095      	b.n	8001e50 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	015a      	lsls	r2, r3, #5
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0320 	and.w	r3, r3, #32
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d109      	bne.n	8001d4e <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d46:	461a      	mov	r2, r3
 8001d48:	2320      	movs	r3, #32
 8001d4a:	6093      	str	r3, [r2, #8]
 8001d4c:	e080      	b.n	8001e50 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d134      	bne.n	8001dce <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	0151      	lsls	r1, r2, #5
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	440a      	add	r2, r1
 8001d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d7e:	f043 0302 	orr.w	r3, r3, #2
 8001d82:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	335d      	adds	r3, #93	; 0x5d
 8001d94:	2205      	movs	r2, #5
 8001d96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da4:	461a      	mov	r2, r3
 8001da6:	2310      	movs	r3, #16
 8001da8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db6:	461a      	mov	r2, r3
 8001db8:	2308      	movs	r3, #8
 8001dba:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f003 f915 	bl	8004ff6 <USB_HC_Halt>
 8001dcc:	e040      	b.n	8001e50 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	015a      	lsls	r2, r3, #5
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de4:	d134      	bne.n	8001e50 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	0151      	lsls	r1, r2, #5
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	440a      	add	r2, r1
 8001dfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f003 f8f0 	bl	8004ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e22:	461a      	mov	r2, r3
 8001e24:	2310      	movs	r3, #16
 8001e26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	440b      	add	r3, r1
 8001e36:	335d      	adds	r3, #93	; 0x5d
 8001e38:	2208      	movs	r2, #8
 8001e3a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e4e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e66:	d122      	bne.n	8001eae <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	0151      	lsls	r1, r2, #5
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	440a      	add	r2, r1
 8001e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 f8af 	bl	8004ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eaa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001eac:	e29b      	b.n	80023e6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	f040 80c1 	bne.w	8002048 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01b      	beq.n	8001f06 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	440b      	add	r3, r1
 8001edc:	3348      	adds	r3, #72	; 0x48
 8001ede:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	0159      	lsls	r1, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001ef2:	1ad1      	subs	r1, r2, r3
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4403      	add	r3, r0
 8001f02:	334c      	adds	r3, #76	; 0x4c
 8001f04:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	440b      	add	r3, r1
 8001f14:	335d      	adds	r3, #93	; 0x5d
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	3358      	adds	r3, #88	; 0x58
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	440b      	add	r3, r1
 8001f4e:	333f      	adds	r3, #63	; 0x3f
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00a      	beq.n	8001f6c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	333f      	adds	r3, #63	; 0x3f
 8001f66:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d121      	bne.n	8001fb0 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	0151      	lsls	r1, r2, #5
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	440a      	add	r2, r1
 8001f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f86:	f043 0302 	orr.w	r3, r3, #2
 8001f8a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 f82d 	bl	8004ff6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2310      	movs	r3, #16
 8001fac:	6093      	str	r3, [r2, #8]
 8001fae:	e034      	b.n	800201a <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	333f      	adds	r3, #63	; 0x3f
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d129      	bne.n	800201a <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	0151      	lsls	r1, r2, #5
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	440a      	add	r2, r1
 8001fdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fe0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fe4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	335c      	adds	r3, #92	; 0x5c
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	b2d8      	uxtb	r0, r3
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	440b      	add	r3, r1
 800200c:	335c      	adds	r3, #92	; 0x5c
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	4601      	mov	r1, r0
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f005 f863 	bl	80070e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	440b      	add	r3, r1
 8002028:	3350      	adds	r3, #80	; 0x50
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	f083 0301 	eor.w	r3, r3, #1
 8002030:	b2d8      	uxtb	r0, r3
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	440b      	add	r3, r1
 8002040:	3350      	adds	r3, #80	; 0x50
 8002042:	4602      	mov	r2, r0
 8002044:	701a      	strb	r2, [r3, #0]
}
 8002046:	e1ce      	b.n	80023e6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b02      	cmp	r3, #2
 800205c:	f040 80f1 	bne.w	8002242 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4413      	add	r3, r2
 8002068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	0151      	lsls	r1, r2, #5
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	440a      	add	r2, r1
 8002076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800207a:	f023 0302 	bic.w	r3, r3, #2
 800207e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	440b      	add	r3, r1
 800208e:	335d      	adds	r3, #93	; 0x5d
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d10a      	bne.n	80020ac <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	335c      	adds	r3, #92	; 0x5c
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
 80020aa:	e0b0      	b.n	800220e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	335d      	adds	r3, #93	; 0x5d
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d10a      	bne.n	80020d8 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	335c      	adds	r3, #92	; 0x5c
 80020d2:	2205      	movs	r2, #5
 80020d4:	701a      	strb	r2, [r3, #0]
 80020d6:	e09a      	b.n	800220e <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	440b      	add	r3, r1
 80020e6:	335d      	adds	r3, #93	; 0x5d
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d00a      	beq.n	8002104 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	335d      	adds	r3, #93	; 0x5d
 80020fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002100:	2b08      	cmp	r3, #8
 8002102:	d156      	bne.n	80021b2 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	3358      	adds	r3, #88	; 0x58
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	1c59      	adds	r1, r3, #1
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4403      	add	r3, r0
 8002126:	3358      	adds	r3, #88	; 0x58
 8002128:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	3358      	adds	r3, #88	; 0x58
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d914      	bls.n	800216a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	440b      	add	r3, r1
 800214e:	3358      	adds	r3, #88	; 0x58
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	335c      	adds	r3, #92	; 0x5c
 8002164:	2204      	movs	r2, #4
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	e009      	b.n	800217e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	335c      	adds	r3, #92	; 0x5c
 800217a:	2202      	movs	r2, #2
 800217c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4413      	add	r3, r2
 8002186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002194:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800219c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021aa:	461a      	mov	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	e02d      	b.n	800220e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	440b      	add	r3, r1
 80021c0:	335d      	adds	r3, #93	; 0x5d
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d122      	bne.n	800220e <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	440b      	add	r3, r1
 80021d6:	335c      	adds	r3, #92	; 0x5c
 80021d8:	2202      	movs	r2, #2
 80021da:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021f2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021fa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	015a      	lsls	r2, r3, #5
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4413      	add	r3, r2
 8002204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002208:	461a      	mov	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4413      	add	r3, r2
 8002216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221a:	461a      	mov	r2, r3
 800221c:	2302      	movs	r3, #2
 800221e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	b2d8      	uxtb	r0, r3
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	335c      	adds	r3, #92	; 0x5c
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	4601      	mov	r1, r0
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f004 ff50 	bl	80070e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002240:	e0d1      	b.n	80023e6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002254:	2b80      	cmp	r3, #128	; 0x80
 8002256:	d13e      	bne.n	80022d6 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	0151      	lsls	r1, r2, #5
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	440a      	add	r2, r1
 800226e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002272:	f043 0302 	orr.w	r3, r3, #2
 8002276:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	3358      	adds	r3, #88	; 0x58
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	1c59      	adds	r1, r3, #1
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4403      	add	r3, r0
 800229a:	3358      	adds	r3, #88	; 0x58
 800229c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	335d      	adds	r3, #93	; 0x5d
 80022ae:	2206      	movs	r2, #6
 80022b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f002 fe9a 	bl	8004ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ce:	461a      	mov	r2, r3
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	6093      	str	r3, [r2, #8]
}
 80022d4:	e087      	b.n	80023e6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b10      	cmp	r3, #16
 80022ea:	d17c      	bne.n	80023e6 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	440b      	add	r3, r1
 80022fa:	333f      	adds	r3, #63	; 0x3f
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d122      	bne.n	8002348 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	440b      	add	r3, r1
 8002310:	3358      	adds	r3, #88	; 0x58
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	0151      	lsls	r1, r2, #5
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	440a      	add	r2, r1
 800232c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002330:	f043 0302 	orr.w	r3, r3, #2
 8002334:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f002 fe58 	bl	8004ff6 <USB_HC_Halt>
 8002346:	e045      	b.n	80023d4 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	440b      	add	r3, r1
 8002356:	333f      	adds	r3, #63	; 0x3f
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	333f      	adds	r3, #63	; 0x3f
 800236e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002370:	2b02      	cmp	r3, #2
 8002372:	d12f      	bne.n	80023d4 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	3358      	adds	r3, #88	; 0x58
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d121      	bne.n	80023d4 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	335d      	adds	r3, #93	; 0x5d
 80023a0:	2203      	movs	r2, #3
 80023a2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	0151      	lsls	r1, r2, #5
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	440a      	add	r2, r1
 80023ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023be:	f043 0302 	orr.w	r3, r3, #2
 80023c2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f002 fe11 	bl	8004ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e0:	461a      	mov	r2, r3
 80023e2:	2310      	movs	r3, #16
 80023e4:	6093      	str	r3, [r2, #8]
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b04      	cmp	r3, #4
 800241c:	d119      	bne.n	8002452 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4413      	add	r3, r2
 8002426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242a:	461a      	mov	r2, r3
 800242c:	2304      	movs	r3, #4
 800242e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4413      	add	r3, r2
 8002438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	0151      	lsls	r1, r2, #5
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	440a      	add	r2, r1
 8002446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800244a:	f043 0302 	orr.w	r3, r3, #2
 800244e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002450:	e33e      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b20      	cmp	r3, #32
 8002466:	d141      	bne.n	80024ec <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002474:	461a      	mov	r2, r3
 8002476:	2320      	movs	r3, #32
 8002478:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	440b      	add	r3, r1
 8002488:	333d      	adds	r3, #61	; 0x3d
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b01      	cmp	r3, #1
 800248e:	f040 831f 	bne.w	8002ad0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	440b      	add	r3, r1
 80024a0:	333d      	adds	r3, #61	; 0x3d
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	440b      	add	r3, r1
 80024b4:	335c      	adds	r3, #92	; 0x5c
 80024b6:	2202      	movs	r2, #2
 80024b8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	0151      	lsls	r1, r2, #5
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	440a      	add	r2, r1
 80024d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f002 fd86 	bl	8004ff6 <USB_HC_Halt>
}
 80024ea:	e2f1      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fe:	2b40      	cmp	r3, #64	; 0x40
 8002500:	d13f      	bne.n	8002582 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	440b      	add	r3, r1
 8002510:	335d      	adds	r3, #93	; 0x5d
 8002512:	2204      	movs	r2, #4
 8002514:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	333d      	adds	r3, #61	; 0x3d
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	3358      	adds	r3, #88	; 0x58
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	0151      	lsls	r1, r2, #5
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	440a      	add	r2, r1
 8002554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f002 fd44 	bl	8004ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	461a      	mov	r2, r3
 800257c:	2340      	movs	r3, #64	; 0x40
 800257e:	6093      	str	r3, [r2, #8]
}
 8002580:	e2a6      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4413      	add	r3, r2
 800258a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002598:	d122      	bne.n	80025e0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	0151      	lsls	r1, r2, #5
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	440a      	add	r2, r1
 80025b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f002 fd16 	bl	8004ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d6:	461a      	mov	r2, r3
 80025d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025dc:	6093      	str	r3, [r2, #8]
}
 80025de:	e277      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d135      	bne.n	8002662 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	440b      	add	r3, r1
 8002604:	3358      	adds	r3, #88	; 0x58
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	015a      	lsls	r2, r3, #5
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4413      	add	r3, r2
 8002612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	0151      	lsls	r1, r2, #5
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	440a      	add	r2, r1
 8002620:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002624:	f043 0302 	orr.w	r3, r3, #2
 8002628:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f002 fcde 	bl	8004ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4413      	add	r3, r2
 8002642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002646:	461a      	mov	r2, r3
 8002648:	2301      	movs	r3, #1
 800264a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	440b      	add	r3, r1
 800265a:	335d      	adds	r3, #93	; 0x5d
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
}
 8002660:	e236      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b08      	cmp	r3, #8
 8002676:	d12b      	bne.n	80026d0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4413      	add	r3, r2
 8002680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002684:	461a      	mov	r2, r3
 8002686:	2308      	movs	r3, #8
 8002688:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	0151      	lsls	r1, r2, #5
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	440a      	add	r2, r1
 80026a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f002 fc9e 	bl	8004ff6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	440b      	add	r3, r1
 80026c8:	335d      	adds	r3, #93	; 0x5d
 80026ca:	2205      	movs	r2, #5
 80026cc:	701a      	strb	r2, [r3, #0]
}
 80026ce:	e1ff      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d155      	bne.n	8002792 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	3358      	adds	r3, #88	; 0x58
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	440b      	add	r3, r1
 8002708:	335d      	adds	r3, #93	; 0x5d
 800270a:	2203      	movs	r2, #3
 800270c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	333d      	adds	r3, #61	; 0x3d
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d114      	bne.n	800274e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	440b      	add	r3, r1
 8002732:	333c      	adds	r3, #60	; 0x3c
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	440b      	add	r3, r1
 8002748:	333d      	adds	r3, #61	; 0x3d
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	0151      	lsls	r1, r2, #5
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	440a      	add	r2, r1
 8002764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f002 fc3c 	bl	8004ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	461a      	mov	r2, r3
 800278c:	2310      	movs	r3, #16
 800278e:	6093      	str	r3, [r2, #8]
}
 8002790:	e19e      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a4:	2b80      	cmp	r3, #128	; 0x80
 80027a6:	d12b      	bne.n	8002800 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	0151      	lsls	r1, r2, #5
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	440a      	add	r2, r1
 80027be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027c2:	f043 0302 	orr.w	r3, r3, #2
 80027c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f002 fc0f 	bl	8004ff6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	440b      	add	r3, r1
 80027e6:	335d      	adds	r3, #93	; 0x5d
 80027e8:	2206      	movs	r2, #6
 80027ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f8:	461a      	mov	r2, r3
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	6093      	str	r3, [r2, #8]
}
 80027fe:	e167      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002816:	d135      	bne.n	8002884 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	0151      	lsls	r1, r2, #5
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	440a      	add	r2, r1
 800282e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002832:	f043 0302 	orr.w	r3, r3, #2
 8002836:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f002 fbd7 	bl	8004ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	461a      	mov	r2, r3
 8002856:	2310      	movs	r3, #16
 8002858:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4413      	add	r3, r2
 8002862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002866:	461a      	mov	r2, r3
 8002868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800286c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	440b      	add	r3, r1
 800287c:	335d      	adds	r3, #93	; 0x5d
 800287e:	2208      	movs	r2, #8
 8002880:	701a      	strb	r2, [r3, #0]
}
 8002882:	e125      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b02      	cmp	r3, #2
 8002898:	f040 811a 	bne.w	8002ad0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	0151      	lsls	r1, r2, #5
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	440a      	add	r2, r1
 80028b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028b6:	f023 0302 	bic.w	r3, r3, #2
 80028ba:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	440b      	add	r3, r1
 80028ca:	335d      	adds	r3, #93	; 0x5d
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d137      	bne.n	8002942 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	335c      	adds	r3, #92	; 0x5c
 80028e2:	2201      	movs	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	440b      	add	r3, r1
 80028f4:	333f      	adds	r3, #63	; 0x3f
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d00b      	beq.n	8002914 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	440b      	add	r3, r1
 800290a:	333f      	adds	r3, #63	; 0x3f
 800290c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800290e:	2b03      	cmp	r3, #3
 8002910:	f040 80c5 	bne.w	8002a9e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	440b      	add	r3, r1
 8002922:	3351      	adds	r3, #81	; 0x51
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	f083 0301 	eor.w	r3, r3, #1
 800292a:	b2d8      	uxtb	r0, r3
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	440b      	add	r3, r1
 800293a:	3351      	adds	r3, #81	; 0x51
 800293c:	4602      	mov	r2, r0
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	e0ad      	b.n	8002a9e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	440b      	add	r3, r1
 8002950:	335d      	adds	r3, #93	; 0x5d
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d10a      	bne.n	800296e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	440b      	add	r3, r1
 8002966:	335c      	adds	r3, #92	; 0x5c
 8002968:	2202      	movs	r2, #2
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	e097      	b.n	8002a9e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	440b      	add	r3, r1
 800297c:	335d      	adds	r3, #93	; 0x5d
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b04      	cmp	r3, #4
 8002982:	d10a      	bne.n	800299a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	335c      	adds	r3, #92	; 0x5c
 8002994:	2202      	movs	r2, #2
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e081      	b.n	8002a9e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	440b      	add	r3, r1
 80029a8:	335d      	adds	r3, #93	; 0x5d
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d10a      	bne.n	80029c6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	440b      	add	r3, r1
 80029be:	335c      	adds	r3, #92	; 0x5c
 80029c0:	2205      	movs	r2, #5
 80029c2:	701a      	strb	r2, [r3, #0]
 80029c4:	e06b      	b.n	8002a9e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	335d      	adds	r3, #93	; 0x5d
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b06      	cmp	r3, #6
 80029da:	d00a      	beq.n	80029f2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	440b      	add	r3, r1
 80029ea:	335d      	adds	r3, #93	; 0x5d
 80029ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d155      	bne.n	8002a9e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	440b      	add	r3, r1
 8002a00:	3358      	adds	r3, #88	; 0x58
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	1c59      	adds	r1, r3, #1
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4403      	add	r3, r0
 8002a14:	3358      	adds	r3, #88	; 0x58
 8002a16:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	440b      	add	r3, r1
 8002a26:	3358      	adds	r3, #88	; 0x58
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d914      	bls.n	8002a58 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3358      	adds	r3, #88	; 0x58
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	440b      	add	r3, r1
 8002a50:	335c      	adds	r3, #92	; 0x5c
 8002a52:	2204      	movs	r2, #4
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	e009      	b.n	8002a6c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	440b      	add	r3, r1
 8002a66:	335c      	adds	r3, #92	; 0x5c
 8002a68:	2202      	movs	r2, #2
 8002a6a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a82:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a8a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2302      	movs	r3, #2
 8002aae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	b2d8      	uxtb	r0, r3
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	440b      	add	r3, r1
 8002ac2:	335c      	adds	r3, #92	; 0x5c
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4601      	mov	r1, r0
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f004 fb08 	bl	80070e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ad0:	bf00      	nop
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	; 0x28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	0c5b      	lsrs	r3, r3, #17
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b0c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d003      	beq.n	8002b1c <HCD_RXQLVL_IRQHandler+0x44>
 8002b14:	2b05      	cmp	r3, #5
 8002b16:	f000 8082 	beq.w	8002c1e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b1a:	e083      	b.n	8002c24 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d07f      	beq.n	8002c22 <HCD_RXQLVL_IRQHandler+0x14a>
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	440b      	add	r3, r1
 8002b30:	3344      	adds	r3, #68	; 0x44
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d074      	beq.n	8002c22 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	3344      	adds	r3, #68	; 0x44
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	b292      	uxth	r2, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	f001 fdef 	bl	8004736 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	3344      	adds	r3, #68	; 0x44
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	18d1      	adds	r1, r2, r3
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4403      	add	r3, r0
 8002b7c:	3344      	adds	r3, #68	; 0x44
 8002b7e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	334c      	adds	r3, #76	; 0x4c
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	18d1      	adds	r1, r2, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4403      	add	r3, r0
 8002ba4:	334c      	adds	r3, #76	; 0x4c
 8002ba6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <HCD_RXQLVL_IRQHandler+0x154>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d031      	beq.n	8002c22 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bd4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bdc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bea:	461a      	mov	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	440b      	add	r3, r1
 8002bfe:	3350      	adds	r3, #80	; 0x50
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	f083 0301 	eor.w	r3, r3, #1
 8002c06:	b2d8      	uxtb	r0, r3
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	440b      	add	r3, r1
 8002c16:	3350      	adds	r3, #80	; 0x50
 8002c18:	4602      	mov	r2, r0
 8002c1a:	701a      	strb	r2, [r3, #0]
      break;
 8002c1c:	e001      	b.n	8002c22 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002c1e:	bf00      	nop
 8002c20:	e000      	b.n	8002c24 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002c22:	bf00      	nop
  }
}
 8002c24:	bf00      	nop
 8002c26:	3728      	adds	r7, #40	; 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	1ff80000 	.word	0x1ff80000

08002c30 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c5c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d113      	bne.n	8002c90 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d10a      	bne.n	8002c88 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699a      	ldr	r2, [r3, #24]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002c80:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f004 fa10 	bl	80070a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f043 0302 	orr.w	r3, r3, #2
 8002c8e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d147      	bne.n	8002d2a <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f043 0308 	orr.w	r3, r3, #8
 8002ca0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d129      	bne.n	8002d00 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d113      	bne.n	8002cdc <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002cba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cbe:	d106      	bne.n	8002cce <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2102      	movs	r1, #2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 fe70 	bl	80049ac <USB_InitFSLSPClkSel>
 8002ccc:	e011      	b.n	8002cf2 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f001 fe69 	bl	80049ac <USB_InitFSLSPClkSel>
 8002cda:	e00a      	b.n	8002cf2 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d106      	bne.n	8002cf2 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cea:	461a      	mov	r2, r3
 8002cec:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002cf0:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f004 fa02 	bl	80070fc <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f004 f9d5 	bl	80070a8 <HAL_HCD_Connect_Callback>
 8002cfe:	e014      	b.n	8002d2a <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f004 fa09 	bl	8007118 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002d14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d18:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002d28:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d103      	bne.n	8002d3c <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f043 0320 	orr.w	r3, r3, #32
 8002d3a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d42:	461a      	mov	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	6013      	str	r3, [r2, #0]
}
 8002d48:	bf00      	nop
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e11f      	b.n	8002fa2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fd fe52 	bl	8000a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2224      	movs	r2, #36	; 0x24
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002da2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002db2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002db4:	f001 f9de 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 8002db8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4a7b      	ldr	r2, [pc, #492]	; (8002fac <HAL_I2C_Init+0x25c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d807      	bhi.n	8002dd4 <HAL_I2C_Init+0x84>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4a7a      	ldr	r2, [pc, #488]	; (8002fb0 <HAL_I2C_Init+0x260>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	bf94      	ite	ls
 8002dcc:	2301      	movls	r3, #1
 8002dce:	2300      	movhi	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e006      	b.n	8002de2 <HAL_I2C_Init+0x92>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4a77      	ldr	r2, [pc, #476]	; (8002fb4 <HAL_I2C_Init+0x264>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	bf94      	ite	ls
 8002ddc:	2301      	movls	r3, #1
 8002dde:	2300      	movhi	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e0db      	b.n	8002fa2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4a72      	ldr	r2, [pc, #456]	; (8002fb8 <HAL_I2C_Init+0x268>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	0c9b      	lsrs	r3, r3, #18
 8002df4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4a64      	ldr	r2, [pc, #400]	; (8002fac <HAL_I2C_Init+0x25c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d802      	bhi.n	8002e24 <HAL_I2C_Init+0xd4>
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	3301      	adds	r3, #1
 8002e22:	e009      	b.n	8002e38 <HAL_I2C_Init+0xe8>
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	4a63      	ldr	r2, [pc, #396]	; (8002fbc <HAL_I2C_Init+0x26c>)
 8002e30:	fba2 2303 	umull	r2, r3, r2, r3
 8002e34:	099b      	lsrs	r3, r3, #6
 8002e36:	3301      	adds	r3, #1
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4956      	ldr	r1, [pc, #344]	; (8002fac <HAL_I2C_Init+0x25c>)
 8002e54:	428b      	cmp	r3, r1
 8002e56:	d80d      	bhi.n	8002e74 <HAL_I2C_Init+0x124>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1e59      	subs	r1, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e66:	3301      	adds	r3, #1
 8002e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	bf38      	it	cc
 8002e70:	2304      	movcc	r3, #4
 8002e72:	e04f      	b.n	8002f14 <HAL_I2C_Init+0x1c4>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d111      	bne.n	8002ea0 <HAL_I2C_Init+0x150>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1e58      	subs	r0, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	440b      	add	r3, r1
 8002e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e012      	b.n	8002ec6 <HAL_I2C_Init+0x176>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1e58      	subs	r0, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6859      	ldr	r1, [r3, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	0099      	lsls	r1, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Init+0x17e>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e022      	b.n	8002f14 <HAL_I2C_Init+0x1c4>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10e      	bne.n	8002ef4 <HAL_I2C_Init+0x1a4>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1e58      	subs	r0, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	440b      	add	r3, r1
 8002ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef2:	e00f      	b.n	8002f14 <HAL_I2C_Init+0x1c4>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1e58      	subs	r0, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	0099      	lsls	r1, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	6809      	ldr	r1, [r1, #0]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69da      	ldr	r2, [r3, #28]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6911      	ldr	r1, [r2, #16]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68d2      	ldr	r2, [r2, #12]
 8002f4e:	4311      	orrs	r1, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	000186a0 	.word	0x000186a0
 8002fb0:	001e847f 	.word	0x001e847f
 8002fb4:	003d08ff 	.word	0x003d08ff
 8002fb8:	431bde83 	.word	0x431bde83
 8002fbc:	10624dd3 	.word	0x10624dd3

08002fc0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e128      	b.n	8003224 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a90      	ldr	r2, [pc, #576]	; (800322c <HAL_I2S_Init+0x26c>)
 8002fea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7fd fd5f 	bl	8000ab0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003008:	f023 030f 	bic.w	r3, r3, #15
 800300c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2202      	movs	r2, #2
 8003014:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d060      	beq.n	80030e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003026:	2310      	movs	r3, #16
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	e001      	b.n	8003030 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800302c:	2320      	movs	r3, #32
 800302e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b20      	cmp	r3, #32
 8003036:	d802      	bhi.n	800303e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800303e:	2001      	movs	r0, #1
 8003040:	f001 f98e 	bl	8004360 <HAL_RCCEx_GetPeriphCLKFreq>
 8003044:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800304e:	d125      	bne.n	800309c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d010      	beq.n	800307a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	461a      	mov	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	fbb2 f3f3 	udiv	r3, r2, r3
 8003074:	3305      	adds	r3, #5
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	e01f      	b.n	80030ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	fbb2 f2f3 	udiv	r2, r2, r3
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	461a      	mov	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	3305      	adds	r3, #5
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	e00e      	b.n	80030ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	461a      	mov	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b6:	3305      	adds	r3, #5
 80030b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4a5c      	ldr	r2, [pc, #368]	; (8003230 <HAL_I2S_Init+0x270>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	08db      	lsrs	r3, r3, #3
 80030c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	085b      	lsrs	r3, r3, #1
 80030d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	e003      	b.n	80030e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80030e0:	2302      	movs	r3, #2
 80030e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d902      	bls.n	80030f4 <HAL_I2S_Init+0x134>
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	2bff      	cmp	r3, #255	; 0xff
 80030f2:	d907      	bls.n	8003104 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f8:	f043 0210 	orr.w	r2, r3, #16
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e08f      	b.n	8003224 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	ea42 0103 	orr.w	r1, r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	430a      	orrs	r2, r1
 8003116:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003122:	f023 030f 	bic.w	r3, r3, #15
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6851      	ldr	r1, [r2, #4]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6892      	ldr	r2, [r2, #8]
 800312e:	4311      	orrs	r1, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	68d2      	ldr	r2, [r2, #12]
 8003134:	4311      	orrs	r1, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6992      	ldr	r2, [r2, #24]
 800313a:	430a      	orrs	r2, r1
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003146:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d161      	bne.n	8003214 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a38      	ldr	r2, [pc, #224]	; (8003234 <HAL_I2S_Init+0x274>)
 8003154:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a37      	ldr	r2, [pc, #220]	; (8003238 <HAL_I2S_Init+0x278>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <HAL_I2S_Init+0x1a4>
 8003160:	4b36      	ldr	r3, [pc, #216]	; (800323c <HAL_I2S_Init+0x27c>)
 8003162:	e001      	b.n	8003168 <HAL_I2S_Init+0x1a8>
 8003164:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6812      	ldr	r2, [r2, #0]
 800316e:	4932      	ldr	r1, [pc, #200]	; (8003238 <HAL_I2S_Init+0x278>)
 8003170:	428a      	cmp	r2, r1
 8003172:	d101      	bne.n	8003178 <HAL_I2S_Init+0x1b8>
 8003174:	4a31      	ldr	r2, [pc, #196]	; (800323c <HAL_I2S_Init+0x27c>)
 8003176:	e001      	b.n	800317c <HAL_I2S_Init+0x1bc>
 8003178:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800317c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003180:	f023 030f 	bic.w	r3, r3, #15
 8003184:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a2b      	ldr	r2, [pc, #172]	; (8003238 <HAL_I2S_Init+0x278>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d101      	bne.n	8003194 <HAL_I2S_Init+0x1d4>
 8003190:	4b2a      	ldr	r3, [pc, #168]	; (800323c <HAL_I2S_Init+0x27c>)
 8003192:	e001      	b.n	8003198 <HAL_I2S_Init+0x1d8>
 8003194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003198:	2202      	movs	r2, #2
 800319a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a25      	ldr	r2, [pc, #148]	; (8003238 <HAL_I2S_Init+0x278>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d101      	bne.n	80031aa <HAL_I2S_Init+0x1ea>
 80031a6:	4b25      	ldr	r3, [pc, #148]	; (800323c <HAL_I2S_Init+0x27c>)
 80031a8:	e001      	b.n	80031ae <HAL_I2S_Init+0x1ee>
 80031aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ba:	d003      	beq.n	80031c4 <HAL_I2S_Init+0x204>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d103      	bne.n	80031cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80031c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	e001      	b.n	80031d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80031cc:	2300      	movs	r3, #0
 80031ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	b299      	uxth	r1, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80031e6:	4303      	orrs	r3, r0
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	430b      	orrs	r3, r1
 80031ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80031ee:	4313      	orrs	r3, r2
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	897b      	ldrh	r3, [r7, #10]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <HAL_I2S_Init+0x278>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d101      	bne.n	800320c <HAL_I2S_Init+0x24c>
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <HAL_I2S_Init+0x27c>)
 800320a:	e001      	b.n	8003210 <HAL_I2S_Init+0x250>
 800320c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003210:	897a      	ldrh	r2, [r7, #10]
 8003212:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3720      	adds	r7, #32
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	08003337 	.word	0x08003337
 8003230:	cccccccd 	.word	0xcccccccd
 8003234:	0800344d 	.word	0x0800344d
 8003238:	40003800 	.word	0x40003800
 800323c:	40003400 	.word	0x40003400

08003240 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	881a      	ldrh	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	1c9a      	adds	r2, r3, #2
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10e      	bne.n	80032d0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032c0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ffb8 	bl	8003240 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	b292      	uxth	r2, r2
 80032ec:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	1c9a      	adds	r2, r3, #2
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10e      	bne.n	800332e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800331e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff ff93 	bl	8003254 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b086      	sub	sp, #24
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b04      	cmp	r3, #4
 8003350:	d13a      	bne.n	80033c8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	d109      	bne.n	8003370 <I2S_IRQHandler+0x3a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d102      	bne.n	8003370 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff ffb4 	bl	80032d8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003376:	2b40      	cmp	r3, #64	; 0x40
 8003378:	d126      	bne.n	80033c8 <I2S_IRQHandler+0x92>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b20      	cmp	r3, #32
 8003386:	d11f      	bne.n	80033c8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003396:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	f043 0202 	orr.w	r2, r3, #2
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ff50 	bl	8003268 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b03      	cmp	r3, #3
 80033d2:	d136      	bne.n	8003442 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d109      	bne.n	80033f2 <I2S_IRQHandler+0xbc>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	2b80      	cmp	r3, #128	; 0x80
 80033ea:	d102      	bne.n	80033f2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ff45 	bl	800327c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d122      	bne.n	8003442 <I2S_IRQHandler+0x10c>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b20      	cmp	r3, #32
 8003408:	d11b      	bne.n	8003442 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003418:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003434:	f043 0204 	orr.w	r2, r3, #4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff ff13 	bl	8003268 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003442:	bf00      	nop
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4aa2      	ldr	r2, [pc, #648]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d101      	bne.n	800346a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003466:	4ba2      	ldr	r3, [pc, #648]	; (80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003468:	e001      	b.n	800346e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800346a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a9b      	ldr	r2, [pc, #620]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d101      	bne.n	8003488 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003484:	4b9a      	ldr	r3, [pc, #616]	; (80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003486:	e001      	b.n	800348c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003488:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003498:	d004      	beq.n	80034a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f040 8099 	bne.w	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d107      	bne.n	80034be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f925 	bl	8003708 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d107      	bne.n	80034d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f9c8 	bl	8003868 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	d13a      	bne.n	8003558 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d035      	beq.n	8003558 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a7e      	ldr	r2, [pc, #504]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d101      	bne.n	80034fa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80034f6:	4b7e      	ldr	r3, [pc, #504]	; (80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034f8:	e001      	b.n	80034fe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80034fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4979      	ldr	r1, [pc, #484]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003506:	428b      	cmp	r3, r1
 8003508:	d101      	bne.n	800350e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800350a:	4b79      	ldr	r3, [pc, #484]	; (80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800350c:	e001      	b.n	8003512 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800350e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003512:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003516:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003526:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f043 0202 	orr.w	r2, r3, #2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff fe88 	bl	8003268 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b08      	cmp	r3, #8
 8003560:	f040 80be 	bne.w	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 80b8 	beq.w	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800357e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a59      	ldr	r2, [pc, #356]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d101      	bne.n	800358e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800358a:	4b59      	ldr	r3, [pc, #356]	; (80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800358c:	e001      	b.n	8003592 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800358e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4954      	ldr	r1, [pc, #336]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800359a:	428b      	cmp	r3, r1
 800359c:	d101      	bne.n	80035a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800359e:	4b54      	ldr	r3, [pc, #336]	; (80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035a0:	e001      	b.n	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80035a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035aa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035ac:	2300      	movs	r3, #0
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	f043 0204 	orr.w	r2, r3, #4
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff fe4a 	bl	8003268 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035d4:	e084      	b.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d107      	bne.n	80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f8be 	bl	800376c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d107      	bne.n	800360a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f8fd 	bl	8003804 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003610:	2b40      	cmp	r3, #64	; 0x40
 8003612:	d12f      	bne.n	8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d02a      	beq.n	8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800362c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a2e      	ldr	r2, [pc, #184]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d101      	bne.n	800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003638:	4b2d      	ldr	r3, [pc, #180]	; (80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800363a:	e001      	b.n	8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800363c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4929      	ldr	r1, [pc, #164]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003648:	428b      	cmp	r3, r1
 800364a:	d101      	bne.n	8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800364c:	4b28      	ldr	r3, [pc, #160]	; (80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800364e:	e001      	b.n	8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003650:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003654:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003658:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	f043 0202 	orr.w	r2, r3, #2
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fdfa 	bl	8003268 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b08      	cmp	r3, #8
 800367c:	d131      	bne.n	80036e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b00      	cmp	r3, #0
 8003686:	d02c      	beq.n	80036e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a17      	ldr	r2, [pc, #92]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d101      	bne.n	8003696 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003692:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003694:	e001      	b.n	800369a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003696:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4912      	ldr	r1, [pc, #72]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036a2:	428b      	cmp	r3, r1
 80036a4:	d101      	bne.n	80036aa <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036a8:	e001      	b.n	80036ae <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80036aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036c2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	f043 0204 	orr.w	r2, r3, #4
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff fdc5 	bl	8003268 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036de:	e000      	b.n	80036e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036e0:	bf00      	nop
}
 80036e2:	bf00      	nop
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40003800 	.word	0x40003800
 80036f0:	40003400 	.word	0x40003400

080036f4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	1c99      	adds	r1, r3, #2
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6251      	str	r1, [r2, #36]	; 0x24
 800371a:	881a      	ldrh	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d113      	bne.n	8003762 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003748:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff ffc9 	bl	80036f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	1c99      	adds	r1, r3, #2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6251      	str	r1, [r2, #36]	; 0x24
 800377e:	8819      	ldrh	r1, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1d      	ldr	r2, [pc, #116]	; (80037fc <I2SEx_TxISR_I2SExt+0x90>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <I2SEx_TxISR_I2SExt+0x22>
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <I2SEx_TxISR_I2SExt+0x94>)
 800378c:	e001      	b.n	8003792 <I2SEx_TxISR_I2SExt+0x26>
 800378e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003792:	460a      	mov	r2, r1
 8003794:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d121      	bne.n	80037f2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a12      	ldr	r2, [pc, #72]	; (80037fc <I2SEx_TxISR_I2SExt+0x90>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d101      	bne.n	80037bc <I2SEx_TxISR_I2SExt+0x50>
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <I2SEx_TxISR_I2SExt+0x94>)
 80037ba:	e001      	b.n	80037c0 <I2SEx_TxISR_I2SExt+0x54>
 80037bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	490d      	ldr	r1, [pc, #52]	; (80037fc <I2SEx_TxISR_I2SExt+0x90>)
 80037c8:	428b      	cmp	r3, r1
 80037ca:	d101      	bne.n	80037d0 <I2SEx_TxISR_I2SExt+0x64>
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <I2SEx_TxISR_I2SExt+0x94>)
 80037ce:	e001      	b.n	80037d4 <I2SEx_TxISR_I2SExt+0x68>
 80037d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d106      	bne.n	80037f2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff81 	bl	80036f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40003800 	.word	0x40003800
 8003800:	40003400 	.word	0x40003400

08003804 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68d8      	ldr	r0, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003816:	1c99      	adds	r1, r3, #2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800381c:	b282      	uxth	r2, r0
 800381e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d113      	bne.n	8003860 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003846:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff ff4a 	bl	80036f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a20      	ldr	r2, [pc, #128]	; (80038f8 <I2SEx_RxISR_I2SExt+0x90>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d101      	bne.n	800387e <I2SEx_RxISR_I2SExt+0x16>
 800387a:	4b20      	ldr	r3, [pc, #128]	; (80038fc <I2SEx_RxISR_I2SExt+0x94>)
 800387c:	e001      	b.n	8003882 <I2SEx_RxISR_I2SExt+0x1a>
 800387e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003882:	68d8      	ldr	r0, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	1c99      	adds	r1, r3, #2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800388e:	b282      	uxth	r2, r0
 8003890:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d121      	bne.n	80038ee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a12      	ldr	r2, [pc, #72]	; (80038f8 <I2SEx_RxISR_I2SExt+0x90>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d101      	bne.n	80038b8 <I2SEx_RxISR_I2SExt+0x50>
 80038b4:	4b11      	ldr	r3, [pc, #68]	; (80038fc <I2SEx_RxISR_I2SExt+0x94>)
 80038b6:	e001      	b.n	80038bc <I2SEx_RxISR_I2SExt+0x54>
 80038b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	490d      	ldr	r1, [pc, #52]	; (80038f8 <I2SEx_RxISR_I2SExt+0x90>)
 80038c4:	428b      	cmp	r3, r1
 80038c6:	d101      	bne.n	80038cc <I2SEx_RxISR_I2SExt+0x64>
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <I2SEx_RxISR_I2SExt+0x94>)
 80038ca:	e001      	b.n	80038d0 <I2SEx_RxISR_I2SExt+0x68>
 80038cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038d4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d106      	bne.n	80038ee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff ff03 	bl	80036f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40003800 	.word	0x40003800
 80038fc:	40003400 	.word	0x40003400

08003900 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e25b      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d075      	beq.n	8003a0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800391e:	4ba3      	ldr	r3, [pc, #652]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b04      	cmp	r3, #4
 8003928:	d00c      	beq.n	8003944 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392a:	4ba0      	ldr	r3, [pc, #640]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003932:	2b08      	cmp	r3, #8
 8003934:	d112      	bne.n	800395c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003936:	4b9d      	ldr	r3, [pc, #628]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003942:	d10b      	bne.n	800395c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003944:	4b99      	ldr	r3, [pc, #612]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d05b      	beq.n	8003a08 <HAL_RCC_OscConfig+0x108>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d157      	bne.n	8003a08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e236      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003964:	d106      	bne.n	8003974 <HAL_RCC_OscConfig+0x74>
 8003966:	4b91      	ldr	r3, [pc, #580]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a90      	ldr	r2, [pc, #576]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e01d      	b.n	80039b0 <HAL_RCC_OscConfig+0xb0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0x98>
 800397e:	4b8b      	ldr	r3, [pc, #556]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a8a      	ldr	r2, [pc, #552]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b88      	ldr	r3, [pc, #544]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a87      	ldr	r2, [pc, #540]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e00b      	b.n	80039b0 <HAL_RCC_OscConfig+0xb0>
 8003998:	4b84      	ldr	r3, [pc, #528]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a83      	ldr	r2, [pc, #524]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 800399e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	4b81      	ldr	r3, [pc, #516]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a80      	ldr	r2, [pc, #512]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 80039aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d013      	beq.n	80039e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fd fa3c 	bl	8000e34 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c0:	f7fd fa38 	bl	8000e34 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	; 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e1fb      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	4b76      	ldr	r3, [pc, #472]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0xc0>
 80039de:	e014      	b.n	8003a0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e0:	f7fd fa28 	bl	8000e34 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fd fa24 	bl	8000e34 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e1e7      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	4b6c      	ldr	r3, [pc, #432]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0xe8>
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d063      	beq.n	8003ade <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a16:	4b65      	ldr	r3, [pc, #404]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a22:	4b62      	ldr	r3, [pc, #392]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d11c      	bne.n	8003a68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2e:	4b5f      	ldr	r3, [pc, #380]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d116      	bne.n	8003a68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3a:	4b5c      	ldr	r3, [pc, #368]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_RCC_OscConfig+0x152>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d001      	beq.n	8003a52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e1bb      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a52:	4b56      	ldr	r3, [pc, #344]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4952      	ldr	r1, [pc, #328]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a66:	e03a      	b.n	8003ade <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d020      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a70:	4b4f      	ldr	r3, [pc, #316]	; (8003bb0 <HAL_RCC_OscConfig+0x2b0>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fd f9dd 	bl	8000e34 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7e:	f7fd f9d9 	bl	8000e34 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e19c      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a90:	4b46      	ldr	r3, [pc, #280]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9c:	4b43      	ldr	r3, [pc, #268]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4940      	ldr	r1, [pc, #256]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	600b      	str	r3, [r1, #0]
 8003ab0:	e015      	b.n	8003ade <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ab2:	4b3f      	ldr	r3, [pc, #252]	; (8003bb0 <HAL_RCC_OscConfig+0x2b0>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fd f9bc 	bl	8000e34 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac0:	f7fd f9b8 	bl	8000e34 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e17b      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad2:	4b36      	ldr	r3, [pc, #216]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d030      	beq.n	8003b4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d016      	beq.n	8003b20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af2:	4b30      	ldr	r3, [pc, #192]	; (8003bb4 <HAL_RCC_OscConfig+0x2b4>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7fd f99c 	bl	8000e34 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b00:	f7fd f998 	bl	8000e34 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e15b      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b12:	4b26      	ldr	r3, [pc, #152]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x200>
 8003b1e:	e015      	b.n	8003b4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b20:	4b24      	ldr	r3, [pc, #144]	; (8003bb4 <HAL_RCC_OscConfig+0x2b4>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b26:	f7fd f985 	bl	8000e34 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2e:	f7fd f981 	bl	8000e34 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e144      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b40:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80a0 	beq.w	8003c9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5e:	4b13      	ldr	r3, [pc, #76]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10f      	bne.n	8003b8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	4a0e      	ldr	r2, [pc, #56]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b78:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_OscConfig+0x2b8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d121      	bne.n	8003bda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <HAL_RCC_OscConfig+0x2b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a07      	ldr	r2, [pc, #28]	; (8003bb8 <HAL_RCC_OscConfig+0x2b8>)
 8003b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba2:	f7fd f947 	bl	8000e34 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	e011      	b.n	8003bce <HAL_RCC_OscConfig+0x2ce>
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	42470000 	.word	0x42470000
 8003bb4:	42470e80 	.word	0x42470e80
 8003bb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bbc:	f7fd f93a 	bl	8000e34 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0fd      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bce:	4b81      	ldr	r3, [pc, #516]	; (8003dd4 <HAL_RCC_OscConfig+0x4d4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d106      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x2f0>
 8003be2:	4b7d      	ldr	r3, [pc, #500]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	4a7c      	ldr	r2, [pc, #496]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	6713      	str	r3, [r2, #112]	; 0x70
 8003bee:	e01c      	b.n	8003c2a <HAL_RCC_OscConfig+0x32a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCC_OscConfig+0x312>
 8003bf8:	4b77      	ldr	r3, [pc, #476]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a76      	ldr	r2, [pc, #472]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
 8003c04:	4b74      	ldr	r3, [pc, #464]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	4a73      	ldr	r2, [pc, #460]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c10:	e00b      	b.n	8003c2a <HAL_RCC_OscConfig+0x32a>
 8003c12:	4b71      	ldr	r3, [pc, #452]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	4a70      	ldr	r2, [pc, #448]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1e:	4b6e      	ldr	r3, [pc, #440]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	4a6d      	ldr	r2, [pc, #436]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d015      	beq.n	8003c5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c32:	f7fd f8ff 	bl	8000e34 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fd f8fb 	bl	8000e34 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e0bc      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c50:	4b61      	ldr	r3, [pc, #388]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0ee      	beq.n	8003c3a <HAL_RCC_OscConfig+0x33a>
 8003c5c:	e014      	b.n	8003c88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5e:	f7fd f8e9 	bl	8000e34 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fd f8e5 	bl	8000e34 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e0a6      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7c:	4b56      	ldr	r3, [pc, #344]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ee      	bne.n	8003c66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d105      	bne.n	8003c9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8e:	4b52      	ldr	r3, [pc, #328]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	4a51      	ldr	r2, [pc, #324]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 8092 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ca4:	4b4c      	ldr	r3, [pc, #304]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 030c 	and.w	r3, r3, #12
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d05c      	beq.n	8003d6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d141      	bne.n	8003d3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb8:	4b48      	ldr	r3, [pc, #288]	; (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7fd f8b9 	bl	8000e34 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc6:	f7fd f8b5 	bl	8000e34 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e078      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd8:	4b3f      	ldr	r3, [pc, #252]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	019b      	lsls	r3, r3, #6
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	061b      	lsls	r3, r3, #24
 8003d08:	4933      	ldr	r1, [pc, #204]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d0e:	4b33      	ldr	r3, [pc, #204]	; (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7fd f88e 	bl	8000e34 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fd f88a 	bl	8000e34 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e04d      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2e:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x41c>
 8003d3a:	e045      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3c:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d42:	f7fd f877 	bl	8000e34 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4a:	f7fd f873 	bl	8000e34 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e036      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f0      	bne.n	8003d4a <HAL_RCC_OscConfig+0x44a>
 8003d68:	e02e      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e029      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d76:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d11c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d115      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d9e:	4013      	ands	r3, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d10d      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d106      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	42470060 	.word	0x42470060

08003de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0cc      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003df4:	4b68      	ldr	r3, [pc, #416]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d90c      	bls.n	8003e1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e02:	4b65      	ldr	r3, [pc, #404]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0a:	4b63      	ldr	r3, [pc, #396]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0b8      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d020      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e34:	4b59      	ldr	r3, [pc, #356]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4a58      	ldr	r2, [pc, #352]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e4c:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	4a52      	ldr	r2, [pc, #328]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e58:	4b50      	ldr	r3, [pc, #320]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	494d      	ldr	r1, [pc, #308]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d044      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d107      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	4b47      	ldr	r3, [pc, #284]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d119      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e07f      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d003      	beq.n	8003e9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d107      	bne.n	8003eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9e:	4b3f      	ldr	r3, [pc, #252]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e06f      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eae:	4b3b      	ldr	r3, [pc, #236]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e067      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ebe:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f023 0203 	bic.w	r2, r3, #3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	4934      	ldr	r1, [pc, #208]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ed0:	f7fc ffb0 	bl	8000e34 <HAL_GetTick>
 8003ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed6:	e00a      	b.n	8003eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed8:	f7fc ffac 	bl	8000e34 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e04f      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eee:	4b2b      	ldr	r3, [pc, #172]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 020c 	and.w	r2, r3, #12
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d1eb      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f00:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d20c      	bcs.n	8003f28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0e:	4b22      	ldr	r3, [pc, #136]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f16:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d001      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e032      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f34:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4916      	ldr	r1, [pc, #88]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d009      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	490e      	ldr	r1, [pc, #56]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f66:	f000 f821 	bl	8003fac <HAL_RCC_GetSysClockFreq>
 8003f6a:	4601      	mov	r1, r0
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f78:	5cd3      	ldrb	r3, [r2, r3]
 8003f7a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f7e:	4a09      	ldr	r2, [pc, #36]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f82:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fc ff10 	bl	8000dac <HAL_InitTick>

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40023c00 	.word	0x40023c00
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	08007730 	.word	0x08007730
 8003fa4:	20000000 	.word	0x20000000
 8003fa8:	20000004 	.word	0x20000004

08003fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc2:	4b63      	ldr	r3, [pc, #396]	; (8004150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d007      	beq.n	8003fde <HAL_RCC_GetSysClockFreq+0x32>
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d008      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x38>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f040 80b4 	bne.w	8004140 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fd8:	4b5e      	ldr	r3, [pc, #376]	; (8004154 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003fda:	60bb      	str	r3, [r7, #8]
       break;
 8003fdc:	e0b3      	b.n	8004146 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fde:	4b5e      	ldr	r3, [pc, #376]	; (8004158 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003fe0:	60bb      	str	r3, [r7, #8]
      break;
 8003fe2:	e0b0      	b.n	8004146 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fe4:	4b5a      	ldr	r3, [pc, #360]	; (8004150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fee:	4b58      	ldr	r3, [pc, #352]	; (8004150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d04a      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffa:	4b55      	ldr	r3, [pc, #340]	; (8004150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	099b      	lsrs	r3, r3, #6
 8004000:	f04f 0400 	mov.w	r4, #0
 8004004:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	ea03 0501 	and.w	r5, r3, r1
 8004010:	ea04 0602 	and.w	r6, r4, r2
 8004014:	4629      	mov	r1, r5
 8004016:	4632      	mov	r2, r6
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	f04f 0400 	mov.w	r4, #0
 8004020:	0154      	lsls	r4, r2, #5
 8004022:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004026:	014b      	lsls	r3, r1, #5
 8004028:	4619      	mov	r1, r3
 800402a:	4622      	mov	r2, r4
 800402c:	1b49      	subs	r1, r1, r5
 800402e:	eb62 0206 	sbc.w	r2, r2, r6
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	f04f 0400 	mov.w	r4, #0
 800403a:	0194      	lsls	r4, r2, #6
 800403c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004040:	018b      	lsls	r3, r1, #6
 8004042:	1a5b      	subs	r3, r3, r1
 8004044:	eb64 0402 	sbc.w	r4, r4, r2
 8004048:	f04f 0100 	mov.w	r1, #0
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	00e2      	lsls	r2, r4, #3
 8004052:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004056:	00d9      	lsls	r1, r3, #3
 8004058:	460b      	mov	r3, r1
 800405a:	4614      	mov	r4, r2
 800405c:	195b      	adds	r3, r3, r5
 800405e:	eb44 0406 	adc.w	r4, r4, r6
 8004062:	f04f 0100 	mov.w	r1, #0
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	0262      	lsls	r2, r4, #9
 800406c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004070:	0259      	lsls	r1, r3, #9
 8004072:	460b      	mov	r3, r1
 8004074:	4614      	mov	r4, r2
 8004076:	4618      	mov	r0, r3
 8004078:	4621      	mov	r1, r4
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f04f 0400 	mov.w	r4, #0
 8004080:	461a      	mov	r2, r3
 8004082:	4623      	mov	r3, r4
 8004084:	f7fc f8a0 	bl	80001c8 <__aeabi_uldivmod>
 8004088:	4603      	mov	r3, r0
 800408a:	460c      	mov	r4, r1
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	e049      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004090:	4b2f      	ldr	r3, [pc, #188]	; (8004150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	099b      	lsrs	r3, r3, #6
 8004096:	f04f 0400 	mov.w	r4, #0
 800409a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	ea03 0501 	and.w	r5, r3, r1
 80040a6:	ea04 0602 	and.w	r6, r4, r2
 80040aa:	4629      	mov	r1, r5
 80040ac:	4632      	mov	r2, r6
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	f04f 0400 	mov.w	r4, #0
 80040b6:	0154      	lsls	r4, r2, #5
 80040b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040bc:	014b      	lsls	r3, r1, #5
 80040be:	4619      	mov	r1, r3
 80040c0:	4622      	mov	r2, r4
 80040c2:	1b49      	subs	r1, r1, r5
 80040c4:	eb62 0206 	sbc.w	r2, r2, r6
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	f04f 0400 	mov.w	r4, #0
 80040d0:	0194      	lsls	r4, r2, #6
 80040d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040d6:	018b      	lsls	r3, r1, #6
 80040d8:	1a5b      	subs	r3, r3, r1
 80040da:	eb64 0402 	sbc.w	r4, r4, r2
 80040de:	f04f 0100 	mov.w	r1, #0
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	00e2      	lsls	r2, r4, #3
 80040e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040ec:	00d9      	lsls	r1, r3, #3
 80040ee:	460b      	mov	r3, r1
 80040f0:	4614      	mov	r4, r2
 80040f2:	195b      	adds	r3, r3, r5
 80040f4:	eb44 0406 	adc.w	r4, r4, r6
 80040f8:	f04f 0100 	mov.w	r1, #0
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	02a2      	lsls	r2, r4, #10
 8004102:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004106:	0299      	lsls	r1, r3, #10
 8004108:	460b      	mov	r3, r1
 800410a:	4614      	mov	r4, r2
 800410c:	4618      	mov	r0, r3
 800410e:	4621      	mov	r1, r4
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f04f 0400 	mov.w	r4, #0
 8004116:	461a      	mov	r2, r3
 8004118:	4623      	mov	r3, r4
 800411a:	f7fc f855 	bl	80001c8 <__aeabi_uldivmod>
 800411e:	4603      	mov	r3, r0
 8004120:	460c      	mov	r4, r1
 8004122:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004124:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	3301      	adds	r3, #1
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	60bb      	str	r3, [r7, #8]
      break;
 800413e:	e002      	b.n	8004146 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004140:	4b04      	ldr	r3, [pc, #16]	; (8004154 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004142:	60bb      	str	r3, [r7, #8]
      break;
 8004144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004146:	68bb      	ldr	r3, [r7, #8]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004150:	40023800 	.word	0x40023800
 8004154:	00f42400 	.word	0x00f42400
 8004158:	007a1200 	.word	0x007a1200

0800415c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004160:	4b03      	ldr	r3, [pc, #12]	; (8004170 <HAL_RCC_GetHCLKFreq+0x14>)
 8004162:	681b      	ldr	r3, [r3, #0]
}
 8004164:	4618      	mov	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000000 	.word	0x20000000

08004174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004178:	f7ff fff0 	bl	800415c <HAL_RCC_GetHCLKFreq>
 800417c:	4601      	mov	r1, r0
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	0a9b      	lsrs	r3, r3, #10
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	4a03      	ldr	r2, [pc, #12]	; (8004198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800418a:	5cd3      	ldrb	r3, [r2, r3]
 800418c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40023800 	.word	0x40023800
 8004198:	08007740 	.word	0x08007740

0800419c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d035      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041c4:	4b62      	ldr	r3, [pc, #392]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041ca:	f7fc fe33 	bl	8000e34 <HAL_GetTick>
 80041ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041d0:	e008      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041d2:	f7fc fe2f 	bl	8000e34 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e0b0      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041e4:	4b5b      	ldr	r3, [pc, #364]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f0      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	019a      	lsls	r2, r3, #6
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	071b      	lsls	r3, r3, #28
 80041fc:	4955      	ldr	r1, [pc, #340]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004204:	4b52      	ldr	r3, [pc, #328]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800420a:	f7fc fe13 	bl	8000e34 <HAL_GetTick>
 800420e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004212:	f7fc fe0f 	bl	8000e34 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e090      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004224:	4b4b      	ldr	r3, [pc, #300]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8083 	beq.w	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	4b44      	ldr	r3, [pc, #272]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	4a43      	ldr	r2, [pc, #268]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424c:	6413      	str	r3, [r2, #64]	; 0x40
 800424e:	4b41      	ldr	r3, [pc, #260]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800425a:	4b3f      	ldr	r3, [pc, #252]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a3e      	ldr	r2, [pc, #248]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004264:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004266:	f7fc fde5 	bl	8000e34 <HAL_GetTick>
 800426a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800426c:	e008      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800426e:	f7fc fde1 	bl	8000e34 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e062      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004280:	4b35      	ldr	r3, [pc, #212]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800428c:	4b31      	ldr	r3, [pc, #196]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004294:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d02f      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d028      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042aa:	4b2a      	ldr	r3, [pc, #168]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042b4:	4b29      	ldr	r3, [pc, #164]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ba:	4b28      	ldr	r3, [pc, #160]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042c0:	4a24      	ldr	r2, [pc, #144]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042c6:	4b23      	ldr	r3, [pc, #140]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d114      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042d2:	f7fc fdaf 	bl	8000e34 <HAL_GetTick>
 80042d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d8:	e00a      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042da:	f7fc fdab 	bl	8000e34 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e02a      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f0:	4b18      	ldr	r3, [pc, #96]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0ee      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004308:	d10d      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800430a:	4b12      	ldr	r3, [pc, #72]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800431a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431e:	490d      	ldr	r1, [pc, #52]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004320:	4313      	orrs	r3, r2
 8004322:	608b      	str	r3, [r1, #8]
 8004324:	e005      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004326:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	4a0a      	ldr	r2, [pc, #40]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800432c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004330:	6093      	str	r3, [r2, #8]
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004334:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800433e:	4905      	ldr	r1, [pc, #20]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004340:	4313      	orrs	r3, r2
 8004342:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	42470068 	.word	0x42470068
 8004354:	40023800 	.word	0x40023800
 8004358:	40007000 	.word	0x40007000
 800435c:	42470e40 	.word	0x42470e40

08004360 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d13d      	bne.n	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800437e:	4b22      	ldr	r3, [pc, #136]	; (8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004386:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d004      	beq.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800438e:	2b01      	cmp	r3, #1
 8004390:	d12f      	bne.n	80043f2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004392:	4b1e      	ldr	r3, [pc, #120]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004394:	617b      	str	r3, [r7, #20]
          break;
 8004396:	e02f      	b.n	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004398:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a4:	d108      	bne.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043a6:	4b18      	ldr	r3, [pc, #96]	; (8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ae:	4a18      	ldr	r2, [pc, #96]	; (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	e007      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043b8:	4b13      	ldr	r3, [pc, #76]	; (8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c0:	4a14      	ldr	r2, [pc, #80]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043c8:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ce:	099b      	lsrs	r3, r3, #6
 80043d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	fb02 f303 	mul.w	r3, r2, r3
 80043da:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e2:	0f1b      	lsrs	r3, r3, #28
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ee:	617b      	str	r3, [r7, #20]
          break;
 80043f0:	e002      	b.n	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
          break;
 80043f6:	bf00      	nop
        }
      }
      break;
 80043f8:	bf00      	nop
    }
  }
  return frequency;
 80043fa:	697b      	ldr	r3, [r7, #20]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	371c      	adds	r7, #28
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	40023800 	.word	0x40023800
 800440c:	00bb8000 	.word	0x00bb8000
 8004410:	007a1200 	.word	0x007a1200
 8004414:	00f42400 	.word	0x00f42400

08004418 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e056      	b.n	80044d8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d106      	bne.n	800444a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7fc fb9b 	bl	8000b80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2202      	movs	r2, #2
 800444e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004460:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	ea42 0103 	orr.w	r1, r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	0c1b      	lsrs	r3, r3, #16
 80044a8:	f003 0104 	and.w	r1, r3, #4
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69da      	ldr	r2, [r3, #28]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044e0:	b084      	sub	sp, #16
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	f107 001c 	add.w	r0, r7, #28
 80044ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d122      	bne.n	800453e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800450c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004522:	2b01      	cmp	r3, #1
 8004524:	d105      	bne.n	8004532 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f94a 	bl	80047cc <USB_CoreReset>
 8004538:	4603      	mov	r3, r0
 800453a:	73fb      	strb	r3, [r7, #15]
 800453c:	e01a      	b.n	8004574 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f93e 	bl	80047cc <USB_CoreReset>
 8004550:	4603      	mov	r3, r0
 8004552:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	639a      	str	r2, [r3, #56]	; 0x38
 8004566:	e005      	b.n	8004574 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	2b01      	cmp	r3, #1
 8004578:	d10b      	bne.n	8004592 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f043 0206 	orr.w	r2, r3, #6
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f043 0220 	orr.w	r2, r3, #32
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004592:	7bfb      	ldrb	r3, [r7, #15]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800459e:	b004      	add	sp, #16
 80045a0:	4770      	bx	lr

080045a2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f023 0201 	bic.w	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	460b      	mov	r3, r1
 80045f0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045fe:	78fb      	ldrb	r3, [r7, #3]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d106      	bne.n	8004612 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	60da      	str	r2, [r3, #12]
 8004610:	e00b      	b.n	800462a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004612:	78fb      	ldrb	r3, [r7, #3]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d106      	bne.n	8004626 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	60da      	str	r2, [r3, #12]
 8004624:	e001      	b.n	800462a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e003      	b.n	8004632 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800462a:	2032      	movs	r0, #50	; 0x32
 800462c:	f7fc fc0e 	bl	8000e4c <HAL_Delay>

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	019b      	lsls	r3, r3, #6
 800464e:	f043 0220 	orr.w	r2, r3, #32
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3301      	adds	r3, #1
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4a09      	ldr	r2, [pc, #36]	; (8004684 <USB_FlushTxFifo+0x48>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d901      	bls.n	8004668 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e006      	b.n	8004676 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b20      	cmp	r3, #32
 8004672:	d0f0      	beq.n	8004656 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	00030d40 	.word	0x00030d40

08004688 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2210      	movs	r2, #16
 8004698:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3301      	adds	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4a09      	ldr	r2, [pc, #36]	; (80046c8 <USB_FlushRxFifo+0x40>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d901      	bls.n	80046ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e006      	b.n	80046ba <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	d0f0      	beq.n	800469a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	00030d40 	.word	0x00030d40

080046cc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b089      	sub	sp, #36	; 0x24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	4611      	mov	r1, r2
 80046d8:	461a      	mov	r2, r3
 80046da:	460b      	mov	r3, r1
 80046dc:	71fb      	strb	r3, [r7, #7]
 80046de:	4613      	mov	r3, r2
 80046e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80046ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d11a      	bne.n	8004728 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046f2:	88bb      	ldrh	r3, [r7, #4]
 80046f4:	3303      	adds	r3, #3
 80046f6:	089b      	lsrs	r3, r3, #2
 80046f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046fa:	2300      	movs	r3, #0
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	e00f      	b.n	8004720 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004700:	79fb      	ldrb	r3, [r7, #7]
 8004702:	031a      	lsls	r2, r3, #12
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	4413      	add	r3, r2
 8004708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800470c:	461a      	mov	r2, r3
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	3304      	adds	r3, #4
 8004718:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	3301      	adds	r3, #1
 800471e:	61bb      	str	r3, [r7, #24]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	429a      	cmp	r2, r3
 8004726:	d3eb      	bcc.n	8004700 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3724      	adds	r7, #36	; 0x24
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004736:	b480      	push	{r7}
 8004738:	b089      	sub	sp, #36	; 0x24
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	4613      	mov	r3, r2
 8004742:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800474c:	88fb      	ldrh	r3, [r7, #6]
 800474e:	3303      	adds	r3, #3
 8004750:	089b      	lsrs	r3, r3, #2
 8004752:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004754:	2300      	movs	r3, #0
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	e00b      	b.n	8004772 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	601a      	str	r2, [r3, #0]
    pDest++;
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3304      	adds	r3, #4
 800476a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	3301      	adds	r3, #1
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	429a      	cmp	r2, r3
 8004778:	d3ef      	bcc.n	800475a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800477a:	69fb      	ldr	r3, [r7, #28]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3724      	adds	r7, #36	; 0x24
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4013      	ands	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047a0:	68fb      	ldr	r3, [r7, #12]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f003 0301 	and.w	r3, r3, #1
}
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3301      	adds	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4a13      	ldr	r2, [pc, #76]	; (8004830 <USB_CoreReset+0x64>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e01b      	b.n	8004822 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	daf2      	bge.n	80047d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f043 0201 	orr.w	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3301      	adds	r3, #1
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4a09      	ldr	r2, [pc, #36]	; (8004830 <USB_CoreReset+0x64>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d901      	bls.n	8004814 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e006      	b.n	8004822 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b01      	cmp	r3, #1
 800481e:	d0f0      	beq.n	8004802 <USB_CoreReset+0x36>

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	00030d40 	.word	0x00030d40

08004834 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004834:	b084      	sub	sp, #16
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	f107 001c 	add.w	r0, r7, #28
 8004842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004850:	461a      	mov	r2, r3
 8004852:	2300      	movs	r3, #0
 8004854:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d018      	beq.n	80048b8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	2b03      	cmp	r3, #3
 800488a:	d10a      	bne.n	80048a2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800489a:	f043 0304 	orr.w	r3, r3, #4
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	e014      	b.n	80048cc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048b0:	f023 0304 	bic.w	r3, r3, #4
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	e009      	b.n	80048cc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048c6:	f023 0304 	bic.w	r3, r3, #4
 80048ca:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80048cc:	2110      	movs	r1, #16
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff feb4 	bl	800463c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff fed7 	bl	8004688 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	e015      	b.n	800490c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ec:	461a      	mov	r2, r3
 80048ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048f2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004900:	461a      	mov	r2, r3
 8004902:	2300      	movs	r3, #0
 8004904:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3301      	adds	r3, #1
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	429a      	cmp	r2, r3
 8004912:	d3e5      	bcc.n	80048e0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004914:	2101      	movs	r1, #1
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f8ac 	bl	8004a74 <USB_DriveVbus>

  HAL_Delay(200U);
 800491c:	20c8      	movs	r0, #200	; 0xc8
 800491e:	f7fc fa95 	bl	8000e4c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800492e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00b      	beq.n	8004954 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004942:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a14      	ldr	r2, [pc, #80]	; (8004998 <USB_HostInit+0x164>)
 8004948:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a13      	ldr	r2, [pc, #76]	; (800499c <USB_HostInit+0x168>)
 800494e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004952:	e009      	b.n	8004968 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2280      	movs	r2, #128	; 0x80
 8004958:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a10      	ldr	r2, [pc, #64]	; (80049a0 <USB_HostInit+0x16c>)
 800495e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a10      	ldr	r2, [pc, #64]	; (80049a4 <USB_HostInit+0x170>)
 8004964:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	2b00      	cmp	r3, #0
 800496c:	d105      	bne.n	800497a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f043 0210 	orr.w	r2, r3, #16
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699a      	ldr	r2, [r3, #24]
 800497e:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <USB_HostInit+0x174>)
 8004980:	4313      	orrs	r3, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004992:	b004      	add	sp, #16
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	01000200 	.word	0x01000200
 800499c:	00e00300 	.word	0x00e00300
 80049a0:	00600080 	.word	0x00600080
 80049a4:	004000e0 	.word	0x004000e0
 80049a8:	a3200008 	.word	0xa3200008

080049ac <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049ca:	f023 0303 	bic.w	r3, r3, #3
 80049ce:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	68f9      	ldr	r1, [r7, #12]
 80049e0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049e4:	4313      	orrs	r3, r2
 80049e6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d107      	bne.n	80049fe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f4:	461a      	mov	r2, r3
 80049f6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80049fa:	6053      	str	r3, [r2, #4]
 80049fc:	e009      	b.n	8004a12 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80049fe:	78fb      	ldrb	r3, [r7, #3]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d106      	bne.n	8004a12 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004a10:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a40:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a4e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004a50:	2064      	movs	r0, #100	; 0x64
 8004a52:	f7fc f9fb 	bl	8000e4c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a62:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004a64:	200a      	movs	r0, #10
 8004a66:	f7fc f9f1 	bl	8000e4c <HAL_Delay>

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a98:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d109      	bne.n	8004ab8 <USB_DriveVbus+0x44>
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d106      	bne.n	8004ab8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ab2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ab6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac2:	d109      	bne.n	8004ad8 <USB_DriveVbus+0x64>
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ad6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b085      	sub	sp, #20
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	0c5b      	lsrs	r3, r3, #17
 8004b04:	f003 0303 	and.w	r3, r3, #3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	b29b      	uxth	r3, r3
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	4608      	mov	r0, r1
 8004b42:	4611      	mov	r1, r2
 8004b44:	461a      	mov	r2, r3
 8004b46:	4603      	mov	r3, r0
 8004b48:	70fb      	strb	r3, [r7, #3]
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	70bb      	strb	r3, [r7, #2]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b66:	461a      	mov	r2, r3
 8004b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b6c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004b6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d87e      	bhi.n	8004c74 <USB_HC_Init+0x13c>
 8004b76:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <USB_HC_Init+0x44>)
 8004b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7c:	08004b8d 	.word	0x08004b8d
 8004b80:	08004c37 	.word	0x08004c37
 8004b84:	08004b8d 	.word	0x08004b8d
 8004b88:	08004bf9 	.word	0x08004bf9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b98:	461a      	mov	r2, r3
 8004b9a:	f240 439d 	movw	r3, #1181	; 0x49d
 8004b9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004ba0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	da10      	bge.n	8004bca <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	0151      	lsls	r1, r2, #5
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	440a      	add	r2, r1
 8004bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004bc8:	e057      	b.n	8004c7a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d051      	beq.n	8004c7a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004bd6:	78fb      	ldrb	r3, [r7, #3]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	78fa      	ldrb	r2, [r7, #3]
 8004be6:	0151      	lsls	r1, r2, #5
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	440a      	add	r2, r1
 8004bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bf0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004bf4:	60d3      	str	r3, [r2, #12]
      break;
 8004bf6:	e040      	b.n	8004c7a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c04:	461a      	mov	r2, r3
 8004c06:	f240 639d 	movw	r3, #1693	; 0x69d
 8004c0a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004c0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	da34      	bge.n	8004c7e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	0151      	lsls	r1, r2, #5
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	440a      	add	r2, r1
 8004c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c32:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004c34:	e023      	b.n	8004c7e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c42:	461a      	mov	r2, r3
 8004c44:	f240 2325 	movw	r3, #549	; 0x225
 8004c48:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004c4a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	da17      	bge.n	8004c82 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004c52:	78fb      	ldrb	r3, [r7, #3]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	78fa      	ldrb	r2, [r7, #3]
 8004c62:	0151      	lsls	r1, r2, #5
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	440a      	add	r2, r1
 8004c68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c6c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004c70:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004c72:	e006      	b.n	8004c82 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	75fb      	strb	r3, [r7, #23]
      break;
 8004c78:	e004      	b.n	8004c84 <USB_HC_Init+0x14c>
      break;
 8004c7a:	bf00      	nop
 8004c7c:	e002      	b.n	8004c84 <USB_HC_Init+0x14c>
      break;
 8004c7e:	bf00      	nop
 8004c80:	e000      	b.n	8004c84 <USB_HC_Init+0x14c>
      break;
 8004c82:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c8a:	699a      	ldr	r2, [r3, #24]
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	2101      	movs	r1, #1
 8004c94:	fa01 f303 	lsl.w	r3, r1, r3
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004cae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	da03      	bge.n	8004cbe <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	e001      	b.n	8004cc2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004cc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d103      	bne.n	8004cd2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004cca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	e001      	b.n	8004cd6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004cd6:	787b      	ldrb	r3, [r7, #1]
 8004cd8:	059b      	lsls	r3, r3, #22
 8004cda:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004cde:	78bb      	ldrb	r3, [r7, #2]
 8004ce0:	02db      	lsls	r3, r3, #11
 8004ce2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ce6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ce8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004cec:	049b      	lsls	r3, r3, #18
 8004cee:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004cf2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004cf4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004cfa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	0159      	lsls	r1, r3, #5
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	440b      	add	r3, r1
 8004d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d12:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004d14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d10f      	bne.n	8004d3c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	78fa      	ldrb	r2, [r7, #3]
 8004d2c:	0151      	lsls	r1, r2, #5
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	440a      	add	r2, r1
 8004d32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d3a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop

08004d4c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08c      	sub	sp, #48	; 0x30
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	4613      	mov	r3, r2
 8004d58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	785b      	ldrb	r3, [r3, #1]
 8004d62:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d68:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d028      	beq.n	8004dc8 <USB_HC_StartXfer+0x7c>
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	791b      	ldrb	r3, [r3, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d124      	bne.n	8004dc8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10b      	bne.n	8004d9c <USB_HC_StartXfer+0x50>
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	795b      	ldrb	r3, [r3, #5]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d107      	bne.n	8004d9c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	785b      	ldrb	r3, [r3, #1]
 8004d90:	4619      	mov	r1, r3
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 fa2e 	bl	80051f4 <USB_DoPing>
      return HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e112      	b.n	8004fc2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d112      	bne.n	8004dc8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	0151      	lsls	r1, r2, #5
 8004db4:	6a3a      	ldr	r2, [r7, #32]
 8004db6:	440a      	add	r2, r1
 8004db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dbc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004dc0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d018      	beq.n	8004e02 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	8912      	ldrh	r2, [r2, #8]
 8004dd8:	4413      	add	r3, r2
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	8912      	ldrh	r2, [r2, #8]
 8004de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004de4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004de6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004de8:	8b7b      	ldrh	r3, [r7, #26]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d90b      	bls.n	8004e06 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004dee:	8b7b      	ldrh	r3, [r7, #26]
 8004df0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004df2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	8912      	ldrh	r2, [r2, #8]
 8004df8:	fb02 f203 	mul.w	r2, r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	611a      	str	r2, [r3, #16]
 8004e00:	e001      	b.n	8004e06 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004e02:	2301      	movs	r3, #1
 8004e04:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	78db      	ldrb	r3, [r3, #3]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d006      	beq.n	8004e1c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004e0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	8912      	ldrh	r2, [r2, #8]
 8004e14:	fb02 f203 	mul.w	r2, r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004e24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e26:	04d9      	lsls	r1, r3, #19
 8004e28:	4b68      	ldr	r3, [pc, #416]	; (8004fcc <USB_HC_StartXfer+0x280>)
 8004e2a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e2c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	7a9b      	ldrb	r3, [r3, #10]
 8004e32:	075b      	lsls	r3, r3, #29
 8004e34:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e38:	69f9      	ldr	r1, [r7, #28]
 8004e3a:	0148      	lsls	r0, r1, #5
 8004e3c:	6a39      	ldr	r1, [r7, #32]
 8004e3e:	4401      	add	r1, r0
 8004e40:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004e44:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e46:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d009      	beq.n	8004e62 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	68d9      	ldr	r1, [r3, #12]
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5e:	460a      	mov	r2, r1
 8004e60:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	bf0c      	ite	eq
 8004e72:	2301      	moveq	r3, #1
 8004e74:	2300      	movne	r3, #0
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	69fa      	ldr	r2, [r7, #28]
 8004e8a:	0151      	lsls	r1, r2, #5
 8004e8c:	6a3a      	ldr	r2, [r7, #32]
 8004e8e:	440a      	add	r2, r1
 8004e90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e94:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e98:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	7e7b      	ldrb	r3, [r7, #25]
 8004eaa:	075b      	lsls	r3, r3, #29
 8004eac:	69f9      	ldr	r1, [r7, #28]
 8004eae:	0148      	lsls	r0, r1, #5
 8004eb0:	6a39      	ldr	r1, [r7, #32]
 8004eb2:	4401      	add	r1, r0
 8004eb4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a41      	ldr	r2, [pc, #260]	; (8004fd0 <USB_HC_StartXfer+0x284>)
 8004ecc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ece:	4b40      	ldr	r3, [pc, #256]	; (8004fd0 <USB_HC_StartXfer+0x284>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ed6:	4a3e      	ldr	r2, [pc, #248]	; (8004fd0 <USB_HC_StartXfer+0x284>)
 8004ed8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	78db      	ldrb	r3, [r3, #3]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d006      	beq.n	8004ef0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004ee2:	4b3b      	ldr	r3, [pc, #236]	; (8004fd0 <USB_HC_StartXfer+0x284>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eea:	4a39      	ldr	r2, [pc, #228]	; (8004fd0 <USB_HC_StartXfer+0x284>)
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e005      	b.n	8004efc <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004ef0:	4b37      	ldr	r3, [pc, #220]	; (8004fd0 <USB_HC_StartXfer+0x284>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ef8:	4a35      	ldr	r2, [pc, #212]	; (8004fd0 <USB_HC_StartXfer+0x284>)
 8004efa:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004efc:	4b34      	ldr	r3, [pc, #208]	; (8004fd0 <USB_HC_StartXfer+0x284>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f04:	4a32      	ldr	r2, [pc, #200]	; (8004fd0 <USB_HC_StartXfer+0x284>)
 8004f06:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f14:	461a      	mov	r2, r3
 8004f16:	4b2e      	ldr	r3, [pc, #184]	; (8004fd0 <USB_HC_StartXfer+0x284>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004f1c:	79fb      	ldrb	r3, [r7, #7]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d14e      	bne.n	8004fc0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	78db      	ldrb	r3, [r3, #3]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d14a      	bne.n	8004fc0 <USB_HC_StartXfer+0x274>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d046      	beq.n	8004fc0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	79db      	ldrb	r3, [r3, #7]
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d830      	bhi.n	8004f9c <USB_HC_StartXfer+0x250>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <USB_HC_StartXfer+0x1f4>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f51 	.word	0x08004f51
 8004f44:	08004f75 	.word	0x08004f75
 8004f48:	08004f51 	.word	0x08004f51
 8004f4c:	08004f75 	.word	0x08004f75
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	3303      	adds	r3, #3
 8004f56:	089b      	lsrs	r3, r3, #2
 8004f58:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004f5a:	8afa      	ldrh	r2, [r7, #22]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d91c      	bls.n	8004fa0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f043 0220 	orr.w	r2, r3, #32
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	619a      	str	r2, [r3, #24]
          }
          break;
 8004f72:	e015      	b.n	8004fa0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	3303      	adds	r3, #3
 8004f7a:	089b      	lsrs	r3, r3, #2
 8004f7c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004f7e:	8afa      	ldrh	r2, [r7, #22]
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d90a      	bls.n	8004fa4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	619a      	str	r2, [r3, #24]
          }
          break;
 8004f9a:	e003      	b.n	8004fa4 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004f9c:	bf00      	nop
 8004f9e:	e002      	b.n	8004fa6 <USB_HC_StartXfer+0x25a>
          break;
 8004fa0:	bf00      	nop
 8004fa2:	e000      	b.n	8004fa6 <USB_HC_StartXfer+0x25a>
          break;
 8004fa4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	68d9      	ldr	r1, [r3, #12]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	785a      	ldrb	r2, [r3, #1]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	b298      	uxth	r0, r3
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	4603      	mov	r3, r0
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f7ff fb86 	bl	80046cc <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3728      	adds	r7, #40	; 0x28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	1ff80000 	.word	0x1ff80000
 8004fd0:	200000b4 	.word	0x200000b4

08004fd4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	b29b      	uxth	r3, r3
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b087      	sub	sp, #28
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	460b      	mov	r3, r1
 8005000:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005006:	78fb      	ldrb	r3, [r7, #3]
 8005008:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	4413      	add	r3, r2
 8005016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	0c9b      	lsrs	r3, r3, #18
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <USB_HC_Halt+0x3a>
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d16c      	bne.n	800510a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4413      	add	r3, r2
 8005038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	0151      	lsls	r1, r2, #5
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	440a      	add	r2, r1
 8005046:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800504a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800504e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d143      	bne.n	80050e4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4413      	add	r3, r2
 8005064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	0151      	lsls	r1, r2, #5
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	440a      	add	r2, r1
 8005072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005076:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800507a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4413      	add	r3, r2
 8005084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	440a      	add	r2, r1
 8005092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005096:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800509a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	0151      	lsls	r1, r2, #5
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	440a      	add	r2, r1
 80050b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050ba:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	3301      	adds	r3, #1
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050c8:	d81d      	bhi.n	8005106 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050e0:	d0ec      	beq.n	80050bc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050e2:	e080      	b.n	80051e6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005102:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005104:	e06f      	b.n	80051e6 <USB_HC_Halt+0x1f0>
          break;
 8005106:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005108:	e06d      	b.n	80051e6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4413      	add	r3, r2
 8005112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	440a      	add	r2, r1
 8005120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005124:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005128:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d143      	bne.n	80051c2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4413      	add	r3, r2
 8005142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	0151      	lsls	r1, r2, #5
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	440a      	add	r2, r1
 8005150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005158:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	4413      	add	r3, r2
 8005162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	0151      	lsls	r1, r2, #5
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	440a      	add	r2, r1
 8005170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005178:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4413      	add	r3, r2
 8005182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	0151      	lsls	r1, r2, #5
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	440a      	add	r2, r1
 8005190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005194:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005198:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	3301      	adds	r3, #1
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051a6:	d81d      	bhi.n	80051e4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051be:	d0ec      	beq.n	800519a <USB_HC_Halt+0x1a4>
 80051c0:	e011      	b.n	80051e6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e000      	b.n	80051e6 <USB_HC_Halt+0x1f0>
          break;
 80051e4:	bf00      	nop
    }
  }

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	460b      	mov	r3, r1
 80051fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005208:	2301      	movs	r3, #1
 800520a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	04da      	lsls	r2, r3, #19
 8005210:	4b15      	ldr	r3, [pc, #84]	; (8005268 <USB_DoPing+0x74>)
 8005212:	4013      	ands	r3, r2
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	0151      	lsls	r1, r2, #5
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	440a      	add	r2, r1
 800521c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005220:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005224:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	4413      	add	r3, r2
 800522e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800523c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005244:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	4413      	add	r3, r2
 800524e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005252:	461a      	mov	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	1ff80000 	.word	0x1ff80000

0800526c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff f9a1 	bl	80045c4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005282:	2110      	movs	r1, #16
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7ff f9d9 	bl	800463c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff f9fc 	bl	8004688 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005290:	2300      	movs	r3, #0
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	e01f      	b.n	80052d6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052bc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ca:	461a      	mov	r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	3301      	adds	r3, #1
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b0f      	cmp	r3, #15
 80052da:	d9dc      	bls.n	8005296 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80052dc:	2300      	movs	r3, #0
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	e034      	b.n	800534c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052f8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005300:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005308:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4413      	add	r3, r2
 8005312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005316:	461a      	mov	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	3301      	adds	r3, #1
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005328:	d80c      	bhi.n	8005344 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800533c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005340:	d0ec      	beq.n	800531c <USB_StopHost+0xb0>
 8005342:	e000      	b.n	8005346 <USB_StopHost+0xda>
        break;
 8005344:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	3301      	adds	r3, #1
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b0f      	cmp	r3, #15
 8005350:	d9c7      	bls.n	80052e2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005358:	461a      	mov	r2, r3
 800535a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800535e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005366:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff f91a 	bl	80045a2 <USB_EnableGlobalInt>

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005378:	b590      	push	{r4, r7, lr}
 800537a:	b089      	sub	sp, #36	; 0x24
 800537c:	af04      	add	r7, sp, #16
 800537e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005380:	2302      	movs	r3, #2
 8005382:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005384:	2301      	movs	r3, #1
 8005386:	2202      	movs	r2, #2
 8005388:	2102      	movs	r1, #2
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fc3a 	bl	8005c04 <USBH_FindInterface>
 8005390:	4603      	mov	r3, r0
 8005392:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005394:	7bbb      	ldrb	r3, [r7, #14]
 8005396:	2bff      	cmp	r3, #255	; 0xff
 8005398:	f000 812a 	beq.w	80055f0 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800539c:	7bbb      	ldrb	r3, [r7, #14]
 800539e:	4619      	mov	r1, r3
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fc13 	bl	8005bcc <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80053ac:	2050      	movs	r0, #80	; 0x50
 80053ae:	f002 f8df 	bl	8007570 <malloc>
 80053b2:	4603      	mov	r3, r0
 80053b4:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80053c0:	7bbb      	ldrb	r3, [r7, #14]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	211a      	movs	r1, #26
 80053c6:	fb01 f303 	mul.w	r3, r1, r3
 80053ca:	4413      	add	r3, r2
 80053cc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	b25b      	sxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	da15      	bge.n	8005404 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80053d8:	7bbb      	ldrb	r3, [r7, #14]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	211a      	movs	r1, #26
 80053de:	fb01 f303 	mul.w	r3, r1, r3
 80053e2:	4413      	add	r3, r2
 80053e4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80053e8:	781a      	ldrb	r2, [r3, #0]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80053ee:	7bbb      	ldrb	r3, [r7, #14]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	211a      	movs	r1, #26
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80053fe:	881a      	ldrh	r2, [r3, #0]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	4619      	mov	r1, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f001 fd21 	bl	8006e52 <USBH_AllocPipe>
 8005410:	4603      	mov	r3, r0
 8005412:	461a      	mov	r2, r3
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	7819      	ldrb	r1, [r3, #0]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	7858      	ldrb	r0, [r3, #1]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	8952      	ldrh	r2, [r2, #10]
 8005430:	9202      	str	r2, [sp, #8]
 8005432:	2203      	movs	r2, #3
 8005434:	9201      	str	r2, [sp, #4]
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	4623      	mov	r3, r4
 800543a:	4602      	mov	r2, r0
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f001 fcd9 	bl	8006df4 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2200      	movs	r2, #0
 8005448:	4619      	mov	r1, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f001 ffe0 	bl	8007410 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005450:	2300      	movs	r3, #0
 8005452:	2200      	movs	r2, #0
 8005454:	210a      	movs	r1, #10
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fbd4 	bl	8005c04 <USBH_FindInterface>
 800545c:	4603      	mov	r3, r0
 800545e:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005460:	7bbb      	ldrb	r3, [r7, #14]
 8005462:	2bff      	cmp	r3, #255	; 0xff
 8005464:	f000 80c4 	beq.w	80055f0 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005468:	7bbb      	ldrb	r3, [r7, #14]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	211a      	movs	r1, #26
 800546e:	fb01 f303 	mul.w	r3, r1, r3
 8005472:	4413      	add	r3, r2
 8005474:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	b25b      	sxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	da16      	bge.n	80054ae <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005480:	7bbb      	ldrb	r3, [r7, #14]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	211a      	movs	r1, #26
 8005486:	fb01 f303 	mul.w	r3, r1, r3
 800548a:	4413      	add	r3, r2
 800548c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005490:	781a      	ldrb	r2, [r3, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005496:	7bbb      	ldrb	r3, [r7, #14]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	211a      	movs	r1, #26
 800549c:	fb01 f303 	mul.w	r3, r1, r3
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80054a6:	881a      	ldrh	r2, [r3, #0]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	835a      	strh	r2, [r3, #26]
 80054ac:	e015      	b.n	80054da <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80054ae:	7bbb      	ldrb	r3, [r7, #14]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	211a      	movs	r1, #26
 80054b4:	fb01 f303 	mul.w	r3, r1, r3
 80054b8:	4413      	add	r3, r2
 80054ba:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80054be:	781a      	ldrb	r2, [r3, #0]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80054c4:	7bbb      	ldrb	r3, [r7, #14]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	211a      	movs	r1, #26
 80054ca:	fb01 f303 	mul.w	r3, r1, r3
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80054d4:	881a      	ldrh	r2, [r3, #0]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80054da:	7bbb      	ldrb	r3, [r7, #14]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	211a      	movs	r1, #26
 80054e0:	fb01 f303 	mul.w	r3, r1, r3
 80054e4:	4413      	add	r3, r2
 80054e6:	f203 3352 	addw	r3, r3, #850	; 0x352
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	b25b      	sxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	da16      	bge.n	8005520 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80054f2:	7bbb      	ldrb	r3, [r7, #14]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	211a      	movs	r1, #26
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	4413      	add	r3, r2
 80054fe:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005502:	781a      	ldrb	r2, [r3, #0]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005508:	7bbb      	ldrb	r3, [r7, #14]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	211a      	movs	r1, #26
 800550e:	fb01 f303 	mul.w	r3, r1, r3
 8005512:	4413      	add	r3, r2
 8005514:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005518:	881a      	ldrh	r2, [r3, #0]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	835a      	strh	r2, [r3, #26]
 800551e:	e015      	b.n	800554c <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005520:	7bbb      	ldrb	r3, [r7, #14]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	211a      	movs	r1, #26
 8005526:	fb01 f303 	mul.w	r3, r1, r3
 800552a:	4413      	add	r3, r2
 800552c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005530:	781a      	ldrb	r2, [r3, #0]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005536:	7bbb      	ldrb	r3, [r7, #14]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	211a      	movs	r1, #26
 800553c:	fb01 f303 	mul.w	r3, r1, r3
 8005540:	4413      	add	r3, r2
 8005542:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005546:	881a      	ldrh	r2, [r3, #0]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	7b9b      	ldrb	r3, [r3, #14]
 8005550:	4619      	mov	r1, r3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f001 fc7d 	bl	8006e52 <USBH_AllocPipe>
 8005558:	4603      	mov	r3, r0
 800555a:	461a      	mov	r2, r3
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	7bdb      	ldrb	r3, [r3, #15]
 8005564:	4619      	mov	r1, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f001 fc73 	bl	8006e52 <USBH_AllocPipe>
 800556c:	4603      	mov	r3, r0
 800556e:	461a      	mov	r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	7b59      	ldrb	r1, [r3, #13]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	7b98      	ldrb	r0, [r3, #14]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	8b12      	ldrh	r2, [r2, #24]
 800558c:	9202      	str	r2, [sp, #8]
 800558e:	2202      	movs	r2, #2
 8005590:	9201      	str	r2, [sp, #4]
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	4623      	mov	r3, r4
 8005596:	4602      	mov	r2, r0
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f001 fc2b 	bl	8006df4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	7b19      	ldrb	r1, [r3, #12]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	7bd8      	ldrb	r0, [r3, #15]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	8b52      	ldrh	r2, [r2, #26]
 80055b6:	9202      	str	r2, [sp, #8]
 80055b8:	2202      	movs	r2, #2
 80055ba:	9201      	str	r2, [sp, #4]
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	4623      	mov	r3, r4
 80055c0:	4602      	mov	r2, r0
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f001 fc16 	bl	8006df4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	7b5b      	ldrb	r3, [r3, #13]
 80055d4:	2200      	movs	r2, #0
 80055d6:	4619      	mov	r1, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f001 ff19 	bl	8007410 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	7b1b      	ldrb	r3, [r3, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	4619      	mov	r1, r3
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f001 ff12 	bl	8007410 <USBH_LL_SetToggle>
      status = USBH_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd90      	pop	{r4, r7, pc}

080055fa <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00e      	beq.n	8005632 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f001 fc09 	bl	8006e32 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f001 fc31 	bl	8006e8e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	7b1b      	ldrb	r3, [r3, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00e      	beq.n	8005658 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	7b1b      	ldrb	r3, [r3, #12]
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 fbf6 	bl	8006e32 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	7b1b      	ldrb	r3, [r3, #12]
 800564a:	4619      	mov	r1, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f001 fc1e 	bl	8006e8e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	7b5b      	ldrb	r3, [r3, #13]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00e      	beq.n	800567e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	7b5b      	ldrb	r3, [r3, #13]
 8005664:	4619      	mov	r1, r3
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f001 fbe3 	bl	8006e32 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	7b5b      	ldrb	r3, [r3, #13]
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f001 fc0b 	bl	8006e8e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00b      	beq.n	80056a2 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	4618      	mov	r0, r3
 8005694:	f001 ff74 	bl	8007580 <free>
    phost->pActiveClass->pData = 0U;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800569e:	2200      	movs	r2, #0
 80056a0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80056b4:	2302      	movs	r3, #2
 80056b6:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	3340      	adds	r3, #64	; 0x40
 80056c6:	4619      	mov	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f8b2 	bl	8005832 <GetLineCoding>
 80056ce:	4603      	mov	r3, r0
 80056d0:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d105      	bne.n	80056e4 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80056de:	2102      	movs	r1, #2
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	4798      	blx	r3
  }
  return status;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005710:	2b04      	cmp	r3, #4
 8005712:	d877      	bhi.n	8005804 <USBH_CDC_Process+0x114>
 8005714:	a201      	add	r2, pc, #4	; (adr r2, 800571c <USBH_CDC_Process+0x2c>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	08005731 	.word	0x08005731
 8005720:	08005737 	.word	0x08005737
 8005724:	08005767 	.word	0x08005767
 8005728:	080057db 	.word	0x080057db
 800572c:	080057e9 	.word	0x080057e9
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	73fb      	strb	r3, [r7, #15]
    break;
 8005734:	e06d      	b.n	8005812 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f897 	bl	8005870 <SetLineCoding>
 8005742:	4603      	mov	r3, r0
 8005744:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005746:	7bbb      	ldrb	r3, [r7, #14]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d104      	bne.n	8005756 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005754:	e058      	b.n	8005808 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8005756:	7bbb      	ldrb	r3, [r7, #14]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d055      	beq.n	8005808 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2204      	movs	r2, #4
 8005760:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005764:	e050      	b.n	8005808 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	3340      	adds	r3, #64	; 0x40
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f860 	bl	8005832 <GetLineCoding>
 8005772:	4603      	mov	r3, r0
 8005774:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005776:	7bbb      	ldrb	r3, [r7, #14]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d126      	bne.n	80057ca <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800578e:	791b      	ldrb	r3, [r3, #4]
 8005790:	429a      	cmp	r2, r3
 8005792:	d13b      	bne.n	800580c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800579e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d133      	bne.n	800580c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ae:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d12b      	bne.n	800580c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057bc:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80057be:	429a      	cmp	r2, r3
 80057c0:	d124      	bne.n	800580c <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f95a 	bl	8005a7c <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80057c8:	e020      	b.n	800580c <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80057ca:	7bbb      	ldrb	r3, [r7, #14]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d01d      	beq.n	800580c <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2204      	movs	r2, #4
 80057d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80057d8:	e018      	b.n	800580c <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f867 	bl	80058ae <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f8dc 	bl	800599e <CDC_ProcessReception>
    break;
 80057e6:	e014      	b.n	8005812 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 80057e8:	2100      	movs	r1, #0
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fece 	bl	800658c <USBH_ClrFeature>
 80057f0:	4603      	mov	r3, r0
 80057f2:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80057f4:	7bbb      	ldrb	r3, [r7, #14]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10a      	bne.n	8005810 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8005802:	e005      	b.n	8005810 <USBH_CDC_Process+0x120>

  default:
    break;
 8005804:	bf00      	nop
 8005806:	e004      	b.n	8005812 <USBH_CDC_Process+0x122>
    break;
 8005808:	bf00      	nop
 800580a:	e002      	b.n	8005812 <USBH_CDC_Process+0x122>
    break;
 800580c:	bf00      	nop
 800580e:	e000      	b.n	8005812 <USBH_CDC_Process+0x122>
    break;
 8005810:	bf00      	nop

  }

  return status;
 8005812:	7bfb      	ldrb	r3, [r7, #15]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	22a1      	movs	r2, #161	; 0xa1
 8005840:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2221      	movs	r2, #33	; 0x21
 8005846:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2207      	movs	r2, #7
 8005858:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2207      	movs	r2, #7
 800585e:	4619      	mov	r1, r3
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f001 f873 	bl	800694c <USBH_CtlReq>
 8005866:	4603      	mov	r3, r0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2221      	movs	r2, #33	; 0x21
 800587e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2207      	movs	r2, #7
 8005896:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2207      	movs	r2, #7
 800589c:	4619      	mov	r1, r3
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f001 f854 	bl	800694c <USBH_CtlReq>
 80058a4:	4603      	mov	r3, r0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b086      	sub	sp, #24
 80058b2:	af02      	add	r7, sp, #8
 80058b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d002      	beq.n	80058d4 <CDC_ProcessTransmission+0x26>
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d025      	beq.n	800591e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80058d2:	e060      	b.n	8005996 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	8b12      	ldrh	r2, [r2, #24]
 80058dc:	4293      	cmp	r3, r2
 80058de:	d90c      	bls.n	80058fa <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	69d9      	ldr	r1, [r3, #28]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8b1a      	ldrh	r2, [r3, #24]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	7b58      	ldrb	r0, [r3, #13]
 80058ec:	2301      	movs	r3, #1
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	4603      	mov	r3, r0
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f001 fa3b 	bl	8006d6e <USBH_BulkSendData>
 80058f8:	e00c      	b.n	8005914 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	7b58      	ldrb	r0, [r3, #13]
 8005908:	2301      	movs	r3, #1
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	4603      	mov	r3, r0
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f001 fa2d 	bl	8006d6e <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800591c:	e03b      	b.n	8005996 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	7b5b      	ldrb	r3, [r3, #13]
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f001 fd49 	bl	80073bc <USBH_LL_GetURBState>
 800592a:	4603      	mov	r3, r0
 800592c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800592e:	7afb      	ldrb	r3, [r7, #11]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d128      	bne.n	8005986 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	8b12      	ldrh	r2, [r2, #24]
 800593c:	4293      	cmp	r3, r2
 800593e:	d90e      	bls.n	800595e <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	8b12      	ldrh	r2, [r2, #24]
 8005948:	1a9a      	subs	r2, r3, r2
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	8b12      	ldrh	r2, [r2, #24]
 8005956:	441a      	add	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	61da      	str	r2, [r3, #28]
 800595c:	e002      	b.n	8005964 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	2b00      	cmp	r3, #0
 800596a:	d004      	beq.n	8005976 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005974:	e00e      	b.n	8005994 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f868 	bl	8005a54 <USBH_CDC_TransmitCallback>
    break;
 8005984:	e006      	b.n	8005994 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005986:	7afb      	ldrb	r3, [r7, #11]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d103      	bne.n	8005994 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005994:	bf00      	nop
  }
}
 8005996:	bf00      	nop
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b086      	sub	sp, #24
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d002      	beq.n	80059c4 <CDC_ProcessReception+0x26>
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d00e      	beq.n	80059e0 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80059c2:	e043      	b.n	8005a4c <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	6a19      	ldr	r1, [r3, #32]
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	8b5a      	ldrh	r2, [r3, #26]
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	7b1b      	ldrb	r3, [r3, #12]
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f001 f9f1 	bl	8006db8 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2204      	movs	r2, #4
 80059da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80059de:	e035      	b.n	8005a4c <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	7b1b      	ldrb	r3, [r3, #12]
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f001 fce8 	bl	80073bc <USBH_LL_GetURBState>
 80059ec:	4603      	mov	r3, r0
 80059ee:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80059f0:	7cfb      	ldrb	r3, [r7, #19]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d129      	bne.n	8005a4a <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	7b1b      	ldrb	r3, [r3, #12]
 80059fa:	4619      	mov	r1, r3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f001 fc4b 	bl	8007298 <USBH_LL_GetLastXferSize>
 8005a02:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d016      	beq.n	8005a3c <CDC_ProcessReception+0x9e>
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	8b5b      	ldrh	r3, [r3, #26]
 8005a12:	461a      	mov	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d910      	bls.n	8005a3c <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	1ad2      	subs	r2, r2, r3
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	6a1a      	ldr	r2, [r3, #32]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	441a      	add	r2, r3
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2203      	movs	r2, #3
 8005a36:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005a3a:	e006      	b.n	8005a4a <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f80f 	bl	8005a68 <USBH_CDC_ReceiveCallback>
    break;
 8005a4a:	bf00      	nop
  }
}
 8005a4c:	bf00      	nop
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]

}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]

}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]

}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e019      	b.n	8005adc <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	79fa      	ldrb	r2, [r7, #7]
 8005aac:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f80f 	bl	8005ae4 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f001 fb2d 	bl	8007134 <USBH_LL_Init>

  return USBH_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005af0:	e008      	b.n	8005b04 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	32e0      	adds	r2, #224	; 0xe0
 8005af8:	2100      	movs	r1, #0
 8005afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3301      	adds	r3, #1
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b0e      	cmp	r3, #14
 8005b08:	d9f3      	bls.n	8005af2 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	e009      	b.n	8005b24 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3301      	adds	r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b2a:	d3f1      	bcc.n	8005b10 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2240      	movs	r2, #64	; 0x40
 8005b50:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b085      	sub	sp, #20
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d017      	beq.n	8005bba <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10f      	bne.n	8005bb4 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b9a:	1c59      	adds	r1, r3, #1
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	33dc      	adds	r3, #220	; 0xdc
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	73fb      	strb	r3, [r7, #15]
 8005bb2:	e004      	b.n	8005bbe <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	73fb      	strb	r3, [r7, #15]
 8005bb8:	e001      	b.n	8005bbe <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005bba:	2302      	movs	r3, #2
 8005bbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005be2:	78fa      	ldrb	r2, [r7, #3]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d204      	bcs.n	8005bf2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	78fa      	ldrb	r2, [r7, #3]
 8005bec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005bf0:	e001      	b.n	8005bf6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	4608      	mov	r0, r1
 8005c0e:	4611      	mov	r1, r2
 8005c10:	461a      	mov	r2, r3
 8005c12:	4603      	mov	r3, r0
 8005c14:	70fb      	strb	r3, [r7, #3]
 8005c16:	460b      	mov	r3, r1
 8005c18:	70bb      	strb	r3, [r7, #2]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005c2c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005c2e:	e025      	b.n	8005c7c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005c30:	7dfb      	ldrb	r3, [r7, #23]
 8005c32:	221a      	movs	r2, #26
 8005c34:	fb02 f303 	mul.w	r3, r2, r3
 8005c38:	3308      	adds	r3, #8
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	3302      	adds	r3, #2
 8005c40:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	795b      	ldrb	r3, [r3, #5]
 8005c46:	78fa      	ldrb	r2, [r7, #3]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d002      	beq.n	8005c52 <USBH_FindInterface+0x4e>
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	2bff      	cmp	r3, #255	; 0xff
 8005c50:	d111      	bne.n	8005c76 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005c56:	78ba      	ldrb	r2, [r7, #2]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d002      	beq.n	8005c62 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005c5c:	78bb      	ldrb	r3, [r7, #2]
 8005c5e:	2bff      	cmp	r3, #255	; 0xff
 8005c60:	d109      	bne.n	8005c76 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005c66:	787a      	ldrb	r2, [r7, #1]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d002      	beq.n	8005c72 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005c6c:	787b      	ldrb	r3, [r7, #1]
 8005c6e:	2bff      	cmp	r3, #255	; 0xff
 8005c70:	d101      	bne.n	8005c76 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
 8005c74:	e006      	b.n	8005c84 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005c76:	7dfb      	ldrb	r3, [r7, #23]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005c7c:	7dfb      	ldrb	r3, [r7, #23]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d9d6      	bls.n	8005c30 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005c82:	23ff      	movs	r3, #255	; 0xff
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	371c      	adds	r7, #28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f001 fa87 	bl	80071ac <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f001 fb9e 	bl	80073e2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af04      	add	r7, sp, #16
 8005cb6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005cb8:	2302      	movs	r3, #2
 8005cba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 faec 	bl	800629e <USBH_IsPortEnabled>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10c      	bne.n	8005ce6 <USBH_Process+0x36>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d007      	beq.n	8005ce6 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b03      	cmp	r3, #3
 8005cde:	d002      	beq.n	8005ce6 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2203      	movs	r2, #3
 8005ce4:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b0b      	cmp	r3, #11
 8005cee:	f200 814c 	bhi.w	8005f8a <USBH_Process+0x2da>
 8005cf2:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <USBH_Process+0x48>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d29 	.word	0x08005d29
 8005cfc:	08005d4b 	.word	0x08005d4b
 8005d00:	08005d5f 	.word	0x08005d5f
 8005d04:	08005f65 	.word	0x08005f65
 8005d08:	08005f8b 	.word	0x08005f8b
 8005d0c:	08005ded 	.word	0x08005ded
 8005d10:	08005f1b 	.word	0x08005f1b
 8005d14:	08005e1d 	.word	0x08005e1d
 8005d18:	08005e3d 	.word	0x08005e3d
 8005d1c:	08005e5d 	.word	0x08005e5d
 8005d20:	08005e8b 	.word	0x08005e8b
 8005d24:	08005f4d 	.word	0x08005f4d
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 812c 	beq.w	8005f8e <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8005d3c:	20c8      	movs	r0, #200	; 0xc8
 8005d3e:	f001 fb9a 	bl	8007476 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f001 fa8d 	bl	8007262 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005d48:	e121      	b.n	8005f8e <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	f040 811e 	bne.w	8005f92 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005d5c:	e119      	b.n	8005f92 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8005d5e:	2064      	movs	r0, #100	; 0x64
 8005d60:	f001 fb89 	bl	8007476 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f001 fa57 	bl	8007218 <USBH_LL_GetSpeed>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2205      	movs	r2, #5
 8005d78:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f001 f868 	bl	8006e52 <USBH_AllocPipe>
 8005d82:	4603      	mov	r3, r0
 8005d84:	461a      	mov	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8005d8a:	2180      	movs	r1, #128	; 0x80
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f001 f860 	bl	8006e52 <USBH_AllocPipe>
 8005d92:	4603      	mov	r3, r0
 8005d94:	461a      	mov	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	7919      	ldrb	r1, [r3, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005dae:	b292      	uxth	r2, r2
 8005db0:	9202      	str	r2, [sp, #8]
 8005db2:	2200      	movs	r2, #0
 8005db4:	9201      	str	r2, [sp, #4]
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	4603      	mov	r3, r0
 8005dba:	2280      	movs	r2, #128	; 0x80
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f001 f819 	bl	8006df4 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	7959      	ldrb	r1, [r3, #5]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005dd6:	b292      	uxth	r2, r2
 8005dd8:	9202      	str	r2, [sp, #8]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	9201      	str	r2, [sp, #4]
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	4603      	mov	r3, r0
 8005de2:	2200      	movs	r2, #0
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f001 f805 	bl	8006df4 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005dea:	e0e3      	b.n	8005fb4 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f8e7 	bl	8005fc0 <USBH_HandleEnum>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f040 80ce 	bne.w	8005f96 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d103      	bne.n	8005e14 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2208      	movs	r2, #8
 8005e10:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8005e12:	e0c0      	b.n	8005f96 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2207      	movs	r2, #7
 8005e18:	701a      	strb	r2, [r3, #0]
    break;
 8005e1a:	e0bc      	b.n	8005f96 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 80b9 	beq.w	8005f9a <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005e2e:	2101      	movs	r1, #1
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2208      	movs	r2, #8
 8005e38:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005e3a:	e0ae      	b.n	8005f9a <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fb59 	bl	80064fe <USBH_SetCfg>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f040 80a5 	bne.w	8005f9e <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2209      	movs	r2, #9
 8005e58:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005e5a:	e0a0      	b.n	8005f9e <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00b      	beq.n	8005e82 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fb69 	bl	8006544 <USBH_SetFeature>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f040 8094 	bne.w	8005fa2 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	220a      	movs	r2, #10
 8005e7e:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005e80:	e08f      	b.n	8005fa2 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	220a      	movs	r2, #10
 8005e86:	701a      	strb	r2, [r3, #0]
    break;
 8005e88:	e08b      	b.n	8005fa2 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8088 	beq.w	8005fa6 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	73fb      	strb	r3, [r7, #15]
 8005ea2:	e017      	b.n	8005ed4 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	33dc      	adds	r3, #220	; 0xdc
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	791a      	ldrb	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d108      	bne.n	8005ece <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	33dc      	adds	r3, #220	; 0xdc
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	73fb      	strb	r3, [r7, #15]
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0e4      	beq.n	8005ea4 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d016      	beq.n	8005f12 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	4798      	blx	r3
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d109      	bne.n	8005f0a <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2206      	movs	r2, #6
 8005efa:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f02:	2103      	movs	r1, #3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005f08:	e04d      	b.n	8005fa6 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	220d      	movs	r2, #13
 8005f0e:	701a      	strb	r2, [r3, #0]
    break;
 8005f10:	e049      	b.n	8005fa6 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	220d      	movs	r2, #13
 8005f16:	701a      	strb	r2, [r3, #0]
    break;
 8005f18:	e045      	b.n	8005fa6 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00f      	beq.n	8005f44 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	4798      	blx	r3
 8005f30:	4603      	mov	r3, r0
 8005f32:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8005f34:	7bbb      	ldrb	r3, [r7, #14]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d136      	bne.n	8005faa <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	220b      	movs	r2, #11
 8005f40:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8005f42:	e032      	b.n	8005faa <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	220d      	movs	r2, #13
 8005f48:	701a      	strb	r2, [r3, #0]
    break;
 8005f4a:	e02e      	b.n	8005faa <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d02b      	beq.n	8005fae <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	4798      	blx	r3
    }
    break;
 8005f62:	e024      	b.n	8005fae <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff fdbd 	bl	8005ae4 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01e      	beq.n	8005fb2 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8005f88:	e013      	b.n	8005fb2 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8005f8a:	bf00      	nop
 8005f8c:	e012      	b.n	8005fb4 <USBH_Process+0x304>
    break;
 8005f8e:	bf00      	nop
 8005f90:	e010      	b.n	8005fb4 <USBH_Process+0x304>
    break;
 8005f92:	bf00      	nop
 8005f94:	e00e      	b.n	8005fb4 <USBH_Process+0x304>
    break;
 8005f96:	bf00      	nop
 8005f98:	e00c      	b.n	8005fb4 <USBH_Process+0x304>
    break;
 8005f9a:	bf00      	nop
 8005f9c:	e00a      	b.n	8005fb4 <USBH_Process+0x304>
    break;
 8005f9e:	bf00      	nop
 8005fa0:	e008      	b.n	8005fb4 <USBH_Process+0x304>
    break;
 8005fa2:	bf00      	nop
 8005fa4:	e006      	b.n	8005fb4 <USBH_Process+0x304>
    break;
 8005fa6:	bf00      	nop
 8005fa8:	e004      	b.n	8005fb4 <USBH_Process+0x304>
    break;
 8005faa:	bf00      	nop
 8005fac:	e002      	b.n	8005fb4 <USBH_Process+0x304>
    break;
 8005fae:	bf00      	nop
 8005fb0:	e000      	b.n	8005fb4 <USBH_Process+0x304>
    break;
 8005fb2:	bf00      	nop
  }
 return USBH_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop

08005fc0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af04      	add	r7, sp, #16
 8005fc6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	785b      	ldrb	r3, [r3, #1]
 8005fd0:	2b07      	cmp	r3, #7
 8005fd2:	f200 80f8 	bhi.w	80061c6 <USBH_HandleEnum+0x206>
 8005fd6:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <USBH_HandleEnum+0x1c>)
 8005fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fdc:	08005ffd 	.word	0x08005ffd
 8005fe0:	0800606f 	.word	0x0800606f
 8005fe4:	08006087 	.word	0x08006087
 8005fe8:	080060fd 	.word	0x080060fd
 8005fec:	08006113 	.word	0x08006113
 8005ff0:	0800612f 	.word	0x0800612f
 8005ff4:	08006163 	.word	0x08006163
 8005ff8:	08006197 	.word	0x08006197
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8005ffc:	2108      	movs	r1, #8
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f9ad 	bl	800635e <USBH_Get_DevDesc>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	f040 80df 	bne.w	80061ca <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	7919      	ldrb	r1, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006030:	b292      	uxth	r2, r2
 8006032:	9202      	str	r2, [sp, #8]
 8006034:	2200      	movs	r2, #0
 8006036:	9201      	str	r2, [sp, #4]
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	4603      	mov	r3, r0
 800603c:	2280      	movs	r2, #128	; 0x80
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fed8 	bl	8006df4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	7959      	ldrb	r1, [r3, #5]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006058:	b292      	uxth	r2, r2
 800605a:	9202      	str	r2, [sp, #8]
 800605c:	2200      	movs	r2, #0
 800605e:	9201      	str	r2, [sp, #4]
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	4603      	mov	r3, r0
 8006064:	2200      	movs	r2, #0
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fec4 	bl	8006df4 <USBH_OpenPipe>

    }
    break;
 800606c:	e0ad      	b.n	80061ca <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800606e:	2112      	movs	r1, #18
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f974 	bl	800635e <USBH_Get_DevDesc>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	f040 80a8 	bne.w	80061ce <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2202      	movs	r2, #2
 8006082:	705a      	strb	r2, [r3, #1]

    }
    break;
 8006084:	e0a3      	b.n	80061ce <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8006086:	2101      	movs	r1, #1
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fa14 	bl	80064b6 <USBH_SetAddress>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	f040 809e 	bne.w	80061d2 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8006096:	2002      	movs	r0, #2
 8006098:	f001 f9ed 	bl	8007476 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2203      	movs	r2, #3
 80060a8:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	7919      	ldrb	r1, [r3, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80060be:	b292      	uxth	r2, r2
 80060c0:	9202      	str	r2, [sp, #8]
 80060c2:	2200      	movs	r2, #0
 80060c4:	9201      	str	r2, [sp, #4]
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	4603      	mov	r3, r0
 80060ca:	2280      	movs	r2, #128	; 0x80
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fe91 	bl	8006df4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	7959      	ldrb	r1, [r3, #5]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80060e6:	b292      	uxth	r2, r2
 80060e8:	9202      	str	r2, [sp, #8]
 80060ea:	2200      	movs	r2, #0
 80060ec:	9201      	str	r2, [sp, #4]
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	4603      	mov	r3, r0
 80060f2:	2200      	movs	r2, #0
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fe7d 	bl	8006df4 <USBH_OpenPipe>
    }
    break;
 80060fa:	e06a      	b.n	80061d2 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80060fc:	2109      	movs	r1, #9
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f955 	bl	80063ae <USBH_Get_CfgDesc>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d165      	bne.n	80061d6 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2204      	movs	r2, #4
 800610e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006110:	e061      	b.n	80061d6 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f947 	bl	80063ae <USBH_Get_CfgDesc>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d159      	bne.n	80061da <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2205      	movs	r2, #5
 800612a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800612c:	e055      	b.n	80061da <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006134:	2b00      	cmp	r3, #0
 8006136:	d010      	beq.n	800615a <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006144:	23ff      	movs	r3, #255	; 0xff
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f955 	bl	80063f6 <USBH_Get_StringDesc>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d145      	bne.n	80061de <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2206      	movs	r2, #6
 8006156:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006158:	e041      	b.n	80061de <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2206      	movs	r2, #6
 800615e:	705a      	strb	r2, [r3, #1]
    break;
 8006160:	e03d      	b.n	80061de <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006168:	2b00      	cmp	r3, #0
 800616a:	d010      	beq.n	800618e <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006178:	23ff      	movs	r3, #255	; 0xff
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f93b 	bl	80063f6 <USBH_Get_StringDesc>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d12d      	bne.n	80061e2 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2207      	movs	r2, #7
 800618a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800618c:	e029      	b.n	80061e2 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2207      	movs	r2, #7
 8006192:	705a      	strb	r2, [r3, #1]
    break;
 8006194:	e025      	b.n	80061e2 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00f      	beq.n	80061c0 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80061ac:	23ff      	movs	r3, #255	; 0xff
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f921 	bl	80063f6 <USBH_Get_StringDesc>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d115      	bne.n	80061e6 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80061be:	e012      	b.n	80061e6 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	73fb      	strb	r3, [r7, #15]
    break;
 80061c4:	e00f      	b.n	80061e6 <USBH_HandleEnum+0x226>

  default:
    break;
 80061c6:	bf00      	nop
 80061c8:	e00e      	b.n	80061e8 <USBH_HandleEnum+0x228>
    break;
 80061ca:	bf00      	nop
 80061cc:	e00c      	b.n	80061e8 <USBH_HandleEnum+0x228>
    break;
 80061ce:	bf00      	nop
 80061d0:	e00a      	b.n	80061e8 <USBH_HandleEnum+0x228>
    break;
 80061d2:	bf00      	nop
 80061d4:	e008      	b.n	80061e8 <USBH_HandleEnum+0x228>
    break;
 80061d6:	bf00      	nop
 80061d8:	e006      	b.n	80061e8 <USBH_HandleEnum+0x228>
    break;
 80061da:	bf00      	nop
 80061dc:	e004      	b.n	80061e8 <USBH_HandleEnum+0x228>
    break;
 80061de:	bf00      	nop
 80061e0:	e002      	b.n	80061e8 <USBH_HandleEnum+0x228>
    break;
 80061e2:	bf00      	nop
 80061e4:	e000      	b.n	80061e8 <USBH_HandleEnum+0x228>
    break;
 80061e6:	bf00      	nop
  }
  return Status;
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop

080061f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b082      	sub	sp, #8
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f804 	bl	8006236 <USBH_HandleSof>
}
 800622e:	bf00      	nop
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b0b      	cmp	r3, #11
 8006246:	d10a      	bne.n	800625e <USBH_HandleSof+0x28>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	4798      	blx	r3
  }
}
 800625e:	bf00      	nop
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006276:	bf00      	nop
}
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006292:	bf00      	nop
}
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10f      	bne.n	80062ea <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00e      	beq.n	80062fa <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80062e2:	2104      	movs	r1, #4
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	4798      	blx	r3
 80062e8:	e007      	b.n	80062fa <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d102      	bne.n	80062fa <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 ff68 	bl	80071e2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	791b      	ldrb	r3, [r3, #4]
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fdb8 	bl	8006e8e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	795b      	ldrb	r3, [r3, #5]
 8006322:	4619      	mov	r1, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fdb2 	bl	8006e8e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006338:	2b00      	cmp	r3, #0
 800633a:	d005      	beq.n	8006348 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006342:	2105      	movs	r1, #5
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 ff2f 	bl	80071ac <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2203      	movs	r2, #3
 8006352:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b086      	sub	sp, #24
 8006362:	af02      	add	r7, sp, #8
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	460b      	mov	r3, r1
 8006368:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	b29b      	uxth	r3, r3
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	4613      	mov	r3, r2
 8006378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800637c:	2100      	movs	r1, #0
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f864 	bl	800644c <USBH_GetDescriptor>
 8006384:	4603      	mov	r3, r0
 8006386:	73fb      	strb	r3, [r7, #15]
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10a      	bne.n	80063a4 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f203 3022 	addw	r0, r3, #802	; 0x322
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800639a:	78fa      	ldrb	r2, [r7, #3]
 800639c:	b292      	uxth	r2, r2
 800639e:	4619      	mov	r1, r3
 80063a0:	f000 f918 	bl	80065d4 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b086      	sub	sp, #24
 80063b2:	af02      	add	r7, sp, #8
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	460b      	mov	r3, r1
 80063b8:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	331c      	adds	r3, #28
 80063be:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80063c0:	887b      	ldrh	r3, [r7, #2]
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ca:	2100      	movs	r1, #0
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f83d 	bl	800644c <USBH_GetDescriptor>
 80063d2:	4603      	mov	r3, r0
 80063d4:	72fb      	strb	r3, [r7, #11]
 80063d6:	7afb      	ldrb	r3, [r7, #11]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d107      	bne.n	80063ec <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80063e2:	887a      	ldrh	r2, [r7, #2]
 80063e4:	68f9      	ldr	r1, [r7, #12]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 f964 	bl	80066b4 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80063ec:	7afb      	ldrb	r3, [r7, #11]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b088      	sub	sp, #32
 80063fa:	af02      	add	r7, sp, #8
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	461a      	mov	r2, r3
 8006402:	460b      	mov	r3, r1
 8006404:	72fb      	strb	r3, [r7, #11]
 8006406:	4613      	mov	r3, r2
 8006408:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800640a:	7afb      	ldrb	r3, [r7, #11]
 800640c:	b29b      	uxth	r3, r3
 800640e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006412:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800641a:	893b      	ldrh	r3, [r7, #8]
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	460b      	mov	r3, r1
 8006420:	2100      	movs	r1, #0
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 f812 	bl	800644c <USBH_GetDescriptor>
 8006428:	4603      	mov	r3, r0
 800642a:	75fb      	strb	r3, [r7, #23]
 800642c:	7dfb      	ldrb	r3, [r7, #23]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d107      	bne.n	8006442 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006438:	893a      	ldrh	r2, [r7, #8]
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	4618      	mov	r0, r3
 800643e:	f000 fa37 	bl	80068b0 <USBH_ParseStringDesc>
  }
  return status;
 8006442:	7dfb      	ldrb	r3, [r7, #23]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	607b      	str	r3, [r7, #4]
 8006456:	460b      	mov	r3, r1
 8006458:	72fb      	strb	r3, [r7, #11]
 800645a:	4613      	mov	r3, r2
 800645c:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	789b      	ldrb	r3, [r3, #2]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d11c      	bne.n	80064a0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006466:	7afb      	ldrb	r3, [r7, #11]
 8006468:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800646c:	b2da      	uxtb	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2206      	movs	r2, #6
 8006476:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	893a      	ldrh	r2, [r7, #8]
 800647c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800647e:	893b      	ldrh	r3, [r7, #8]
 8006480:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006488:	d104      	bne.n	8006494 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f240 4209 	movw	r2, #1033	; 0x409
 8006490:	829a      	strh	r2, [r3, #20]
 8006492:	e002      	b.n	800649a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8b3a      	ldrh	r2, [r7, #24]
 800649e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 80064a0:	8b3b      	ldrh	r3, [r7, #24]
 80064a2:	461a      	mov	r2, r3
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 fa50 	bl	800694c <USBH_CtlReq>
 80064ac:	4603      	mov	r3, r0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b082      	sub	sp, #8
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	460b      	mov	r3, r1
 80064c0:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	789b      	ldrb	r3, [r3, #2]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d10f      	bne.n	80064ea <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2205      	movs	r2, #5
 80064d4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80064d6:	78fb      	ldrb	r3, [r7, #3]
 80064d8:	b29a      	uxth	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80064ea:	2200      	movs	r2, #0
 80064ec:	2100      	movs	r1, #0
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fa2c 	bl	800694c <USBH_CtlReq>
 80064f4:	4603      	mov	r3, r0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	460b      	mov	r3, r1
 8006508:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	789b      	ldrb	r3, [r3, #2]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d10e      	bne.n	8006530 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2209      	movs	r2, #9
 800651c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	887a      	ldrh	r2, [r7, #2]
 8006522:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006530:	2200      	movs	r2, #0
 8006532:	2100      	movs	r1, #0
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fa09 	bl	800694c <USBH_CtlReq>
 800653a:	4603      	mov	r3, r0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	789b      	ldrb	r3, [r3, #2]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d10f      	bne.n	8006578 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2203      	movs	r2, #3
 8006562:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	b29a      	uxth	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006578:	2200      	movs	r2, #0
 800657a:	2100      	movs	r1, #0
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f9e5 	bl	800694c <USBH_CtlReq>
 8006582:	4603      	mov	r3, r0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	789b      	ldrb	r3, [r3, #2]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d10f      	bne.n	80065c0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80065c0:	2200      	movs	r2, #0
 80065c2:	2100      	movs	r1, #0
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f9c1 	bl	800694c <USBH_CtlReq>
 80065ca:	4603      	mov	r3, r0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	4613      	mov	r3, r2
 80065e0:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	781a      	ldrb	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	785a      	ldrb	r2, [r3, #1]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	3302      	adds	r3, #2
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	3303      	adds	r3, #3
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	b29b      	uxth	r3, r3
 8006602:	021b      	lsls	r3, r3, #8
 8006604:	b29b      	uxth	r3, r3
 8006606:	4313      	orrs	r3, r2
 8006608:	b29a      	uxth	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	791a      	ldrb	r2, [r3, #4]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	795a      	ldrb	r2, [r3, #5]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	799a      	ldrb	r2, [r3, #6]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	79da      	ldrb	r2, [r3, #7]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	2b08      	cmp	r3, #8
 8006632:	d939      	bls.n	80066a8 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	3308      	adds	r3, #8
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	b29a      	uxth	r2, r3
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	3309      	adds	r3, #9
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	b29b      	uxth	r3, r3
 8006644:	021b      	lsls	r3, r3, #8
 8006646:	b29b      	uxth	r3, r3
 8006648:	4313      	orrs	r3, r2
 800664a:	b29a      	uxth	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	330a      	adds	r3, #10
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	b29a      	uxth	r2, r3
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	330b      	adds	r3, #11
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	021b      	lsls	r3, r3, #8
 8006662:	b29b      	uxth	r3, r3
 8006664:	4313      	orrs	r3, r2
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	330c      	adds	r3, #12
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	b29a      	uxth	r2, r3
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	330d      	adds	r3, #13
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	b29b      	uxth	r3, r3
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	b29b      	uxth	r3, r3
 8006680:	4313      	orrs	r3, r2
 8006682:	b29a      	uxth	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	7b9a      	ldrb	r2, [r3, #14]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	7bda      	ldrb	r2, [r3, #15]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	7c1a      	ldrb	r2, [r3, #16]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	7c5a      	ldrb	r2, [r3, #17]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	745a      	strb	r2, [r3, #17]
  }
}
 80066a8:	bf00      	nop
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08a      	sub	sp, #40	; 0x28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	4613      	mov	r3, r2
 80066c0:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	781a      	ldrb	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	785a      	ldrb	r2, [r3, #1]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	3302      	adds	r3, #2
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	3303      	adds	r3, #3
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	021b      	lsls	r3, r3, #8
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	4313      	orrs	r3, r2
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	791a      	ldrb	r2, [r3, #4]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	795a      	ldrb	r2, [r3, #5]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	799a      	ldrb	r2, [r3, #6]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	79da      	ldrb	r2, [r3, #7]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	7a1a      	ldrb	r2, [r3, #8]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800672a:	88fb      	ldrh	r3, [r7, #6]
 800672c:	2b09      	cmp	r3, #9
 800672e:	d95f      	bls.n	80067f0 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006730:	2309      	movs	r3, #9
 8006732:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006734:	2300      	movs	r3, #0
 8006736:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006738:	e051      	b.n	80067de <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800673a:	f107 0316 	add.w	r3, r7, #22
 800673e:	4619      	mov	r1, r3
 8006740:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006742:	f000 f8e8 	bl	8006916 <USBH_GetNextDesc>
 8006746:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	2b04      	cmp	r3, #4
 800674e:	d146      	bne.n	80067de <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006750:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006754:	221a      	movs	r2, #26
 8006756:	fb02 f303 	mul.w	r3, r2, r3
 800675a:	3308      	adds	r3, #8
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	3302      	adds	r3, #2
 8006762:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8006764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006766:	69f8      	ldr	r0, [r7, #28]
 8006768:	f000 f846 	bl	80067f8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006772:	2300      	movs	r3, #0
 8006774:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006776:	e022      	b.n	80067be <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8006778:	f107 0316 	add.w	r3, r7, #22
 800677c:	4619      	mov	r1, r3
 800677e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006780:	f000 f8c9 	bl	8006916 <USBH_GetNextDesc>
 8006784:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	785b      	ldrb	r3, [r3, #1]
 800678a:	2b05      	cmp	r3, #5
 800678c:	d117      	bne.n	80067be <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800678e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006792:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006796:	3201      	adds	r2, #1
 8006798:	00d2      	lsls	r2, r2, #3
 800679a:	211a      	movs	r1, #26
 800679c:	fb01 f303 	mul.w	r3, r1, r3
 80067a0:	4413      	add	r3, r2
 80067a2:	3308      	adds	r3, #8
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	3304      	adds	r3, #4
 80067aa:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 80067ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067ae:	69b8      	ldr	r0, [r7, #24]
 80067b0:	f000 f851 	bl	8006856 <USBH_ParseEPDesc>
            ep_ix++;
 80067b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80067b8:	3301      	adds	r3, #1
 80067ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	791b      	ldrb	r3, [r3, #4]
 80067c2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d204      	bcs.n	80067d4 <USBH_ParseCfgDesc+0x120>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	885a      	ldrh	r2, [r3, #2]
 80067ce:	8afb      	ldrh	r3, [r7, #22]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d8d1      	bhi.n	8006778 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80067d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067d8:	3301      	adds	r3, #1
 80067da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80067de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d804      	bhi.n	80067f0 <USBH_ParseCfgDesc+0x13c>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	885a      	ldrh	r2, [r3, #2]
 80067ea:	8afb      	ldrh	r3, [r7, #22]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d8a4      	bhi.n	800673a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80067f0:	bf00      	nop
 80067f2:	3728      	adds	r7, #40	; 0x28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781a      	ldrb	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	785a      	ldrb	r2, [r3, #1]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	789a      	ldrb	r2, [r3, #2]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	78da      	ldrb	r2, [r3, #3]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	791a      	ldrb	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	795a      	ldrb	r2, [r3, #5]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	799a      	ldrb	r2, [r3, #6]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	79da      	ldrb	r2, [r3, #7]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	7a1a      	ldrb	r2, [r3, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	721a      	strb	r2, [r3, #8]
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781a      	ldrb	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	785a      	ldrb	r2, [r3, #1]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	789a      	ldrb	r2, [r3, #2]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	78da      	ldrb	r2, [r3, #3]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	3304      	adds	r3, #4
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	b29a      	uxth	r2, r3
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	3305      	adds	r3, #5
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	b29b      	uxth	r3, r3
 8006894:	4313      	orrs	r3, r2
 8006896:	b29a      	uxth	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	799a      	ldrb	r2, [r3, #6]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	719a      	strb	r2, [r3, #6]
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3301      	adds	r3, #1
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d120      	bne.n	800690a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	1e9a      	subs	r2, r3, #2
 80068ce:	88fb      	ldrh	r3, [r7, #6]
 80068d0:	4293      	cmp	r3, r2
 80068d2:	bf28      	it	cs
 80068d4:	4613      	movcs	r3, r2
 80068d6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	3302      	adds	r3, #2
 80068dc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80068de:	2300      	movs	r3, #0
 80068e0:	82fb      	strh	r3, [r7, #22]
 80068e2:	e00b      	b.n	80068fc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80068e4:	8afb      	ldrh	r3, [r7, #22]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	781a      	ldrb	r2, [r3, #0]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	701a      	strb	r2, [r3, #0]
      pdest++;
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	3301      	adds	r3, #1
 80068f4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80068f6:	8afb      	ldrh	r3, [r7, #22]
 80068f8:	3302      	adds	r3, #2
 80068fa:	82fb      	strh	r3, [r7, #22]
 80068fc:	8afa      	ldrh	r2, [r7, #22]
 80068fe:	8abb      	ldrh	r3, [r7, #20]
 8006900:	429a      	cmp	r2, r3
 8006902:	d3ef      	bcc.n	80068e4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2200      	movs	r2, #0
 8006908:	701a      	strb	r2, [r3, #0]
  }
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8006916:	b480      	push	{r7}
 8006918:	b085      	sub	sp, #20
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	881a      	ldrh	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	4413      	add	r3, r2
 800692c:	b29a      	uxth	r2, r3
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4413      	add	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800693e:	68fb      	ldr	r3, [r7, #12]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	4613      	mov	r3, r2
 8006958:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800695a:	2301      	movs	r3, #1
 800695c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	789b      	ldrb	r3, [r3, #2]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d002      	beq.n	800696c <USBH_CtlReq+0x20>
 8006966:	2b02      	cmp	r3, #2
 8006968:	d00f      	beq.n	800698a <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 800696a:	e034      	b.n	80069d6 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	88fa      	ldrh	r2, [r7, #6]
 8006976:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2202      	movs	r2, #2
 8006982:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006984:	2301      	movs	r3, #1
 8006986:	75fb      	strb	r3, [r7, #23]
    break;
 8006988:	e025      	b.n	80069d6 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f000 f828 	bl	80069e0 <USBH_HandleControl>
 8006990:	4603      	mov	r3, r0
 8006992:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006994:	7dfb      	ldrb	r3, [r7, #23]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d108      	bne.n	80069ac <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2201      	movs	r2, #1
 800699e:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	75fb      	strb	r3, [r7, #23]
    break;
 80069aa:	e013      	b.n	80069d4 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d108      	bne.n	80069c4 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2201      	movs	r2, #1
 80069b6:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80069be:	2303      	movs	r3, #3
 80069c0:	75fb      	strb	r3, [r7, #23]
    break;
 80069c2:	e007      	b.n	80069d4 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d104      	bne.n	80069d4 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80069d0:	2302      	movs	r3, #2
 80069d2:	75fb      	strb	r3, [r7, #23]
    break;
 80069d4:	bf00      	nop
  }
  return status;
 80069d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af02      	add	r7, sp, #8
 80069e6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80069e8:	2301      	movs	r3, #1
 80069ea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069ec:	2300      	movs	r3, #0
 80069ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	7e1b      	ldrb	r3, [r3, #24]
 80069f4:	3b01      	subs	r3, #1
 80069f6:	2b0a      	cmp	r3, #10
 80069f8:	f200 814c 	bhi.w	8006c94 <USBH_HandleControl+0x2b4>
 80069fc:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <USBH_HandleControl+0x24>)
 80069fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a02:	bf00      	nop
 8006a04:	08006a31 	.word	0x08006a31
 8006a08:	08006a4b 	.word	0x08006a4b
 8006a0c:	08006ab5 	.word	0x08006ab5
 8006a10:	08006adb 	.word	0x08006adb
 8006a14:	08006b13 	.word	0x08006b13
 8006a18:	08006b3f 	.word	0x08006b3f
 8006a1c:	08006b91 	.word	0x08006b91
 8006a20:	08006bb3 	.word	0x08006bb3
 8006a24:	08006bef 	.word	0x08006bef
 8006a28:	08006c17 	.word	0x08006c17
 8006a2c:	08006c55 	.word	0x08006c55
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f103 0110 	add.w	r1, r3, #16
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	795b      	ldrb	r3, [r3, #5]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f939 	bl	8006cb4 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2202      	movs	r2, #2
 8006a46:	761a      	strb	r2, [r3, #24]
    break;
 8006a48:	e12f      	b.n	8006caa <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	795b      	ldrb	r3, [r3, #5]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fcb3 	bl	80073bc <USBH_LL_GetURBState>
 8006a56:	4603      	mov	r3, r0
 8006a58:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006a5a:	7bbb      	ldrb	r3, [r7, #14]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d11e      	bne.n	8006a9e <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	7c1b      	ldrb	r3, [r3, #16]
 8006a64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a68:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	8adb      	ldrh	r3, [r3, #22]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006a72:	7b7b      	ldrb	r3, [r7, #13]
 8006a74:	2b80      	cmp	r3, #128	; 0x80
 8006a76:	d103      	bne.n	8006a80 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2203      	movs	r2, #3
 8006a7c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006a7e:	e10b      	b.n	8006c98 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2205      	movs	r2, #5
 8006a84:	761a      	strb	r2, [r3, #24]
    break;
 8006a86:	e107      	b.n	8006c98 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8006a88:	7b7b      	ldrb	r3, [r7, #13]
 8006a8a:	2b80      	cmp	r3, #128	; 0x80
 8006a8c:	d103      	bne.n	8006a96 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2209      	movs	r2, #9
 8006a92:	761a      	strb	r2, [r3, #24]
    break;
 8006a94:	e100      	b.n	8006c98 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2207      	movs	r2, #7
 8006a9a:	761a      	strb	r2, [r3, #24]
    break;
 8006a9c:	e0fc      	b.n	8006c98 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	2b04      	cmp	r3, #4
 8006aa2:	d003      	beq.n	8006aac <USBH_HandleControl+0xcc>
 8006aa4:	7bbb      	ldrb	r3, [r7, #14]
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	f040 80f6 	bne.w	8006c98 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	220b      	movs	r2, #11
 8006ab0:	761a      	strb	r2, [r3, #24]
    break;
 8006ab2:	e0f1      	b.n	8006c98 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6899      	ldr	r1, [r3, #8]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	899a      	ldrh	r2, [r3, #12]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	791b      	ldrb	r3, [r3, #4]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f930 	bl	8006d32 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	761a      	strb	r2, [r3, #24]
    break;
 8006ad8:	e0e7      	b.n	8006caa <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	791b      	ldrb	r3, [r3, #4]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fc6b 	bl	80073bc <USBH_LL_GetURBState>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006aea:	7bbb      	ldrb	r3, [r7, #14]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d102      	bne.n	8006af6 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2209      	movs	r2, #9
 8006af4:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006af6:	7bbb      	ldrb	r3, [r7, #14]
 8006af8:	2b05      	cmp	r3, #5
 8006afa:	d102      	bne.n	8006b02 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006afc:	2303      	movs	r3, #3
 8006afe:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006b00:	e0cc      	b.n	8006c9c <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8006b02:	7bbb      	ldrb	r3, [r7, #14]
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	f040 80c9 	bne.w	8006c9c <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	220b      	movs	r2, #11
 8006b0e:	761a      	strb	r2, [r3, #24]
    break;
 8006b10:	e0c4      	b.n	8006c9c <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6899      	ldr	r1, [r3, #8]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	899a      	ldrh	r2, [r3, #12]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	7958      	ldrb	r0, [r3, #5]
 8006b1e:	2301      	movs	r3, #1
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	4603      	mov	r3, r0
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f8df 	bl	8006ce8 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2206      	movs	r2, #6
 8006b3a:	761a      	strb	r2, [r3, #24]
    break;
 8006b3c:	e0b5      	b.n	8006caa <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	795b      	ldrb	r3, [r3, #5]
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fc39 	bl	80073bc <USBH_LL_GetURBState>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d103      	bne.n	8006b5c <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2207      	movs	r2, #7
 8006b58:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006b5a:	e0a1      	b.n	8006ca0 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	2b05      	cmp	r3, #5
 8006b60:	d105      	bne.n	8006b6e <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	220c      	movs	r2, #12
 8006b66:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8006b6c:	e098      	b.n	8006ca0 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d103      	bne.n	8006b7c <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2205      	movs	r2, #5
 8006b78:	761a      	strb	r2, [r3, #24]
    break;
 8006b7a:	e091      	b.n	8006ca0 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8006b7c:	7bbb      	ldrb	r3, [r7, #14]
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	f040 808e 	bne.w	8006ca0 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	220b      	movs	r2, #11
 8006b88:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8006b8e:	e087      	b.n	8006ca0 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	791b      	ldrb	r3, [r3, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	2100      	movs	r1, #0
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f8ca 	bl	8006d32 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2208      	movs	r2, #8
 8006bae:	761a      	strb	r2, [r3, #24]

    break;
 8006bb0:	e07b      	b.n	8006caa <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	791b      	ldrb	r3, [r3, #4]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fbff 	bl	80073bc <USBH_LL_GetURBState>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006bc2:	7bbb      	ldrb	r3, [r7, #14]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d105      	bne.n	8006bd4 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	220d      	movs	r2, #13
 8006bcc:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006bd2:	e067      	b.n	8006ca4 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8006bd4:	7bbb      	ldrb	r3, [r7, #14]
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d103      	bne.n	8006be2 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	220b      	movs	r2, #11
 8006bde:	761a      	strb	r2, [r3, #24]
    break;
 8006be0:	e060      	b.n	8006ca4 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8006be2:	7bbb      	ldrb	r3, [r7, #14]
 8006be4:	2b05      	cmp	r3, #5
 8006be6:	d15d      	bne.n	8006ca4 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8006be8:	2303      	movs	r3, #3
 8006bea:	73fb      	strb	r3, [r7, #15]
    break;
 8006bec:	e05a      	b.n	8006ca4 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	795a      	ldrb	r2, [r3, #5]
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f873 	bl	8006ce8 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	220a      	movs	r2, #10
 8006c12:	761a      	strb	r2, [r3, #24]
    break;
 8006c14:	e049      	b.n	8006caa <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	795b      	ldrb	r3, [r3, #5]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fbcd 	bl	80073bc <USBH_LL_GetURBState>
 8006c22:	4603      	mov	r3, r0
 8006c24:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d105      	bne.n	8006c38 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	220d      	movs	r2, #13
 8006c34:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8006c36:	e037      	b.n	8006ca8 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d103      	bne.n	8006c46 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2209      	movs	r2, #9
 8006c42:	761a      	strb	r2, [r3, #24]
    break;
 8006c44:	e030      	b.n	8006ca8 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8006c46:	7bbb      	ldrb	r3, [r7, #14]
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d12d      	bne.n	8006ca8 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	220b      	movs	r2, #11
 8006c50:	761a      	strb	r2, [r3, #24]
    break;
 8006c52:	e029      	b.n	8006ca8 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	7e5b      	ldrb	r3, [r3, #25]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	765a      	strb	r2, [r3, #25]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	7e5b      	ldrb	r3, [r3, #25]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d809      	bhi.n	8006c7c <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 faba 	bl	80071e2 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006c7a:	e016      	b.n	8006caa <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c82:	2106      	movs	r1, #6
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	73fb      	strb	r3, [r7, #15]
    break;
 8006c92:	e00a      	b.n	8006caa <USBH_HandleControl+0x2ca>

  default:
    break;
 8006c94:	bf00      	nop
 8006c96:	e008      	b.n	8006caa <USBH_HandleControl+0x2ca>
    break;
 8006c98:	bf00      	nop
 8006c9a:	e006      	b.n	8006caa <USBH_HandleControl+0x2ca>
    break;
 8006c9c:	bf00      	nop
 8006c9e:	e004      	b.n	8006caa <USBH_HandleControl+0x2ca>
    break;
 8006ca0:	bf00      	nop
 8006ca2:	e002      	b.n	8006caa <USBH_HandleControl+0x2ca>
    break;
 8006ca4:	bf00      	nop
 8006ca6:	e000      	b.n	8006caa <USBH_HandleControl+0x2ca>
    break;
 8006ca8:	bf00      	nop
  }
  return status;
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b088      	sub	sp, #32
 8006cb8:	af04      	add	r7, sp, #16
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006cc2:	79f9      	ldrb	r1, [r7, #7]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	9303      	str	r3, [sp, #12]
 8006cc8:	2308      	movs	r3, #8
 8006cca:	9302      	str	r3, [sp, #8]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 fb3e 	bl	800735a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af04      	add	r7, sp, #16
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	80fb      	strh	r3, [r7, #6]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006d0c:	7979      	ldrb	r1, [r7, #5]
 8006d0e:	7e3b      	ldrb	r3, [r7, #24]
 8006d10:	9303      	str	r3, [sp, #12]
 8006d12:	88fb      	ldrh	r3, [r7, #6]
 8006d14:	9302      	str	r3, [sp, #8]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	9301      	str	r3, [sp, #4]
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	2200      	movs	r2, #0
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 fb19 	bl	800735a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b088      	sub	sp, #32
 8006d36:	af04      	add	r7, sp, #16
 8006d38:	60f8      	str	r0, [r7, #12]
 8006d3a:	60b9      	str	r1, [r7, #8]
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	461a      	mov	r2, r3
 8006d40:	460b      	mov	r3, r1
 8006d42:	80fb      	strh	r3, [r7, #6]
 8006d44:	4613      	mov	r3, r2
 8006d46:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006d48:	7979      	ldrb	r1, [r7, #5]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	9303      	str	r3, [sp, #12]
 8006d4e:	88fb      	ldrh	r3, [r7, #6]
 8006d50:	9302      	str	r3, [sp, #8]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	9301      	str	r3, [sp, #4]
 8006d56:	2301      	movs	r3, #1
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 fafb 	bl	800735a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006d64:	2300      	movs	r3, #0

}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b088      	sub	sp, #32
 8006d72:	af04      	add	r7, sp, #16
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	4611      	mov	r1, r2
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	80fb      	strh	r3, [r7, #6]
 8006d80:	4613      	mov	r3, r2
 8006d82:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006d92:	7979      	ldrb	r1, [r7, #5]
 8006d94:	7e3b      	ldrb	r3, [r7, #24]
 8006d96:	9303      	str	r3, [sp, #12]
 8006d98:	88fb      	ldrh	r3, [r7, #6]
 8006d9a:	9302      	str	r3, [sp, #8]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	9301      	str	r3, [sp, #4]
 8006da0:	2301      	movs	r3, #1
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	2302      	movs	r3, #2
 8006da6:	2200      	movs	r2, #0
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 fad6 	bl	800735a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af04      	add	r7, sp, #16
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	80fb      	strh	r3, [r7, #6]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006dce:	7979      	ldrb	r1, [r7, #5]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	9303      	str	r3, [sp, #12]
 8006dd4:	88fb      	ldrh	r3, [r7, #6]
 8006dd6:	9302      	str	r3, [sp, #8]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	9301      	str	r3, [sp, #4]
 8006ddc:	2301      	movs	r3, #1
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	2302      	movs	r3, #2
 8006de2:	2201      	movs	r2, #1
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 fab8 	bl	800735a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af04      	add	r7, sp, #16
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	4611      	mov	r1, r2
 8006e00:	461a      	mov	r2, r3
 8006e02:	4603      	mov	r3, r0
 8006e04:	70fb      	strb	r3, [r7, #3]
 8006e06:	460b      	mov	r3, r1
 8006e08:	70bb      	strb	r3, [r7, #2]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8006e0e:	7878      	ldrb	r0, [r7, #1]
 8006e10:	78ba      	ldrb	r2, [r7, #2]
 8006e12:	78f9      	ldrb	r1, [r7, #3]
 8006e14:	8b3b      	ldrh	r3, [r7, #24]
 8006e16:	9302      	str	r3, [sp, #8]
 8006e18:	7d3b      	ldrb	r3, [r7, #20]
 8006e1a:	9301      	str	r3, [sp, #4]
 8006e1c:	7c3b      	ldrb	r3, [r7, #16]
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	4603      	mov	r3, r0
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fa4b 	bl	80072be <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8006e28:	2300      	movs	r3, #0

}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8006e3e:	78fb      	ldrb	r3, [r7, #3]
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fa6a 	bl	800731c <USBH_LL_ClosePipe>

  return USBH_OK;
 8006e48:	2300      	movs	r3, #0

}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f831 	bl	8006ec6 <USBH_GetFreePipe>
 8006e64:	4603      	mov	r3, r0
 8006e66:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006e68:	89fb      	ldrh	r3, [r7, #14]
 8006e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d007      	beq.n	8006e82 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8006e72:	78fb      	ldrb	r3, [r7, #3]
 8006e74:	89fa      	ldrh	r2, [r7, #14]
 8006e76:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	32e0      	adds	r2, #224	; 0xe0
 8006e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8006e82:	89fb      	ldrh	r3, [r7, #14]
 8006e84:	b2db      	uxtb	r3, r3
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	460b      	mov	r3, r1
 8006e98:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8006e9a:	78fb      	ldrb	r3, [r7, #3]
 8006e9c:	2b0a      	cmp	r3, #10
 8006e9e:	d80b      	bhi.n	8006eb8 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8006ea0:	78fa      	ldrb	r2, [r7, #3]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	32e0      	adds	r2, #224	; 0xe0
 8006ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eaa:	78fa      	ldrb	r2, [r7, #3]
 8006eac:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	32e0      	adds	r2, #224	; 0xe0
 8006eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b085      	sub	sp, #20
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	73fb      	strb	r3, [r7, #15]
 8006ed6:	e00e      	b.n	8006ef6 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006ed8:	7bfa      	ldrb	r2, [r7, #15]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	32e0      	adds	r2, #224	; 0xe0
 8006ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d102      	bne.n	8006ef0 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	e007      	b.n	8006f00 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	73fb      	strb	r3, [r7, #15]
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	2b0a      	cmp	r3, #10
 8006efa:	d9ed      	bls.n	8006ed8 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8006efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006f10:	2201      	movs	r2, #1
 8006f12:	490e      	ldr	r1, [pc, #56]	; (8006f4c <MX_USB_HOST_Init+0x40>)
 8006f14:	480e      	ldr	r0, [pc, #56]	; (8006f50 <MX_USB_HOST_Init+0x44>)
 8006f16:	f7fe fdbb 	bl	8005a90 <USBH_Init>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006f20:	f7f9 fd4e 	bl	80009c0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006f24:	490b      	ldr	r1, [pc, #44]	; (8006f54 <MX_USB_HOST_Init+0x48>)
 8006f26:	480a      	ldr	r0, [pc, #40]	; (8006f50 <MX_USB_HOST_Init+0x44>)
 8006f28:	f7fe fe25 	bl	8005b76 <USBH_RegisterClass>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006f32:	f7f9 fd45 	bl	80009c0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006f36:	4806      	ldr	r0, [pc, #24]	; (8006f50 <MX_USB_HOST_Init+0x44>)
 8006f38:	f7fe feaa 	bl	8005c90 <USBH_Start>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006f42:	f7f9 fd3d 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006f46:	bf00      	nop
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	08006f6d 	.word	0x08006f6d
 8006f50:	200001bc 	.word	0x200001bc
 8006f54:	2000000c 	.word	0x2000000c

08006f58 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006f5c:	4802      	ldr	r0, [pc, #8]	; (8006f68 <MX_USB_HOST_Process+0x10>)
 8006f5e:	f7fe fea7 	bl	8005cb0 <USBH_Process>
}
 8006f62:	bf00      	nop
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	200001bc 	.word	0x200001bc

08006f6c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006f78:	78fb      	ldrb	r3, [r7, #3]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	d819      	bhi.n	8006fb4 <USBH_UserProcess+0x48>
 8006f80:	a201      	add	r2, pc, #4	; (adr r2, 8006f88 <USBH_UserProcess+0x1c>)
 8006f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f86:	bf00      	nop
 8006f88:	08006fb5 	.word	0x08006fb5
 8006f8c:	08006fa5 	.word	0x08006fa5
 8006f90:	08006fb5 	.word	0x08006fb5
 8006f94:	08006fad 	.word	0x08006fad
 8006f98:	08006f9d 	.word	0x08006f9d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <USBH_UserProcess+0x58>)
 8006f9e:	2203      	movs	r2, #3
 8006fa0:	701a      	strb	r2, [r3, #0]
  break;
 8006fa2:	e008      	b.n	8006fb6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006fa4:	4b07      	ldr	r3, [pc, #28]	; (8006fc4 <USBH_UserProcess+0x58>)
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	701a      	strb	r2, [r3, #0]
  break;
 8006faa:	e004      	b.n	8006fb6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006fac:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <USBH_UserProcess+0x58>)
 8006fae:	2201      	movs	r2, #1
 8006fb0:	701a      	strb	r2, [r3, #0]
  break;
 8006fb2:	e000      	b.n	8006fb6 <USBH_UserProcess+0x4a>

  default:
  break;
 8006fb4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	200000b8 	.word	0x200000b8

08006fc8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08a      	sub	sp, #40	; 0x28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fd0:	f107 0314 	add.w	r3, r7, #20
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	605a      	str	r2, [r3, #4]
 8006fda:	609a      	str	r2, [r3, #8]
 8006fdc:	60da      	str	r2, [r3, #12]
 8006fde:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fe8:	d147      	bne.n	800707a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fea:	2300      	movs	r3, #0
 8006fec:	613b      	str	r3, [r7, #16]
 8006fee:	4b25      	ldr	r3, [pc, #148]	; (8007084 <HAL_HCD_MspInit+0xbc>)
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	4a24      	ldr	r2, [pc, #144]	; (8007084 <HAL_HCD_MspInit+0xbc>)
 8006ff4:	f043 0301 	orr.w	r3, r3, #1
 8006ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8006ffa:	4b22      	ldr	r3, [pc, #136]	; (8007084 <HAL_HCD_MspInit+0xbc>)
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	613b      	str	r3, [r7, #16]
 8007004:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800700a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800700c:	2300      	movs	r3, #0
 800700e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007010:	2300      	movs	r3, #0
 8007012:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007014:	f107 0314 	add.w	r3, r7, #20
 8007018:	4619      	mov	r1, r3
 800701a:	481b      	ldr	r0, [pc, #108]	; (8007088 <HAL_HCD_MspInit+0xc0>)
 800701c:	f7fa f84a 	bl	80010b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007020:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007026:	2302      	movs	r3, #2
 8007028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800702a:	2300      	movs	r3, #0
 800702c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800702e:	2300      	movs	r3, #0
 8007030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007032:	230a      	movs	r3, #10
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007036:	f107 0314 	add.w	r3, r7, #20
 800703a:	4619      	mov	r1, r3
 800703c:	4812      	ldr	r0, [pc, #72]	; (8007088 <HAL_HCD_MspInit+0xc0>)
 800703e:	f7fa f839 	bl	80010b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007042:	4b10      	ldr	r3, [pc, #64]	; (8007084 <HAL_HCD_MspInit+0xbc>)
 8007044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007046:	4a0f      	ldr	r2, [pc, #60]	; (8007084 <HAL_HCD_MspInit+0xbc>)
 8007048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800704c:	6353      	str	r3, [r2, #52]	; 0x34
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <HAL_HCD_MspInit+0xbc>)
 8007054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007056:	4a0b      	ldr	r2, [pc, #44]	; (8007084 <HAL_HCD_MspInit+0xbc>)
 8007058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800705c:	6453      	str	r3, [r2, #68]	; 0x44
 800705e:	4b09      	ldr	r3, [pc, #36]	; (8007084 <HAL_HCD_MspInit+0xbc>)
 8007060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800706a:	2200      	movs	r2, #0
 800706c:	2100      	movs	r1, #0
 800706e:	2043      	movs	r0, #67	; 0x43
 8007070:	f7f9 ffe9 	bl	8001046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007074:	2043      	movs	r0, #67	; 0x43
 8007076:	f7fa f802 	bl	800107e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800707a:	bf00      	nop
 800707c:	3728      	adds	r7, #40	; 0x28
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	40023800 	.word	0x40023800
 8007088:	40020000 	.word	0x40020000

0800708c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff f8b9 	bl	8006212 <USBH_LL_IncTimer>
}
 80070a0:	bf00      	nop
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff f8fe 	bl	80062b8 <USBH_LL_Connect>
}
 80070bc:	bf00      	nop
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7ff f916 	bl	8006304 <USBH_LL_Disconnect>
}
 80070d8:	bf00      	nop
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
 80070ec:	4613      	mov	r3, r2
 80070ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800710a:	4618      	mov	r0, r3
 800710c:	f7ff f8ab 	bl	8006266 <USBH_LL_PortEnabled>
} 
 8007110:	bf00      	nop
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007126:	4618      	mov	r0, r3
 8007128:	f7ff f8ab 	bl	8006282 <USBH_LL_PortDisabled>
} 
 800712c:	bf00      	nop
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007142:	2b01      	cmp	r3, #1
 8007144:	d12a      	bne.n	800719c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007146:	4a18      	ldr	r2, [pc, #96]	; (80071a8 <USBH_LL_Init+0x74>)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a15      	ldr	r2, [pc, #84]	; (80071a8 <USBH_LL_Init+0x74>)
 8007152:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007156:	4b14      	ldr	r3, [pc, #80]	; (80071a8 <USBH_LL_Init+0x74>)
 8007158:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800715c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800715e:	4b12      	ldr	r3, [pc, #72]	; (80071a8 <USBH_LL_Init+0x74>)
 8007160:	2208      	movs	r2, #8
 8007162:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007164:	4b10      	ldr	r3, [pc, #64]	; (80071a8 <USBH_LL_Init+0x74>)
 8007166:	2201      	movs	r2, #1
 8007168:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800716a:	4b0f      	ldr	r3, [pc, #60]	; (80071a8 <USBH_LL_Init+0x74>)
 800716c:	2200      	movs	r2, #0
 800716e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007170:	4b0d      	ldr	r3, [pc, #52]	; (80071a8 <USBH_LL_Init+0x74>)
 8007172:	2202      	movs	r2, #2
 8007174:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007176:	4b0c      	ldr	r3, [pc, #48]	; (80071a8 <USBH_LL_Init+0x74>)
 8007178:	2200      	movs	r2, #0
 800717a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800717c:	480a      	ldr	r0, [pc, #40]	; (80071a8 <USBH_LL_Init+0x74>)
 800717e:	f7fa f97f 	bl	8001480 <HAL_HCD_Init>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007188:	f7f9 fc1a 	bl	80009c0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800718c:	4806      	ldr	r0, [pc, #24]	; (80071a8 <USBH_LL_Init+0x74>)
 800718e:	f7fa fd7b 	bl	8001c88 <HAL_HCD_GetCurrentFrame>
 8007192:	4603      	mov	r3, r0
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff f82c 	bl	80061f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20000588 	.word	0x20000588

080071ac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fa fce8 	bl	8001b98 <HAL_HCD_Start>
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 f95c 	bl	800748c <USBH_Get_USB_Status>
 80071d4:	4603      	mov	r3, r0
 80071d6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80071d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fa fcf0 	bl	8001bde <HAL_HCD_Stop>
 80071fe:	4603      	mov	r3, r0
 8007200:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007202:	7bfb      	ldrb	r3, [r7, #15]
 8007204:	4618      	mov	r0, r3
 8007206:	f000 f941 	bl	800748c <USBH_Get_USB_Status>
 800720a:	4603      	mov	r3, r0
 800720c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800720e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007220:	2301      	movs	r3, #1
 8007222:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800722a:	4618      	mov	r0, r3
 800722c:	f7fa fd3a 	bl	8001ca4 <HAL_HCD_GetCurrentSpeed>
 8007230:	4603      	mov	r3, r0
 8007232:	2b01      	cmp	r3, #1
 8007234:	d007      	beq.n	8007246 <USBH_LL_GetSpeed+0x2e>
 8007236:	2b01      	cmp	r3, #1
 8007238:	d302      	bcc.n	8007240 <USBH_LL_GetSpeed+0x28>
 800723a:	2b02      	cmp	r3, #2
 800723c:	d006      	beq.n	800724c <USBH_LL_GetSpeed+0x34>
 800723e:	e008      	b.n	8007252 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007240:	2300      	movs	r3, #0
 8007242:	73fb      	strb	r3, [r7, #15]
    break;
 8007244:	e008      	b.n	8007258 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007246:	2301      	movs	r3, #1
 8007248:	73fb      	strb	r3, [r7, #15]
    break;
 800724a:	e005      	b.n	8007258 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800724c:	2302      	movs	r3, #2
 800724e:	73fb      	strb	r3, [r7, #15]
    break;
 8007250:	e002      	b.n	8007258 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007252:	2301      	movs	r3, #1
 8007254:	73fb      	strb	r3, [r7, #15]
    break;
 8007256:	bf00      	nop
  }
  return  speed;
 8007258:	7bfb      	ldrb	r3, [r7, #15]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007278:	4618      	mov	r0, r3
 800727a:	f7fa fccd 	bl	8001c18 <HAL_HCD_ResetPort>
 800727e:	4603      	mov	r3, r0
 8007280:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	4618      	mov	r0, r3
 8007286:	f000 f901 	bl	800748c <USBH_Get_USB_Status>
 800728a:	4603      	mov	r3, r0
 800728c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800728e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072aa:	78fa      	ldrb	r2, [r7, #3]
 80072ac:	4611      	mov	r1, r2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fa fcd5 	bl	8001c5e <HAL_HCD_HC_GetXferCount>
 80072b4:	4603      	mov	r3, r0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80072be:	b590      	push	{r4, r7, lr}
 80072c0:	b089      	sub	sp, #36	; 0x24
 80072c2:	af04      	add	r7, sp, #16
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	4608      	mov	r0, r1
 80072c8:	4611      	mov	r1, r2
 80072ca:	461a      	mov	r2, r3
 80072cc:	4603      	mov	r3, r0
 80072ce:	70fb      	strb	r3, [r7, #3]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70bb      	strb	r3, [r7, #2]
 80072d4:	4613      	mov	r3, r2
 80072d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80072e6:	787c      	ldrb	r4, [r7, #1]
 80072e8:	78ba      	ldrb	r2, [r7, #2]
 80072ea:	78f9      	ldrb	r1, [r7, #3]
 80072ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80072ee:	9302      	str	r3, [sp, #8]
 80072f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072f4:	9301      	str	r3, [sp, #4]
 80072f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	4623      	mov	r3, r4
 80072fe:	f7fa f921 	bl	8001544 <HAL_HCD_HC_Init>
 8007302:	4603      	mov	r3, r0
 8007304:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	4618      	mov	r0, r3
 800730a:	f000 f8bf 	bl	800748c <USBH_Get_USB_Status>
 800730e:	4603      	mov	r3, r0
 8007310:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007312:	7bbb      	ldrb	r3, [r7, #14]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	bd90      	pop	{r4, r7, pc}

0800731c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	460b      	mov	r3, r1
 8007326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007336:	78fa      	ldrb	r2, [r7, #3]
 8007338:	4611      	mov	r1, r2
 800733a:	4618      	mov	r0, r3
 800733c:	f7fa f99a 	bl	8001674 <HAL_HCD_HC_Halt>
 8007340:	4603      	mov	r3, r0
 8007342:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007344:	7bfb      	ldrb	r3, [r7, #15]
 8007346:	4618      	mov	r0, r3
 8007348:	f000 f8a0 	bl	800748c <USBH_Get_USB_Status>
 800734c:	4603      	mov	r3, r0
 800734e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007350:	7bbb      	ldrb	r3, [r7, #14]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800735a:	b590      	push	{r4, r7, lr}
 800735c:	b089      	sub	sp, #36	; 0x24
 800735e:	af04      	add	r7, sp, #16
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	4608      	mov	r0, r1
 8007364:	4611      	mov	r1, r2
 8007366:	461a      	mov	r2, r3
 8007368:	4603      	mov	r3, r0
 800736a:	70fb      	strb	r3, [r7, #3]
 800736c:	460b      	mov	r3, r1
 800736e:	70bb      	strb	r3, [r7, #2]
 8007370:	4613      	mov	r3, r2
 8007372:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007382:	787c      	ldrb	r4, [r7, #1]
 8007384:	78ba      	ldrb	r2, [r7, #2]
 8007386:	78f9      	ldrb	r1, [r7, #3]
 8007388:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800738c:	9303      	str	r3, [sp, #12]
 800738e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007390:	9302      	str	r3, [sp, #8]
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	f897 3020 	ldrb.w	r3, [r7, #32]
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	4623      	mov	r3, r4
 800739e:	f7fa f98d 	bl	80016bc <HAL_HCD_HC_SubmitRequest>
 80073a2:	4603      	mov	r3, r0
 80073a4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 f86f 	bl	800748c <USBH_Get_USB_Status>
 80073ae:	4603      	mov	r3, r0
 80073b0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd90      	pop	{r4, r7, pc}

080073bc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073ce:	78fa      	ldrb	r2, [r7, #3]
 80073d0:	4611      	mov	r1, r2
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fa fc2e 	bl	8001c34 <HAL_HCD_HC_GetURBState>
 80073d8:	4603      	mov	r3, r0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	460b      	mov	r3, r1
 80073ec:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d103      	bne.n	8007400 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 f872 	bl	80074e4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007400:	20c8      	movs	r0, #200	; 0xc8
 8007402:	f7f9 fd23 	bl	8000e4c <HAL_Delay>
  return USBH_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	70fb      	strb	r3, [r7, #3]
 800741c:	4613      	mov	r3, r2
 800741e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007426:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007428:	78fa      	ldrb	r2, [r7, #3]
 800742a:	68f9      	ldr	r1, [r7, #12]
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	440b      	add	r3, r1
 8007436:	333b      	adds	r3, #59	; 0x3b
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800743e:	78fa      	ldrb	r2, [r7, #3]
 8007440:	68f9      	ldr	r1, [r7, #12]
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	00db      	lsls	r3, r3, #3
 800744a:	440b      	add	r3, r1
 800744c:	3350      	adds	r3, #80	; 0x50
 800744e:	78ba      	ldrb	r2, [r7, #2]
 8007450:	701a      	strb	r2, [r3, #0]
 8007452:	e009      	b.n	8007468 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007454:	78fa      	ldrb	r2, [r7, #3]
 8007456:	68f9      	ldr	r1, [r7, #12]
 8007458:	4613      	mov	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	440b      	add	r3, r1
 8007462:	3351      	adds	r3, #81	; 0x51
 8007464:	78ba      	ldrb	r2, [r7, #2]
 8007466:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b082      	sub	sp, #8
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7f9 fce4 	bl	8000e4c <HAL_Delay>
}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	4603      	mov	r3, r0
 8007494:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800749a:	79fb      	ldrb	r3, [r7, #7]
 800749c:	2b03      	cmp	r3, #3
 800749e:	d817      	bhi.n	80074d0 <USBH_Get_USB_Status+0x44>
 80074a0:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <USBH_Get_USB_Status+0x1c>)
 80074a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a6:	bf00      	nop
 80074a8:	080074b9 	.word	0x080074b9
 80074ac:	080074bf 	.word	0x080074bf
 80074b0:	080074c5 	.word	0x080074c5
 80074b4:	080074cb 	.word	0x080074cb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	73fb      	strb	r3, [r7, #15]
    break;
 80074bc:	e00b      	b.n	80074d6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80074be:	2302      	movs	r3, #2
 80074c0:	73fb      	strb	r3, [r7, #15]
    break;
 80074c2:	e008      	b.n	80074d6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80074c4:	2301      	movs	r3, #1
 80074c6:	73fb      	strb	r3, [r7, #15]
    break;
 80074c8:	e005      	b.n	80074d6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80074ca:	2302      	movs	r3, #2
 80074cc:	73fb      	strb	r3, [r7, #15]
    break;
 80074ce:	e002      	b.n	80074d6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80074d0:	2302      	movs	r3, #2
 80074d2:	73fb      	strb	r3, [r7, #15]
    break;
 80074d4:	bf00      	nop
  }
  return usb_status;
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	4603      	mov	r3, r0
 80074ec:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80074ee:	79fb      	ldrb	r3, [r7, #7]
 80074f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80074f2:	79fb      	ldrb	r3, [r7, #7]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d102      	bne.n	80074fe <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80074f8:	2301      	movs	r3, #1
 80074fa:	73fb      	strb	r3, [r7, #15]
 80074fc:	e001      	b.n	8007502 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80074fe:	2300      	movs	r3, #0
 8007500:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007502:	7bfb      	ldrb	r3, [r7, #15]
 8007504:	461a      	mov	r2, r3
 8007506:	2101      	movs	r1, #1
 8007508:	4803      	ldr	r0, [pc, #12]	; (8007518 <MX_DriverVbusFS+0x34>)
 800750a:	f7f9 ff6d 	bl	80013e8 <HAL_GPIO_WritePin>
}
 800750e:	bf00      	nop
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	40020800 	.word	0x40020800

0800751c <__errno>:
 800751c:	4b01      	ldr	r3, [pc, #4]	; (8007524 <__errno+0x8>)
 800751e:	6818      	ldr	r0, [r3, #0]
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	2000002c 	.word	0x2000002c

08007528 <__libc_init_array>:
 8007528:	b570      	push	{r4, r5, r6, lr}
 800752a:	4e0d      	ldr	r6, [pc, #52]	; (8007560 <__libc_init_array+0x38>)
 800752c:	4c0d      	ldr	r4, [pc, #52]	; (8007564 <__libc_init_array+0x3c>)
 800752e:	1ba4      	subs	r4, r4, r6
 8007530:	10a4      	asrs	r4, r4, #2
 8007532:	2500      	movs	r5, #0
 8007534:	42a5      	cmp	r5, r4
 8007536:	d109      	bne.n	800754c <__libc_init_array+0x24>
 8007538:	4e0b      	ldr	r6, [pc, #44]	; (8007568 <__libc_init_array+0x40>)
 800753a:	4c0c      	ldr	r4, [pc, #48]	; (800756c <__libc_init_array+0x44>)
 800753c:	f000 f8ea 	bl	8007714 <_init>
 8007540:	1ba4      	subs	r4, r4, r6
 8007542:	10a4      	asrs	r4, r4, #2
 8007544:	2500      	movs	r5, #0
 8007546:	42a5      	cmp	r5, r4
 8007548:	d105      	bne.n	8007556 <__libc_init_array+0x2e>
 800754a:	bd70      	pop	{r4, r5, r6, pc}
 800754c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007550:	4798      	blx	r3
 8007552:	3501      	adds	r5, #1
 8007554:	e7ee      	b.n	8007534 <__libc_init_array+0xc>
 8007556:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800755a:	4798      	blx	r3
 800755c:	3501      	adds	r5, #1
 800755e:	e7f2      	b.n	8007546 <__libc_init_array+0x1e>
 8007560:	08007750 	.word	0x08007750
 8007564:	08007750 	.word	0x08007750
 8007568:	08007750 	.word	0x08007750
 800756c:	08007754 	.word	0x08007754

08007570 <malloc>:
 8007570:	4b02      	ldr	r3, [pc, #8]	; (800757c <malloc+0xc>)
 8007572:	4601      	mov	r1, r0
 8007574:	6818      	ldr	r0, [r3, #0]
 8007576:	f000 b861 	b.w	800763c <_malloc_r>
 800757a:	bf00      	nop
 800757c:	2000002c 	.word	0x2000002c

08007580 <free>:
 8007580:	4b02      	ldr	r3, [pc, #8]	; (800758c <free+0xc>)
 8007582:	4601      	mov	r1, r0
 8007584:	6818      	ldr	r0, [r3, #0]
 8007586:	f000 b80b 	b.w	80075a0 <_free_r>
 800758a:	bf00      	nop
 800758c:	2000002c 	.word	0x2000002c

08007590 <memset>:
 8007590:	4402      	add	r2, r0
 8007592:	4603      	mov	r3, r0
 8007594:	4293      	cmp	r3, r2
 8007596:	d100      	bne.n	800759a <memset+0xa>
 8007598:	4770      	bx	lr
 800759a:	f803 1b01 	strb.w	r1, [r3], #1
 800759e:	e7f9      	b.n	8007594 <memset+0x4>

080075a0 <_free_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4605      	mov	r5, r0
 80075a4:	2900      	cmp	r1, #0
 80075a6:	d045      	beq.n	8007634 <_free_r+0x94>
 80075a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075ac:	1f0c      	subs	r4, r1, #4
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	bfb8      	it	lt
 80075b2:	18e4      	addlt	r4, r4, r3
 80075b4:	f000 f8ac 	bl	8007710 <__malloc_lock>
 80075b8:	4a1f      	ldr	r2, [pc, #124]	; (8007638 <_free_r+0x98>)
 80075ba:	6813      	ldr	r3, [r2, #0]
 80075bc:	4610      	mov	r0, r2
 80075be:	b933      	cbnz	r3, 80075ce <_free_r+0x2e>
 80075c0:	6063      	str	r3, [r4, #4]
 80075c2:	6014      	str	r4, [r2, #0]
 80075c4:	4628      	mov	r0, r5
 80075c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075ca:	f000 b8a2 	b.w	8007712 <__malloc_unlock>
 80075ce:	42a3      	cmp	r3, r4
 80075d0:	d90c      	bls.n	80075ec <_free_r+0x4c>
 80075d2:	6821      	ldr	r1, [r4, #0]
 80075d4:	1862      	adds	r2, r4, r1
 80075d6:	4293      	cmp	r3, r2
 80075d8:	bf04      	itt	eq
 80075da:	681a      	ldreq	r2, [r3, #0]
 80075dc:	685b      	ldreq	r3, [r3, #4]
 80075de:	6063      	str	r3, [r4, #4]
 80075e0:	bf04      	itt	eq
 80075e2:	1852      	addeq	r2, r2, r1
 80075e4:	6022      	streq	r2, [r4, #0]
 80075e6:	6004      	str	r4, [r0, #0]
 80075e8:	e7ec      	b.n	80075c4 <_free_r+0x24>
 80075ea:	4613      	mov	r3, r2
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	b10a      	cbz	r2, 80075f4 <_free_r+0x54>
 80075f0:	42a2      	cmp	r2, r4
 80075f2:	d9fa      	bls.n	80075ea <_free_r+0x4a>
 80075f4:	6819      	ldr	r1, [r3, #0]
 80075f6:	1858      	adds	r0, r3, r1
 80075f8:	42a0      	cmp	r0, r4
 80075fa:	d10b      	bne.n	8007614 <_free_r+0x74>
 80075fc:	6820      	ldr	r0, [r4, #0]
 80075fe:	4401      	add	r1, r0
 8007600:	1858      	adds	r0, r3, r1
 8007602:	4282      	cmp	r2, r0
 8007604:	6019      	str	r1, [r3, #0]
 8007606:	d1dd      	bne.n	80075c4 <_free_r+0x24>
 8007608:	6810      	ldr	r0, [r2, #0]
 800760a:	6852      	ldr	r2, [r2, #4]
 800760c:	605a      	str	r2, [r3, #4]
 800760e:	4401      	add	r1, r0
 8007610:	6019      	str	r1, [r3, #0]
 8007612:	e7d7      	b.n	80075c4 <_free_r+0x24>
 8007614:	d902      	bls.n	800761c <_free_r+0x7c>
 8007616:	230c      	movs	r3, #12
 8007618:	602b      	str	r3, [r5, #0]
 800761a:	e7d3      	b.n	80075c4 <_free_r+0x24>
 800761c:	6820      	ldr	r0, [r4, #0]
 800761e:	1821      	adds	r1, r4, r0
 8007620:	428a      	cmp	r2, r1
 8007622:	bf04      	itt	eq
 8007624:	6811      	ldreq	r1, [r2, #0]
 8007626:	6852      	ldreq	r2, [r2, #4]
 8007628:	6062      	str	r2, [r4, #4]
 800762a:	bf04      	itt	eq
 800762c:	1809      	addeq	r1, r1, r0
 800762e:	6021      	streq	r1, [r4, #0]
 8007630:	605c      	str	r4, [r3, #4]
 8007632:	e7c7      	b.n	80075c4 <_free_r+0x24>
 8007634:	bd38      	pop	{r3, r4, r5, pc}
 8007636:	bf00      	nop
 8007638:	200000bc 	.word	0x200000bc

0800763c <_malloc_r>:
 800763c:	b570      	push	{r4, r5, r6, lr}
 800763e:	1ccd      	adds	r5, r1, #3
 8007640:	f025 0503 	bic.w	r5, r5, #3
 8007644:	3508      	adds	r5, #8
 8007646:	2d0c      	cmp	r5, #12
 8007648:	bf38      	it	cc
 800764a:	250c      	movcc	r5, #12
 800764c:	2d00      	cmp	r5, #0
 800764e:	4606      	mov	r6, r0
 8007650:	db01      	blt.n	8007656 <_malloc_r+0x1a>
 8007652:	42a9      	cmp	r1, r5
 8007654:	d903      	bls.n	800765e <_malloc_r+0x22>
 8007656:	230c      	movs	r3, #12
 8007658:	6033      	str	r3, [r6, #0]
 800765a:	2000      	movs	r0, #0
 800765c:	bd70      	pop	{r4, r5, r6, pc}
 800765e:	f000 f857 	bl	8007710 <__malloc_lock>
 8007662:	4a21      	ldr	r2, [pc, #132]	; (80076e8 <_malloc_r+0xac>)
 8007664:	6814      	ldr	r4, [r2, #0]
 8007666:	4621      	mov	r1, r4
 8007668:	b991      	cbnz	r1, 8007690 <_malloc_r+0x54>
 800766a:	4c20      	ldr	r4, [pc, #128]	; (80076ec <_malloc_r+0xb0>)
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	b91b      	cbnz	r3, 8007678 <_malloc_r+0x3c>
 8007670:	4630      	mov	r0, r6
 8007672:	f000 f83d 	bl	80076f0 <_sbrk_r>
 8007676:	6020      	str	r0, [r4, #0]
 8007678:	4629      	mov	r1, r5
 800767a:	4630      	mov	r0, r6
 800767c:	f000 f838 	bl	80076f0 <_sbrk_r>
 8007680:	1c43      	adds	r3, r0, #1
 8007682:	d124      	bne.n	80076ce <_malloc_r+0x92>
 8007684:	230c      	movs	r3, #12
 8007686:	6033      	str	r3, [r6, #0]
 8007688:	4630      	mov	r0, r6
 800768a:	f000 f842 	bl	8007712 <__malloc_unlock>
 800768e:	e7e4      	b.n	800765a <_malloc_r+0x1e>
 8007690:	680b      	ldr	r3, [r1, #0]
 8007692:	1b5b      	subs	r3, r3, r5
 8007694:	d418      	bmi.n	80076c8 <_malloc_r+0x8c>
 8007696:	2b0b      	cmp	r3, #11
 8007698:	d90f      	bls.n	80076ba <_malloc_r+0x7e>
 800769a:	600b      	str	r3, [r1, #0]
 800769c:	50cd      	str	r5, [r1, r3]
 800769e:	18cc      	adds	r4, r1, r3
 80076a0:	4630      	mov	r0, r6
 80076a2:	f000 f836 	bl	8007712 <__malloc_unlock>
 80076a6:	f104 000b 	add.w	r0, r4, #11
 80076aa:	1d23      	adds	r3, r4, #4
 80076ac:	f020 0007 	bic.w	r0, r0, #7
 80076b0:	1ac3      	subs	r3, r0, r3
 80076b2:	d0d3      	beq.n	800765c <_malloc_r+0x20>
 80076b4:	425a      	negs	r2, r3
 80076b6:	50e2      	str	r2, [r4, r3]
 80076b8:	e7d0      	b.n	800765c <_malloc_r+0x20>
 80076ba:	428c      	cmp	r4, r1
 80076bc:	684b      	ldr	r3, [r1, #4]
 80076be:	bf16      	itet	ne
 80076c0:	6063      	strne	r3, [r4, #4]
 80076c2:	6013      	streq	r3, [r2, #0]
 80076c4:	460c      	movne	r4, r1
 80076c6:	e7eb      	b.n	80076a0 <_malloc_r+0x64>
 80076c8:	460c      	mov	r4, r1
 80076ca:	6849      	ldr	r1, [r1, #4]
 80076cc:	e7cc      	b.n	8007668 <_malloc_r+0x2c>
 80076ce:	1cc4      	adds	r4, r0, #3
 80076d0:	f024 0403 	bic.w	r4, r4, #3
 80076d4:	42a0      	cmp	r0, r4
 80076d6:	d005      	beq.n	80076e4 <_malloc_r+0xa8>
 80076d8:	1a21      	subs	r1, r4, r0
 80076da:	4630      	mov	r0, r6
 80076dc:	f000 f808 	bl	80076f0 <_sbrk_r>
 80076e0:	3001      	adds	r0, #1
 80076e2:	d0cf      	beq.n	8007684 <_malloc_r+0x48>
 80076e4:	6025      	str	r5, [r4, #0]
 80076e6:	e7db      	b.n	80076a0 <_malloc_r+0x64>
 80076e8:	200000bc 	.word	0x200000bc
 80076ec:	200000c0 	.word	0x200000c0

080076f0 <_sbrk_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4c06      	ldr	r4, [pc, #24]	; (800770c <_sbrk_r+0x1c>)
 80076f4:	2300      	movs	r3, #0
 80076f6:	4605      	mov	r5, r0
 80076f8:	4608      	mov	r0, r1
 80076fa:	6023      	str	r3, [r4, #0]
 80076fc:	f7f9 fac8 	bl	8000c90 <_sbrk>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	d102      	bne.n	800770a <_sbrk_r+0x1a>
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	b103      	cbz	r3, 800770a <_sbrk_r+0x1a>
 8007708:	602b      	str	r3, [r5, #0]
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	2000084c 	.word	0x2000084c

08007710 <__malloc_lock>:
 8007710:	4770      	bx	lr

08007712 <__malloc_unlock>:
 8007712:	4770      	bx	lr

08007714 <_init>:
 8007714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007716:	bf00      	nop
 8007718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771a:	bc08      	pop	{r3}
 800771c:	469e      	mov	lr, r3
 800771e:	4770      	bx	lr

08007720 <_fini>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	bf00      	nop
 8007724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007726:	bc08      	pop	{r3}
 8007728:	469e      	mov	lr, r3
 800772a:	4770      	bx	lr
