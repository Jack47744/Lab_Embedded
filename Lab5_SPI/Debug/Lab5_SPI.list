
Lab5_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007904  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007a8c  08007a8c  00017a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aa8  08007aa8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007aa8  08007aa8  00017aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ab0  08007ab0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ab0  08007ab0  00017ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ab4  08007ab4  00017ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  20000090  08007b48  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  08007b48  0002084c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018355  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000356b  00000000  00000000  00038415  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f8  00000000  00000000  0003b980  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f90  00000000  00000000  0003ca78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023865  00000000  00000000  0003da08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000112e5  00000000  00000000  0006126d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca6a3  00000000  00000000  00072552  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013cbf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000477c  00000000  00000000  0013cc70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a74 	.word	0x08007a74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007a74 	.word	0x08007a74

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fc1b 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f829 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f93d 	bl	8000754 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004da:	f000 f8a7 	bl	800062c <MX_I2C1_Init>
  MX_I2S3_Init();
 80004de:	f000 f8d3 	bl	8000688 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 80004e2:	f006 fec3 	bl	800726c <MX_USB_HOST_Init>
  MX_SPI2_Init();
 80004e6:	f000 f8ff 	bl	80006e8 <MX_SPI2_Init>
  //uint8_t buffer[1] = {1};
  //uint8_t data[1] = {0};
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004ea:	f006 fee5 	bl	80072b8 <MX_USB_HOST_Process>


    char data[1];
        /* USER CODE END WHILE */
        //MX_USB_HOST_Process();
        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1){
 80004ee:	2101      	movs	r1, #1
 80004f0:	480a      	ldr	r0, [pc, #40]	; (800051c <main+0x54>)
 80004f2:	f000 ff49 	bl	8001388 <HAL_GPIO_ReadPin>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d1f6      	bne.n	80004ea <main+0x22>
        	data[0] = 'p';
 80004fc:	2370      	movs	r3, #112	; 0x70
 80004fe:	713b      	strb	r3, [r7, #4]

        	//HAL_SPI_Transmit(&hspi2, pData, Size, Timeout)
        	HAL_SPI_Transmit(&hspi2, data, sizeof(data), 1000);
 8000500:	1d39      	adds	r1, r7, #4
 8000502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000506:	2201      	movs	r2, #1
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <main+0x58>)
 800050a:	f003 ffb9 	bl	8004480 <HAL_SPI_Transmit>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800050e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000512:	4804      	ldr	r0, [pc, #16]	; (8000524 <main+0x5c>)
 8000514:	f000 ff69 	bl	80013ea <HAL_GPIO_TogglePin>
  {
 8000518:	e7e7      	b.n	80004ea <main+0x22>
 800051a:	bf00      	nop
 800051c:	40020000 	.word	0x40020000
 8000520:	200000c0 	.word	0x200000c0
 8000524:	40020c00 	.word	0x40020c00

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b098      	sub	sp, #96	; 0x60
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f007 f9da 	bl	80078f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 031c 	add.w	r3, r7, #28
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	4b31      	ldr	r3, [pc, #196]	; (8000624 <SystemClock_Config+0xfc>)
 8000560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000562:	4a30      	ldr	r2, [pc, #192]	; (8000624 <SystemClock_Config+0xfc>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000568:	6413      	str	r3, [r2, #64]	; 0x40
 800056a:	4b2e      	ldr	r3, [pc, #184]	; (8000624 <SystemClock_Config+0xfc>)
 800056c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <SystemClock_Config+0x100>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a2a      	ldr	r2, [pc, #168]	; (8000628 <SystemClock_Config+0x100>)
 8000580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	4b28      	ldr	r3, [pc, #160]	; (8000628 <SystemClock_Config+0x100>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000592:	2301      	movs	r3, #1
 8000594:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a6:	2308      	movs	r3, #8
 80005a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005aa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b4:	2307      	movs	r3, #7
 80005b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 f96f 	bl	80038a0 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005c8:	f000 f9d2 	bl	8000970 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	2105      	movs	r1, #5
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fbc8 	bl	8003d80 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005f6:	f000 f9bb 	bl	8000970 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005fa:	2301      	movs	r3, #1
 80005fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005fe:	23c0      	movs	r3, #192	; 0xc0
 8000600:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000602:	2302      	movs	r3, #2
 8000604:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4618      	mov	r0, r3
 800060c:	f003 fd96 	bl	800413c <HAL_RCCEx_PeriphCLKConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000616:	f000 f9ab 	bl	8000970 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3760      	adds	r7, #96	; 0x60
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_I2C1_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MX_I2C1_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_I2C1_Init+0x50>)
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_I2C1_Init+0x58>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_I2C1_Init+0x50>)
 800064a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_I2C1_Init+0x50>)
 800066a:	f002 fb41 	bl	8002cf0 <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 f97c 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000118 	.word	0x20000118
 8000680:	40005400 	.word	0x40005400
 8000684:	000186a0 	.word	0x000186a0

08000688 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_I2S3_Init+0x54>)
 800068e:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <MX_I2S3_Init+0x58>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_I2S3_Init+0x54>)
 8000694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000698:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_I2S3_Init+0x54>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_I2S3_Init+0x54>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <MX_I2S3_Init+0x54>)
 80006a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_I2S3_Init+0x54>)
 80006b0:	4a0c      	ldr	r2, [pc, #48]	; (80006e4 <MX_I2S3_Init+0x5c>)
 80006b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_I2S3_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_I2S3_Init+0x54>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_I2S3_Init+0x54>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_I2S3_Init+0x54>)
 80006c8:	f002 fc4a 	bl	8002f60 <HAL_I2S_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006d2:	f000 f94d 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000016c 	.word	0x2000016c
 80006e0:	40003c00 	.word	0x40003c00
 80006e4:	00017700 	.word	0x00017700

080006e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_SPI2_Init+0x64>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <MX_SPI2_Init+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_SPI2_Init+0x64>)
 80006f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_SPI2_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_SPI2_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_SPI2_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_SPI2_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_SPI2_Init+0x64>)
 8000714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000718:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_SPI2_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_SPI2_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_SPI2_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_SPI2_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_SPI2_Init+0x64>)
 8000734:	220a      	movs	r2, #10
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_SPI2_Init+0x64>)
 800073a:	f003 fe3d 	bl	80043b8 <HAL_SPI_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 f914 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200000c0 	.word	0x200000c0
 8000750:	40003800 	.word	0x40003800

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	; 0x30
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	4b79      	ldr	r3, [pc, #484]	; (8000954 <MX_GPIO_Init+0x200>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a78      	ldr	r2, [pc, #480]	; (8000954 <MX_GPIO_Init+0x200>)
 8000774:	f043 0310 	orr.w	r3, r3, #16
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b76      	ldr	r3, [pc, #472]	; (8000954 <MX_GPIO_Init+0x200>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0310 	and.w	r3, r3, #16
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	4b72      	ldr	r3, [pc, #456]	; (8000954 <MX_GPIO_Init+0x200>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a71      	ldr	r2, [pc, #452]	; (8000954 <MX_GPIO_Init+0x200>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b6f      	ldr	r3, [pc, #444]	; (8000954 <MX_GPIO_Init+0x200>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b6b      	ldr	r3, [pc, #428]	; (8000954 <MX_GPIO_Init+0x200>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a6a      	ldr	r2, [pc, #424]	; (8000954 <MX_GPIO_Init+0x200>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b68      	ldr	r3, [pc, #416]	; (8000954 <MX_GPIO_Init+0x200>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b64      	ldr	r3, [pc, #400]	; (8000954 <MX_GPIO_Init+0x200>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a63      	ldr	r2, [pc, #396]	; (8000954 <MX_GPIO_Init+0x200>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b61      	ldr	r3, [pc, #388]	; (8000954 <MX_GPIO_Init+0x200>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b5d      	ldr	r3, [pc, #372]	; (8000954 <MX_GPIO_Init+0x200>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a5c      	ldr	r2, [pc, #368]	; (8000954 <MX_GPIO_Init+0x200>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b5a      	ldr	r3, [pc, #360]	; (8000954 <MX_GPIO_Init+0x200>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b56      	ldr	r3, [pc, #344]	; (8000954 <MX_GPIO_Init+0x200>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a55      	ldr	r2, [pc, #340]	; (8000954 <MX_GPIO_Init+0x200>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b53      	ldr	r3, [pc, #332]	; (8000954 <MX_GPIO_Init+0x200>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2108      	movs	r1, #8
 8000816:	4850      	ldr	r0, [pc, #320]	; (8000958 <MX_GPIO_Init+0x204>)
 8000818:	f000 fdce 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2101      	movs	r1, #1
 8000820:	484e      	ldr	r0, [pc, #312]	; (800095c <MX_GPIO_Init+0x208>)
 8000822:	f000 fdc9 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000826:	2200      	movs	r2, #0
 8000828:	f24f 0110 	movw	r1, #61456	; 0xf010
 800082c:	484c      	ldr	r0, [pc, #304]	; (8000960 <MX_GPIO_Init+0x20c>)
 800082e:	f000 fdc3 	bl	80013b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000832:	2308      	movs	r3, #8
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4843      	ldr	r0, [pc, #268]	; (8000958 <MX_GPIO_Init+0x204>)
 800084a:	f000 fc03 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	483d      	ldr	r0, [pc, #244]	; (800095c <MX_GPIO_Init+0x208>)
 8000866:	f000 fbf5 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800086a:	2308      	movs	r3, #8
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087a:	2305      	movs	r3, #5
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4835      	ldr	r0, [pc, #212]	; (800095c <MX_GPIO_Init+0x208>)
 8000886:	f000 fbe5 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800088e:	4b35      	ldr	r3, [pc, #212]	; (8000964 <MX_GPIO_Init+0x210>)
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4832      	ldr	r0, [pc, #200]	; (8000968 <MX_GPIO_Init+0x214>)
 800089e:	f000 fbd9 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008a2:	23e0      	movs	r3, #224	; 0xe0
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008b2:	2305      	movs	r3, #5
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	482a      	ldr	r0, [pc, #168]	; (8000968 <MX_GPIO_Init+0x214>)
 80008be:	f000 fbc9 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008c2:	2304      	movs	r3, #4
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4825      	ldr	r0, [pc, #148]	; (800096c <MX_GPIO_Init+0x218>)
 80008d6:	f000 fbbd 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ec:	2305      	movs	r3, #5
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	481d      	ldr	r0, [pc, #116]	; (800096c <MX_GPIO_Init+0x218>)
 80008f8:	f000 fbac 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008fc:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000900:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4812      	ldr	r0, [pc, #72]	; (8000960 <MX_GPIO_Init+0x20c>)
 8000916:	f000 fb9d 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800091a:	2320      	movs	r3, #32
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <MX_GPIO_Init+0x20c>)
 800092e:	f000 fb91 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000932:	2302      	movs	r3, #2
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_GPIO_Init+0x210>)
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_GPIO_Init+0x204>)
 8000946:	f000 fb85 	bl	8001054 <HAL_GPIO_Init>

}
 800094a:	bf00      	nop
 800094c:	3730      	adds	r7, #48	; 0x30
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40021000 	.word	0x40021000
 800095c:	40020800 	.word	0x40020800
 8000960:	40020c00 	.word	0x40020c00
 8000964:	10120000 	.word	0x10120000
 8000968:	40020000 	.word	0x40020000
 800096c:	40020400 	.word	0x40020400

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <HAL_MspInit+0x4c>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_MspInit+0x4c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009be:	2007      	movs	r0, #7
 80009c0:	f000 fb06 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800

080009d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <HAL_I2C_MspInit+0x84>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d12c      	bne.n	8000a4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a17      	ldr	r2, [pc, #92]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a0e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a14:	2312      	movs	r3, #18
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a20:	2304      	movs	r3, #4
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480c      	ldr	r0, [pc, #48]	; (8000a5c <HAL_I2C_MspInit+0x8c>)
 8000a2c:	f000 fb12 	bl	8001054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 8000a3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	; 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40005400 	.word	0x40005400
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020400 	.word	0x40020400

08000a60 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a28      	ldr	r2, [pc, #160]	; (8000b20 <HAL_I2S_MspInit+0xc0>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d14a      	bne.n	8000b18 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <HAL_I2S_MspInit+0xc4>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	4a26      	ldr	r2, [pc, #152]	; (8000b24 <HAL_I2S_MspInit+0xc4>)
 8000a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <HAL_I2S_MspInit+0xc4>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <HAL_I2S_MspInit+0xc4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a1f      	ldr	r2, [pc, #124]	; (8000b24 <HAL_I2S_MspInit+0xc4>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <HAL_I2S_MspInit+0xc4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_I2S_MspInit+0xc4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <HAL_I2S_MspInit+0xc4>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_I2S_MspInit+0xc4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ad6:	2310      	movs	r3, #16
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ae6:	2306      	movs	r3, #6
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <HAL_I2S_MspInit+0xc8>)
 8000af2:	f000 faaf 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000af6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b08:	2306      	movs	r3, #6
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	4806      	ldr	r0, [pc, #24]	; (8000b2c <HAL_I2S_MspInit+0xcc>)
 8000b14:	f000 fa9e 	bl	8001054 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	; 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40003c00 	.word	0x40003c00
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	40020800 	.word	0x40020800

08000b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <HAL_SPI_MspInit+0x84>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12c      	bne.n	8000bac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b8a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b9c:	2305      	movs	r3, #5
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <HAL_SPI_MspInit+0x8c>)
 8000ba8:	f000 fa54 	bl	8001054 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	; 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40003800 	.word	0x40003800
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f000 f8ca 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <OTG_FS_IRQHandler+0x10>)
 8000c22:	f000 fe83 	bl	800192c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000584 	.word	0x20000584

08000c30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <_sbrk+0x50>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x16>
		heap_end = &end;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <_sbrk+0x50>)
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <_sbrk+0x54>)
 8000c44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <_sbrk+0x50>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <_sbrk+0x50>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4413      	add	r3, r2
 8000c54:	466a      	mov	r2, sp
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d907      	bls.n	8000c6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c5a:	f006 fe0f 	bl	800787c <__errno>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	230c      	movs	r3, #12
 8000c62:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c68:	e006      	b.n	8000c78 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c6a:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <_sbrk+0x50>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a03      	ldr	r2, [pc, #12]	; (8000c80 <_sbrk+0x50>)
 8000c74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200000ac 	.word	0x200000ac
 8000c84:	20000850 	.word	0x20000850

08000c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <SystemInit+0x28>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <SystemInit+0x28>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SystemInit+0x28>)
 8000c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ca2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cba:	e003      	b.n	8000cc4 <LoopCopyDataInit>

08000cbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cc2:	3104      	adds	r1, #4

08000cc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cc4:	480b      	ldr	r0, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ccc:	d3f6      	bcc.n	8000cbc <CopyDataInit>
  ldr  r2, =_sbss
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cd0:	e002      	b.n	8000cd8 <LoopFillZerobss>

08000cd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cd4:	f842 3b04 	str.w	r3, [r2], #4

08000cd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cdc:	d3f9      	bcc.n	8000cd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cde:	f7ff ffd3 	bl	8000c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f006 fdd1 	bl	8007888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce6:	f7ff fbef 	bl	80004c8 <main>
  bx  lr    
 8000cea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cf0:	08007ab8 	.word	0x08007ab8
  ldr  r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cf8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000cfc:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000d00:	2000084c 	.word	0x2000084c

08000d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <HAL_Init+0x40>)
 8000d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_Init+0x40>)
 8000d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_Init+0x40>)
 8000d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f94d 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f000 f808 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3c:	f7ff fe20 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023c00 	.word	0x40023c00

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x54>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x58>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f965 	bl	800103a <HAL_SYSTICK_Config>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00e      	b.n	8000d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d80a      	bhi.n	8000d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d80:	2200      	movs	r2, #0
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d88:	f000 f92d 	bl	8000fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <HAL_InitTick+0x5c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e000      	b.n	8000d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000004 	.word	0x20000004

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	200001b4 	.word	0x200001b4

08000dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	200001b4 	.word	0x200001b4

08000dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df4:	f7ff ffee 	bl	8000dd4 <HAL_GetTick>
 8000df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e04:	d005      	beq.n	8000e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_Delay+0x40>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e12:	bf00      	nop
 8000e14:	f7ff ffde 	bl	8000dd4 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d8f7      	bhi.n	8000e14 <HAL_Delay+0x28>
  {
  }
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000008 	.word	0x20000008

08000e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db0b      	blt.n	8000ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	4907      	ldr	r1, [pc, #28]	; (8000ecc <__NVIC_EnableIRQ+0x38>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb0:	f7ff ff8e 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff29 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff3e 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff8e 	bl	8000f24 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5d 	bl	8000ed0 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff31 	bl	8000e94 <__NVIC_EnableIRQ>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffa2 	bl	8000f8c <SysTick_Config>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
 800106e:	e16b      	b.n	8001348 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001070:	2201      	movs	r2, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	429a      	cmp	r2, r3
 800108a:	f040 815a 	bne.w	8001342 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d00b      	beq.n	80010ae <HAL_GPIO_Init+0x5a>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d007      	beq.n	80010ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a2:	2b11      	cmp	r3, #17
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b12      	cmp	r3, #18
 80010ac:	d130      	bne.n	8001110 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e4:	2201      	movs	r2, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	091b      	lsrs	r3, r3, #4
 80010fa:	f003 0201 	and.w	r2, r3, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0xfc>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b12      	cmp	r3, #18
 800114e:	d123      	bne.n	8001198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	69b9      	ldr	r1, [r7, #24]
 8001194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0203 	and.w	r2, r3, #3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80b4 	beq.w	8001342 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b5f      	ldr	r3, [pc, #380]	; (800135c <HAL_GPIO_Init+0x308>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a5e      	ldr	r2, [pc, #376]	; (800135c <HAL_GPIO_Init+0x308>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b5c      	ldr	r3, [pc, #368]	; (800135c <HAL_GPIO_Init+0x308>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f6:	4a5a      	ldr	r2, [pc, #360]	; (8001360 <HAL_GPIO_Init+0x30c>)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a51      	ldr	r2, [pc, #324]	; (8001364 <HAL_GPIO_Init+0x310>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d02b      	beq.n	800127a <HAL_GPIO_Init+0x226>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a50      	ldr	r2, [pc, #320]	; (8001368 <HAL_GPIO_Init+0x314>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d025      	beq.n	8001276 <HAL_GPIO_Init+0x222>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4f      	ldr	r2, [pc, #316]	; (800136c <HAL_GPIO_Init+0x318>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d01f      	beq.n	8001272 <HAL_GPIO_Init+0x21e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4e      	ldr	r2, [pc, #312]	; (8001370 <HAL_GPIO_Init+0x31c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d019      	beq.n	800126e <HAL_GPIO_Init+0x21a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4d      	ldr	r2, [pc, #308]	; (8001374 <HAL_GPIO_Init+0x320>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0x216>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4c      	ldr	r2, [pc, #304]	; (8001378 <HAL_GPIO_Init+0x324>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d00d      	beq.n	8001266 <HAL_GPIO_Init+0x212>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4b      	ldr	r2, [pc, #300]	; (800137c <HAL_GPIO_Init+0x328>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d007      	beq.n	8001262 <HAL_GPIO_Init+0x20e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4a      	ldr	r2, [pc, #296]	; (8001380 <HAL_GPIO_Init+0x32c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_GPIO_Init+0x20a>
 800125a:	2307      	movs	r3, #7
 800125c:	e00e      	b.n	800127c <HAL_GPIO_Init+0x228>
 800125e:	2308      	movs	r3, #8
 8001260:	e00c      	b.n	800127c <HAL_GPIO_Init+0x228>
 8001262:	2306      	movs	r3, #6
 8001264:	e00a      	b.n	800127c <HAL_GPIO_Init+0x228>
 8001266:	2305      	movs	r3, #5
 8001268:	e008      	b.n	800127c <HAL_GPIO_Init+0x228>
 800126a:	2304      	movs	r3, #4
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x228>
 800126e:	2303      	movs	r3, #3
 8001270:	e004      	b.n	800127c <HAL_GPIO_Init+0x228>
 8001272:	2302      	movs	r3, #2
 8001274:	e002      	b.n	800127c <HAL_GPIO_Init+0x228>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x228>
 800127a:	2300      	movs	r3, #0
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	f002 0203 	and.w	r2, r2, #3
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	4093      	lsls	r3, r2
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800128c:	4934      	ldr	r1, [pc, #208]	; (8001360 <HAL_GPIO_Init+0x30c>)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800129a:	4b3a      	ldr	r3, [pc, #232]	; (8001384 <HAL_GPIO_Init+0x330>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012be:	4a31      	ldr	r2, [pc, #196]	; (8001384 <HAL_GPIO_Init+0x330>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012c4:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <HAL_GPIO_Init+0x330>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e8:	4a26      	ldr	r2, [pc, #152]	; (8001384 <HAL_GPIO_Init+0x330>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ee:	4b25      	ldr	r3, [pc, #148]	; (8001384 <HAL_GPIO_Init+0x330>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001312:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <HAL_GPIO_Init+0x330>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <HAL_GPIO_Init+0x330>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800133c:	4a11      	ldr	r2, [pc, #68]	; (8001384 <HAL_GPIO_Init+0x330>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	2b0f      	cmp	r3, #15
 800134c:	f67f ae90 	bls.w	8001070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001350:	bf00      	nop
 8001352:	3724      	adds	r7, #36	; 0x24
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40023800 	.word	0x40023800
 8001360:	40013800 	.word	0x40013800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020400 	.word	0x40020400
 800136c:	40020800 	.word	0x40020800
 8001370:	40020c00 	.word	0x40020c00
 8001374:	40021000 	.word	0x40021000
 8001378:	40021400 	.word	0x40021400
 800137c:	40021800 	.word	0x40021800
 8001380:	40021c00 	.word	0x40021c00
 8001384:	40013c00 	.word	0x40013c00

08001388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	4013      	ands	r3, r2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	e001      	b.n	80013aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d4:	e003      	b.n	80013de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013d6:	887b      	ldrh	r3, [r7, #2]
 80013d8:	041a      	lsls	r2, r3, #16
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	619a      	str	r2, [r3, #24]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	887b      	ldrh	r3, [r7, #2]
 80013fc:	401a      	ands	r2, r3
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	429a      	cmp	r2, r3
 8001402:	d104      	bne.n	800140e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001404:	887b      	ldrh	r3, [r7, #2]
 8001406:	041a      	lsls	r2, r3, #16
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800140c:	e002      	b.n	8001414 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	619a      	str	r2, [r3, #24]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	b08f      	sub	sp, #60	; 0x3c
 8001424:	af0a      	add	r7, sp, #40	; 0x28
 8001426:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e054      	b.n	80014dc <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d106      	bne.n	8001452 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f005 ff6b 	bl	8007328 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2203      	movs	r2, #3
 8001456:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	2b00      	cmp	r3, #0
 8001464:	d102      	bne.n	800146c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f003 fa57 	bl	8004924 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	687e      	ldr	r6, [r7, #4]
 800147e:	466d      	mov	r5, sp
 8001480:	f106 0410 	add.w	r4, r6, #16
 8001484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001490:	e885 0003 	stmia.w	r5, {r0, r1}
 8001494:	1d33      	adds	r3, r6, #4
 8001496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001498:	6838      	ldr	r0, [r7, #0]
 800149a:	f003 f9d1 	bl	8004840 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2101      	movs	r1, #1
 80014a4:	4618      	mov	r0, r3
 80014a6:	f003 fa4e 	bl	8004946 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	687e      	ldr	r6, [r7, #4]
 80014b2:	466d      	mov	r5, sp
 80014b4:	f106 0410 	add.w	r4, r6, #16
 80014b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80014c8:	1d33      	adds	r3, r6, #4
 80014ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014cc:	6838      	ldr	r0, [r7, #0]
 80014ce:	f003 fb61 	bl	8004b94 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014e4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af04      	add	r7, sp, #16
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	4608      	mov	r0, r1
 80014ee:	4611      	mov	r1, r2
 80014f0:	461a      	mov	r2, r3
 80014f2:	4603      	mov	r3, r0
 80014f4:	70fb      	strb	r3, [r7, #3]
 80014f6:	460b      	mov	r3, r1
 80014f8:	70bb      	strb	r3, [r7, #2]
 80014fa:	4613      	mov	r3, r2
 80014fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001504:	2b01      	cmp	r3, #1
 8001506:	d101      	bne.n	800150c <HAL_HCD_HC_Init+0x28>
 8001508:	2302      	movs	r3, #2
 800150a:	e07f      	b.n	800160c <HAL_HCD_HC_Init+0x128>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001514:	78fa      	ldrb	r2, [r7, #3]
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	440b      	add	r3, r1
 8001522:	333d      	adds	r3, #61	; 0x3d
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001528:	78fa      	ldrb	r2, [r7, #3]
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	440b      	add	r3, r1
 8001536:	3338      	adds	r3, #56	; 0x38
 8001538:	787a      	ldrb	r2, [r7, #1]
 800153a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800153c:	78fa      	ldrb	r2, [r7, #3]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	3340      	adds	r3, #64	; 0x40
 800154c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800154e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001550:	78fa      	ldrb	r2, [r7, #3]
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	440b      	add	r3, r1
 800155e:	3339      	adds	r3, #57	; 0x39
 8001560:	78fa      	ldrb	r2, [r7, #3]
 8001562:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001564:	78fa      	ldrb	r2, [r7, #3]
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	440b      	add	r3, r1
 8001572:	333f      	adds	r3, #63	; 0x3f
 8001574:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001578:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800157a:	78fa      	ldrb	r2, [r7, #3]
 800157c:	78bb      	ldrb	r3, [r7, #2]
 800157e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001582:	b2d8      	uxtb	r0, r3
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	333a      	adds	r3, #58	; 0x3a
 8001592:	4602      	mov	r2, r0
 8001594:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001596:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800159a:	2b00      	cmp	r3, #0
 800159c:	da0a      	bge.n	80015b4 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800159e:	78fa      	ldrb	r2, [r7, #3]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	333b      	adds	r3, #59	; 0x3b
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
 80015b2:	e009      	b.n	80015c8 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015b4:	78fa      	ldrb	r2, [r7, #3]
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	440b      	add	r3, r1
 80015c2:	333b      	adds	r3, #59	; 0x3b
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80015c8:	78fa      	ldrb	r2, [r7, #3]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	333c      	adds	r3, #60	; 0x3c
 80015d8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015dc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6818      	ldr	r0, [r3, #0]
 80015e2:	787c      	ldrb	r4, [r7, #1]
 80015e4:	78ba      	ldrb	r2, [r7, #2]
 80015e6:	78f9      	ldrb	r1, [r7, #3]
 80015e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	4623      	mov	r3, r4
 80015fa:	f003 fc4d 	bl	8004e98 <USB_HC_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	bd90      	pop	{r4, r7, pc}

08001614 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800162a:	2b01      	cmp	r3, #1
 800162c:	d101      	bne.n	8001632 <HAL_HCD_HC_Halt+0x1e>
 800162e:	2302      	movs	r3, #2
 8001630:	e00f      	b.n	8001652 <HAL_HCD_HC_Halt+0x3e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	78fa      	ldrb	r2, [r7, #3]
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f003 fe87 	bl	8005356 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	4608      	mov	r0, r1
 8001666:	4611      	mov	r1, r2
 8001668:	461a      	mov	r2, r3
 800166a:	4603      	mov	r3, r0
 800166c:	70fb      	strb	r3, [r7, #3]
 800166e:	460b      	mov	r3, r1
 8001670:	70bb      	strb	r3, [r7, #2]
 8001672:	4613      	mov	r3, r2
 8001674:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001676:	78fa      	ldrb	r2, [r7, #3]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	440b      	add	r3, r1
 8001684:	333b      	adds	r3, #59	; 0x3b
 8001686:	78ba      	ldrb	r2, [r7, #2]
 8001688:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800168a:	78fa      	ldrb	r2, [r7, #3]
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	440b      	add	r3, r1
 8001698:	333f      	adds	r3, #63	; 0x3f
 800169a:	787a      	ldrb	r2, [r7, #1]
 800169c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800169e:	7c3b      	ldrb	r3, [r7, #16]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10a      	bne.n	80016ba <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016a4:	78fa      	ldrb	r2, [r7, #3]
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	440b      	add	r3, r1
 80016b2:	3342      	adds	r3, #66	; 0x42
 80016b4:	2203      	movs	r2, #3
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	e009      	b.n	80016ce <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016ba:	78fa      	ldrb	r2, [r7, #3]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	440b      	add	r3, r1
 80016c8:	3342      	adds	r3, #66	; 0x42
 80016ca:	2202      	movs	r2, #2
 80016cc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016ce:	787b      	ldrb	r3, [r7, #1]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	f200 80d6 	bhi.w	8001882 <HAL_HCD_HC_SubmitRequest+0x226>
 80016d6:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <HAL_HCD_HC_SubmitRequest+0x80>)
 80016d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016dc:	080016ed 	.word	0x080016ed
 80016e0:	0800186d 	.word	0x0800186d
 80016e4:	08001759 	.word	0x08001759
 80016e8:	080017e3 	.word	0x080017e3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016ec:	7c3b      	ldrb	r3, [r7, #16]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	f040 80c9 	bne.w	8001886 <HAL_HCD_HC_SubmitRequest+0x22a>
 80016f4:	78bb      	ldrb	r3, [r7, #2]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f040 80c5 	bne.w	8001886 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80016fc:	8b3b      	ldrh	r3, [r7, #24]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001702:	78fa      	ldrb	r2, [r7, #3]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	440b      	add	r3, r1
 8001710:	3351      	adds	r3, #81	; 0x51
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001716:	78fa      	ldrb	r2, [r7, #3]
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	440b      	add	r3, r1
 8001724:	3351      	adds	r3, #81	; 0x51
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10a      	bne.n	8001742 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800172c:	78fa      	ldrb	r2, [r7, #3]
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	440b      	add	r3, r1
 800173a:	3342      	adds	r3, #66	; 0x42
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001740:	e0a1      	b.n	8001886 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	3342      	adds	r3, #66	; 0x42
 8001752:	2202      	movs	r2, #2
 8001754:	701a      	strb	r2, [r3, #0]
      break;
 8001756:	e096      	b.n	8001886 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001758:	78bb      	ldrb	r3, [r7, #2]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d120      	bne.n	80017a0 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800175e:	78fa      	ldrb	r2, [r7, #3]
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	440b      	add	r3, r1
 800176c:	3351      	adds	r3, #81	; 0x51
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10a      	bne.n	800178a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001774:	78fa      	ldrb	r2, [r7, #3]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	440b      	add	r3, r1
 8001782:	3342      	adds	r3, #66	; 0x42
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001788:	e07e      	b.n	8001888 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800178a:	78fa      	ldrb	r2, [r7, #3]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	440b      	add	r3, r1
 8001798:	3342      	adds	r3, #66	; 0x42
 800179a:	2202      	movs	r2, #2
 800179c:	701a      	strb	r2, [r3, #0]
      break;
 800179e:	e073      	b.n	8001888 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017a0:	78fa      	ldrb	r2, [r7, #3]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	440b      	add	r3, r1
 80017ae:	3350      	adds	r3, #80	; 0x50
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10a      	bne.n	80017cc <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017b6:	78fa      	ldrb	r2, [r7, #3]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	3342      	adds	r3, #66	; 0x42
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
      break;
 80017ca:	e05d      	b.n	8001888 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017cc:	78fa      	ldrb	r2, [r7, #3]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	3342      	adds	r3, #66	; 0x42
 80017dc:	2202      	movs	r2, #2
 80017de:	701a      	strb	r2, [r3, #0]
      break;
 80017e0:	e052      	b.n	8001888 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017e2:	78bb      	ldrb	r3, [r7, #2]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d120      	bne.n	800182a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017e8:	78fa      	ldrb	r2, [r7, #3]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	440b      	add	r3, r1
 80017f6:	3351      	adds	r3, #81	; 0x51
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10a      	bne.n	8001814 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017fe:	78fa      	ldrb	r2, [r7, #3]
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	440b      	add	r3, r1
 800180c:	3342      	adds	r3, #66	; 0x42
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001812:	e039      	b.n	8001888 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	440b      	add	r3, r1
 8001822:	3342      	adds	r3, #66	; 0x42
 8001824:	2202      	movs	r2, #2
 8001826:	701a      	strb	r2, [r3, #0]
      break;
 8001828:	e02e      	b.n	8001888 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	3350      	adds	r3, #80	; 0x50
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10a      	bne.n	8001856 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	3342      	adds	r3, #66	; 0x42
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
      break;
 8001854:	e018      	b.n	8001888 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	3342      	adds	r3, #66	; 0x42
 8001866:	2202      	movs	r2, #2
 8001868:	701a      	strb	r2, [r3, #0]
      break;
 800186a:	e00d      	b.n	8001888 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	3342      	adds	r3, #66	; 0x42
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
      break;
 8001880:	e002      	b.n	8001888 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001882:	bf00      	nop
 8001884:	e000      	b.n	8001888 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001886:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	440b      	add	r3, r1
 8001896:	3344      	adds	r3, #68	; 0x44
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	8b39      	ldrh	r1, [r7, #24]
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4403      	add	r3, r0
 80018ac:	3348      	adds	r3, #72	; 0x48
 80018ae:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018b0:	78fa      	ldrb	r2, [r7, #3]
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	335c      	adds	r3, #92	; 0x5c
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018c4:	78fa      	ldrb	r2, [r7, #3]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	334c      	adds	r3, #76	; 0x4c
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	3339      	adds	r3, #57	; 0x39
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	335d      	adds	r3, #93	; 0x5d
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	78fa      	ldrb	r2, [r7, #3]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	3338      	adds	r3, #56	; 0x38
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	18d1      	adds	r1, r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	f003 fbc6 	bl	80050ac <USB_HC_StartXfer>
 8001920:	4603      	mov	r3, r0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop

0800192c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f003 f8e3 	bl	8004b0e <USB_GetMode>
 8001948:	4603      	mov	r3, r0
 800194a:	2b01      	cmp	r3, #1
 800194c:	f040 80f1 	bne.w	8001b32 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f003 f8c7 	bl	8004ae8 <USB_ReadInterrupts>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80e7 	beq.w	8001b30 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f003 f8be 	bl	8004ae8 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001972:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001976:	d104      	bne.n	8001982 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001980:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f003 f8ae 	bl	8004ae8 <USB_ReadInterrupts>
 800198c:	4603      	mov	r3, r0
 800198e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001996:	d104      	bne.n	80019a2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 f89e 	bl	8004ae8 <USB_ReadInterrupts>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019b6:	d104      	bne.n	80019c2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 f88e 	bl	8004ae8 <USB_ReadInterrupts>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d103      	bne.n	80019de <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2202      	movs	r2, #2
 80019dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 f880 	bl	8004ae8 <USB_ReadInterrupts>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019f2:	d117      	bne.n	8001a24 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001a02:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001a06:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f005 fd0b 	bl	8007424 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2101      	movs	r1, #1
 8001a14:	4618      	mov	r0, r3
 8001a16:	f003 f979 	bl	8004d0c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 f85d 	bl	8004ae8 <USB_ReadInterrupts>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a38:	d102      	bne.n	8001a40 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f001 f8c8 	bl	8002bd0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f003 f84f 	bl	8004ae8 <USB_ReadInterrupts>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d106      	bne.n	8001a62 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f005 fcc9 	bl	80073ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2208      	movs	r2, #8
 8001a60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 f83e 	bl	8004ae8 <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a76:	d138      	bne.n	8001aea <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f003 fc59 	bl	8005334 <USB_HC_ReadInterrupt>
 8001a82:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	e025      	b.n	8001ad6 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	fa22 f303 	lsr.w	r3, r2, r3
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d018      	beq.n	8001ad0 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	015a      	lsls	r2, r3, #5
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ab4:	d106      	bne.n	8001ac4 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	4619      	mov	r1, r3
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f8cf 	bl	8001c60 <HCD_HC_IN_IRQHandler>
 8001ac2:	e005      	b.n	8001ad0 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4619      	mov	r1, r3
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fc5f 	bl	800238e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d3d4      	bcc.n	8001a8a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 fffa 	bl	8004ae8 <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b10      	cmp	r3, #16
 8001afc:	d101      	bne.n	8001b02 <HAL_HCD_IRQHandler+0x1d6>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_HCD_IRQHandler+0x1d8>
 8001b02:	2300      	movs	r3, #0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d014      	beq.n	8001b32 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699a      	ldr	r2, [r3, #24]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0210 	bic.w	r2, r2, #16
 8001b16:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 ffad 	bl	8002a78 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	699a      	ldr	r2, [r3, #24]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0210 	orr.w	r2, r2, #16
 8001b2c:	619a      	str	r2, [r3, #24]
 8001b2e:	e000      	b.n	8001b32 <HAL_HCD_IRQHandler+0x206>
      return;
 8001b30:	bf00      	nop
    }
  }
}
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_HCD_Start+0x16>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e013      	b.n	8001b76 <HAL_HCD_Start+0x3e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 fed1 	bl	8004902 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2101      	movs	r1, #1
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 f934 	bl	8004dd4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_HCD_Stop+0x16>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e00d      	b.n	8001bb0 <HAL_HCD_Stop+0x32>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f003 fd13 	bl	80055cc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 f8db 	bl	8004d80 <USB_ResetPort>
 8001bca:	4603      	mov	r3, r0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	440b      	add	r3, r1
 8001bee:	335c      	adds	r3, #92	; 0x5c
 8001bf0:	781b      	ldrb	r3, [r3, #0]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	460b      	mov	r3, r1
 8001c08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c0a:	78fa      	ldrb	r2, [r7, #3]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	440b      	add	r3, r1
 8001c18:	334c      	adds	r3, #76	; 0x4c
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f003 f91d 	bl	8004e74 <USB_GetCurrentFrame>
 8001c3a:	4603      	mov	r3, r0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 f8f8 	bl	8004e46 <USB_GetHostSpeed>
 8001c56:	4603      	mov	r3, r0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	015a      	lsls	r2, r3, #5
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d119      	bne.n	8001cc4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	015a      	lsls	r2, r3, #5
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	015a      	lsls	r2, r3, #5
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	0151      	lsls	r1, r2, #5
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	440a      	add	r2, r1
 8001cb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	60d3      	str	r3, [r2, #12]
 8001cc2:	e095      	b.n	8001df0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	015a      	lsls	r2, r3, #5
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4413      	add	r3, r2
 8001ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	d109      	bne.n	8001cee <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2320      	movs	r3, #32
 8001cea:	6093      	str	r3, [r2, #8]
 8001cec:	e080      	b.n	8001df0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	015a      	lsls	r2, r3, #5
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d134      	bne.n	8001d6e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	015a      	lsls	r2, r3, #5
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	0151      	lsls	r1, r2, #5
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	440a      	add	r2, r1
 8001d1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	440b      	add	r3, r1
 8001d32:	335d      	adds	r3, #93	; 0x5d
 8001d34:	2205      	movs	r2, #5
 8001d36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d44:	461a      	mov	r2, r3
 8001d46:	2310      	movs	r3, #16
 8001d48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d56:	461a      	mov	r2, r3
 8001d58:	2308      	movs	r3, #8
 8001d5a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 faf5 	bl	8005356 <USB_HC_Halt>
 8001d6c:	e040      	b.n	8001df0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d84:	d134      	bne.n	8001df0 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	0151      	lsls	r1, r2, #5
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	440a      	add	r2, r1
 8001d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 fad0 	bl	8005356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2310      	movs	r3, #16
 8001dc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	440b      	add	r3, r1
 8001dd6:	335d      	adds	r3, #93	; 0x5d
 8001dd8:	2208      	movs	r2, #8
 8001dda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de8:	461a      	mov	r2, r3
 8001dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dee:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	015a      	lsls	r2, r3, #5
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e06:	d122      	bne.n	8001e4e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	0151      	lsls	r1, r2, #5
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	440a      	add	r2, r1
 8001e1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fa8f 	bl	8005356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e44:	461a      	mov	r2, r3
 8001e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e4a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e4c:	e29b      	b.n	8002386 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	f040 80c1 	bne.w	8001fe8 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d01b      	beq.n	8001ea6 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	440b      	add	r3, r1
 8001e7c:	3348      	adds	r3, #72	; 0x48
 8001e7e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	0159      	lsls	r1, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	440b      	add	r3, r1
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e92:	1ad1      	subs	r1, r2, r3
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4403      	add	r3, r0
 8001ea2:	334c      	adds	r3, #76	; 0x4c
 8001ea4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	335d      	adds	r3, #93	; 0x5d
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3358      	adds	r3, #88	; 0x58
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	461a      	mov	r2, r3
 8001edc:	2301      	movs	r3, #1
 8001ede:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	440b      	add	r3, r1
 8001eee:	333f      	adds	r3, #63	; 0x3f
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00a      	beq.n	8001f0c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	333f      	adds	r3, #63	; 0x3f
 8001f06:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d121      	bne.n	8001f50 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	015a      	lsls	r2, r3, #5
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4413      	add	r3, r2
 8001f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	0151      	lsls	r1, r2, #5
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	440a      	add	r2, r1
 8001f22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 fa0d 	bl	8005356 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	015a      	lsls	r2, r3, #5
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2310      	movs	r3, #16
 8001f4c:	6093      	str	r3, [r2, #8]
 8001f4e:	e034      	b.n	8001fba <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	333f      	adds	r3, #63	; 0x3f
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d129      	bne.n	8001fba <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	0151      	lsls	r1, r2, #5
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	440a      	add	r2, r1
 8001f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f84:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	335c      	adds	r3, #92	; 0x5c
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	b2d8      	uxtb	r0, r3
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	440b      	add	r3, r1
 8001fac:	335c      	adds	r3, #92	; 0x5c
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4601      	mov	r1, r0
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f005 fa43 	bl	8007440 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	440b      	add	r3, r1
 8001fc8:	3350      	adds	r3, #80	; 0x50
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	f083 0301 	eor.w	r3, r3, #1
 8001fd0:	b2d8      	uxtb	r0, r3
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	440b      	add	r3, r1
 8001fe0:	3350      	adds	r3, #80	; 0x50
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	701a      	strb	r2, [r3, #0]
}
 8001fe6:	e1ce      	b.n	8002386 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	f040 80f1 	bne.w	80021e2 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	0151      	lsls	r1, r2, #5
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	440a      	add	r2, r1
 8002016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800201a:	f023 0302 	bic.w	r3, r3, #2
 800201e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	335d      	adds	r3, #93	; 0x5d
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d10a      	bne.n	800204c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	335c      	adds	r3, #92	; 0x5c
 8002046:	2201      	movs	r2, #1
 8002048:	701a      	strb	r2, [r3, #0]
 800204a:	e0b0      	b.n	80021ae <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	335d      	adds	r3, #93	; 0x5d
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b05      	cmp	r3, #5
 8002060:	d10a      	bne.n	8002078 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	440b      	add	r3, r1
 8002070:	335c      	adds	r3, #92	; 0x5c
 8002072:	2205      	movs	r2, #5
 8002074:	701a      	strb	r2, [r3, #0]
 8002076:	e09a      	b.n	80021ae <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	335d      	adds	r3, #93	; 0x5d
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b06      	cmp	r3, #6
 800208c:	d00a      	beq.n	80020a4 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	335d      	adds	r3, #93	; 0x5d
 800209e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d156      	bne.n	8002152 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	3358      	adds	r3, #88	; 0x58
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	1c59      	adds	r1, r3, #1
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4403      	add	r3, r0
 80020c6:	3358      	adds	r3, #88	; 0x58
 80020c8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	440b      	add	r3, r1
 80020d8:	3358      	adds	r3, #88	; 0x58
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d914      	bls.n	800210a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	440b      	add	r3, r1
 80020ee:	3358      	adds	r3, #88	; 0x58
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	335c      	adds	r3, #92	; 0x5c
 8002104:	2204      	movs	r2, #4
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	e009      	b.n	800211e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	440b      	add	r3, r1
 8002118:	335c      	adds	r3, #92	; 0x5c
 800211a:	2202      	movs	r2, #2
 800211c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002134:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800213c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214a:	461a      	mov	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	e02d      	b.n	80021ae <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	440b      	add	r3, r1
 8002160:	335d      	adds	r3, #93	; 0x5d
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d122      	bne.n	80021ae <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	440b      	add	r3, r1
 8002176:	335c      	adds	r3, #92	; 0x5c
 8002178:	2202      	movs	r2, #2
 800217a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002192:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800219a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a8:	461a      	mov	r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ba:	461a      	mov	r2, r3
 80021bc:	2302      	movs	r3, #2
 80021be:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	b2d8      	uxtb	r0, r3
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	335c      	adds	r3, #92	; 0x5c
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	4601      	mov	r1, r0
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f005 f930 	bl	8007440 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021e0:	e0d1      	b.n	8002386 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f4:	2b80      	cmp	r3, #128	; 0x80
 80021f6:	d13e      	bne.n	8002276 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	0151      	lsls	r1, r2, #5
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	440a      	add	r2, r1
 800220e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002212:	f043 0302 	orr.w	r3, r3, #2
 8002216:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	440b      	add	r3, r1
 8002226:	3358      	adds	r3, #88	; 0x58
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	1c59      	adds	r1, r3, #1
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4403      	add	r3, r0
 800223a:	3358      	adds	r3, #88	; 0x58
 800223c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	440b      	add	r3, r1
 800224c:	335d      	adds	r3, #93	; 0x5d
 800224e:	2206      	movs	r2, #6
 8002250:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f003 f87a 	bl	8005356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	461a      	mov	r2, r3
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	6093      	str	r3, [r2, #8]
}
 8002274:	e087      	b.n	8002386 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b10      	cmp	r3, #16
 800228a:	d17c      	bne.n	8002386 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	440b      	add	r3, r1
 800229a:	333f      	adds	r3, #63	; 0x3f
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d122      	bne.n	80022e8 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	3358      	adds	r3, #88	; 0x58
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	0151      	lsls	r1, r2, #5
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	440a      	add	r2, r1
 80022cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f003 f838 	bl	8005356 <USB_HC_Halt>
 80022e6:	e045      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	333f      	adds	r3, #63	; 0x3f
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	440b      	add	r3, r1
 800230c:	333f      	adds	r3, #63	; 0x3f
 800230e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002310:	2b02      	cmp	r3, #2
 8002312:	d12f      	bne.n	8002374 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	3358      	adds	r3, #88	; 0x58
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d121      	bne.n	8002374 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	335d      	adds	r3, #93	; 0x5d
 8002340:	2203      	movs	r2, #3
 8002342:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4413      	add	r3, r2
 800234c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	0151      	lsls	r1, r2, #5
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	440a      	add	r2, r1
 800235a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800235e:	f043 0302 	orr.w	r3, r3, #2
 8002362:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	4611      	mov	r1, r2
 800236e:	4618      	mov	r0, r3
 8002370:	f002 fff1 	bl	8005356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	461a      	mov	r2, r3
 8002382:	2310      	movs	r3, #16
 8002384:	6093      	str	r3, [r2, #8]
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d119      	bne.n	80023f2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ca:	461a      	mov	r2, r3
 80023cc:	2304      	movs	r3, #4
 80023ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	0151      	lsls	r1, r2, #5
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	440a      	add	r2, r1
 80023e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ea:	f043 0302 	orr.w	r3, r3, #2
 80023ee:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80023f0:	e33e      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b20      	cmp	r3, #32
 8002406:	d141      	bne.n	800248c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	461a      	mov	r2, r3
 8002416:	2320      	movs	r3, #32
 8002418:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	333d      	adds	r3, #61	; 0x3d
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	f040 831f 	bne.w	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	440b      	add	r3, r1
 8002440:	333d      	adds	r3, #61	; 0x3d
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	440b      	add	r3, r1
 8002454:	335c      	adds	r3, #92	; 0x5c
 8002456:	2202      	movs	r2, #2
 8002458:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4413      	add	r3, r2
 8002462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	0151      	lsls	r1, r2, #5
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	440a      	add	r2, r1
 8002470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f002 ff66 	bl	8005356 <USB_HC_Halt>
}
 800248a:	e2f1      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	2b40      	cmp	r3, #64	; 0x40
 80024a0:	d13f      	bne.n	8002522 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	440b      	add	r3, r1
 80024b0:	335d      	adds	r3, #93	; 0x5d
 80024b2:	2204      	movs	r2, #4
 80024b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	440b      	add	r3, r1
 80024c4:	333d      	adds	r3, #61	; 0x3d
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	440b      	add	r3, r1
 80024d8:	3358      	adds	r3, #88	; 0x58
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	0151      	lsls	r1, r2, #5
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	440a      	add	r2, r1
 80024f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f002 ff24 	bl	8005356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4413      	add	r3, r2
 8002516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251a:	461a      	mov	r2, r3
 800251c:	2340      	movs	r3, #64	; 0x40
 800251e:	6093      	str	r3, [r2, #8]
}
 8002520:	e2a6      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002538:	d122      	bne.n	8002580 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	0151      	lsls	r1, r2, #5
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	440a      	add	r2, r1
 8002550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f002 fef6 	bl	8005356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	461a      	mov	r2, r3
 8002578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800257c:	6093      	str	r3, [r2, #8]
}
 800257e:	e277      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d135      	bne.n	8002602 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	440b      	add	r3, r1
 80025a4:	3358      	adds	r3, #88	; 0x58
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	0151      	lsls	r1, r2, #5
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	440a      	add	r2, r1
 80025c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c4:	f043 0302 	orr.w	r3, r3, #2
 80025c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 febe 	bl	8005356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e6:	461a      	mov	r2, r3
 80025e8:	2301      	movs	r3, #1
 80025ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	440b      	add	r3, r1
 80025fa:	335d      	adds	r3, #93	; 0x5d
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
}
 8002600:	e236      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b08      	cmp	r3, #8
 8002616:	d12b      	bne.n	8002670 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	461a      	mov	r2, r3
 8002626:	2308      	movs	r3, #8
 8002628:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	0151      	lsls	r1, r2, #5
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	440a      	add	r2, r1
 8002640:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f002 fe7e 	bl	8005356 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	335d      	adds	r3, #93	; 0x5d
 800266a:	2205      	movs	r2, #5
 800266c:	701a      	strb	r2, [r3, #0]
}
 800266e:	e1ff      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b10      	cmp	r3, #16
 8002684:	d155      	bne.n	8002732 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	3358      	adds	r3, #88	; 0x58
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	335d      	adds	r3, #93	; 0x5d
 80026aa:	2203      	movs	r2, #3
 80026ac:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	440b      	add	r3, r1
 80026bc:	333d      	adds	r3, #61	; 0x3d
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d114      	bne.n	80026ee <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	440b      	add	r3, r1
 80026d2:	333c      	adds	r3, #60	; 0x3c
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	440b      	add	r3, r1
 80026e8:	333d      	adds	r3, #61	; 0x3d
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	0151      	lsls	r1, r2, #5
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	440a      	add	r2, r1
 8002704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f002 fe1c 	bl	8005356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4413      	add	r3, r2
 8002726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272a:	461a      	mov	r2, r3
 800272c:	2310      	movs	r3, #16
 800272e:	6093      	str	r3, [r2, #8]
}
 8002730:	e19e      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002744:	2b80      	cmp	r3, #128	; 0x80
 8002746:	d12b      	bne.n	80027a0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	0151      	lsls	r1, r2, #5
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	440a      	add	r2, r1
 800275e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002762:	f043 0302 	orr.w	r3, r3, #2
 8002766:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f002 fdef 	bl	8005356 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	440b      	add	r3, r1
 8002786:	335d      	adds	r3, #93	; 0x5d
 8002788:	2206      	movs	r2, #6
 800278a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002798:	461a      	mov	r2, r3
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	6093      	str	r3, [r2, #8]
}
 800279e:	e167      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b6:	d135      	bne.n	8002824 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	0151      	lsls	r1, r2, #5
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	440a      	add	r2, r1
 80027ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027d2:	f043 0302 	orr.w	r3, r3, #2
 80027d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 fdb7 	bl	8005356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f4:	461a      	mov	r2, r3
 80027f6:	2310      	movs	r3, #16
 80027f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	461a      	mov	r2, r3
 8002808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800280c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	335d      	adds	r3, #93	; 0x5d
 800281e:	2208      	movs	r2, #8
 8002820:	701a      	strb	r2, [r3, #0]
}
 8002822:	e125      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	f040 811a 	bne.w	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	0151      	lsls	r1, r2, #5
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	440a      	add	r2, r1
 8002852:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002856:	f023 0302 	bic.w	r3, r3, #2
 800285a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	440b      	add	r3, r1
 800286a:	335d      	adds	r3, #93	; 0x5d
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d137      	bne.n	80028e2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	440b      	add	r3, r1
 8002880:	335c      	adds	r3, #92	; 0x5c
 8002882:	2201      	movs	r2, #1
 8002884:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	440b      	add	r3, r1
 8002894:	333f      	adds	r3, #63	; 0x3f
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d00b      	beq.n	80028b4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	440b      	add	r3, r1
 80028aa:	333f      	adds	r3, #63	; 0x3f
 80028ac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	f040 80c5 	bne.w	8002a3e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	440b      	add	r3, r1
 80028c2:	3351      	adds	r3, #81	; 0x51
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	f083 0301 	eor.w	r3, r3, #1
 80028ca:	b2d8      	uxtb	r0, r3
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	440b      	add	r3, r1
 80028da:	3351      	adds	r3, #81	; 0x51
 80028dc:	4602      	mov	r2, r0
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	e0ad      	b.n	8002a3e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	335d      	adds	r3, #93	; 0x5d
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d10a      	bne.n	800290e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	335c      	adds	r3, #92	; 0x5c
 8002908:	2202      	movs	r2, #2
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e097      	b.n	8002a3e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	335d      	adds	r3, #93	; 0x5d
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b04      	cmp	r3, #4
 8002922:	d10a      	bne.n	800293a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	335c      	adds	r3, #92	; 0x5c
 8002934:	2202      	movs	r2, #2
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	e081      	b.n	8002a3e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	335d      	adds	r3, #93	; 0x5d
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b05      	cmp	r3, #5
 800294e:	d10a      	bne.n	8002966 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	440b      	add	r3, r1
 800295e:	335c      	adds	r3, #92	; 0x5c
 8002960:	2205      	movs	r2, #5
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	e06b      	b.n	8002a3e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	335d      	adds	r3, #93	; 0x5d
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b06      	cmp	r3, #6
 800297a:	d00a      	beq.n	8002992 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	335d      	adds	r3, #93	; 0x5d
 800298c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800298e:	2b08      	cmp	r3, #8
 8002990:	d155      	bne.n	8002a3e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	440b      	add	r3, r1
 80029a0:	3358      	adds	r3, #88	; 0x58
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	1c59      	adds	r1, r3, #1
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4403      	add	r3, r0
 80029b4:	3358      	adds	r3, #88	; 0x58
 80029b6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	3358      	adds	r3, #88	; 0x58
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d914      	bls.n	80029f8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	3358      	adds	r3, #88	; 0x58
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	440b      	add	r3, r1
 80029f0:	335c      	adds	r3, #92	; 0x5c
 80029f2:	2204      	movs	r2, #4
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	e009      	b.n	8002a0c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	440b      	add	r3, r1
 8002a06:	335c      	adds	r3, #92	; 0x5c
 8002a08:	2202      	movs	r2, #2
 8002a0a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a22:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a2a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	b2d8      	uxtb	r0, r3
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	440b      	add	r3, r1
 8002a62:	335c      	adds	r3, #92	; 0x5c
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	4601      	mov	r1, r0
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f004 fce8 	bl	8007440 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a70:	bf00      	nop
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	; 0x28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	0c5b      	lsrs	r3, r3, #17
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aac:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d003      	beq.n	8002abc <HCD_RXQLVL_IRQHandler+0x44>
 8002ab4:	2b05      	cmp	r3, #5
 8002ab6:	f000 8082 	beq.w	8002bbe <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002aba:	e083      	b.n	8002bc4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d07f      	beq.n	8002bc2 <HCD_RXQLVL_IRQHandler+0x14a>
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	440b      	add	r3, r1
 8002ad0:	3344      	adds	r3, #68	; 0x44
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d074      	beq.n	8002bc2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	440b      	add	r3, r1
 8002aea:	3344      	adds	r3, #68	; 0x44
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	b292      	uxth	r2, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	f001 ffcf 	bl	8004a96 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	440b      	add	r3, r1
 8002b06:	3344      	adds	r3, #68	; 0x44
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	18d1      	adds	r1, r2, r3
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4403      	add	r3, r0
 8002b1c:	3344      	adds	r3, #68	; 0x44
 8002b1e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	440b      	add	r3, r1
 8002b2e:	334c      	adds	r3, #76	; 0x4c
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	18d1      	adds	r1, r2, r3
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4403      	add	r3, r0
 8002b44:	334c      	adds	r3, #76	; 0x4c
 8002b46:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <HCD_RXQLVL_IRQHandler+0x154>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d031      	beq.n	8002bc2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b74:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b7c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3350      	adds	r3, #80	; 0x50
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	f083 0301 	eor.w	r3, r3, #1
 8002ba6:	b2d8      	uxtb	r0, r3
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3350      	adds	r3, #80	; 0x50
 8002bb8:	4602      	mov	r2, r0
 8002bba:	701a      	strb	r2, [r3, #0]
      break;
 8002bbc:	e001      	b.n	8002bc2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002bbe:	bf00      	nop
 8002bc0:	e000      	b.n	8002bc4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002bc2:	bf00      	nop
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	3728      	adds	r7, #40	; 0x28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	1ff80000 	.word	0x1ff80000

08002bd0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002bfc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d113      	bne.n	8002c30 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10a      	bne.n	8002c28 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699a      	ldr	r2, [r3, #24]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002c20:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f004 fbf0 	bl	8007408 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f043 0302 	orr.w	r3, r3, #2
 8002c2e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d147      	bne.n	8002cca <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f043 0308 	orr.w	r3, r3, #8
 8002c40:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d129      	bne.n	8002ca0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d113      	bne.n	8002c7c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c5e:	d106      	bne.n	8002c6e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2102      	movs	r1, #2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f002 f850 	bl	8004d0c <USB_InitFSLSPClkSel>
 8002c6c:	e011      	b.n	8002c92 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2101      	movs	r1, #1
 8002c74:	4618      	mov	r0, r3
 8002c76:	f002 f849 	bl	8004d0c <USB_InitFSLSPClkSel>
 8002c7a:	e00a      	b.n	8002c92 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d106      	bne.n	8002c92 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c90:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f004 fbe2 	bl	800745c <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f004 fbb5 	bl	8007408 <HAL_HCD_Connect_Callback>
 8002c9e:	e014      	b.n	8002cca <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f004 fbe9 	bl	8007478 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002cb4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cb8:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699a      	ldr	r2, [r3, #24]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002cc8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d103      	bne.n	8002cdc <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f043 0320 	orr.w	r3, r3, #32
 8002cda:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	6013      	str	r3, [r2, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e11f      	b.n	8002f42 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fd fe5a 	bl	80009d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2224      	movs	r2, #36	; 0x24
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d54:	f001 f9de 	bl	8004114 <HAL_RCC_GetPCLK1Freq>
 8002d58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4a7b      	ldr	r2, [pc, #492]	; (8002f4c <HAL_I2C_Init+0x25c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d807      	bhi.n	8002d74 <HAL_I2C_Init+0x84>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a7a      	ldr	r2, [pc, #488]	; (8002f50 <HAL_I2C_Init+0x260>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	bf94      	ite	ls
 8002d6c:	2301      	movls	r3, #1
 8002d6e:	2300      	movhi	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e006      	b.n	8002d82 <HAL_I2C_Init+0x92>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4a77      	ldr	r2, [pc, #476]	; (8002f54 <HAL_I2C_Init+0x264>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	bf94      	ite	ls
 8002d7c:	2301      	movls	r3, #1
 8002d7e:	2300      	movhi	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e0db      	b.n	8002f42 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a72      	ldr	r2, [pc, #456]	; (8002f58 <HAL_I2C_Init+0x268>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	0c9b      	lsrs	r3, r3, #18
 8002d94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a64      	ldr	r2, [pc, #400]	; (8002f4c <HAL_I2C_Init+0x25c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d802      	bhi.n	8002dc4 <HAL_I2C_Init+0xd4>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	e009      	b.n	8002dd8 <HAL_I2C_Init+0xe8>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	4a63      	ldr	r2, [pc, #396]	; (8002f5c <HAL_I2C_Init+0x26c>)
 8002dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4956      	ldr	r1, [pc, #344]	; (8002f4c <HAL_I2C_Init+0x25c>)
 8002df4:	428b      	cmp	r3, r1
 8002df6:	d80d      	bhi.n	8002e14 <HAL_I2C_Init+0x124>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	1e59      	subs	r1, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	bf38      	it	cc
 8002e10:	2304      	movcc	r3, #4
 8002e12:	e04f      	b.n	8002eb4 <HAL_I2C_Init+0x1c4>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d111      	bne.n	8002e40 <HAL_I2C_Init+0x150>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1e58      	subs	r0, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	440b      	add	r3, r1
 8002e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e012      	b.n	8002e66 <HAL_I2C_Init+0x176>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1e58      	subs	r0, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	0099      	lsls	r1, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e56:	3301      	adds	r3, #1
 8002e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_I2C_Init+0x17e>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e022      	b.n	8002eb4 <HAL_I2C_Init+0x1c4>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10e      	bne.n	8002e94 <HAL_I2C_Init+0x1a4>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1e58      	subs	r0, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	440b      	add	r3, r1
 8002e84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e92:	e00f      	b.n	8002eb4 <HAL_I2C_Init+0x1c4>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1e58      	subs	r0, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	0099      	lsls	r1, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	6809      	ldr	r1, [r1, #0]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ee2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6911      	ldr	r1, [r2, #16]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68d2      	ldr	r2, [r2, #12]
 8002eee:	4311      	orrs	r1, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	000186a0 	.word	0x000186a0
 8002f50:	001e847f 	.word	0x001e847f
 8002f54:	003d08ff 	.word	0x003d08ff
 8002f58:	431bde83 	.word	0x431bde83
 8002f5c:	10624dd3 	.word	0x10624dd3

08002f60 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e128      	b.n	80031c4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a90      	ldr	r2, [pc, #576]	; (80031cc <HAL_I2S_Init+0x26c>)
 8002f8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7fd fd67 	bl	8000a60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2202      	movs	r2, #2
 8002f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002fa8:	f023 030f 	bic.w	r3, r3, #15
 8002fac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d060      	beq.n	8003080 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002fc6:	2310      	movs	r3, #16
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	e001      	b.n	8002fd0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002fcc:	2320      	movs	r3, #32
 8002fce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d802      	bhi.n	8002fde <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f001 f98e 	bl	8004300 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fe4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fee:	d125      	bne.n	800303c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d010      	beq.n	800301a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	461a      	mov	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	fbb2 f3f3 	udiv	r3, r2, r3
 8003014:	3305      	adds	r3, #5
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	e01f      	b.n	800305a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	fbb2 f2f3 	udiv	r2, r2, r3
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	461a      	mov	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	fbb2 f3f3 	udiv	r3, r2, r3
 8003036:	3305      	adds	r3, #5
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	e00e      	b.n	800305a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	fbb2 f2f3 	udiv	r2, r2, r3
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	461a      	mov	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	fbb2 f3f3 	udiv	r3, r2, r3
 8003056:	3305      	adds	r3, #5
 8003058:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4a5c      	ldr	r2, [pc, #368]	; (80031d0 <HAL_I2S_Init+0x270>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	08db      	lsrs	r3, r3, #3
 8003064:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	085b      	lsrs	r3, r3, #1
 8003076:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e003      	b.n	8003088 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003080:	2302      	movs	r3, #2
 8003082:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d902      	bls.n	8003094 <HAL_I2S_Init+0x134>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	2bff      	cmp	r3, #255	; 0xff
 8003092:	d907      	bls.n	80030a4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003098:	f043 0210 	orr.w	r2, r3, #16
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e08f      	b.n	80031c4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	ea42 0103 	orr.w	r1, r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030c2:	f023 030f 	bic.w	r3, r3, #15
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6851      	ldr	r1, [r2, #4]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6892      	ldr	r2, [r2, #8]
 80030ce:	4311      	orrs	r1, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68d2      	ldr	r2, [r2, #12]
 80030d4:	4311      	orrs	r1, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6992      	ldr	r2, [r2, #24]
 80030da:	430a      	orrs	r2, r1
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030e6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d161      	bne.n	80031b4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a38      	ldr	r2, [pc, #224]	; (80031d4 <HAL_I2S_Init+0x274>)
 80030f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a37      	ldr	r2, [pc, #220]	; (80031d8 <HAL_I2S_Init+0x278>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d101      	bne.n	8003104 <HAL_I2S_Init+0x1a4>
 8003100:	4b36      	ldr	r3, [pc, #216]	; (80031dc <HAL_I2S_Init+0x27c>)
 8003102:	e001      	b.n	8003108 <HAL_I2S_Init+0x1a8>
 8003104:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	4932      	ldr	r1, [pc, #200]	; (80031d8 <HAL_I2S_Init+0x278>)
 8003110:	428a      	cmp	r2, r1
 8003112:	d101      	bne.n	8003118 <HAL_I2S_Init+0x1b8>
 8003114:	4a31      	ldr	r2, [pc, #196]	; (80031dc <HAL_I2S_Init+0x27c>)
 8003116:	e001      	b.n	800311c <HAL_I2S_Init+0x1bc>
 8003118:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800311c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003120:	f023 030f 	bic.w	r3, r3, #15
 8003124:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a2b      	ldr	r2, [pc, #172]	; (80031d8 <HAL_I2S_Init+0x278>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d101      	bne.n	8003134 <HAL_I2S_Init+0x1d4>
 8003130:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <HAL_I2S_Init+0x27c>)
 8003132:	e001      	b.n	8003138 <HAL_I2S_Init+0x1d8>
 8003134:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003138:	2202      	movs	r2, #2
 800313a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a25      	ldr	r2, [pc, #148]	; (80031d8 <HAL_I2S_Init+0x278>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d101      	bne.n	800314a <HAL_I2S_Init+0x1ea>
 8003146:	4b25      	ldr	r3, [pc, #148]	; (80031dc <HAL_I2S_Init+0x27c>)
 8003148:	e001      	b.n	800314e <HAL_I2S_Init+0x1ee>
 800314a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800315a:	d003      	beq.n	8003164 <HAL_I2S_Init+0x204>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d103      	bne.n	800316c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	e001      	b.n	8003170 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	b299      	uxth	r1, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003186:	4303      	orrs	r3, r0
 8003188:	b29b      	uxth	r3, r3
 800318a:	430b      	orrs	r3, r1
 800318c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800318e:	4313      	orrs	r3, r2
 8003190:	b29a      	uxth	r2, r3
 8003192:	897b      	ldrh	r3, [r7, #10]
 8003194:	4313      	orrs	r3, r2
 8003196:	b29b      	uxth	r3, r3
 8003198:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800319c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a0d      	ldr	r2, [pc, #52]	; (80031d8 <HAL_I2S_Init+0x278>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d101      	bne.n	80031ac <HAL_I2S_Init+0x24c>
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <HAL_I2S_Init+0x27c>)
 80031aa:	e001      	b.n	80031b0 <HAL_I2S_Init+0x250>
 80031ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031b0:	897a      	ldrh	r2, [r7, #10]
 80031b2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	080032d7 	.word	0x080032d7
 80031d0:	cccccccd 	.word	0xcccccccd
 80031d4:	080033ed 	.word	0x080033ed
 80031d8:	40003800 	.word	0x40003800
 80031dc:	40003400 	.word	0x40003400

080031e0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	881a      	ldrh	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	1c9a      	adds	r2, r3, #2
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10e      	bne.n	8003270 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003260:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff ffb8 	bl	80031e0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	b292      	uxth	r2, r2
 800328c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	1c9a      	adds	r2, r3, #2
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10e      	bne.n	80032ce <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032be:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff ff93 	bl	80031f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b086      	sub	sp, #24
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d13a      	bne.n	8003368 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d109      	bne.n	8003310 <I2S_IRQHandler+0x3a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d102      	bne.n	8003310 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ffb4 	bl	8003278 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	d126      	bne.n	8003368 <I2S_IRQHandler+0x92>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b20      	cmp	r3, #32
 8003326:	d11f      	bne.n	8003368 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003336:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	f043 0202 	orr.w	r2, r3, #2
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff ff50 	bl	8003208 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b03      	cmp	r3, #3
 8003372:	d136      	bne.n	80033e2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b02      	cmp	r3, #2
 800337c:	d109      	bne.n	8003392 <I2S_IRQHandler+0xbc>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003388:	2b80      	cmp	r3, #128	; 0x80
 800338a:	d102      	bne.n	8003392 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ff45 	bl	800321c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b08      	cmp	r3, #8
 800339a:	d122      	bne.n	80033e2 <I2S_IRQHandler+0x10c>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	d11b      	bne.n	80033e2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033b8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	f043 0204 	orr.w	r2, r3, #4
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff ff13 	bl	8003208 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033e2:	bf00      	nop
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4aa2      	ldr	r2, [pc, #648]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d101      	bne.n	800340a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003406:	4ba2      	ldr	r3, [pc, #648]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003408:	e001      	b.n	800340e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800340a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a9b      	ldr	r2, [pc, #620]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d101      	bne.n	8003428 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003424:	4b9a      	ldr	r3, [pc, #616]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003426:	e001      	b.n	800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003428:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003438:	d004      	beq.n	8003444 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f040 8099 	bne.w	8003576 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b02      	cmp	r3, #2
 800344c:	d107      	bne.n	800345e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f925 	bl	80036a8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	d107      	bne.n	8003478 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f9c8 	bl	8003808 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347e:	2b40      	cmp	r3, #64	; 0x40
 8003480:	d13a      	bne.n	80034f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d035      	beq.n	80034f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a7e      	ldr	r2, [pc, #504]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d101      	bne.n	800349a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003496:	4b7e      	ldr	r3, [pc, #504]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003498:	e001      	b.n	800349e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800349a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4979      	ldr	r1, [pc, #484]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034a6:	428b      	cmp	r3, r1
 80034a8:	d101      	bne.n	80034ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034aa:	4b79      	ldr	r3, [pc, #484]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034ac:	e001      	b.n	80034b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80034ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034b6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	f043 0202 	orr.w	r2, r3, #2
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff fe88 	bl	8003208 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b08      	cmp	r3, #8
 8003500:	f040 80be 	bne.w	8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80b8 	beq.w	8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800351e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a59      	ldr	r2, [pc, #356]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d101      	bne.n	800352e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800352a:	4b59      	ldr	r3, [pc, #356]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800352c:	e001      	b.n	8003532 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800352e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4954      	ldr	r1, [pc, #336]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800353a:	428b      	cmp	r3, r1
 800353c:	d101      	bne.n	8003542 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800353e:	4b54      	ldr	r3, [pc, #336]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003540:	e001      	b.n	8003546 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003542:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003546:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800354a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800354c:	2300      	movs	r3, #0
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f043 0204 	orr.w	r2, r3, #4
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff fe4a 	bl	8003208 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003574:	e084      	b.n	8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b02      	cmp	r3, #2
 800357e:	d107      	bne.n	8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f8be 	bl	800370c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b01      	cmp	r3, #1
 8003598:	d107      	bne.n	80035aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f8fd 	bl	80037a4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b40      	cmp	r3, #64	; 0x40
 80035b2:	d12f      	bne.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d02a      	beq.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035cc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a2e      	ldr	r2, [pc, #184]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d101      	bne.n	80035dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035d8:	4b2d      	ldr	r3, [pc, #180]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035da:	e001      	b.n	80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4929      	ldr	r1, [pc, #164]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035e8:	428b      	cmp	r3, r1
 80035ea:	d101      	bne.n	80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035ee:	e001      	b.n	80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80035f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f043 0202 	orr.w	r2, r3, #2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff fdfa 	bl	8003208 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b08      	cmp	r3, #8
 800361c:	d131      	bne.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d02c      	beq.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a17      	ldr	r2, [pc, #92]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d101      	bne.n	8003636 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003632:	4b17      	ldr	r3, [pc, #92]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003634:	e001      	b.n	800363a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003636:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4912      	ldr	r1, [pc, #72]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003642:	428b      	cmp	r3, r1
 8003644:	d101      	bne.n	800364a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003648:	e001      	b.n	800364e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800364a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800364e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003652:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003662:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003670:	f043 0204 	orr.w	r2, r3, #4
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff fdc5 	bl	8003208 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800367e:	e000      	b.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003680:	bf00      	nop
}
 8003682:	bf00      	nop
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40003800 	.word	0x40003800
 8003690:	40003400 	.word	0x40003400

08003694 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	1c99      	adds	r1, r3, #2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6251      	str	r1, [r2, #36]	; 0x24
 80036ba:	881a      	ldrh	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d113      	bne.n	8003702 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d106      	bne.n	8003702 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff ffc9 	bl	8003694 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	1c99      	adds	r1, r3, #2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6251      	str	r1, [r2, #36]	; 0x24
 800371e:	8819      	ldrh	r1, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1d      	ldr	r2, [pc, #116]	; (800379c <I2SEx_TxISR_I2SExt+0x90>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d101      	bne.n	800372e <I2SEx_TxISR_I2SExt+0x22>
 800372a:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <I2SEx_TxISR_I2SExt+0x94>)
 800372c:	e001      	b.n	8003732 <I2SEx_TxISR_I2SExt+0x26>
 800372e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003732:	460a      	mov	r2, r1
 8003734:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d121      	bne.n	8003792 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a12      	ldr	r2, [pc, #72]	; (800379c <I2SEx_TxISR_I2SExt+0x90>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d101      	bne.n	800375c <I2SEx_TxISR_I2SExt+0x50>
 8003758:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <I2SEx_TxISR_I2SExt+0x94>)
 800375a:	e001      	b.n	8003760 <I2SEx_TxISR_I2SExt+0x54>
 800375c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	490d      	ldr	r1, [pc, #52]	; (800379c <I2SEx_TxISR_I2SExt+0x90>)
 8003768:	428b      	cmp	r3, r1
 800376a:	d101      	bne.n	8003770 <I2SEx_TxISR_I2SExt+0x64>
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <I2SEx_TxISR_I2SExt+0x94>)
 800376e:	e001      	b.n	8003774 <I2SEx_TxISR_I2SExt+0x68>
 8003770:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003774:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003778:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff ff81 	bl	8003694 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40003800 	.word	0x40003800
 80037a0:	40003400 	.word	0x40003400

080037a4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68d8      	ldr	r0, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	1c99      	adds	r1, r3, #2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037bc:	b282      	uxth	r2, r0
 80037be:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d113      	bne.n	8003800 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037e6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff ff4a 	bl	8003694 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a20      	ldr	r2, [pc, #128]	; (8003898 <I2SEx_RxISR_I2SExt+0x90>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d101      	bne.n	800381e <I2SEx_RxISR_I2SExt+0x16>
 800381a:	4b20      	ldr	r3, [pc, #128]	; (800389c <I2SEx_RxISR_I2SExt+0x94>)
 800381c:	e001      	b.n	8003822 <I2SEx_RxISR_I2SExt+0x1a>
 800381e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003822:	68d8      	ldr	r0, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	1c99      	adds	r1, r3, #2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800382e:	b282      	uxth	r2, r0
 8003830:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d121      	bne.n	800388e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a12      	ldr	r2, [pc, #72]	; (8003898 <I2SEx_RxISR_I2SExt+0x90>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d101      	bne.n	8003858 <I2SEx_RxISR_I2SExt+0x50>
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <I2SEx_RxISR_I2SExt+0x94>)
 8003856:	e001      	b.n	800385c <I2SEx_RxISR_I2SExt+0x54>
 8003858:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	490d      	ldr	r1, [pc, #52]	; (8003898 <I2SEx_RxISR_I2SExt+0x90>)
 8003864:	428b      	cmp	r3, r1
 8003866:	d101      	bne.n	800386c <I2SEx_RxISR_I2SExt+0x64>
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <I2SEx_RxISR_I2SExt+0x94>)
 800386a:	e001      	b.n	8003870 <I2SEx_RxISR_I2SExt+0x68>
 800386c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003870:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003874:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d106      	bne.n	800388e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ff03 	bl	8003694 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40003800 	.word	0x40003800
 800389c:	40003400 	.word	0x40003400

080038a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e25b      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d075      	beq.n	80039aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038be:	4ba3      	ldr	r3, [pc, #652]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d00c      	beq.n	80038e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ca:	4ba0      	ldr	r3, [pc, #640]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d112      	bne.n	80038fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038d6:	4b9d      	ldr	r3, [pc, #628]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e2:	d10b      	bne.n	80038fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e4:	4b99      	ldr	r3, [pc, #612]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d05b      	beq.n	80039a8 <HAL_RCC_OscConfig+0x108>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d157      	bne.n	80039a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e236      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003904:	d106      	bne.n	8003914 <HAL_RCC_OscConfig+0x74>
 8003906:	4b91      	ldr	r3, [pc, #580]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a90      	ldr	r2, [pc, #576]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 800390c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	e01d      	b.n	8003950 <HAL_RCC_OscConfig+0xb0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800391c:	d10c      	bne.n	8003938 <HAL_RCC_OscConfig+0x98>
 800391e:	4b8b      	ldr	r3, [pc, #556]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a8a      	ldr	r2, [pc, #552]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b88      	ldr	r3, [pc, #544]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a87      	ldr	r2, [pc, #540]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e00b      	b.n	8003950 <HAL_RCC_OscConfig+0xb0>
 8003938:	4b84      	ldr	r3, [pc, #528]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a83      	ldr	r2, [pc, #524]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 800393e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4b81      	ldr	r3, [pc, #516]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a80      	ldr	r2, [pc, #512]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 800394a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800394e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d013      	beq.n	8003980 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fd fa3c 	bl	8000dd4 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003960:	f7fd fa38 	bl	8000dd4 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	; 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e1fb      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	4b76      	ldr	r3, [pc, #472]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0xc0>
 800397e:	e014      	b.n	80039aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003980:	f7fd fa28 	bl	8000dd4 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003988:	f7fd fa24 	bl	8000dd4 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	; 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e1e7      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399a:	4b6c      	ldr	r3, [pc, #432]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0xe8>
 80039a6:	e000      	b.n	80039aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d063      	beq.n	8003a7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039b6:	4b65      	ldr	r3, [pc, #404]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00b      	beq.n	80039da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c2:	4b62      	ldr	r3, [pc, #392]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d11c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ce:	4b5f      	ldr	r3, [pc, #380]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d116      	bne.n	8003a08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039da:	4b5c      	ldr	r3, [pc, #368]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_RCC_OscConfig+0x152>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d001      	beq.n	80039f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e1bb      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f2:	4b56      	ldr	r3, [pc, #344]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4952      	ldr	r1, [pc, #328]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a06:	e03a      	b.n	8003a7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d020      	beq.n	8003a52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a10:	4b4f      	ldr	r3, [pc, #316]	; (8003b50 <HAL_RCC_OscConfig+0x2b0>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a16:	f7fd f9dd 	bl	8000dd4 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a1e:	f7fd f9d9 	bl	8000dd4 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e19c      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a30:	4b46      	ldr	r3, [pc, #280]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3c:	4b43      	ldr	r3, [pc, #268]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4940      	ldr	r1, [pc, #256]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]
 8003a50:	e015      	b.n	8003a7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a52:	4b3f      	ldr	r3, [pc, #252]	; (8003b50 <HAL_RCC_OscConfig+0x2b0>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fd f9bc 	bl	8000dd4 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a60:	f7fd f9b8 	bl	8000dd4 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e17b      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a72:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d030      	beq.n	8003aec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d016      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a92:	4b30      	ldr	r3, [pc, #192]	; (8003b54 <HAL_RCC_OscConfig+0x2b4>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a98:	f7fd f99c 	bl	8000dd4 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa0:	f7fd f998 	bl	8000dd4 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e15b      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab2:	4b26      	ldr	r3, [pc, #152]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x200>
 8003abe:	e015      	b.n	8003aec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac0:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <HAL_RCC_OscConfig+0x2b4>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac6:	f7fd f985 	bl	8000dd4 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ace:	f7fd f981 	bl	8000dd4 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e144      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f0      	bne.n	8003ace <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80a0 	beq.w	8003c3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afe:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10f      	bne.n	8003b2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b18:	6413      	str	r3, [r2, #64]	; 0x40
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b26:	2301      	movs	r3, #1
 8003b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_RCC_OscConfig+0x2b8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d121      	bne.n	8003b7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b36:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <HAL_RCC_OscConfig+0x2b8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a07      	ldr	r2, [pc, #28]	; (8003b58 <HAL_RCC_OscConfig+0x2b8>)
 8003b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b42:	f7fd f947 	bl	8000dd4 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b48:	e011      	b.n	8003b6e <HAL_RCC_OscConfig+0x2ce>
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	42470000 	.word	0x42470000
 8003b54:	42470e80 	.word	0x42470e80
 8003b58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5c:	f7fd f93a 	bl	8000dd4 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e0fd      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6e:	4b81      	ldr	r3, [pc, #516]	; (8003d74 <HAL_RCC_OscConfig+0x4d4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d106      	bne.n	8003b90 <HAL_RCC_OscConfig+0x2f0>
 8003b82:	4b7d      	ldr	r3, [pc, #500]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	4a7c      	ldr	r2, [pc, #496]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8e:	e01c      	b.n	8003bca <HAL_RCC_OscConfig+0x32a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d10c      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x312>
 8003b98:	4b77      	ldr	r3, [pc, #476]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	4a76      	ldr	r2, [pc, #472]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003b9e:	f043 0304 	orr.w	r3, r3, #4
 8003ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba4:	4b74      	ldr	r3, [pc, #464]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4a73      	ldr	r2, [pc, #460]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb0:	e00b      	b.n	8003bca <HAL_RCC_OscConfig+0x32a>
 8003bb2:	4b71      	ldr	r3, [pc, #452]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	4a70      	ldr	r2, [pc, #448]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bbe:	4b6e      	ldr	r3, [pc, #440]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	4a6d      	ldr	r2, [pc, #436]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003bc4:	f023 0304 	bic.w	r3, r3, #4
 8003bc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d015      	beq.n	8003bfe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd2:	f7fd f8ff 	bl	8000dd4 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fd f8fb 	bl	8000dd4 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e0bc      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf0:	4b61      	ldr	r3, [pc, #388]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ee      	beq.n	8003bda <HAL_RCC_OscConfig+0x33a>
 8003bfc:	e014      	b.n	8003c28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bfe:	f7fd f8e9 	bl	8000dd4 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c06:	f7fd f8e5 	bl	8000dd4 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e0a6      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1c:	4b56      	ldr	r3, [pc, #344]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ee      	bne.n	8003c06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d105      	bne.n	8003c3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2e:	4b52      	ldr	r3, [pc, #328]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	4a51      	ldr	r2, [pc, #324]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 8092 	beq.w	8003d68 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c44:	4b4c      	ldr	r3, [pc, #304]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d05c      	beq.n	8003d0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d141      	bne.n	8003cdc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c58:	4b48      	ldr	r3, [pc, #288]	; (8003d7c <HAL_RCC_OscConfig+0x4dc>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5e:	f7fd f8b9 	bl	8000dd4 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c66:	f7fd f8b5 	bl	8000dd4 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e078      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c78:	4b3f      	ldr	r3, [pc, #252]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f0      	bne.n	8003c66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69da      	ldr	r2, [r3, #28]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	019b      	lsls	r3, r3, #6
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	085b      	lsrs	r3, r3, #1
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	041b      	lsls	r3, r3, #16
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	061b      	lsls	r3, r3, #24
 8003ca8:	4933      	ldr	r1, [pc, #204]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cae:	4b33      	ldr	r3, [pc, #204]	; (8003d7c <HAL_RCC_OscConfig+0x4dc>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fd f88e 	bl	8000dd4 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7fd f88a 	bl	8000dd4 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e04d      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cce:	4b2a      	ldr	r3, [pc, #168]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x41c>
 8003cda:	e045      	b.n	8003d68 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cdc:	4b27      	ldr	r3, [pc, #156]	; (8003d7c <HAL_RCC_OscConfig+0x4dc>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce2:	f7fd f877 	bl	8000dd4 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cea:	f7fd f873 	bl	8000dd4 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e036      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfc:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f0      	bne.n	8003cea <HAL_RCC_OscConfig+0x44a>
 8003d08:	e02e      	b.n	8003d68 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e029      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d16:	4b18      	ldr	r3, [pc, #96]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d11c      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d115      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d3e:	4013      	ands	r3, r2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d10d      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d106      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d001      	beq.n	8003d68 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40007000 	.word	0x40007000
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	42470060 	.word	0x42470060

08003d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0cc      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d94:	4b68      	ldr	r3, [pc, #416]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d90c      	bls.n	8003dbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b65      	ldr	r3, [pc, #404]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b63      	ldr	r3, [pc, #396]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0b8      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d020      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dd4:	4b59      	ldr	r3, [pc, #356]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	4a58      	ldr	r2, [pc, #352]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dec:	4b53      	ldr	r3, [pc, #332]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	4a52      	ldr	r2, [pc, #328]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df8:	4b50      	ldr	r3, [pc, #320]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	494d      	ldr	r1, [pc, #308]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d044      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d107      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1e:	4b47      	ldr	r3, [pc, #284]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d119      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e07f      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d003      	beq.n	8003e3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d107      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e3e:	4b3f      	ldr	r3, [pc, #252]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e06f      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e4e:	4b3b      	ldr	r3, [pc, #236]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e067      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e5e:	4b37      	ldr	r3, [pc, #220]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f023 0203 	bic.w	r2, r3, #3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	4934      	ldr	r1, [pc, #208]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e70:	f7fc ffb0 	bl	8000dd4 <HAL_GetTick>
 8003e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e78:	f7fc ffac 	bl	8000dd4 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e04f      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8e:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 020c 	and.w	r2, r3, #12
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d1eb      	bne.n	8003e78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d20c      	bcs.n	8003ec8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b22      	ldr	r3, [pc, #136]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb6:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e032      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4916      	ldr	r1, [pc, #88]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ef2:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	490e      	ldr	r1, [pc, #56]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f06:	f000 f821 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 8003f0a:	4601      	mov	r1, r0
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <HAL_RCC_ClockConfig+0x1c0>)
 8003f18:	5cd3      	ldrb	r3, [r2, r3]
 8003f1a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f1e:	4a09      	ldr	r2, [pc, #36]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <HAL_RCC_ClockConfig+0x1c8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fc ff10 	bl	8000d4c <HAL_InitTick>

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40023c00 	.word	0x40023c00
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	08007a90 	.word	0x08007a90
 8003f44:	20000000 	.word	0x20000000
 8003f48:	20000004 	.word	0x20000004

08003f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	607b      	str	r3, [r7, #4]
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f62:	4b63      	ldr	r3, [pc, #396]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d007      	beq.n	8003f7e <HAL_RCC_GetSysClockFreq+0x32>
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d008      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0x38>
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 80b4 	bne.w	80040e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f78:	4b5e      	ldr	r3, [pc, #376]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f7a:	60bb      	str	r3, [r7, #8]
       break;
 8003f7c:	e0b3      	b.n	80040e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f7e:	4b5e      	ldr	r3, [pc, #376]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003f80:	60bb      	str	r3, [r7, #8]
      break;
 8003f82:	e0b0      	b.n	80040e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f84:	4b5a      	ldr	r3, [pc, #360]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f8e:	4b58      	ldr	r3, [pc, #352]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d04a      	beq.n	8004030 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9a:	4b55      	ldr	r3, [pc, #340]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	099b      	lsrs	r3, r3, #6
 8003fa0:	f04f 0400 	mov.w	r4, #0
 8003fa4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	ea03 0501 	and.w	r5, r3, r1
 8003fb0:	ea04 0602 	and.w	r6, r4, r2
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	4632      	mov	r2, r6
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	f04f 0400 	mov.w	r4, #0
 8003fc0:	0154      	lsls	r4, r2, #5
 8003fc2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fc6:	014b      	lsls	r3, r1, #5
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4622      	mov	r2, r4
 8003fcc:	1b49      	subs	r1, r1, r5
 8003fce:	eb62 0206 	sbc.w	r2, r2, r6
 8003fd2:	f04f 0300 	mov.w	r3, #0
 8003fd6:	f04f 0400 	mov.w	r4, #0
 8003fda:	0194      	lsls	r4, r2, #6
 8003fdc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fe0:	018b      	lsls	r3, r1, #6
 8003fe2:	1a5b      	subs	r3, r3, r1
 8003fe4:	eb64 0402 	sbc.w	r4, r4, r2
 8003fe8:	f04f 0100 	mov.w	r1, #0
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	00e2      	lsls	r2, r4, #3
 8003ff2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ff6:	00d9      	lsls	r1, r3, #3
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4614      	mov	r4, r2
 8003ffc:	195b      	adds	r3, r3, r5
 8003ffe:	eb44 0406 	adc.w	r4, r4, r6
 8004002:	f04f 0100 	mov.w	r1, #0
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	0262      	lsls	r2, r4, #9
 800400c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004010:	0259      	lsls	r1, r3, #9
 8004012:	460b      	mov	r3, r1
 8004014:	4614      	mov	r4, r2
 8004016:	4618      	mov	r0, r3
 8004018:	4621      	mov	r1, r4
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f04f 0400 	mov.w	r4, #0
 8004020:	461a      	mov	r2, r3
 8004022:	4623      	mov	r3, r4
 8004024:	f7fc f8d0 	bl	80001c8 <__aeabi_uldivmod>
 8004028:	4603      	mov	r3, r0
 800402a:	460c      	mov	r4, r1
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	e049      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004030:	4b2f      	ldr	r3, [pc, #188]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	099b      	lsrs	r3, r3, #6
 8004036:	f04f 0400 	mov.w	r4, #0
 800403a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	ea03 0501 	and.w	r5, r3, r1
 8004046:	ea04 0602 	and.w	r6, r4, r2
 800404a:	4629      	mov	r1, r5
 800404c:	4632      	mov	r2, r6
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	f04f 0400 	mov.w	r4, #0
 8004056:	0154      	lsls	r4, r2, #5
 8004058:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800405c:	014b      	lsls	r3, r1, #5
 800405e:	4619      	mov	r1, r3
 8004060:	4622      	mov	r2, r4
 8004062:	1b49      	subs	r1, r1, r5
 8004064:	eb62 0206 	sbc.w	r2, r2, r6
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	f04f 0400 	mov.w	r4, #0
 8004070:	0194      	lsls	r4, r2, #6
 8004072:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004076:	018b      	lsls	r3, r1, #6
 8004078:	1a5b      	subs	r3, r3, r1
 800407a:	eb64 0402 	sbc.w	r4, r4, r2
 800407e:	f04f 0100 	mov.w	r1, #0
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	00e2      	lsls	r2, r4, #3
 8004088:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800408c:	00d9      	lsls	r1, r3, #3
 800408e:	460b      	mov	r3, r1
 8004090:	4614      	mov	r4, r2
 8004092:	195b      	adds	r3, r3, r5
 8004094:	eb44 0406 	adc.w	r4, r4, r6
 8004098:	f04f 0100 	mov.w	r1, #0
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	02a2      	lsls	r2, r4, #10
 80040a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80040a6:	0299      	lsls	r1, r3, #10
 80040a8:	460b      	mov	r3, r1
 80040aa:	4614      	mov	r4, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	4621      	mov	r1, r4
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f04f 0400 	mov.w	r4, #0
 80040b6:	461a      	mov	r2, r3
 80040b8:	4623      	mov	r3, r4
 80040ba:	f7fc f885 	bl	80001c8 <__aeabi_uldivmod>
 80040be:	4603      	mov	r3, r0
 80040c0:	460c      	mov	r4, r1
 80040c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040c4:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	0c1b      	lsrs	r3, r3, #16
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	3301      	adds	r3, #1
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040dc:	60bb      	str	r3, [r7, #8]
      break;
 80040de:	e002      	b.n	80040e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040e0:	4b04      	ldr	r3, [pc, #16]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040e2:	60bb      	str	r3, [r7, #8]
      break;
 80040e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040e6:	68bb      	ldr	r3, [r7, #8]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	00f42400 	.word	0x00f42400
 80040f8:	007a1200 	.word	0x007a1200

080040fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004100:	4b03      	ldr	r3, [pc, #12]	; (8004110 <HAL_RCC_GetHCLKFreq+0x14>)
 8004102:	681b      	ldr	r3, [r3, #0]
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000000 	.word	0x20000000

08004114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004118:	f7ff fff0 	bl	80040fc <HAL_RCC_GetHCLKFreq>
 800411c:	4601      	mov	r1, r0
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	0a9b      	lsrs	r3, r3, #10
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	4a03      	ldr	r2, [pc, #12]	; (8004138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800412a:	5cd3      	ldrb	r3, [r2, r3]
 800412c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004130:	4618      	mov	r0, r3
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40023800 	.word	0x40023800
 8004138:	08007aa0 	.word	0x08007aa0

0800413c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d105      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004160:	2b00      	cmp	r3, #0
 8004162:	d035      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004164:	4b62      	ldr	r3, [pc, #392]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800416a:	f7fc fe33 	bl	8000dd4 <HAL_GetTick>
 800416e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004170:	e008      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004172:	f7fc fe2f 	bl	8000dd4 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e0b0      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004184:	4b5b      	ldr	r3, [pc, #364]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f0      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	019a      	lsls	r2, r3, #6
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	071b      	lsls	r3, r3, #28
 800419c:	4955      	ldr	r1, [pc, #340]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041a4:	4b52      	ldr	r3, [pc, #328]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041aa:	f7fc fe13 	bl	8000dd4 <HAL_GetTick>
 80041ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041b2:	f7fc fe0f 	bl	8000dd4 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e090      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041c4:	4b4b      	ldr	r3, [pc, #300]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8083 	beq.w	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	4b44      	ldr	r3, [pc, #272]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	4a43      	ldr	r2, [pc, #268]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ec:	6413      	str	r3, [r2, #64]	; 0x40
 80041ee:	4b41      	ldr	r3, [pc, #260]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041fa:	4b3f      	ldr	r3, [pc, #252]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a3e      	ldr	r2, [pc, #248]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004204:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004206:	f7fc fde5 	bl	8000dd4 <HAL_GetTick>
 800420a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800420c:	e008      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800420e:	f7fc fde1 	bl	8000dd4 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e062      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004220:	4b35      	ldr	r3, [pc, #212]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800422c:	4b31      	ldr	r3, [pc, #196]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004234:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d02f      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	429a      	cmp	r2, r3
 8004248:	d028      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800424a:	4b2a      	ldr	r3, [pc, #168]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004252:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004254:	4b29      	ldr	r3, [pc, #164]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004256:	2201      	movs	r2, #1
 8004258:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800425a:	4b28      	ldr	r3, [pc, #160]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004260:	4a24      	ldr	r2, [pc, #144]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004266:	4b23      	ldr	r3, [pc, #140]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d114      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004272:	f7fc fdaf 	bl	8000dd4 <HAL_GetTick>
 8004276:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004278:	e00a      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800427a:	f7fc fdab 	bl	8000dd4 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f241 3288 	movw	r2, #5000	; 0x1388
 8004288:	4293      	cmp	r3, r2
 800428a:	d901      	bls.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e02a      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004290:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ee      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042a8:	d10d      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042be:	490d      	ldr	r1, [pc, #52]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	608b      	str	r3, [r1, #8]
 80042c4:	e005      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80042c6:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	4a0a      	ldr	r2, [pc, #40]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042d0:	6093      	str	r3, [r2, #8]
 80042d2:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042de:	4905      	ldr	r1, [pc, #20]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	42470068 	.word	0x42470068
 80042f4:	40023800 	.word	0x40023800
 80042f8:	40007000 	.word	0x40007000
 80042fc:	42470e40 	.word	0x42470e40

08004300 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d13d      	bne.n	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800431e:	4b22      	ldr	r3, [pc, #136]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004326:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800432e:	2b01      	cmp	r3, #1
 8004330:	d12f      	bne.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004332:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004334:	617b      	str	r3, [r7, #20]
          break;
 8004336:	e02f      	b.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004344:	d108      	bne.n	8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004346:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800434e:	4a18      	ldr	r2, [pc, #96]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004350:	fbb2 f3f3 	udiv	r3, r2, r3
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	e007      	b.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004358:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004360:	4a14      	ldr	r2, [pc, #80]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004362:	fbb2 f3f3 	udiv	r3, r2, r3
 8004366:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004368:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800436a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436e:	099b      	lsrs	r3, r3, #6
 8004370:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	fb02 f303 	mul.w	r3, r2, r3
 800437a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800437e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004382:	0f1b      	lsrs	r3, r3, #28
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	fbb2 f3f3 	udiv	r3, r2, r3
 800438e:	617b      	str	r3, [r7, #20]
          break;
 8004390:	e002      	b.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
          break;
 8004396:	bf00      	nop
        }
      }
      break;
 8004398:	bf00      	nop
    }
  }
  return frequency;
 800439a:	697b      	ldr	r3, [r7, #20]
}
 800439c:	4618      	mov	r0, r3
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	40023800 	.word	0x40023800
 80043ac:	00bb8000 	.word	0x00bb8000
 80043b0:	007a1200 	.word	0x007a1200
 80043b4:	00f42400 	.word	0x00f42400

080043b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e056      	b.n	8004478 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d106      	bne.n	80043ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7fc fba3 	bl	8000b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004400:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	ea42 0103 	orr.w	r1, r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	0c1b      	lsrs	r3, r3, #16
 8004448:	f003 0104 	and.w	r1, r3, #4
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69da      	ldr	r2, [r3, #28]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004466:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	603b      	str	r3, [r7, #0]
 800448c:	4613      	mov	r3, r2
 800448e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <HAL_SPI_Transmit+0x22>
 800449e:	2302      	movs	r3, #2
 80044a0:	e11e      	b.n	80046e0 <HAL_SPI_Transmit+0x260>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044aa:	f7fc fc93 	bl	8000dd4 <HAL_GetTick>
 80044ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d002      	beq.n	80044c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044c0:	2302      	movs	r3, #2
 80044c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044c4:	e103      	b.n	80046ce <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <HAL_SPI_Transmit+0x52>
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d102      	bne.n	80044d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044d6:	e0fa      	b.n	80046ce <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2203      	movs	r2, #3
 80044dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	88fa      	ldrh	r2, [r7, #6]
 80044f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	88fa      	ldrh	r2, [r7, #6]
 80044f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451e:	d107      	bne.n	8004530 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800452e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453a:	2b40      	cmp	r3, #64	; 0x40
 800453c:	d007      	beq.n	800454e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800454c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004556:	d14b      	bne.n	80045f0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <HAL_SPI_Transmit+0xe6>
 8004560:	8afb      	ldrh	r3, [r7, #22]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d13e      	bne.n	80045e4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	881a      	ldrh	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	1c9a      	adds	r2, r3, #2
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800458a:	e02b      	b.n	80045e4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b02      	cmp	r3, #2
 8004598:	d112      	bne.n	80045c0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	881a      	ldrh	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	1c9a      	adds	r2, r3, #2
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80045be:	e011      	b.n	80045e4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045c0:	f7fc fc08 	bl	8000dd4 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d803      	bhi.n	80045d8 <HAL_SPI_Transmit+0x158>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045d6:	d102      	bne.n	80045de <HAL_SPI_Transmit+0x15e>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d102      	bne.n	80045e4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045e2:	e074      	b.n	80046ce <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1ce      	bne.n	800458c <HAL_SPI_Transmit+0x10c>
 80045ee:	e04c      	b.n	800468a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <HAL_SPI_Transmit+0x17e>
 80045f8:	8afb      	ldrh	r3, [r7, #22]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d140      	bne.n	8004680 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	330c      	adds	r3, #12
 8004608:	7812      	ldrb	r2, [r2, #0]
 800460a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004624:	e02c      	b.n	8004680 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b02      	cmp	r3, #2
 8004632:	d113      	bne.n	800465c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	330c      	adds	r3, #12
 800463e:	7812      	ldrb	r2, [r2, #0]
 8004640:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	86da      	strh	r2, [r3, #54]	; 0x36
 800465a:	e011      	b.n	8004680 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800465c:	f7fc fbba 	bl	8000dd4 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d803      	bhi.n	8004674 <HAL_SPI_Transmit+0x1f4>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004672:	d102      	bne.n	800467a <HAL_SPI_Transmit+0x1fa>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d102      	bne.n	8004680 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800467e:	e026      	b.n	80046ce <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1cd      	bne.n	8004626 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	6839      	ldr	r1, [r7, #0]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f894 	bl	80047bc <SPI_EndRxTxTransaction>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10a      	bne.n	80046be <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046a8:	2300      	movs	r3, #0
 80046aa:	613b      	str	r3, [r7, #16]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	77fb      	strb	r3, [r7, #31]
 80046ca:	e000      	b.n	80046ce <HAL_SPI_Transmit+0x24e>
  }

error:
 80046cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046de:	7ffb      	ldrb	r3, [r7, #31]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3720      	adds	r7, #32
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	4613      	mov	r3, r2
 80046f6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046f8:	e04c      	b.n	8004794 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004700:	d048      	beq.n	8004794 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004702:	f7fc fb67 	bl	8000dd4 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d902      	bls.n	8004718 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d13d      	bne.n	8004794 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004726:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004730:	d111      	bne.n	8004756 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473a:	d004      	beq.n	8004746 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004744:	d107      	bne.n	8004756 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004754:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475e:	d10f      	bne.n	8004780 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800477e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e00f      	b.n	80047b4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4013      	ands	r3, r2
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	bf0c      	ite	eq
 80047a4:	2301      	moveq	r3, #1
 80047a6:	2300      	movne	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	461a      	mov	r2, r3
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d1a3      	bne.n	80046fa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047c8:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <SPI_EndRxTxTransaction+0x7c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1b      	ldr	r2, [pc, #108]	; (800483c <SPI_EndRxTxTransaction+0x80>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	0d5b      	lsrs	r3, r3, #21
 80047d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047d8:	fb02 f303 	mul.w	r3, r2, r3
 80047dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047e6:	d112      	bne.n	800480e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2200      	movs	r2, #0
 80047f0:	2180      	movs	r1, #128	; 0x80
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7ff ff78 	bl	80046e8 <SPI_WaitFlagStateUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d016      	beq.n	800482c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004802:	f043 0220 	orr.w	r2, r3, #32
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e00f      	b.n	800482e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	3b01      	subs	r3, #1
 8004818:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004824:	2b80      	cmp	r3, #128	; 0x80
 8004826:	d0f2      	beq.n	800480e <SPI_EndRxTxTransaction+0x52>
 8004828:	e000      	b.n	800482c <SPI_EndRxTxTransaction+0x70>
        break;
 800482a:	bf00      	nop
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000000 	.word	0x20000000
 800483c:	165e9f81 	.word	0x165e9f81

08004840 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004840:	b084      	sub	sp, #16
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	f107 001c 	add.w	r0, r7, #28
 800484e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	2b01      	cmp	r3, #1
 8004856:	d122      	bne.n	800489e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800486c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004882:	2b01      	cmp	r3, #1
 8004884:	d105      	bne.n	8004892 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f94a 	bl	8004b2c <USB_CoreReset>
 8004898:	4603      	mov	r3, r0
 800489a:	73fb      	strb	r3, [r7, #15]
 800489c:	e01a      	b.n	80048d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f93e 	bl	8004b2c <USB_CoreReset>
 80048b0:	4603      	mov	r3, r0
 80048b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80048b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
 80048c6:	e005      	b.n	80048d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d10b      	bne.n	80048f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f043 0206 	orr.w	r2, r3, #6
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f043 0220 	orr.w	r2, r3, #32
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048fe:	b004      	add	sp, #16
 8004900:	4770      	bx	lr

08004902 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f043 0201 	orr.w	r2, r3, #1
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f023 0201 	bic.w	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	460b      	mov	r3, r1
 8004950:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d106      	bne.n	8004972 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	60da      	str	r2, [r3, #12]
 8004970:	e00b      	b.n	800498a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d106      	bne.n	8004986 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	60da      	str	r2, [r3, #12]
 8004984:	e001      	b.n	800498a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e003      	b.n	8004992 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800498a:	2032      	movs	r0, #50	; 0x32
 800498c:	f7fc fa2e 	bl	8000dec <HAL_Delay>

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	019b      	lsls	r3, r3, #6
 80049ae:	f043 0220 	orr.w	r2, r3, #32
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3301      	adds	r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <USB_FlushTxFifo+0x48>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e006      	b.n	80049d6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	d0f0      	beq.n	80049b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	00030d40 	.word	0x00030d40

080049e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2210      	movs	r2, #16
 80049f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3301      	adds	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a09      	ldr	r2, [pc, #36]	; (8004a28 <USB_FlushRxFifo+0x40>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d901      	bls.n	8004a0c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e006      	b.n	8004a1a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	d0f0      	beq.n	80049fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	00030d40 	.word	0x00030d40

08004a2c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b089      	sub	sp, #36	; 0x24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	4611      	mov	r1, r2
 8004a38:	461a      	mov	r2, r3
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	71fb      	strb	r3, [r7, #7]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004a4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d11a      	bne.n	8004a88 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004a52:	88bb      	ldrh	r3, [r7, #4]
 8004a54:	3303      	adds	r3, #3
 8004a56:	089b      	lsrs	r3, r3, #2
 8004a58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61bb      	str	r3, [r7, #24]
 8004a5e:	e00f      	b.n	8004a80 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	031a      	lsls	r2, r3, #12
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	3304      	adds	r3, #4
 8004a78:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	61bb      	str	r3, [r7, #24]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d3eb      	bcc.n	8004a60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3724      	adds	r7, #36	; 0x24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b089      	sub	sp, #36	; 0x24
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	3303      	adds	r3, #3
 8004ab0:	089b      	lsrs	r3, r3, #2
 8004ab2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	e00b      	b.n	8004ad2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	61bb      	str	r3, [r7, #24]
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d3ef      	bcc.n	8004aba <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004ada:	69fb      	ldr	r3, [r7, #28]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3724      	adds	r7, #36	; 0x24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4013      	ands	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b00:	68fb      	ldr	r3, [r7, #12]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
	...

08004b2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4a13      	ldr	r2, [pc, #76]	; (8004b90 <USB_CoreReset+0x64>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e01b      	b.n	8004b82 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	daf2      	bge.n	8004b38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f043 0201 	orr.w	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3301      	adds	r3, #1
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4a09      	ldr	r2, [pc, #36]	; (8004b90 <USB_CoreReset+0x64>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d901      	bls.n	8004b74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e006      	b.n	8004b82 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d0f0      	beq.n	8004b62 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	00030d40 	.word	0x00030d40

08004b94 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b94:	b084      	sub	sp, #16
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	f107 001c 	add.w	r0, r7, #28
 8004ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d018      	beq.n	8004c18 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	d10a      	bne.n	8004c02 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bfa:	f043 0304 	orr.w	r3, r3, #4
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	e014      	b.n	8004c2c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c10:	f023 0304 	bic.w	r3, r3, #4
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	e009      	b.n	8004c2c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c26:	f023 0304 	bic.w	r3, r3, #4
 8004c2a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004c2c:	2110      	movs	r1, #16
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff feb4 	bl	800499c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7ff fed7 	bl	80049e8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	e015      	b.n	8004c6c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c52:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c60:	461a      	mov	r2, r3
 8004c62:	2300      	movs	r3, #0
 8004c64:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d3e5      	bcc.n	8004c40 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004c74:	2101      	movs	r1, #1
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f8ac 	bl	8004dd4 <USB_DriveVbus>

  HAL_Delay(200U);
 8004c7c:	20c8      	movs	r0, #200	; 0xc8
 8004c7e:	f7fc f8b5 	bl	8000dec <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c8e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00b      	beq.n	8004cb4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ca2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <USB_HostInit+0x164>)
 8004ca8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a13      	ldr	r2, [pc, #76]	; (8004cfc <USB_HostInit+0x168>)
 8004cae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004cb2:	e009      	b.n	8004cc8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2280      	movs	r2, #128	; 0x80
 8004cb8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a10      	ldr	r2, [pc, #64]	; (8004d00 <USB_HostInit+0x16c>)
 8004cbe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a10      	ldr	r2, [pc, #64]	; (8004d04 <USB_HostInit+0x170>)
 8004cc4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d105      	bne.n	8004cda <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f043 0210 	orr.w	r2, r3, #16
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	4b0a      	ldr	r3, [pc, #40]	; (8004d08 <USB_HostInit+0x174>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cf2:	b004      	add	sp, #16
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	01000200 	.word	0x01000200
 8004cfc:	00e00300 	.word	0x00e00300
 8004d00:	00600080 	.word	0x00600080
 8004d04:	004000e0 	.word	0x004000e0
 8004d08:	a3200008 	.word	0xa3200008

08004d0c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d2a:	f023 0303 	bic.w	r3, r3, #3
 8004d2e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	68f9      	ldr	r1, [r7, #12]
 8004d40:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d44:	4313      	orrs	r3, r2
 8004d46:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d107      	bne.n	8004d5e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d54:	461a      	mov	r2, r3
 8004d56:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004d5a:	6053      	str	r3, [r2, #4]
 8004d5c:	e009      	b.n	8004d72 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d106      	bne.n	8004d72 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004d70:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004da0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dae:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004db0:	2064      	movs	r0, #100	; 0x64
 8004db2:	f7fc f81b 	bl	8000dec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004dc4:	200a      	movs	r0, #10
 8004dc6:	f7fc f811 	bl	8000dec <HAL_Delay>

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004df8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <USB_DriveVbus+0x44>
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d106      	bne.n	8004e18 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e16:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e22:	d109      	bne.n	8004e38 <USB_DriveVbus+0x64>
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e36:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b085      	sub	sp, #20
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	0c5b      	lsrs	r3, r3, #17
 8004e64:	f003 0303 	and.w	r3, r3, #3
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	b29b      	uxth	r3, r3
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
	...

08004e98 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	70fb      	strb	r3, [r7, #3]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	70bb      	strb	r3, [r7, #2]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004eba:	78fb      	ldrb	r3, [r7, #3]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ecc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004ece:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d87e      	bhi.n	8004fd4 <USB_HC_Init+0x13c>
 8004ed6:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <USB_HC_Init+0x44>)
 8004ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004edc:	08004eed 	.word	0x08004eed
 8004ee0:	08004f97 	.word	0x08004f97
 8004ee4:	08004eed 	.word	0x08004eed
 8004ee8:	08004f59 	.word	0x08004f59
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f240 439d 	movw	r3, #1181	; 0x49d
 8004efe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004f00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	da10      	bge.n	8004f2a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f08:	78fb      	ldrb	r3, [r7, #3]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	78fa      	ldrb	r2, [r7, #3]
 8004f18:	0151      	lsls	r1, r2, #5
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f26:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004f28:	e057      	b.n	8004fda <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d051      	beq.n	8004fda <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004f36:	78fb      	ldrb	r3, [r7, #3]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	78fa      	ldrb	r2, [r7, #3]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f54:	60d3      	str	r3, [r2, #12]
      break;
 8004f56:	e040      	b.n	8004fda <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f64:	461a      	mov	r2, r3
 8004f66:	f240 639d 	movw	r3, #1693	; 0x69d
 8004f6a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	da34      	bge.n	8004fde <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	0151      	lsls	r1, r2, #5
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	440a      	add	r2, r1
 8004f8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f92:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004f94:	e023      	b.n	8004fde <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f240 2325 	movw	r3, #549	; 0x225
 8004fa8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004faa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	da17      	bge.n	8004fe2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	78fa      	ldrb	r2, [r7, #3]
 8004fc2:	0151      	lsls	r1, r2, #5
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	440a      	add	r2, r1
 8004fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fcc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004fd0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004fd2:	e006      	b.n	8004fe2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd8:	e004      	b.n	8004fe4 <USB_HC_Init+0x14c>
      break;
 8004fda:	bf00      	nop
 8004fdc:	e002      	b.n	8004fe4 <USB_HC_Init+0x14c>
      break;
 8004fde:	bf00      	nop
 8004fe0:	e000      	b.n	8004fe4 <USB_HC_Init+0x14c>
      break;
 8004fe2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	78fb      	ldrb	r3, [r7, #3]
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ffe:	4313      	orrs	r3, r2
 8005000:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800500e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005012:	2b00      	cmp	r3, #0
 8005014:	da03      	bge.n	800501e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	e001      	b.n	8005022 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005022:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d103      	bne.n	8005032 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800502a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	e001      	b.n	8005036 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005036:	787b      	ldrb	r3, [r7, #1]
 8005038:	059b      	lsls	r3, r3, #22
 800503a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800503e:	78bb      	ldrb	r3, [r7, #2]
 8005040:	02db      	lsls	r3, r3, #11
 8005042:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005046:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005048:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800504c:	049b      	lsls	r3, r3, #18
 800504e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005052:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005054:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005056:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800505a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	0159      	lsls	r1, r3, #5
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	440b      	add	r3, r1
 8005068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005072:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005074:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005078:	2b03      	cmp	r3, #3
 800507a:	d10f      	bne.n	800509c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800507c:	78fb      	ldrb	r3, [r7, #3]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4413      	add	r3, r2
 8005084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	78fa      	ldrb	r2, [r7, #3]
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	440a      	add	r2, r1
 8005092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005096:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800509a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800509c:	7dfb      	ldrb	r3, [r7, #23]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop

080050ac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08c      	sub	sp, #48	; 0x30
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	4613      	mov	r3, r2
 80050b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	785b      	ldrb	r3, [r3, #1]
 80050c2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80050c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050c8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d028      	beq.n	8005128 <USB_HC_StartXfer+0x7c>
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	791b      	ldrb	r3, [r3, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d124      	bne.n	8005128 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10b      	bne.n	80050fc <USB_HC_StartXfer+0x50>
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	795b      	ldrb	r3, [r3, #5]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d107      	bne.n	80050fc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	785b      	ldrb	r3, [r3, #1]
 80050f0:	4619      	mov	r1, r3
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fa2e 	bl	8005554 <USB_DoPing>
      return HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	e112      	b.n	8005322 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80050fc:	79fb      	ldrb	r3, [r7, #7]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d112      	bne.n	8005128 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	4413      	add	r3, r2
 800510a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	0151      	lsls	r1, r2, #5
 8005114:	6a3a      	ldr	r2, [r7, #32]
 8005116:	440a      	add	r2, r1
 8005118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800511c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005120:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2200      	movs	r2, #0
 8005126:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d018      	beq.n	8005162 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	8912      	ldrh	r2, [r2, #8]
 8005138:	4413      	add	r3, r2
 800513a:	3b01      	subs	r3, #1
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	8912      	ldrh	r2, [r2, #8]
 8005140:	fbb3 f3f2 	udiv	r3, r3, r2
 8005144:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005146:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005148:	8b7b      	ldrh	r3, [r7, #26]
 800514a:	429a      	cmp	r2, r3
 800514c:	d90b      	bls.n	8005166 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800514e:	8b7b      	ldrh	r3, [r7, #26]
 8005150:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005152:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	8912      	ldrh	r2, [r2, #8]
 8005158:	fb02 f203 	mul.w	r2, r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	611a      	str	r2, [r3, #16]
 8005160:	e001      	b.n	8005166 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005162:	2301      	movs	r3, #1
 8005164:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	78db      	ldrb	r3, [r3, #3]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d006      	beq.n	800517c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800516e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	8912      	ldrh	r2, [r2, #8]
 8005174:	fb02 f203 	mul.w	r2, r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005184:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005186:	04d9      	lsls	r1, r3, #19
 8005188:	4b68      	ldr	r3, [pc, #416]	; (800532c <USB_HC_StartXfer+0x280>)
 800518a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800518c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	7a9b      	ldrb	r3, [r3, #10]
 8005192:	075b      	lsls	r3, r3, #29
 8005194:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005198:	69f9      	ldr	r1, [r7, #28]
 800519a:	0148      	lsls	r0, r1, #5
 800519c:	6a39      	ldr	r1, [r7, #32]
 800519e:	4401      	add	r1, r0
 80051a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80051a4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80051a6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80051a8:	79fb      	ldrb	r3, [r7, #7]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d009      	beq.n	80051c2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	68d9      	ldr	r1, [r3, #12]
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051be:	460a      	mov	r2, r1
 80051c0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	bf0c      	ite	eq
 80051d2:	2301      	moveq	r3, #1
 80051d4:	2300      	movne	r3, #0
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69fa      	ldr	r2, [r7, #28]
 80051ea:	0151      	lsls	r1, r2, #5
 80051ec:	6a3a      	ldr	r2, [r7, #32]
 80051ee:	440a      	add	r2, r1
 80051f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80051f8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	4413      	add	r3, r2
 8005202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	7e7b      	ldrb	r3, [r7, #25]
 800520a:	075b      	lsls	r3, r3, #29
 800520c:	69f9      	ldr	r1, [r7, #28]
 800520e:	0148      	lsls	r0, r1, #5
 8005210:	6a39      	ldr	r1, [r7, #32]
 8005212:	4401      	add	r1, r0
 8005214:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005218:	4313      	orrs	r3, r2
 800521a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	4413      	add	r3, r2
 8005224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a41      	ldr	r2, [pc, #260]	; (8005330 <USB_HC_StartXfer+0x284>)
 800522c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800522e:	4b40      	ldr	r3, [pc, #256]	; (8005330 <USB_HC_StartXfer+0x284>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005236:	4a3e      	ldr	r2, [pc, #248]	; (8005330 <USB_HC_StartXfer+0x284>)
 8005238:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	78db      	ldrb	r3, [r3, #3]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d006      	beq.n	8005250 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005242:	4b3b      	ldr	r3, [pc, #236]	; (8005330 <USB_HC_StartXfer+0x284>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800524a:	4a39      	ldr	r2, [pc, #228]	; (8005330 <USB_HC_StartXfer+0x284>)
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	e005      	b.n	800525c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005250:	4b37      	ldr	r3, [pc, #220]	; (8005330 <USB_HC_StartXfer+0x284>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005258:	4a35      	ldr	r2, [pc, #212]	; (8005330 <USB_HC_StartXfer+0x284>)
 800525a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800525c:	4b34      	ldr	r3, [pc, #208]	; (8005330 <USB_HC_StartXfer+0x284>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005264:	4a32      	ldr	r2, [pc, #200]	; (8005330 <USB_HC_StartXfer+0x284>)
 8005266:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	4413      	add	r3, r2
 8005270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005274:	461a      	mov	r2, r3
 8005276:	4b2e      	ldr	r3, [pc, #184]	; (8005330 <USB_HC_StartXfer+0x284>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d14e      	bne.n	8005320 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	78db      	ldrb	r3, [r3, #3]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d14a      	bne.n	8005320 <USB_HC_StartXfer+0x274>
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d046      	beq.n	8005320 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	79db      	ldrb	r3, [r3, #7]
 8005296:	2b03      	cmp	r3, #3
 8005298:	d830      	bhi.n	80052fc <USB_HC_StartXfer+0x250>
 800529a:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <USB_HC_StartXfer+0x1f4>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052b1 	.word	0x080052b1
 80052a4:	080052d5 	.word	0x080052d5
 80052a8:	080052b1 	.word	0x080052b1
 80052ac:	080052d5 	.word	0x080052d5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	3303      	adds	r3, #3
 80052b6:	089b      	lsrs	r3, r3, #2
 80052b8:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80052ba:	8afa      	ldrh	r2, [r7, #22]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d91c      	bls.n	8005300 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	f043 0220 	orr.w	r2, r3, #32
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	619a      	str	r2, [r3, #24]
          }
          break;
 80052d2:	e015      	b.n	8005300 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	3303      	adds	r3, #3
 80052da:	089b      	lsrs	r3, r3, #2
 80052dc:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80052de:	8afa      	ldrh	r2, [r7, #22]
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d90a      	bls.n	8005304 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	619a      	str	r2, [r3, #24]
          }
          break;
 80052fa:	e003      	b.n	8005304 <USB_HC_StartXfer+0x258>

        default:
          break;
 80052fc:	bf00      	nop
 80052fe:	e002      	b.n	8005306 <USB_HC_StartXfer+0x25a>
          break;
 8005300:	bf00      	nop
 8005302:	e000      	b.n	8005306 <USB_HC_StartXfer+0x25a>
          break;
 8005304:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	68d9      	ldr	r1, [r3, #12]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	785a      	ldrb	r2, [r3, #1]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	b298      	uxth	r0, r3
 8005314:	2300      	movs	r3, #0
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	4603      	mov	r3, r0
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f7ff fb86 	bl	8004a2c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3728      	adds	r7, #40	; 0x28
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	1ff80000 	.word	0x1ff80000
 8005330:	200000b0 	.word	0x200000b0

08005334 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	b29b      	uxth	r3, r3
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005356:	b480      	push	{r7}
 8005358:	b087      	sub	sp, #28
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	460b      	mov	r3, r1
 8005360:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005366:	78fb      	ldrb	r3, [r7, #3]
 8005368:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	4413      	add	r3, r2
 8005376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	0c9b      	lsrs	r3, r3, #18
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <USB_HC_Halt+0x3a>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d16c      	bne.n	800546a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	4413      	add	r3, r2
 8005398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	0151      	lsls	r1, r2, #5
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	440a      	add	r2, r1
 80053a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053ae:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d143      	bne.n	8005444 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	0151      	lsls	r1, r2, #5
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	440a      	add	r2, r1
 80053f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053fa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	4413      	add	r3, r2
 8005404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	440a      	add	r2, r1
 8005412:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005416:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800541a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	3301      	adds	r3, #1
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005428:	d81d      	bhi.n	8005466 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	4413      	add	r3, r2
 8005432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800543c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005440:	d0ec      	beq.n	800541c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005442:	e080      	b.n	8005546 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	4413      	add	r3, r2
 800544c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	0151      	lsls	r1, r2, #5
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	440a      	add	r2, r1
 800545a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800545e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005462:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005464:	e06f      	b.n	8005546 <USB_HC_Halt+0x1f0>
          break;
 8005466:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005468:	e06d      	b.n	8005546 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	4413      	add	r3, r2
 8005472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	0151      	lsls	r1, r2, #5
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	440a      	add	r2, r1
 8005480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005484:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005488:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d143      	bne.n	8005522 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	0151      	lsls	r1, r2, #5
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	440a      	add	r2, r1
 80054b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054b8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054d8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054f8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	3301      	adds	r3, #1
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005506:	d81d      	bhi.n	8005544 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	4413      	add	r3, r2
 8005510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800551a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800551e:	d0ec      	beq.n	80054fa <USB_HC_Halt+0x1a4>
 8005520:	e011      	b.n	8005546 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	4413      	add	r3, r2
 800552a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	0151      	lsls	r1, r2, #5
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	440a      	add	r2, r1
 8005538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800553c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	e000      	b.n	8005546 <USB_HC_Halt+0x1f0>
          break;
 8005544:	bf00      	nop
    }
  }

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	460b      	mov	r3, r1
 800555e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005568:	2301      	movs	r3, #1
 800556a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	04da      	lsls	r2, r3, #19
 8005570:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <USB_DoPing+0x74>)
 8005572:	4013      	ands	r3, r2
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	0151      	lsls	r1, r2, #5
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	440a      	add	r2, r1
 800557c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005580:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005584:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	4413      	add	r3, r2
 800558e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800559c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055a4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b2:	461a      	mov	r2, r3
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	1ff80000 	.word	0x1ff80000

080055cc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff f9a1 	bl	8004924 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80055e2:	2110      	movs	r1, #16
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff f9d9 	bl	800499c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff f9fc 	bl	80049e8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80055f0:	2300      	movs	r3, #0
 80055f2:	613b      	str	r3, [r7, #16]
 80055f4:	e01f      	b.n	8005636 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800560c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005614:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800561c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4413      	add	r3, r2
 8005626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562a:	461a      	mov	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	3301      	adds	r3, #1
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2b0f      	cmp	r3, #15
 800563a:	d9dc      	bls.n	80055f6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800563c:	2300      	movs	r3, #0
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	e034      	b.n	80056ac <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005658:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005660:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005668:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005676:	461a      	mov	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	3301      	adds	r3, #1
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005688:	d80c      	bhi.n	80056a4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4413      	add	r3, r2
 8005692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800569c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056a0:	d0ec      	beq.n	800567c <USB_StopHost+0xb0>
 80056a2:	e000      	b.n	80056a6 <USB_StopHost+0xda>
        break;
 80056a4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	3301      	adds	r3, #1
 80056aa:	613b      	str	r3, [r7, #16]
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	2b0f      	cmp	r3, #15
 80056b0:	d9c7      	bls.n	8005642 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056b8:	461a      	mov	r2, r3
 80056ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056be:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056c6:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff f91a 	bl	8004902 <USB_EnableGlobalInt>

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80056d8:	b590      	push	{r4, r7, lr}
 80056da:	b089      	sub	sp, #36	; 0x24
 80056dc:	af04      	add	r7, sp, #16
 80056de:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80056e0:	2302      	movs	r3, #2
 80056e2:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80056e4:	2301      	movs	r3, #1
 80056e6:	2202      	movs	r2, #2
 80056e8:	2102      	movs	r1, #2
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fc3a 	bl	8005f64 <USBH_FindInterface>
 80056f0:	4603      	mov	r3, r0
 80056f2:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80056f4:	7bbb      	ldrb	r3, [r7, #14]
 80056f6:	2bff      	cmp	r3, #255	; 0xff
 80056f8:	f000 812a 	beq.w	8005950 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80056fc:	7bbb      	ldrb	r3, [r7, #14]
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fc13 	bl	8005f2c <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800570c:	2050      	movs	r0, #80	; 0x50
 800570e:	f002 f8df 	bl	80078d0 <malloc>
 8005712:	4603      	mov	r3, r0
 8005714:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005720:	7bbb      	ldrb	r3, [r7, #14]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	211a      	movs	r1, #26
 8005726:	fb01 f303 	mul.w	r3, r1, r3
 800572a:	4413      	add	r3, r2
 800572c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	b25b      	sxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	da15      	bge.n	8005764 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005738:	7bbb      	ldrb	r3, [r7, #14]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	211a      	movs	r1, #26
 800573e:	fb01 f303 	mul.w	r3, r1, r3
 8005742:	4413      	add	r3, r2
 8005744:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005748:	781a      	ldrb	r2, [r3, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800574e:	7bbb      	ldrb	r3, [r7, #14]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	211a      	movs	r1, #26
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	4413      	add	r3, r2
 800575a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800575e:	881a      	ldrh	r2, [r3, #0]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	785b      	ldrb	r3, [r3, #1]
 8005768:	4619      	mov	r1, r3
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f001 fd21 	bl	80071b2 <USBH_AllocPipe>
 8005770:	4603      	mov	r3, r0
 8005772:	461a      	mov	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	7819      	ldrb	r1, [r3, #0]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	7858      	ldrb	r0, [r3, #1]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	8952      	ldrh	r2, [r2, #10]
 8005790:	9202      	str	r2, [sp, #8]
 8005792:	2203      	movs	r2, #3
 8005794:	9201      	str	r2, [sp, #4]
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	4623      	mov	r3, r4
 800579a:	4602      	mov	r2, r0
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f001 fcd9 	bl	8007154 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2200      	movs	r2, #0
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f001 ffe0 	bl	8007770 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80057b0:	2300      	movs	r3, #0
 80057b2:	2200      	movs	r2, #0
 80057b4:	210a      	movs	r1, #10
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fbd4 	bl	8005f64 <USBH_FindInterface>
 80057bc:	4603      	mov	r3, r0
 80057be:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80057c0:	7bbb      	ldrb	r3, [r7, #14]
 80057c2:	2bff      	cmp	r3, #255	; 0xff
 80057c4:	f000 80c4 	beq.w	8005950 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80057c8:	7bbb      	ldrb	r3, [r7, #14]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	211a      	movs	r1, #26
 80057ce:	fb01 f303 	mul.w	r3, r1, r3
 80057d2:	4413      	add	r3, r2
 80057d4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	b25b      	sxtb	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	da16      	bge.n	800580e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80057e0:	7bbb      	ldrb	r3, [r7, #14]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	211a      	movs	r1, #26
 80057e6:	fb01 f303 	mul.w	r3, r1, r3
 80057ea:	4413      	add	r3, r2
 80057ec:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80057f0:	781a      	ldrb	r2, [r3, #0]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80057f6:	7bbb      	ldrb	r3, [r7, #14]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	211a      	movs	r1, #26
 80057fc:	fb01 f303 	mul.w	r3, r1, r3
 8005800:	4413      	add	r3, r2
 8005802:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005806:	881a      	ldrh	r2, [r3, #0]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	835a      	strh	r2, [r3, #26]
 800580c:	e015      	b.n	800583a <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800580e:	7bbb      	ldrb	r3, [r7, #14]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	211a      	movs	r1, #26
 8005814:	fb01 f303 	mul.w	r3, r1, r3
 8005818:	4413      	add	r3, r2
 800581a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800581e:	781a      	ldrb	r2, [r3, #0]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005824:	7bbb      	ldrb	r3, [r7, #14]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	211a      	movs	r1, #26
 800582a:	fb01 f303 	mul.w	r3, r1, r3
 800582e:	4413      	add	r3, r2
 8005830:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005834:	881a      	ldrh	r2, [r3, #0]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800583a:	7bbb      	ldrb	r3, [r7, #14]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	211a      	movs	r1, #26
 8005840:	fb01 f303 	mul.w	r3, r1, r3
 8005844:	4413      	add	r3, r2
 8005846:	f203 3352 	addw	r3, r3, #850	; 0x352
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	b25b      	sxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	da16      	bge.n	8005880 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005852:	7bbb      	ldrb	r3, [r7, #14]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	211a      	movs	r1, #26
 8005858:	fb01 f303 	mul.w	r3, r1, r3
 800585c:	4413      	add	r3, r2
 800585e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005862:	781a      	ldrb	r2, [r3, #0]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005868:	7bbb      	ldrb	r3, [r7, #14]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	211a      	movs	r1, #26
 800586e:	fb01 f303 	mul.w	r3, r1, r3
 8005872:	4413      	add	r3, r2
 8005874:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005878:	881a      	ldrh	r2, [r3, #0]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	835a      	strh	r2, [r3, #26]
 800587e:	e015      	b.n	80058ac <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005880:	7bbb      	ldrb	r3, [r7, #14]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	211a      	movs	r1, #26
 8005886:	fb01 f303 	mul.w	r3, r1, r3
 800588a:	4413      	add	r3, r2
 800588c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005890:	781a      	ldrb	r2, [r3, #0]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005896:	7bbb      	ldrb	r3, [r7, #14]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	211a      	movs	r1, #26
 800589c:	fb01 f303 	mul.w	r3, r1, r3
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80058a6:	881a      	ldrh	r2, [r3, #0]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	7b9b      	ldrb	r3, [r3, #14]
 80058b0:	4619      	mov	r1, r3
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f001 fc7d 	bl	80071b2 <USBH_AllocPipe>
 80058b8:	4603      	mov	r3, r0
 80058ba:	461a      	mov	r2, r3
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	7bdb      	ldrb	r3, [r3, #15]
 80058c4:	4619      	mov	r1, r3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f001 fc73 	bl	80071b2 <USBH_AllocPipe>
 80058cc:	4603      	mov	r3, r0
 80058ce:	461a      	mov	r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	7b59      	ldrb	r1, [r3, #13]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	7b98      	ldrb	r0, [r3, #14]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	8b12      	ldrh	r2, [r2, #24]
 80058ec:	9202      	str	r2, [sp, #8]
 80058ee:	2202      	movs	r2, #2
 80058f0:	9201      	str	r2, [sp, #4]
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	4623      	mov	r3, r4
 80058f6:	4602      	mov	r2, r0
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f001 fc2b 	bl	8007154 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	7b19      	ldrb	r1, [r3, #12]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	7bd8      	ldrb	r0, [r3, #15]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	8b52      	ldrh	r2, [r2, #26]
 8005916:	9202      	str	r2, [sp, #8]
 8005918:	2202      	movs	r2, #2
 800591a:	9201      	str	r2, [sp, #4]
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	4623      	mov	r3, r4
 8005920:	4602      	mov	r2, r0
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f001 fc16 	bl	8007154 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	7b5b      	ldrb	r3, [r3, #13]
 8005934:	2200      	movs	r2, #0
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f001 ff19 	bl	8007770 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	7b1b      	ldrb	r3, [r3, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	4619      	mov	r1, r3
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 ff12 	bl	8007770 <USBH_LL_SetToggle>
      status = USBH_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005950:	7bfb      	ldrb	r3, [r7, #15]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	bd90      	pop	{r4, r7, pc}

0800595a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b084      	sub	sp, #16
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00e      	beq.n	8005992 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f001 fc09 	bl	8007192 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	4619      	mov	r1, r3
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f001 fc31 	bl	80071ee <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	7b1b      	ldrb	r3, [r3, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00e      	beq.n	80059b8 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	7b1b      	ldrb	r3, [r3, #12]
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f001 fbf6 	bl	8007192 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	7b1b      	ldrb	r3, [r3, #12]
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f001 fc1e 	bl	80071ee <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	7b5b      	ldrb	r3, [r3, #13]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00e      	beq.n	80059de <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	7b5b      	ldrb	r3, [r3, #13]
 80059c4:	4619      	mov	r1, r3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f001 fbe3 	bl	8007192 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	7b5b      	ldrb	r3, [r3, #13]
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f001 fc0b 	bl	80071ee <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00b      	beq.n	8005a02 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f001 ff74 	bl	80078e0 <free>
    phost->pActiveClass->pData = 0U;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80059fe:	2200      	movs	r2, #0
 8005a00:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005a14:	2302      	movs	r3, #2
 8005a16:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	3340      	adds	r3, #64	; 0x40
 8005a26:	4619      	mov	r1, r3
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f8b2 	bl	8005b92 <GetLineCoding>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d105      	bne.n	8005a44 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005a3e:	2102      	movs	r1, #2
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	4798      	blx	r3
  }
  return status;
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d877      	bhi.n	8005b64 <USBH_CDC_Process+0x114>
 8005a74:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <USBH_CDC_Process+0x2c>)
 8005a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7a:	bf00      	nop
 8005a7c:	08005a91 	.word	0x08005a91
 8005a80:	08005a97 	.word	0x08005a97
 8005a84:	08005ac7 	.word	0x08005ac7
 8005a88:	08005b3b 	.word	0x08005b3b
 8005a8c:	08005b49 	.word	0x08005b49
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	73fb      	strb	r3, [r7, #15]
    break;
 8005a94:	e06d      	b.n	8005b72 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f897 	bl	8005bd0 <SetLineCoding>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005aa6:	7bbb      	ldrb	r3, [r7, #14]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d104      	bne.n	8005ab6 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005ab4:	e058      	b.n	8005b68 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8005ab6:	7bbb      	ldrb	r3, [r7, #14]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d055      	beq.n	8005b68 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2204      	movs	r2, #4
 8005ac0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005ac4:	e050      	b.n	8005b68 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	3340      	adds	r3, #64	; 0x40
 8005aca:	4619      	mov	r1, r3
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f860 	bl	8005b92 <GetLineCoding>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005ad6:	7bbb      	ldrb	r3, [r7, #14]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d126      	bne.n	8005b2a <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aee:	791b      	ldrb	r3, [r3, #4]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d13b      	bne.n	8005b6c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005afe:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d133      	bne.n	8005b6c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b0e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d12b      	bne.n	8005b6c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1c:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d124      	bne.n	8005b6c <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f95a 	bl	8005ddc <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005b28:	e020      	b.n	8005b6c <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005b2a:	7bbb      	ldrb	r3, [r7, #14]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d01d      	beq.n	8005b6c <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2204      	movs	r2, #4
 8005b34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005b38:	e018      	b.n	8005b6c <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f867 	bl	8005c0e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f8dc 	bl	8005cfe <CDC_ProcessReception>
    break;
 8005b46:	e014      	b.n	8005b72 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005b48:	2100      	movs	r1, #0
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fece 	bl	80068ec <USBH_ClrFeature>
 8005b50:	4603      	mov	r3, r0
 8005b52:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8005b54:	7bbb      	ldrb	r3, [r7, #14]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10a      	bne.n	8005b70 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8005b62:	e005      	b.n	8005b70 <USBH_CDC_Process+0x120>

  default:
    break;
 8005b64:	bf00      	nop
 8005b66:	e004      	b.n	8005b72 <USBH_CDC_Process+0x122>
    break;
 8005b68:	bf00      	nop
 8005b6a:	e002      	b.n	8005b72 <USBH_CDC_Process+0x122>
    break;
 8005b6c:	bf00      	nop
 8005b6e:	e000      	b.n	8005b72 <USBH_CDC_Process+0x122>
    break;
 8005b70:	bf00      	nop

  }

  return status;
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b082      	sub	sp, #8
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	22a1      	movs	r2, #161	; 0xa1
 8005ba0:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2221      	movs	r2, #33	; 0x21
 8005ba6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2207      	movs	r2, #7
 8005bb8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2207      	movs	r2, #7
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f001 f873 	bl	8006cac <USBH_CtlReq>
 8005bc6:	4603      	mov	r3, r0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2221      	movs	r2, #33	; 0x21
 8005bde:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2220      	movs	r2, #32
 8005be4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2207      	movs	r2, #7
 8005bf6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2207      	movs	r2, #7
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f001 f854 	bl	8006cac <USBH_CtlReq>
 8005c04:	4603      	mov	r3, r0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b086      	sub	sp, #24
 8005c12:	af02      	add	r7, sp, #8
 8005c14:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c20:	2300      	movs	r3, #0
 8005c22:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d002      	beq.n	8005c34 <CDC_ProcessTransmission+0x26>
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d025      	beq.n	8005c7e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8005c32:	e060      	b.n	8005cf6 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	8b12      	ldrh	r2, [r2, #24]
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d90c      	bls.n	8005c5a <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	69d9      	ldr	r1, [r3, #28]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8b1a      	ldrh	r2, [r3, #24]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	7b58      	ldrb	r0, [r3, #13]
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	4603      	mov	r3, r0
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f001 fa3b 	bl	80070ce <USBH_BulkSendData>
 8005c58:	e00c      	b.n	8005c74 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	7b58      	ldrb	r0, [r3, #13]
 8005c68:	2301      	movs	r3, #1
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f001 fa2d 	bl	80070ce <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005c7c:	e03b      	b.n	8005cf6 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	7b5b      	ldrb	r3, [r3, #13]
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f001 fd49 	bl	800771c <USBH_LL_GetURBState>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8005c8e:	7afb      	ldrb	r3, [r7, #11]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d128      	bne.n	8005ce6 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	8b12      	ldrh	r2, [r2, #24]
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d90e      	bls.n	8005cbe <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	8b12      	ldrh	r2, [r2, #24]
 8005ca8:	1a9a      	subs	r2, r3, r2
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	8b12      	ldrh	r2, [r2, #24]
 8005cb6:	441a      	add	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	61da      	str	r2, [r3, #28]
 8005cbc:	e002      	b.n	8005cc4 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005cd4:	e00e      	b.n	8005cf4 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f868 	bl	8005db4 <USBH_CDC_TransmitCallback>
    break;
 8005ce4:	e006      	b.n	8005cf4 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005ce6:	7afb      	ldrb	r3, [r7, #11]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d103      	bne.n	8005cf4 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005cf4:	bf00      	nop
  }
}
 8005cf6:	bf00      	nop
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b086      	sub	sp, #24
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d002      	beq.n	8005d24 <CDC_ProcessReception+0x26>
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d00e      	beq.n	8005d40 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8005d22:	e043      	b.n	8005dac <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	6a19      	ldr	r1, [r3, #32]
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	8b5a      	ldrh	r2, [r3, #26]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	7b1b      	ldrb	r3, [r3, #12]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 f9f1 	bl	8007118 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2204      	movs	r2, #4
 8005d3a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005d3e:	e035      	b.n	8005dac <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	7b1b      	ldrb	r3, [r3, #12]
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f001 fce8 	bl	800771c <USBH_LL_GetURBState>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005d50:	7cfb      	ldrb	r3, [r7, #19]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d129      	bne.n	8005daa <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	7b1b      	ldrb	r3, [r3, #12]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f001 fc4b 	bl	80075f8 <USBH_LL_GetLastXferSize>
 8005d62:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d016      	beq.n	8005d9c <CDC_ProcessReception+0x9e>
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	8b5b      	ldrh	r3, [r3, #26]
 8005d72:	461a      	mov	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d910      	bls.n	8005d9c <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	1ad2      	subs	r2, r2, r3
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	6a1a      	ldr	r2, [r3, #32]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	441a      	add	r2, r3
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2203      	movs	r2, #3
 8005d96:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005d9a:	e006      	b.n	8005daa <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f80f 	bl	8005dc8 <USBH_CDC_ReceiveCallback>
    break;
 8005daa:	bf00      	nop
  }
}
 8005dac:	bf00      	nop
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]

}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]

}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]

}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005e04:	2302      	movs	r3, #2
 8005e06:	e019      	b.n	8005e3c <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	79fa      	ldrb	r2, [r7, #7]
 8005e0c:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 f80f 	bl	8005e44 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f001 fb2d 	bl	8007494 <USBH_LL_Init>

  return USBH_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005e50:	e008      	b.n	8005e64 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	32e0      	adds	r2, #224	; 0xe0
 8005e58:	2100      	movs	r1, #0
 8005e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3301      	adds	r3, #1
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b0e      	cmp	r3, #14
 8005e68:	d9f3      	bls.n	8005e52 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	e009      	b.n	8005e84 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3301      	adds	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e8a:	d3f1      	bcc.n	8005e70 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2240      	movs	r2, #64	; 0x40
 8005eb0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b085      	sub	sp, #20
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d017      	beq.n	8005f1a <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10f      	bne.n	8005f14 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005efa:	1c59      	adds	r1, r3, #1
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	33dc      	adds	r3, #220	; 0xdc
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	73fb      	strb	r3, [r7, #15]
 8005f12:	e004      	b.n	8005f1e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005f14:	2302      	movs	r3, #2
 8005f16:	73fb      	strb	r3, [r7, #15]
 8005f18:	e001      	b.n	8005f1e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	460b      	mov	r3, r1
 8005f36:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005f42:	78fa      	ldrb	r2, [r7, #3]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d204      	bcs.n	8005f52 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	78fa      	ldrb	r2, [r7, #3]
 8005f4c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005f50:	e001      	b.n	8005f56 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005f52:	2302      	movs	r3, #2
 8005f54:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	4608      	mov	r0, r1
 8005f6e:	4611      	mov	r1, r2
 8005f70:	461a      	mov	r2, r3
 8005f72:	4603      	mov	r3, r0
 8005f74:	70fb      	strb	r3, [r7, #3]
 8005f76:	460b      	mov	r3, r1
 8005f78:	70bb      	strb	r3, [r7, #2]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005f8c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005f8e:	e025      	b.n	8005fdc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
 8005f92:	221a      	movs	r2, #26
 8005f94:	fb02 f303 	mul.w	r3, r2, r3
 8005f98:	3308      	adds	r3, #8
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3302      	adds	r3, #2
 8005fa0:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	795b      	ldrb	r3, [r3, #5]
 8005fa6:	78fa      	ldrb	r2, [r7, #3]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d002      	beq.n	8005fb2 <USBH_FindInterface+0x4e>
 8005fac:	78fb      	ldrb	r3, [r7, #3]
 8005fae:	2bff      	cmp	r3, #255	; 0xff
 8005fb0:	d111      	bne.n	8005fd6 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005fb6:	78ba      	ldrb	r2, [r7, #2]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d002      	beq.n	8005fc2 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005fbc:	78bb      	ldrb	r3, [r7, #2]
 8005fbe:	2bff      	cmp	r3, #255	; 0xff
 8005fc0:	d109      	bne.n	8005fd6 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005fc6:	787a      	ldrb	r2, [r7, #1]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d002      	beq.n	8005fd2 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005fcc:	787b      	ldrb	r3, [r7, #1]
 8005fce:	2bff      	cmp	r3, #255	; 0xff
 8005fd0:	d101      	bne.n	8005fd6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005fd2:	7dfb      	ldrb	r3, [r7, #23]
 8005fd4:	e006      	b.n	8005fe4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005fd6:	7dfb      	ldrb	r3, [r7, #23]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d9d6      	bls.n	8005f90 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005fe2:	23ff      	movs	r3, #255	; 0xff
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 fa87 	bl	800750c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005ffe:	2101      	movs	r1, #1
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 fb9e 	bl	8007742 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af04      	add	r7, sp, #16
 8006016:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006018:	2302      	movs	r3, #2
 800601a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 faec 	bl	80065fe <USBH_IsPortEnabled>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10c      	bne.n	8006046 <USBH_Process+0x36>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d007      	beq.n	8006046 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b03      	cmp	r3, #3
 800603e:	d002      	beq.n	8006046 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2203      	movs	r2, #3
 8006044:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b0b      	cmp	r3, #11
 800604e:	f200 814c 	bhi.w	80062ea <USBH_Process+0x2da>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <USBH_Process+0x48>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	08006089 	.word	0x08006089
 800605c:	080060ab 	.word	0x080060ab
 8006060:	080060bf 	.word	0x080060bf
 8006064:	080062c5 	.word	0x080062c5
 8006068:	080062eb 	.word	0x080062eb
 800606c:	0800614d 	.word	0x0800614d
 8006070:	0800627b 	.word	0x0800627b
 8006074:	0800617d 	.word	0x0800617d
 8006078:	0800619d 	.word	0x0800619d
 800607c:	080061bd 	.word	0x080061bd
 8006080:	080061eb 	.word	0x080061eb
 8006084:	080062ad 	.word	0x080062ad
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 812c 	beq.w	80062ee <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800609c:	20c8      	movs	r0, #200	; 0xc8
 800609e:	f001 fb9a 	bl	80077d6 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f001 fa8d 	bl	80075c2 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80060a8:	e121      	b.n	80062ee <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	f040 811e 	bne.w	80062f2 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	701a      	strb	r2, [r3, #0]
    }
    break;
 80060bc:	e119      	b.n	80062f2 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 80060be:	2064      	movs	r0, #100	; 0x64
 80060c0:	f001 fb89 	bl	80077d6 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 fa57 	bl	8007578 <USBH_LL_GetSpeed>
 80060ca:	4603      	mov	r3, r0
 80060cc:	461a      	mov	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2205      	movs	r2, #5
 80060d8:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80060da:	2100      	movs	r1, #0
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 f868 	bl	80071b2 <USBH_AllocPipe>
 80060e2:	4603      	mov	r3, r0
 80060e4:	461a      	mov	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80060ea:	2180      	movs	r1, #128	; 0x80
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 f860 	bl	80071b2 <USBH_AllocPipe>
 80060f2:	4603      	mov	r3, r0
 80060f4:	461a      	mov	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	7919      	ldrb	r1, [r3, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800610e:	b292      	uxth	r2, r2
 8006110:	9202      	str	r2, [sp, #8]
 8006112:	2200      	movs	r2, #0
 8006114:	9201      	str	r2, [sp, #4]
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	4603      	mov	r3, r0
 800611a:	2280      	movs	r2, #128	; 0x80
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f001 f819 	bl	8007154 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	7959      	ldrb	r1, [r3, #5]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006136:	b292      	uxth	r2, r2
 8006138:	9202      	str	r2, [sp, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	9201      	str	r2, [sp, #4]
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	4603      	mov	r3, r0
 8006142:	2200      	movs	r2, #0
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 f805 	bl	8007154 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800614a:	e0e3      	b.n	8006314 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f8e7 	bl	8006320 <USBH_HandleEnum>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	f040 80ce 	bne.w	80062f6 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006168:	2b01      	cmp	r3, #1
 800616a:	d103      	bne.n	8006174 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2208      	movs	r2, #8
 8006170:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006172:	e0c0      	b.n	80062f6 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2207      	movs	r2, #7
 8006178:	701a      	strb	r2, [r3, #0]
    break;
 800617a:	e0bc      	b.n	80062f6 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 80b9 	beq.w	80062fa <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800618e:	2101      	movs	r1, #1
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2208      	movs	r2, #8
 8006198:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800619a:	e0ae      	b.n	80062fa <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	4619      	mov	r1, r3
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fb59 	bl	800685e <USBH_SetCfg>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f040 80a5 	bne.w	80062fe <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2209      	movs	r2, #9
 80061b8:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80061ba:	e0a0      	b.n	80062fe <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 80061c2:	f003 0320 	and.w	r3, r3, #32
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00b      	beq.n	80061e2 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80061ca:	2101      	movs	r1, #1
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fb69 	bl	80068a4 <USBH_SetFeature>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f040 8094 	bne.w	8006302 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	220a      	movs	r2, #10
 80061de:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80061e0:	e08f      	b.n	8006302 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	220a      	movs	r2, #10
 80061e6:	701a      	strb	r2, [r3, #0]
    break;
 80061e8:	e08b      	b.n	8006302 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 8088 	beq.w	8006306 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]
 8006202:	e017      	b.n	8006234 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	33dc      	adds	r3, #220	; 0xdc
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	791a      	ldrb	r2, [r3, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006218:	429a      	cmp	r2, r3
 800621a:	d108      	bne.n	800622e <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 800621c:	7bfb      	ldrb	r3, [r7, #15]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	33dc      	adds	r3, #220	; 0xdc
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800622e:	7bfb      	ldrb	r3, [r7, #15]
 8006230:	3301      	adds	r3, #1
 8006232:	73fb      	strb	r3, [r7, #15]
 8006234:	7bfb      	ldrb	r3, [r7, #15]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0e4      	beq.n	8006204 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006240:	2b00      	cmp	r3, #0
 8006242:	d016      	beq.n	8006272 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	4798      	blx	r3
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d109      	bne.n	800626a <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2206      	movs	r2, #6
 800625a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006262:	2103      	movs	r1, #3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006268:	e04d      	b.n	8006306 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	220d      	movs	r2, #13
 800626e:	701a      	strb	r2, [r3, #0]
    break;
 8006270:	e049      	b.n	8006306 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	220d      	movs	r2, #13
 8006276:	701a      	strb	r2, [r3, #0]
    break;
 8006278:	e045      	b.n	8006306 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00f      	beq.n	80062a4 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	4798      	blx	r3
 8006290:	4603      	mov	r3, r0
 8006292:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006294:	7bbb      	ldrb	r3, [r7, #14]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d136      	bne.n	800630a <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	220b      	movs	r2, #11
 80062a0:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 80062a2:	e032      	b.n	800630a <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	220d      	movs	r2, #13
 80062a8:	701a      	strb	r2, [r3, #0]
    break;
 80062aa:	e02e      	b.n	800630a <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d02b      	beq.n	800630e <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	4798      	blx	r3
    }
    break;
 80062c2:	e024      	b.n	800630e <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7ff fdbd 	bl	8005e44 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d01e      	beq.n	8006312 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80062e8:	e013      	b.n	8006312 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 80062ea:	bf00      	nop
 80062ec:	e012      	b.n	8006314 <USBH_Process+0x304>
    break;
 80062ee:	bf00      	nop
 80062f0:	e010      	b.n	8006314 <USBH_Process+0x304>
    break;
 80062f2:	bf00      	nop
 80062f4:	e00e      	b.n	8006314 <USBH_Process+0x304>
    break;
 80062f6:	bf00      	nop
 80062f8:	e00c      	b.n	8006314 <USBH_Process+0x304>
    break;
 80062fa:	bf00      	nop
 80062fc:	e00a      	b.n	8006314 <USBH_Process+0x304>
    break;
 80062fe:	bf00      	nop
 8006300:	e008      	b.n	8006314 <USBH_Process+0x304>
    break;
 8006302:	bf00      	nop
 8006304:	e006      	b.n	8006314 <USBH_Process+0x304>
    break;
 8006306:	bf00      	nop
 8006308:	e004      	b.n	8006314 <USBH_Process+0x304>
    break;
 800630a:	bf00      	nop
 800630c:	e002      	b.n	8006314 <USBH_Process+0x304>
    break;
 800630e:	bf00      	nop
 8006310:	e000      	b.n	8006314 <USBH_Process+0x304>
    break;
 8006312:	bf00      	nop
  }
 return USBH_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop

08006320 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af04      	add	r7, sp, #16
 8006326:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006328:	2301      	movs	r3, #1
 800632a:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	785b      	ldrb	r3, [r3, #1]
 8006330:	2b07      	cmp	r3, #7
 8006332:	f200 80f8 	bhi.w	8006526 <USBH_HandleEnum+0x206>
 8006336:	a201      	add	r2, pc, #4	; (adr r2, 800633c <USBH_HandleEnum+0x1c>)
 8006338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633c:	0800635d 	.word	0x0800635d
 8006340:	080063cf 	.word	0x080063cf
 8006344:	080063e7 	.word	0x080063e7
 8006348:	0800645d 	.word	0x0800645d
 800634c:	08006473 	.word	0x08006473
 8006350:	0800648f 	.word	0x0800648f
 8006354:	080064c3 	.word	0x080064c3
 8006358:	080064f7 	.word	0x080064f7
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800635c:	2108      	movs	r1, #8
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f9ad 	bl	80066be <USBH_Get_DevDesc>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	f040 80df 	bne.w	800652a <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	7919      	ldrb	r1, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006390:	b292      	uxth	r2, r2
 8006392:	9202      	str	r2, [sp, #8]
 8006394:	2200      	movs	r2, #0
 8006396:	9201      	str	r2, [sp, #4]
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	4603      	mov	r3, r0
 800639c:	2280      	movs	r2, #128	; 0x80
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fed8 	bl	8007154 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	7959      	ldrb	r1, [r3, #5]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80063b8:	b292      	uxth	r2, r2
 80063ba:	9202      	str	r2, [sp, #8]
 80063bc:	2200      	movs	r2, #0
 80063be:	9201      	str	r2, [sp, #4]
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	4603      	mov	r3, r0
 80063c4:	2200      	movs	r2, #0
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fec4 	bl	8007154 <USBH_OpenPipe>

    }
    break;
 80063cc:	e0ad      	b.n	800652a <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80063ce:	2112      	movs	r1, #18
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f974 	bl	80066be <USBH_Get_DevDesc>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f040 80a8 	bne.w	800652e <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	705a      	strb	r2, [r3, #1]

    }
    break;
 80063e4:	e0a3      	b.n	800652e <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80063e6:	2101      	movs	r1, #1
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fa14 	bl	8006816 <USBH_SetAddress>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f040 809e 	bne.w	8006532 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 80063f6:	2002      	movs	r0, #2
 80063f8:	f001 f9ed 	bl	80077d6 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2203      	movs	r2, #3
 8006408:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	7919      	ldrb	r1, [r3, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800641e:	b292      	uxth	r2, r2
 8006420:	9202      	str	r2, [sp, #8]
 8006422:	2200      	movs	r2, #0
 8006424:	9201      	str	r2, [sp, #4]
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	4603      	mov	r3, r0
 800642a:	2280      	movs	r2, #128	; 0x80
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fe91 	bl	8007154 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	7959      	ldrb	r1, [r3, #5]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006446:	b292      	uxth	r2, r2
 8006448:	9202      	str	r2, [sp, #8]
 800644a:	2200      	movs	r2, #0
 800644c:	9201      	str	r2, [sp, #4]
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	4603      	mov	r3, r0
 8006452:	2200      	movs	r2, #0
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fe7d 	bl	8007154 <USBH_OpenPipe>
    }
    break;
 800645a:	e06a      	b.n	8006532 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800645c:	2109      	movs	r1, #9
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f955 	bl	800670e <USBH_Get_CfgDesc>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d165      	bne.n	8006536 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2204      	movs	r2, #4
 800646e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006470:	e061      	b.n	8006536 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f947 	bl	800670e <USBH_Get_CfgDesc>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d159      	bne.n	800653a <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2205      	movs	r2, #5
 800648a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800648c:	e055      	b.n	800653a <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006494:	2b00      	cmp	r3, #0
 8006496:	d010      	beq.n	80064ba <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80064a4:	23ff      	movs	r3, #255	; 0xff
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f955 	bl	8006756 <USBH_Get_StringDesc>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d145      	bne.n	800653e <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2206      	movs	r2, #6
 80064b6:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80064b8:	e041      	b.n	800653e <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2206      	movs	r2, #6
 80064be:	705a      	strb	r2, [r3, #1]
    break;
 80064c0:	e03d      	b.n	800653e <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d010      	beq.n	80064ee <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80064d8:	23ff      	movs	r3, #255	; 0xff
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f93b 	bl	8006756 <USBH_Get_StringDesc>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d12d      	bne.n	8006542 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2207      	movs	r2, #7
 80064ea:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80064ec:	e029      	b.n	8006542 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2207      	movs	r2, #7
 80064f2:	705a      	strb	r2, [r3, #1]
    break;
 80064f4:	e025      	b.n	8006542 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00f      	beq.n	8006520 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800650c:	23ff      	movs	r3, #255	; 0xff
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f921 	bl	8006756 <USBH_Get_StringDesc>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d115      	bne.n	8006546 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800651e:	e012      	b.n	8006546 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	73fb      	strb	r3, [r7, #15]
    break;
 8006524:	e00f      	b.n	8006546 <USBH_HandleEnum+0x226>

  default:
    break;
 8006526:	bf00      	nop
 8006528:	e00e      	b.n	8006548 <USBH_HandleEnum+0x228>
    break;
 800652a:	bf00      	nop
 800652c:	e00c      	b.n	8006548 <USBH_HandleEnum+0x228>
    break;
 800652e:	bf00      	nop
 8006530:	e00a      	b.n	8006548 <USBH_HandleEnum+0x228>
    break;
 8006532:	bf00      	nop
 8006534:	e008      	b.n	8006548 <USBH_HandleEnum+0x228>
    break;
 8006536:	bf00      	nop
 8006538:	e006      	b.n	8006548 <USBH_HandleEnum+0x228>
    break;
 800653a:	bf00      	nop
 800653c:	e004      	b.n	8006548 <USBH_HandleEnum+0x228>
    break;
 800653e:	bf00      	nop
 8006540:	e002      	b.n	8006548 <USBH_HandleEnum+0x228>
    break;
 8006542:	bf00      	nop
 8006544:	e000      	b.n	8006548 <USBH_HandleEnum+0x228>
    break;
 8006546:	bf00      	nop
  }
  return Status;
 8006548:	7bfb      	ldrb	r3, [r7, #15]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop

08006554 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f804 	bl	8006596 <USBH_HandleSof>
}
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b082      	sub	sp, #8
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b0b      	cmp	r3, #11
 80065a6:	d10a      	bne.n	80065be <USBH_HandleSof+0x28>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d005      	beq.n	80065be <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	4798      	blx	r3
  }
}
 80065be:	bf00      	nop
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b083      	sub	sp, #12
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80065d6:	bf00      	nop
}
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80065f2:	bf00      	nop
}
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10f      	bne.n	800664a <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00e      	beq.n	800665a <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006642:	2104      	movs	r1, #4
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	4798      	blx	r3
 8006648:	e007      	b.n	800665a <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006650:	2b01      	cmp	r3, #1
 8006652:	d102      	bne.n	800665a <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 ff68 	bl	8007542 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	791b      	ldrb	r3, [r3, #4]
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fdb8 	bl	80071ee <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	795b      	ldrb	r3, [r3, #5]
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fdb2 	bl	80071ee <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80066a2:	2105      	movs	r1, #5
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 ff2f 	bl	800750c <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2203      	movs	r2, #3
 80066b2:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b086      	sub	sp, #24
 80066c2:	af02      	add	r7, sp, #8
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	460b      	mov	r3, r1
 80066c8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	4613      	mov	r3, r2
 80066d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066dc:	2100      	movs	r1, #0
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f864 	bl	80067ac <USBH_GetDescriptor>
 80066e4:	4603      	mov	r3, r0
 80066e6:	73fb      	strb	r3, [r7, #15]
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10a      	bne.n	8006704 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f203 3022 	addw	r0, r3, #802	; 0x322
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80066fa:	78fa      	ldrb	r2, [r7, #3]
 80066fc:	b292      	uxth	r2, r2
 80066fe:	4619      	mov	r1, r3
 8006700:	f000 f918 	bl	8006934 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8006704:	7bfb      	ldrb	r3, [r7, #15]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800670e:	b580      	push	{r7, lr}
 8006710:	b086      	sub	sp, #24
 8006712:	af02      	add	r7, sp, #8
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	460b      	mov	r3, r1
 8006718:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	331c      	adds	r3, #28
 800671e:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8006720:	887b      	ldrh	r3, [r7, #2]
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800672a:	2100      	movs	r1, #0
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f83d 	bl	80067ac <USBH_GetDescriptor>
 8006732:	4603      	mov	r3, r0
 8006734:	72fb      	strb	r3, [r7, #11]
 8006736:	7afb      	ldrb	r3, [r7, #11]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d107      	bne.n	800674c <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006742:	887a      	ldrh	r2, [r7, #2]
 8006744:	68f9      	ldr	r1, [r7, #12]
 8006746:	4618      	mov	r0, r3
 8006748:	f000 f964 	bl	8006a14 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800674c:	7afb      	ldrb	r3, [r7, #11]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b088      	sub	sp, #32
 800675a:	af02      	add	r7, sp, #8
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	461a      	mov	r2, r3
 8006762:	460b      	mov	r3, r1
 8006764:	72fb      	strb	r3, [r7, #11]
 8006766:	4613      	mov	r3, r2
 8006768:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800676a:	7afb      	ldrb	r3, [r7, #11]
 800676c:	b29b      	uxth	r3, r3
 800676e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006772:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800677a:	893b      	ldrh	r3, [r7, #8]
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	460b      	mov	r3, r1
 8006780:	2100      	movs	r1, #0
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f000 f812 	bl	80067ac <USBH_GetDescriptor>
 8006788:	4603      	mov	r3, r0
 800678a:	75fb      	strb	r3, [r7, #23]
 800678c:	7dfb      	ldrb	r3, [r7, #23]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d107      	bne.n	80067a2 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006798:	893a      	ldrh	r2, [r7, #8]
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fa37 	bl	8006c10 <USBH_ParseStringDesc>
  }
  return status;
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	607b      	str	r3, [r7, #4]
 80067b6:	460b      	mov	r3, r1
 80067b8:	72fb      	strb	r3, [r7, #11]
 80067ba:	4613      	mov	r3, r2
 80067bc:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	789b      	ldrb	r3, [r3, #2]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d11c      	bne.n	8006800 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80067c6:	7afb      	ldrb	r3, [r7, #11]
 80067c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2206      	movs	r2, #6
 80067d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	893a      	ldrh	r2, [r7, #8]
 80067dc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80067de:	893b      	ldrh	r3, [r7, #8]
 80067e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80067e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067e8:	d104      	bne.n	80067f4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f240 4209 	movw	r2, #1033	; 0x409
 80067f0:	829a      	strh	r2, [r3, #20]
 80067f2:	e002      	b.n	80067fa <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8b3a      	ldrh	r2, [r7, #24]
 80067fe:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8006800:	8b3b      	ldrh	r3, [r7, #24]
 8006802:	461a      	mov	r2, r3
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 fa50 	bl	8006cac <USBH_CtlReq>
 800680c:	4603      	mov	r3, r0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	460b      	mov	r3, r1
 8006820:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	789b      	ldrb	r3, [r3, #2]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d10f      	bne.n	800684a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2205      	movs	r2, #5
 8006834:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	b29a      	uxth	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800684a:	2200      	movs	r2, #0
 800684c:	2100      	movs	r1, #0
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fa2c 	bl	8006cac <USBH_CtlReq>
 8006854:	4603      	mov	r3, r0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b082      	sub	sp, #8
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	460b      	mov	r3, r1
 8006868:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	789b      	ldrb	r3, [r3, #2]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d10e      	bne.n	8006890 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2209      	movs	r2, #9
 800687c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	887a      	ldrh	r2, [r7, #2]
 8006882:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006890:	2200      	movs	r2, #0
 8006892:	2100      	movs	r1, #0
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fa09 	bl	8006cac <USBH_CtlReq>
 800689a:	4603      	mov	r3, r0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	460b      	mov	r3, r1
 80068ae:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	789b      	ldrb	r3, [r3, #2]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d10f      	bne.n	80068d8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2203      	movs	r2, #3
 80068c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80068d8:	2200      	movs	r2, #0
 80068da:	2100      	movs	r1, #0
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f9e5 	bl	8006cac <USBH_CtlReq>
 80068e2:	4603      	mov	r3, r0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	789b      	ldrb	r3, [r3, #2]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d10f      	bne.n	8006920 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006912:	78fb      	ldrb	r3, [r7, #3]
 8006914:	b29a      	uxth	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8006920:	2200      	movs	r2, #0
 8006922:	2100      	movs	r1, #0
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f9c1 	bl	8006cac <USBH_CtlReq>
 800692a:	4603      	mov	r3, r0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	4613      	mov	r3, r2
 8006940:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	781a      	ldrb	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	785a      	ldrb	r2, [r3, #1]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	3302      	adds	r3, #2
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	b29a      	uxth	r2, r3
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	3303      	adds	r3, #3
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	b29b      	uxth	r3, r3
 8006962:	021b      	lsls	r3, r3, #8
 8006964:	b29b      	uxth	r3, r3
 8006966:	4313      	orrs	r3, r2
 8006968:	b29a      	uxth	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	791a      	ldrb	r2, [r3, #4]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	795a      	ldrb	r2, [r3, #5]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	799a      	ldrb	r2, [r3, #6]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	79da      	ldrb	r2, [r3, #7]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800698e:	88fb      	ldrh	r3, [r7, #6]
 8006990:	2b08      	cmp	r3, #8
 8006992:	d939      	bls.n	8006a08 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	3308      	adds	r3, #8
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	b29a      	uxth	r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	3309      	adds	r3, #9
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	021b      	lsls	r3, r3, #8
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	4313      	orrs	r3, r2
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	330a      	adds	r3, #10
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	330b      	adds	r3, #11
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	021b      	lsls	r3, r3, #8
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	4313      	orrs	r3, r2
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	330c      	adds	r3, #12
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	330d      	adds	r3, #13
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	b29b      	uxth	r3, r3
 80069e0:	4313      	orrs	r3, r2
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	7b9a      	ldrb	r2, [r3, #14]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	7bda      	ldrb	r2, [r3, #15]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	7c1a      	ldrb	r2, [r3, #16]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	7c5a      	ldrb	r2, [r3, #17]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	745a      	strb	r2, [r3, #17]
  }
}
 8006a08:	bf00      	nop
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08a      	sub	sp, #40	; 0x28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	781a      	ldrb	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	785a      	ldrb	r2, [r3, #1]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	3302      	adds	r3, #2
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	3303      	adds	r3, #3
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	021b      	lsls	r3, r3, #8
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	791a      	ldrb	r2, [r3, #4]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	795a      	ldrb	r2, [r3, #5]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	799a      	ldrb	r2, [r3, #6]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	79da      	ldrb	r2, [r3, #7]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	7a1a      	ldrb	r2, [r3, #8]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006a8a:	88fb      	ldrh	r3, [r7, #6]
 8006a8c:	2b09      	cmp	r3, #9
 8006a8e:	d95f      	bls.n	8006b50 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006a90:	2309      	movs	r3, #9
 8006a92:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006a98:	e051      	b.n	8006b3e <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006a9a:	f107 0316 	add.w	r3, r7, #22
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aa2:	f000 f8e8 	bl	8006c76 <USBH_GetNextDesc>
 8006aa6:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aaa:	785b      	ldrb	r3, [r3, #1]
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d146      	bne.n	8006b3e <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006ab0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ab4:	221a      	movs	r2, #26
 8006ab6:	fb02 f303 	mul.w	r3, r2, r3
 8006aba:	3308      	adds	r3, #8
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	3302      	adds	r3, #2
 8006ac2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8006ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ac6:	69f8      	ldr	r0, [r7, #28]
 8006ac8:	f000 f846 	bl	8006b58 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006ad6:	e022      	b.n	8006b1e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8006ad8:	f107 0316 	add.w	r3, r7, #22
 8006adc:	4619      	mov	r1, r3
 8006ade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ae0:	f000 f8c9 	bl	8006c76 <USBH_GetNextDesc>
 8006ae4:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	785b      	ldrb	r3, [r3, #1]
 8006aea:	2b05      	cmp	r3, #5
 8006aec:	d117      	bne.n	8006b1e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006aee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006af2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006af6:	3201      	adds	r2, #1
 8006af8:	00d2      	lsls	r2, r2, #3
 8006afa:	211a      	movs	r1, #26
 8006afc:	fb01 f303 	mul.w	r3, r1, r3
 8006b00:	4413      	add	r3, r2
 8006b02:	3308      	adds	r3, #8
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4413      	add	r3, r2
 8006b08:	3304      	adds	r3, #4
 8006b0a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8006b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b0e:	69b8      	ldr	r0, [r7, #24]
 8006b10:	f000 f851 	bl	8006bb6 <USBH_ParseEPDesc>
            ep_ix++;
 8006b14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006b18:	3301      	adds	r3, #1
 8006b1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	791b      	ldrb	r3, [r3, #4]
 8006b22:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d204      	bcs.n	8006b34 <USBH_ParseCfgDesc+0x120>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	885a      	ldrh	r2, [r3, #2]
 8006b2e:	8afb      	ldrh	r3, [r7, #22]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d8d1      	bhi.n	8006ad8 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006b34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b38:	3301      	adds	r3, #1
 8006b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006b3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d804      	bhi.n	8006b50 <USBH_ParseCfgDesc+0x13c>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	885a      	ldrh	r2, [r3, #2]
 8006b4a:	8afb      	ldrh	r3, [r7, #22]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d8a4      	bhi.n	8006a9a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006b50:	bf00      	nop
 8006b52:	3728      	adds	r7, #40	; 0x28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781a      	ldrb	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	785a      	ldrb	r2, [r3, #1]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	789a      	ldrb	r2, [r3, #2]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	78da      	ldrb	r2, [r3, #3]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	791a      	ldrb	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	795a      	ldrb	r2, [r3, #5]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	799a      	ldrb	r2, [r3, #6]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	79da      	ldrb	r2, [r3, #7]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	7a1a      	ldrb	r2, [r3, #8]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	721a      	strb	r2, [r3, #8]
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781a      	ldrb	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	785a      	ldrb	r2, [r3, #1]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	789a      	ldrb	r2, [r3, #2]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	78da      	ldrb	r2, [r3, #3]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	3304      	adds	r3, #4
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	3305      	adds	r3, #5
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	021b      	lsls	r3, r3, #8
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	799a      	ldrb	r2, [r3, #6]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	719a      	strb	r2, [r3, #6]
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3301      	adds	r3, #1
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d120      	bne.n	8006c6a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	1e9a      	subs	r2, r3, #2
 8006c2e:	88fb      	ldrh	r3, [r7, #6]
 8006c30:	4293      	cmp	r3, r2
 8006c32:	bf28      	it	cs
 8006c34:	4613      	movcs	r3, r2
 8006c36:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3302      	adds	r3, #2
 8006c3c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006c3e:	2300      	movs	r3, #0
 8006c40:	82fb      	strh	r3, [r7, #22]
 8006c42:	e00b      	b.n	8006c5c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006c44:	8afb      	ldrh	r3, [r7, #22]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	4413      	add	r3, r2
 8006c4a:	781a      	ldrb	r2, [r3, #0]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	3301      	adds	r3, #1
 8006c54:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006c56:	8afb      	ldrh	r3, [r7, #22]
 8006c58:	3302      	adds	r3, #2
 8006c5a:	82fb      	strh	r3, [r7, #22]
 8006c5c:	8afa      	ldrh	r2, [r7, #22]
 8006c5e:	8abb      	ldrh	r3, [r7, #20]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d3ef      	bcc.n	8006c44 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2200      	movs	r2, #0
 8006c68:	701a      	strb	r2, [r3, #0]
  }
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b085      	sub	sp, #20
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	881a      	ldrh	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	4413      	add	r3, r2
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	789b      	ldrb	r3, [r3, #2]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d002      	beq.n	8006ccc <USBH_CtlReq+0x20>
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d00f      	beq.n	8006cea <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8006cca:	e034      	b.n	8006d36 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	88fa      	ldrh	r2, [r7, #6]
 8006cd6:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	75fb      	strb	r3, [r7, #23]
    break;
 8006ce8:	e025      	b.n	8006d36 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 f828 	bl	8006d40 <USBH_HandleControl>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d108      	bne.n	8006d0c <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	75fb      	strb	r3, [r7, #23]
    break;
 8006d0a:	e013      	b.n	8006d34 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d108      	bne.n	8006d24 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	75fb      	strb	r3, [r7, #23]
    break;
 8006d22:	e007      	b.n	8006d34 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d104      	bne.n	8006d34 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006d30:	2302      	movs	r3, #2
 8006d32:	75fb      	strb	r3, [r7, #23]
    break;
 8006d34:	bf00      	nop
  }
  return status;
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af02      	add	r7, sp, #8
 8006d46:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7e1b      	ldrb	r3, [r3, #24]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	2b0a      	cmp	r3, #10
 8006d58:	f200 814c 	bhi.w	8006ff4 <USBH_HandleControl+0x2b4>
 8006d5c:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <USBH_HandleControl+0x24>)
 8006d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d62:	bf00      	nop
 8006d64:	08006d91 	.word	0x08006d91
 8006d68:	08006dab 	.word	0x08006dab
 8006d6c:	08006e15 	.word	0x08006e15
 8006d70:	08006e3b 	.word	0x08006e3b
 8006d74:	08006e73 	.word	0x08006e73
 8006d78:	08006e9f 	.word	0x08006e9f
 8006d7c:	08006ef1 	.word	0x08006ef1
 8006d80:	08006f13 	.word	0x08006f13
 8006d84:	08006f4f 	.word	0x08006f4f
 8006d88:	08006f77 	.word	0x08006f77
 8006d8c:	08006fb5 	.word	0x08006fb5
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f103 0110 	add.w	r1, r3, #16
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	795b      	ldrb	r3, [r3, #5]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f939 	bl	8007014 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2202      	movs	r2, #2
 8006da6:	761a      	strb	r2, [r3, #24]
    break;
 8006da8:	e12f      	b.n	800700a <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	795b      	ldrb	r3, [r3, #5]
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fcb3 	bl	800771c <USBH_LL_GetURBState>
 8006db6:	4603      	mov	r3, r0
 8006db8:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006dba:	7bbb      	ldrb	r3, [r7, #14]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d11e      	bne.n	8006dfe <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	7c1b      	ldrb	r3, [r3, #16]
 8006dc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006dc8:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	8adb      	ldrh	r3, [r3, #22]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006dd2:	7b7b      	ldrb	r3, [r7, #13]
 8006dd4:	2b80      	cmp	r3, #128	; 0x80
 8006dd6:	d103      	bne.n	8006de0 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2203      	movs	r2, #3
 8006ddc:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006dde:	e10b      	b.n	8006ff8 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2205      	movs	r2, #5
 8006de4:	761a      	strb	r2, [r3, #24]
    break;
 8006de6:	e107      	b.n	8006ff8 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8006de8:	7b7b      	ldrb	r3, [r7, #13]
 8006dea:	2b80      	cmp	r3, #128	; 0x80
 8006dec:	d103      	bne.n	8006df6 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2209      	movs	r2, #9
 8006df2:	761a      	strb	r2, [r3, #24]
    break;
 8006df4:	e100      	b.n	8006ff8 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2207      	movs	r2, #7
 8006dfa:	761a      	strb	r2, [r3, #24]
    break;
 8006dfc:	e0fc      	b.n	8006ff8 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	2b04      	cmp	r3, #4
 8006e02:	d003      	beq.n	8006e0c <USBH_HandleControl+0xcc>
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	f040 80f6 	bne.w	8006ff8 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	220b      	movs	r2, #11
 8006e10:	761a      	strb	r2, [r3, #24]
    break;
 8006e12:	e0f1      	b.n	8006ff8 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6899      	ldr	r1, [r3, #8]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	899a      	ldrh	r2, [r3, #12]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	791b      	ldrb	r3, [r3, #4]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f930 	bl	8007092 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2204      	movs	r2, #4
 8006e36:	761a      	strb	r2, [r3, #24]
    break;
 8006e38:	e0e7      	b.n	800700a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	791b      	ldrb	r3, [r3, #4]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fc6b 	bl	800771c <USBH_LL_GetURBState>
 8006e46:	4603      	mov	r3, r0
 8006e48:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d102      	bne.n	8006e56 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2209      	movs	r2, #9
 8006e54:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006e56:	7bbb      	ldrb	r3, [r7, #14]
 8006e58:	2b05      	cmp	r3, #5
 8006e5a:	d102      	bne.n	8006e62 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006e60:	e0cc      	b.n	8006ffc <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	f040 80c9 	bne.w	8006ffc <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	220b      	movs	r2, #11
 8006e6e:	761a      	strb	r2, [r3, #24]
    break;
 8006e70:	e0c4      	b.n	8006ffc <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6899      	ldr	r1, [r3, #8]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	899a      	ldrh	r2, [r3, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	7958      	ldrb	r0, [r3, #5]
 8006e7e:	2301      	movs	r3, #1
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	4603      	mov	r3, r0
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f8df 	bl	8007048 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2206      	movs	r2, #6
 8006e9a:	761a      	strb	r2, [r3, #24]
    break;
 8006e9c:	e0b5      	b.n	800700a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	795b      	ldrb	r3, [r3, #5]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fc39 	bl	800771c <USBH_LL_GetURBState>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006eae:	7bbb      	ldrb	r3, [r7, #14]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d103      	bne.n	8006ebc <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2207      	movs	r2, #7
 8006eb8:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006eba:	e0a1      	b.n	8007000 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	2b05      	cmp	r3, #5
 8006ec0:	d105      	bne.n	8006ece <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	220c      	movs	r2, #12
 8006ec6:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	73fb      	strb	r3, [r7, #15]
    break;
 8006ecc:	e098      	b.n	8007000 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006ece:	7bbb      	ldrb	r3, [r7, #14]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d103      	bne.n	8006edc <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2205      	movs	r2, #5
 8006ed8:	761a      	strb	r2, [r3, #24]
    break;
 8006eda:	e091      	b.n	8007000 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	f040 808e 	bne.w	8007000 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	220b      	movs	r2, #11
 8006ee8:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006eea:	2302      	movs	r3, #2
 8006eec:	73fb      	strb	r3, [r7, #15]
    break;
 8006eee:	e087      	b.n	8007000 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	791b      	ldrb	r3, [r3, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f8ca 	bl	8007092 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2208      	movs	r2, #8
 8006f0e:	761a      	strb	r2, [r3, #24]

    break;
 8006f10:	e07b      	b.n	800700a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	791b      	ldrb	r3, [r3, #4]
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fbff 	bl	800771c <USBH_LL_GetURBState>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d105      	bne.n	8006f34 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	220d      	movs	r2, #13
 8006f2c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006f32:	e067      	b.n	8007004 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8006f34:	7bbb      	ldrb	r3, [r7, #14]
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d103      	bne.n	8006f42 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	220b      	movs	r2, #11
 8006f3e:	761a      	strb	r2, [r3, #24]
    break;
 8006f40:	e060      	b.n	8007004 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8006f42:	7bbb      	ldrb	r3, [r7, #14]
 8006f44:	2b05      	cmp	r3, #5
 8006f46:	d15d      	bne.n	8007004 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f4c:	e05a      	b.n	8007004 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	795a      	ldrb	r2, [r3, #5]
 8006f52:	2301      	movs	r3, #1
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	4613      	mov	r3, r2
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f873 	bl	8007048 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	220a      	movs	r2, #10
 8006f72:	761a      	strb	r2, [r3, #24]
    break;
 8006f74:	e049      	b.n	800700a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	795b      	ldrb	r3, [r3, #5]
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fbcd 	bl	800771c <USBH_LL_GetURBState>
 8006f82:	4603      	mov	r3, r0
 8006f84:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006f86:	7bbb      	ldrb	r3, [r7, #14]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d105      	bne.n	8006f98 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	220d      	movs	r2, #13
 8006f94:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8006f96:	e037      	b.n	8007008 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d103      	bne.n	8006fa6 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2209      	movs	r2, #9
 8006fa2:	761a      	strb	r2, [r3, #24]
    break;
 8006fa4:	e030      	b.n	8007008 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	d12d      	bne.n	8007008 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	220b      	movs	r2, #11
 8006fb0:	761a      	strb	r2, [r3, #24]
    break;
 8006fb2:	e029      	b.n	8007008 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	7e5b      	ldrb	r3, [r3, #25]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	765a      	strb	r2, [r3, #25]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	7e5b      	ldrb	r3, [r3, #25]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d809      	bhi.n	8006fdc <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 faba 	bl	8007542 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006fda:	e016      	b.n	800700a <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006fe2:	2106      	movs	r1, #6
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006fee:	2302      	movs	r3, #2
 8006ff0:	73fb      	strb	r3, [r7, #15]
    break;
 8006ff2:	e00a      	b.n	800700a <USBH_HandleControl+0x2ca>

  default:
    break;
 8006ff4:	bf00      	nop
 8006ff6:	e008      	b.n	800700a <USBH_HandleControl+0x2ca>
    break;
 8006ff8:	bf00      	nop
 8006ffa:	e006      	b.n	800700a <USBH_HandleControl+0x2ca>
    break;
 8006ffc:	bf00      	nop
 8006ffe:	e004      	b.n	800700a <USBH_HandleControl+0x2ca>
    break;
 8007000:	bf00      	nop
 8007002:	e002      	b.n	800700a <USBH_HandleControl+0x2ca>
    break;
 8007004:	bf00      	nop
 8007006:	e000      	b.n	800700a <USBH_HandleControl+0x2ca>
    break;
 8007008:	bf00      	nop
  }
  return status;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b088      	sub	sp, #32
 8007018:	af04      	add	r7, sp, #16
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	4613      	mov	r3, r2
 8007020:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007022:	79f9      	ldrb	r1, [r7, #7]
 8007024:	2300      	movs	r3, #0
 8007026:	9303      	str	r3, [sp, #12]
 8007028:	2308      	movs	r3, #8
 800702a:	9302      	str	r3, [sp, #8]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	9301      	str	r3, [sp, #4]
 8007030:	2300      	movs	r3, #0
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	2300      	movs	r3, #0
 8007036:	2200      	movs	r2, #0
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 fb3e 	bl	80076ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b088      	sub	sp, #32
 800704c:	af04      	add	r7, sp, #16
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	4611      	mov	r1, r2
 8007054:	461a      	mov	r2, r3
 8007056:	460b      	mov	r3, r1
 8007058:	80fb      	strh	r3, [r7, #6]
 800705a:	4613      	mov	r3, r2
 800705c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800706c:	7979      	ldrb	r1, [r7, #5]
 800706e:	7e3b      	ldrb	r3, [r7, #24]
 8007070:	9303      	str	r3, [sp, #12]
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	9302      	str	r3, [sp, #8]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	2301      	movs	r3, #1
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	2300      	movs	r3, #0
 8007080:	2200      	movs	r2, #0
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 fb19 	bl	80076ba <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b088      	sub	sp, #32
 8007096:	af04      	add	r7, sp, #16
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	4611      	mov	r1, r2
 800709e:	461a      	mov	r2, r3
 80070a0:	460b      	mov	r3, r1
 80070a2:	80fb      	strh	r3, [r7, #6]
 80070a4:	4613      	mov	r3, r2
 80070a6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80070a8:	7979      	ldrb	r1, [r7, #5]
 80070aa:	2300      	movs	r3, #0
 80070ac:	9303      	str	r3, [sp, #12]
 80070ae:	88fb      	ldrh	r3, [r7, #6]
 80070b0:	9302      	str	r3, [sp, #8]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	9301      	str	r3, [sp, #4]
 80070b6:	2301      	movs	r3, #1
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	2300      	movs	r3, #0
 80070bc:	2201      	movs	r2, #1
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 fafb 	bl	80076ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80070c4:	2300      	movs	r3, #0

}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b088      	sub	sp, #32
 80070d2:	af04      	add	r7, sp, #16
 80070d4:	60f8      	str	r0, [r7, #12]
 80070d6:	60b9      	str	r1, [r7, #8]
 80070d8:	4611      	mov	r1, r2
 80070da:	461a      	mov	r2, r3
 80070dc:	460b      	mov	r3, r1
 80070de:	80fb      	strh	r3, [r7, #6]
 80070e0:	4613      	mov	r3, r2
 80070e2:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80070f2:	7979      	ldrb	r1, [r7, #5]
 80070f4:	7e3b      	ldrb	r3, [r7, #24]
 80070f6:	9303      	str	r3, [sp, #12]
 80070f8:	88fb      	ldrh	r3, [r7, #6]
 80070fa:	9302      	str	r3, [sp, #8]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	2301      	movs	r3, #1
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	2302      	movs	r3, #2
 8007106:	2200      	movs	r2, #0
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 fad6 	bl	80076ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af04      	add	r7, sp, #16
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	4611      	mov	r1, r2
 8007124:	461a      	mov	r2, r3
 8007126:	460b      	mov	r3, r1
 8007128:	80fb      	strh	r3, [r7, #6]
 800712a:	4613      	mov	r3, r2
 800712c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800712e:	7979      	ldrb	r1, [r7, #5]
 8007130:	2300      	movs	r3, #0
 8007132:	9303      	str	r3, [sp, #12]
 8007134:	88fb      	ldrh	r3, [r7, #6]
 8007136:	9302      	str	r3, [sp, #8]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	9301      	str	r3, [sp, #4]
 800713c:	2301      	movs	r3, #1
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	2302      	movs	r3, #2
 8007142:	2201      	movs	r2, #1
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f000 fab8 	bl	80076ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af04      	add	r7, sp, #16
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	4608      	mov	r0, r1
 800715e:	4611      	mov	r1, r2
 8007160:	461a      	mov	r2, r3
 8007162:	4603      	mov	r3, r0
 8007164:	70fb      	strb	r3, [r7, #3]
 8007166:	460b      	mov	r3, r1
 8007168:	70bb      	strb	r3, [r7, #2]
 800716a:	4613      	mov	r3, r2
 800716c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800716e:	7878      	ldrb	r0, [r7, #1]
 8007170:	78ba      	ldrb	r2, [r7, #2]
 8007172:	78f9      	ldrb	r1, [r7, #3]
 8007174:	8b3b      	ldrh	r3, [r7, #24]
 8007176:	9302      	str	r3, [sp, #8]
 8007178:	7d3b      	ldrb	r3, [r7, #20]
 800717a:	9301      	str	r3, [sp, #4]
 800717c:	7c3b      	ldrb	r3, [r7, #16]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	4603      	mov	r3, r0
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fa4b 	bl	800761e <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007188:	2300      	movs	r3, #0

}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	460b      	mov	r3, r1
 800719c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800719e:	78fb      	ldrb	r3, [r7, #3]
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fa6a 	bl	800767c <USBH_LL_ClosePipe>

  return USBH_OK;
 80071a8:	2300      	movs	r3, #0

}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	460b      	mov	r3, r1
 80071bc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f831 	bl	8007226 <USBH_GetFreePipe>
 80071c4:	4603      	mov	r3, r0
 80071c6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80071c8:	89fb      	ldrh	r3, [r7, #14]
 80071ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d007      	beq.n	80071e2 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80071d2:	78fb      	ldrb	r3, [r7, #3]
 80071d4:	89fa      	ldrh	r2, [r7, #14]
 80071d6:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	32e0      	adds	r2, #224	; 0xe0
 80071de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80071e2:	89fb      	ldrh	r3, [r7, #14]
 80071e4:	b2db      	uxtb	r3, r3
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	460b      	mov	r3, r1
 80071f8:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80071fa:	78fb      	ldrb	r3, [r7, #3]
 80071fc:	2b0a      	cmp	r3, #10
 80071fe:	d80b      	bhi.n	8007218 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007200:	78fa      	ldrb	r2, [r7, #3]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	32e0      	adds	r2, #224	; 0xe0
 8007206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720a:	78fa      	ldrb	r2, [r7, #3]
 800720c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	32e0      	adds	r2, #224	; 0xe0
 8007214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007226:	b480      	push	{r7}
 8007228:	b085      	sub	sp, #20
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007232:	2300      	movs	r3, #0
 8007234:	73fb      	strb	r3, [r7, #15]
 8007236:	e00e      	b.n	8007256 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007238:	7bfa      	ldrb	r2, [r7, #15]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	32e0      	adds	r2, #224	; 0xe0
 800723e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d102      	bne.n	8007250 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	b29b      	uxth	r3, r3
 800724e:	e007      	b.n	8007260 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	3301      	adds	r3, #1
 8007254:	73fb      	strb	r3, [r7, #15]
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	2b0a      	cmp	r3, #10
 800725a:	d9ed      	bls.n	8007238 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800725c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007260:	4618      	mov	r0, r3
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007270:	2201      	movs	r2, #1
 8007272:	490e      	ldr	r1, [pc, #56]	; (80072ac <MX_USB_HOST_Init+0x40>)
 8007274:	480e      	ldr	r0, [pc, #56]	; (80072b0 <MX_USB_HOST_Init+0x44>)
 8007276:	f7fe fdbb 	bl	8005df0 <USBH_Init>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007280:	f7f9 fb76 	bl	8000970 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007284:	490b      	ldr	r1, [pc, #44]	; (80072b4 <MX_USB_HOST_Init+0x48>)
 8007286:	480a      	ldr	r0, [pc, #40]	; (80072b0 <MX_USB_HOST_Init+0x44>)
 8007288:	f7fe fe25 	bl	8005ed6 <USBH_RegisterClass>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007292:	f7f9 fb6d 	bl	8000970 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007296:	4806      	ldr	r0, [pc, #24]	; (80072b0 <MX_USB_HOST_Init+0x44>)
 8007298:	f7fe feaa 	bl	8005ff0 <USBH_Start>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80072a2:	f7f9 fb65 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80072a6:	bf00      	nop
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	080072cd 	.word	0x080072cd
 80072b0:	200001b8 	.word	0x200001b8
 80072b4:	2000000c 	.word	0x2000000c

080072b8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80072bc:	4802      	ldr	r0, [pc, #8]	; (80072c8 <MX_USB_HOST_Process+0x10>)
 80072be:	f7fe fea7 	bl	8006010 <USBH_Process>
}
 80072c2:	bf00      	nop
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	200001b8 	.word	0x200001b8

080072cc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	460b      	mov	r3, r1
 80072d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80072d8:	78fb      	ldrb	r3, [r7, #3]
 80072da:	3b01      	subs	r3, #1
 80072dc:	2b04      	cmp	r3, #4
 80072de:	d819      	bhi.n	8007314 <USBH_UserProcess+0x48>
 80072e0:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <USBH_UserProcess+0x1c>)
 80072e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e6:	bf00      	nop
 80072e8:	08007315 	.word	0x08007315
 80072ec:	08007305 	.word	0x08007305
 80072f0:	08007315 	.word	0x08007315
 80072f4:	0800730d 	.word	0x0800730d
 80072f8:	080072fd 	.word	0x080072fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80072fc:	4b09      	ldr	r3, [pc, #36]	; (8007324 <USBH_UserProcess+0x58>)
 80072fe:	2203      	movs	r2, #3
 8007300:	701a      	strb	r2, [r3, #0]
  break;
 8007302:	e008      	b.n	8007316 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007304:	4b07      	ldr	r3, [pc, #28]	; (8007324 <USBH_UserProcess+0x58>)
 8007306:	2202      	movs	r2, #2
 8007308:	701a      	strb	r2, [r3, #0]
  break;
 800730a:	e004      	b.n	8007316 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800730c:	4b05      	ldr	r3, [pc, #20]	; (8007324 <USBH_UserProcess+0x58>)
 800730e:	2201      	movs	r2, #1
 8007310:	701a      	strb	r2, [r3, #0]
  break;
 8007312:	e000      	b.n	8007316 <USBH_UserProcess+0x4a>

  default:
  break;
 8007314:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	200000b4 	.word	0x200000b4

08007328 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08a      	sub	sp, #40	; 0x28
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007330:	f107 0314 	add.w	r3, r7, #20
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	605a      	str	r2, [r3, #4]
 800733a:	609a      	str	r2, [r3, #8]
 800733c:	60da      	str	r2, [r3, #12]
 800733e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007348:	d147      	bne.n	80073da <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800734a:	2300      	movs	r3, #0
 800734c:	613b      	str	r3, [r7, #16]
 800734e:	4b25      	ldr	r3, [pc, #148]	; (80073e4 <HAL_HCD_MspInit+0xbc>)
 8007350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007352:	4a24      	ldr	r2, [pc, #144]	; (80073e4 <HAL_HCD_MspInit+0xbc>)
 8007354:	f043 0301 	orr.w	r3, r3, #1
 8007358:	6313      	str	r3, [r2, #48]	; 0x30
 800735a:	4b22      	ldr	r3, [pc, #136]	; (80073e4 <HAL_HCD_MspInit+0xbc>)
 800735c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	613b      	str	r3, [r7, #16]
 8007364:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800736a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800736c:	2300      	movs	r3, #0
 800736e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007370:	2300      	movs	r3, #0
 8007372:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007374:	f107 0314 	add.w	r3, r7, #20
 8007378:	4619      	mov	r1, r3
 800737a:	481b      	ldr	r0, [pc, #108]	; (80073e8 <HAL_HCD_MspInit+0xc0>)
 800737c:	f7f9 fe6a 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007380:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007386:	2302      	movs	r3, #2
 8007388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800738a:	2300      	movs	r3, #0
 800738c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800738e:	2300      	movs	r3, #0
 8007390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007392:	230a      	movs	r3, #10
 8007394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007396:	f107 0314 	add.w	r3, r7, #20
 800739a:	4619      	mov	r1, r3
 800739c:	4812      	ldr	r0, [pc, #72]	; (80073e8 <HAL_HCD_MspInit+0xc0>)
 800739e:	f7f9 fe59 	bl	8001054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80073a2:	4b10      	ldr	r3, [pc, #64]	; (80073e4 <HAL_HCD_MspInit+0xbc>)
 80073a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a6:	4a0f      	ldr	r2, [pc, #60]	; (80073e4 <HAL_HCD_MspInit+0xbc>)
 80073a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ac:	6353      	str	r3, [r2, #52]	; 0x34
 80073ae:	2300      	movs	r3, #0
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <HAL_HCD_MspInit+0xbc>)
 80073b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b6:	4a0b      	ldr	r2, [pc, #44]	; (80073e4 <HAL_HCD_MspInit+0xbc>)
 80073b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073bc:	6453      	str	r3, [r2, #68]	; 0x44
 80073be:	4b09      	ldr	r3, [pc, #36]	; (80073e4 <HAL_HCD_MspInit+0xbc>)
 80073c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80073ca:	2200      	movs	r2, #0
 80073cc:	2100      	movs	r1, #0
 80073ce:	2043      	movs	r0, #67	; 0x43
 80073d0:	f7f9 fe09 	bl	8000fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80073d4:	2043      	movs	r0, #67	; 0x43
 80073d6:	f7f9 fe22 	bl	800101e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80073da:	bf00      	nop
 80073dc:	3728      	adds	r7, #40	; 0x28
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	40023800 	.word	0x40023800
 80073e8:	40020000 	.word	0x40020000

080073ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7ff f8b9 	bl	8006572 <USBH_LL_IncTimer>
}
 8007400:	bf00      	nop
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007416:	4618      	mov	r0, r3
 8007418:	f7ff f8fe 	bl	8006618 <USBH_LL_Connect>
}
 800741c:	bf00      	nop
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007432:	4618      	mov	r0, r3
 8007434:	f7ff f916 	bl	8006664 <USBH_LL_Disconnect>
}
 8007438:	bf00      	nop
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	460b      	mov	r3, r1
 800744a:	70fb      	strb	r3, [r7, #3]
 800744c:	4613      	mov	r3, r2
 800744e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff f8ab 	bl	80065c6 <USBH_LL_PortEnabled>
} 
 8007470:	bf00      	nop
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007486:	4618      	mov	r0, r3
 8007488:	f7ff f8ab 	bl	80065e2 <USBH_LL_PortDisabled>
} 
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d12a      	bne.n	80074fc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80074a6:	4a18      	ldr	r2, [pc, #96]	; (8007508 <USBH_LL_Init+0x74>)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a15      	ldr	r2, [pc, #84]	; (8007508 <USBH_LL_Init+0x74>)
 80074b2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074b6:	4b14      	ldr	r3, [pc, #80]	; (8007508 <USBH_LL_Init+0x74>)
 80074b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80074bc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80074be:	4b12      	ldr	r3, [pc, #72]	; (8007508 <USBH_LL_Init+0x74>)
 80074c0:	2208      	movs	r2, #8
 80074c2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80074c4:	4b10      	ldr	r3, [pc, #64]	; (8007508 <USBH_LL_Init+0x74>)
 80074c6:	2201      	movs	r2, #1
 80074c8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074ca:	4b0f      	ldr	r3, [pc, #60]	; (8007508 <USBH_LL_Init+0x74>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80074d0:	4b0d      	ldr	r3, [pc, #52]	; (8007508 <USBH_LL_Init+0x74>)
 80074d2:	2202      	movs	r2, #2
 80074d4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074d6:	4b0c      	ldr	r3, [pc, #48]	; (8007508 <USBH_LL_Init+0x74>)
 80074d8:	2200      	movs	r2, #0
 80074da:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80074dc:	480a      	ldr	r0, [pc, #40]	; (8007508 <USBH_LL_Init+0x74>)
 80074de:	f7f9 ff9f 	bl	8001420 <HAL_HCD_Init>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80074e8:	f7f9 fa42 	bl	8000970 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80074ec:	4806      	ldr	r0, [pc, #24]	; (8007508 <USBH_LL_Init+0x74>)
 80074ee:	f7fa fb9b 	bl	8001c28 <HAL_HCD_GetCurrentFrame>
 80074f2:	4603      	mov	r3, r0
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7ff f82c 	bl	8006554 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20000584 	.word	0x20000584

0800750c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007522:	4618      	mov	r0, r3
 8007524:	f7fa fb08 	bl	8001b38 <HAL_HCD_Start>
 8007528:	4603      	mov	r3, r0
 800752a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	4618      	mov	r0, r3
 8007530:	f000 f95c 	bl	80077ec <USBH_Get_USB_Status>
 8007534:	4603      	mov	r3, r0
 8007536:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007538:	7bbb      	ldrb	r3, [r7, #14]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007558:	4618      	mov	r0, r3
 800755a:	f7fa fb10 	bl	8001b7e <HAL_HCD_Stop>
 800755e:	4603      	mov	r3, r0
 8007560:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	4618      	mov	r0, r3
 8007566:	f000 f941 	bl	80077ec <USBH_Get_USB_Status>
 800756a:	4603      	mov	r3, r0
 800756c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800756e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007580:	2301      	movs	r3, #1
 8007582:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800758a:	4618      	mov	r0, r3
 800758c:	f7fa fb5a 	bl	8001c44 <HAL_HCD_GetCurrentSpeed>
 8007590:	4603      	mov	r3, r0
 8007592:	2b01      	cmp	r3, #1
 8007594:	d007      	beq.n	80075a6 <USBH_LL_GetSpeed+0x2e>
 8007596:	2b01      	cmp	r3, #1
 8007598:	d302      	bcc.n	80075a0 <USBH_LL_GetSpeed+0x28>
 800759a:	2b02      	cmp	r3, #2
 800759c:	d006      	beq.n	80075ac <USBH_LL_GetSpeed+0x34>
 800759e:	e008      	b.n	80075b2 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]
    break;
 80075a4:	e008      	b.n	80075b8 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80075a6:	2301      	movs	r3, #1
 80075a8:	73fb      	strb	r3, [r7, #15]
    break;
 80075aa:	e005      	b.n	80075b8 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80075ac:	2302      	movs	r3, #2
 80075ae:	73fb      	strb	r3, [r7, #15]
    break;
 80075b0:	e002      	b.n	80075b8 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80075b2:	2301      	movs	r3, #1
 80075b4:	73fb      	strb	r3, [r7, #15]
    break;
 80075b6:	bf00      	nop
  }
  return  speed;
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fa faed 	bl	8001bb8 <HAL_HCD_ResetPort>
 80075de:	4603      	mov	r3, r0
 80075e0:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 f901 	bl	80077ec <USBH_Get_USB_Status>
 80075ea:	4603      	mov	r3, r0
 80075ec:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80075ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800760a:	78fa      	ldrb	r2, [r7, #3]
 800760c:	4611      	mov	r1, r2
 800760e:	4618      	mov	r0, r3
 8007610:	f7fa faf5 	bl	8001bfe <HAL_HCD_HC_GetXferCount>
 8007614:	4603      	mov	r3, r0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800761e:	b590      	push	{r4, r7, lr}
 8007620:	b089      	sub	sp, #36	; 0x24
 8007622:	af04      	add	r7, sp, #16
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	4608      	mov	r0, r1
 8007628:	4611      	mov	r1, r2
 800762a:	461a      	mov	r2, r3
 800762c:	4603      	mov	r3, r0
 800762e:	70fb      	strb	r3, [r7, #3]
 8007630:	460b      	mov	r3, r1
 8007632:	70bb      	strb	r3, [r7, #2]
 8007634:	4613      	mov	r3, r2
 8007636:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007646:	787c      	ldrb	r4, [r7, #1]
 8007648:	78ba      	ldrb	r2, [r7, #2]
 800764a:	78f9      	ldrb	r1, [r7, #3]
 800764c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800764e:	9302      	str	r3, [sp, #8]
 8007650:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	f897 3020 	ldrb.w	r3, [r7, #32]
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	4623      	mov	r3, r4
 800765e:	f7f9 ff41 	bl	80014e4 <HAL_HCD_HC_Init>
 8007662:	4603      	mov	r3, r0
 8007664:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007666:	7bfb      	ldrb	r3, [r7, #15]
 8007668:	4618      	mov	r0, r3
 800766a:	f000 f8bf 	bl	80077ec <USBH_Get_USB_Status>
 800766e:	4603      	mov	r3, r0
 8007670:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007672:	7bbb      	ldrb	r3, [r7, #14]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	bd90      	pop	{r4, r7, pc}

0800767c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	460b      	mov	r3, r1
 8007686:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007696:	78fa      	ldrb	r2, [r7, #3]
 8007698:	4611      	mov	r1, r2
 800769a:	4618      	mov	r0, r3
 800769c:	f7f9 ffba 	bl	8001614 <HAL_HCD_HC_Halt>
 80076a0:	4603      	mov	r3, r0
 80076a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 f8a0 	bl	80077ec <USBH_Get_USB_Status>
 80076ac:	4603      	mov	r3, r0
 80076ae:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80076ba:	b590      	push	{r4, r7, lr}
 80076bc:	b089      	sub	sp, #36	; 0x24
 80076be:	af04      	add	r7, sp, #16
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	4608      	mov	r0, r1
 80076c4:	4611      	mov	r1, r2
 80076c6:	461a      	mov	r2, r3
 80076c8:	4603      	mov	r3, r0
 80076ca:	70fb      	strb	r3, [r7, #3]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70bb      	strb	r3, [r7, #2]
 80076d0:	4613      	mov	r3, r2
 80076d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80076e2:	787c      	ldrb	r4, [r7, #1]
 80076e4:	78ba      	ldrb	r2, [r7, #2]
 80076e6:	78f9      	ldrb	r1, [r7, #3]
 80076e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076ec:	9303      	str	r3, [sp, #12]
 80076ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80076f0:	9302      	str	r3, [sp, #8]
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	4623      	mov	r3, r4
 80076fe:	f7f9 ffad 	bl	800165c <HAL_HCD_HC_SubmitRequest>
 8007702:	4603      	mov	r3, r0
 8007704:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	4618      	mov	r0, r3
 800770a:	f000 f86f 	bl	80077ec <USBH_Get_USB_Status>
 800770e:	4603      	mov	r3, r0
 8007710:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007712:	7bbb      	ldrb	r3, [r7, #14]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	bd90      	pop	{r4, r7, pc}

0800771c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800772e:	78fa      	ldrb	r2, [r7, #3]
 8007730:	4611      	mov	r1, r2
 8007732:	4618      	mov	r0, r3
 8007734:	f7fa fa4e 	bl	8001bd4 <HAL_HCD_HC_GetURBState>
 8007738:	4603      	mov	r3, r0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b082      	sub	sp, #8
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007754:	2b01      	cmp	r3, #1
 8007756:	d103      	bne.n	8007760 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007758:	78fb      	ldrb	r3, [r7, #3]
 800775a:	4618      	mov	r0, r3
 800775c:	f000 f872 	bl	8007844 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007760:	20c8      	movs	r0, #200	; 0xc8
 8007762:	f7f9 fb43 	bl	8000dec <HAL_Delay>
  return USBH_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	460b      	mov	r3, r1
 800777a:	70fb      	strb	r3, [r7, #3]
 800777c:	4613      	mov	r3, r2
 800777e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007786:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007788:	78fa      	ldrb	r2, [r7, #3]
 800778a:	68f9      	ldr	r1, [r7, #12]
 800778c:	4613      	mov	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	00db      	lsls	r3, r3, #3
 8007794:	440b      	add	r3, r1
 8007796:	333b      	adds	r3, #59	; 0x3b
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00a      	beq.n	80077b4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800779e:	78fa      	ldrb	r2, [r7, #3]
 80077a0:	68f9      	ldr	r1, [r7, #12]
 80077a2:	4613      	mov	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	440b      	add	r3, r1
 80077ac:	3350      	adds	r3, #80	; 0x50
 80077ae:	78ba      	ldrb	r2, [r7, #2]
 80077b0:	701a      	strb	r2, [r3, #0]
 80077b2:	e009      	b.n	80077c8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80077b4:	78fa      	ldrb	r2, [r7, #3]
 80077b6:	68f9      	ldr	r1, [r7, #12]
 80077b8:	4613      	mov	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	440b      	add	r3, r1
 80077c2:	3351      	adds	r3, #81	; 0x51
 80077c4:	78ba      	ldrb	r2, [r7, #2]
 80077c6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b082      	sub	sp, #8
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7f9 fb04 	bl	8000dec <HAL_Delay>
}
 80077e4:	bf00      	nop
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d817      	bhi.n	8007830 <USBH_Get_USB_Status+0x44>
 8007800:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <USBH_Get_USB_Status+0x1c>)
 8007802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007806:	bf00      	nop
 8007808:	08007819 	.word	0x08007819
 800780c:	0800781f 	.word	0x0800781f
 8007810:	08007825 	.word	0x08007825
 8007814:	0800782b 	.word	0x0800782b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]
    break;
 800781c:	e00b      	b.n	8007836 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800781e:	2302      	movs	r3, #2
 8007820:	73fb      	strb	r3, [r7, #15]
    break;
 8007822:	e008      	b.n	8007836 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007824:	2301      	movs	r3, #1
 8007826:	73fb      	strb	r3, [r7, #15]
    break;
 8007828:	e005      	b.n	8007836 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800782a:	2302      	movs	r3, #2
 800782c:	73fb      	strb	r3, [r7, #15]
    break;
 800782e:	e002      	b.n	8007836 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007830:	2302      	movs	r3, #2
 8007832:	73fb      	strb	r3, [r7, #15]
    break;
 8007834:	bf00      	nop
  }
  return usb_status;
 8007836:	7bfb      	ldrb	r3, [r7, #15]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	4603      	mov	r3, r0
 800784c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800784e:	79fb      	ldrb	r3, [r7, #7]
 8007850:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007852:	79fb      	ldrb	r3, [r7, #7]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d102      	bne.n	800785e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8007858:	2301      	movs	r3, #1
 800785a:	73fb      	strb	r3, [r7, #15]
 800785c:	e001      	b.n	8007862 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800785e:	2300      	movs	r3, #0
 8007860:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	461a      	mov	r2, r3
 8007866:	2101      	movs	r1, #1
 8007868:	4803      	ldr	r0, [pc, #12]	; (8007878 <MX_DriverVbusFS+0x34>)
 800786a:	f7f9 fda5 	bl	80013b8 <HAL_GPIO_WritePin>
}
 800786e:	bf00      	nop
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	40020800 	.word	0x40020800

0800787c <__errno>:
 800787c:	4b01      	ldr	r3, [pc, #4]	; (8007884 <__errno+0x8>)
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	2000002c 	.word	0x2000002c

08007888 <__libc_init_array>:
 8007888:	b570      	push	{r4, r5, r6, lr}
 800788a:	4e0d      	ldr	r6, [pc, #52]	; (80078c0 <__libc_init_array+0x38>)
 800788c:	4c0d      	ldr	r4, [pc, #52]	; (80078c4 <__libc_init_array+0x3c>)
 800788e:	1ba4      	subs	r4, r4, r6
 8007890:	10a4      	asrs	r4, r4, #2
 8007892:	2500      	movs	r5, #0
 8007894:	42a5      	cmp	r5, r4
 8007896:	d109      	bne.n	80078ac <__libc_init_array+0x24>
 8007898:	4e0b      	ldr	r6, [pc, #44]	; (80078c8 <__libc_init_array+0x40>)
 800789a:	4c0c      	ldr	r4, [pc, #48]	; (80078cc <__libc_init_array+0x44>)
 800789c:	f000 f8ea 	bl	8007a74 <_init>
 80078a0:	1ba4      	subs	r4, r4, r6
 80078a2:	10a4      	asrs	r4, r4, #2
 80078a4:	2500      	movs	r5, #0
 80078a6:	42a5      	cmp	r5, r4
 80078a8:	d105      	bne.n	80078b6 <__libc_init_array+0x2e>
 80078aa:	bd70      	pop	{r4, r5, r6, pc}
 80078ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078b0:	4798      	blx	r3
 80078b2:	3501      	adds	r5, #1
 80078b4:	e7ee      	b.n	8007894 <__libc_init_array+0xc>
 80078b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078ba:	4798      	blx	r3
 80078bc:	3501      	adds	r5, #1
 80078be:	e7f2      	b.n	80078a6 <__libc_init_array+0x1e>
 80078c0:	08007ab0 	.word	0x08007ab0
 80078c4:	08007ab0 	.word	0x08007ab0
 80078c8:	08007ab0 	.word	0x08007ab0
 80078cc:	08007ab4 	.word	0x08007ab4

080078d0 <malloc>:
 80078d0:	4b02      	ldr	r3, [pc, #8]	; (80078dc <malloc+0xc>)
 80078d2:	4601      	mov	r1, r0
 80078d4:	6818      	ldr	r0, [r3, #0]
 80078d6:	f000 b861 	b.w	800799c <_malloc_r>
 80078da:	bf00      	nop
 80078dc:	2000002c 	.word	0x2000002c

080078e0 <free>:
 80078e0:	4b02      	ldr	r3, [pc, #8]	; (80078ec <free+0xc>)
 80078e2:	4601      	mov	r1, r0
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	f000 b80b 	b.w	8007900 <_free_r>
 80078ea:	bf00      	nop
 80078ec:	2000002c 	.word	0x2000002c

080078f0 <memset>:
 80078f0:	4402      	add	r2, r0
 80078f2:	4603      	mov	r3, r0
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d100      	bne.n	80078fa <memset+0xa>
 80078f8:	4770      	bx	lr
 80078fa:	f803 1b01 	strb.w	r1, [r3], #1
 80078fe:	e7f9      	b.n	80078f4 <memset+0x4>

08007900 <_free_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	4605      	mov	r5, r0
 8007904:	2900      	cmp	r1, #0
 8007906:	d045      	beq.n	8007994 <_free_r+0x94>
 8007908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800790c:	1f0c      	subs	r4, r1, #4
 800790e:	2b00      	cmp	r3, #0
 8007910:	bfb8      	it	lt
 8007912:	18e4      	addlt	r4, r4, r3
 8007914:	f000 f8ac 	bl	8007a70 <__malloc_lock>
 8007918:	4a1f      	ldr	r2, [pc, #124]	; (8007998 <_free_r+0x98>)
 800791a:	6813      	ldr	r3, [r2, #0]
 800791c:	4610      	mov	r0, r2
 800791e:	b933      	cbnz	r3, 800792e <_free_r+0x2e>
 8007920:	6063      	str	r3, [r4, #4]
 8007922:	6014      	str	r4, [r2, #0]
 8007924:	4628      	mov	r0, r5
 8007926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800792a:	f000 b8a2 	b.w	8007a72 <__malloc_unlock>
 800792e:	42a3      	cmp	r3, r4
 8007930:	d90c      	bls.n	800794c <_free_r+0x4c>
 8007932:	6821      	ldr	r1, [r4, #0]
 8007934:	1862      	adds	r2, r4, r1
 8007936:	4293      	cmp	r3, r2
 8007938:	bf04      	itt	eq
 800793a:	681a      	ldreq	r2, [r3, #0]
 800793c:	685b      	ldreq	r3, [r3, #4]
 800793e:	6063      	str	r3, [r4, #4]
 8007940:	bf04      	itt	eq
 8007942:	1852      	addeq	r2, r2, r1
 8007944:	6022      	streq	r2, [r4, #0]
 8007946:	6004      	str	r4, [r0, #0]
 8007948:	e7ec      	b.n	8007924 <_free_r+0x24>
 800794a:	4613      	mov	r3, r2
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	b10a      	cbz	r2, 8007954 <_free_r+0x54>
 8007950:	42a2      	cmp	r2, r4
 8007952:	d9fa      	bls.n	800794a <_free_r+0x4a>
 8007954:	6819      	ldr	r1, [r3, #0]
 8007956:	1858      	adds	r0, r3, r1
 8007958:	42a0      	cmp	r0, r4
 800795a:	d10b      	bne.n	8007974 <_free_r+0x74>
 800795c:	6820      	ldr	r0, [r4, #0]
 800795e:	4401      	add	r1, r0
 8007960:	1858      	adds	r0, r3, r1
 8007962:	4282      	cmp	r2, r0
 8007964:	6019      	str	r1, [r3, #0]
 8007966:	d1dd      	bne.n	8007924 <_free_r+0x24>
 8007968:	6810      	ldr	r0, [r2, #0]
 800796a:	6852      	ldr	r2, [r2, #4]
 800796c:	605a      	str	r2, [r3, #4]
 800796e:	4401      	add	r1, r0
 8007970:	6019      	str	r1, [r3, #0]
 8007972:	e7d7      	b.n	8007924 <_free_r+0x24>
 8007974:	d902      	bls.n	800797c <_free_r+0x7c>
 8007976:	230c      	movs	r3, #12
 8007978:	602b      	str	r3, [r5, #0]
 800797a:	e7d3      	b.n	8007924 <_free_r+0x24>
 800797c:	6820      	ldr	r0, [r4, #0]
 800797e:	1821      	adds	r1, r4, r0
 8007980:	428a      	cmp	r2, r1
 8007982:	bf04      	itt	eq
 8007984:	6811      	ldreq	r1, [r2, #0]
 8007986:	6852      	ldreq	r2, [r2, #4]
 8007988:	6062      	str	r2, [r4, #4]
 800798a:	bf04      	itt	eq
 800798c:	1809      	addeq	r1, r1, r0
 800798e:	6021      	streq	r1, [r4, #0]
 8007990:	605c      	str	r4, [r3, #4]
 8007992:	e7c7      	b.n	8007924 <_free_r+0x24>
 8007994:	bd38      	pop	{r3, r4, r5, pc}
 8007996:	bf00      	nop
 8007998:	200000b8 	.word	0x200000b8

0800799c <_malloc_r>:
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	1ccd      	adds	r5, r1, #3
 80079a0:	f025 0503 	bic.w	r5, r5, #3
 80079a4:	3508      	adds	r5, #8
 80079a6:	2d0c      	cmp	r5, #12
 80079a8:	bf38      	it	cc
 80079aa:	250c      	movcc	r5, #12
 80079ac:	2d00      	cmp	r5, #0
 80079ae:	4606      	mov	r6, r0
 80079b0:	db01      	blt.n	80079b6 <_malloc_r+0x1a>
 80079b2:	42a9      	cmp	r1, r5
 80079b4:	d903      	bls.n	80079be <_malloc_r+0x22>
 80079b6:	230c      	movs	r3, #12
 80079b8:	6033      	str	r3, [r6, #0]
 80079ba:	2000      	movs	r0, #0
 80079bc:	bd70      	pop	{r4, r5, r6, pc}
 80079be:	f000 f857 	bl	8007a70 <__malloc_lock>
 80079c2:	4a21      	ldr	r2, [pc, #132]	; (8007a48 <_malloc_r+0xac>)
 80079c4:	6814      	ldr	r4, [r2, #0]
 80079c6:	4621      	mov	r1, r4
 80079c8:	b991      	cbnz	r1, 80079f0 <_malloc_r+0x54>
 80079ca:	4c20      	ldr	r4, [pc, #128]	; (8007a4c <_malloc_r+0xb0>)
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	b91b      	cbnz	r3, 80079d8 <_malloc_r+0x3c>
 80079d0:	4630      	mov	r0, r6
 80079d2:	f000 f83d 	bl	8007a50 <_sbrk_r>
 80079d6:	6020      	str	r0, [r4, #0]
 80079d8:	4629      	mov	r1, r5
 80079da:	4630      	mov	r0, r6
 80079dc:	f000 f838 	bl	8007a50 <_sbrk_r>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	d124      	bne.n	8007a2e <_malloc_r+0x92>
 80079e4:	230c      	movs	r3, #12
 80079e6:	6033      	str	r3, [r6, #0]
 80079e8:	4630      	mov	r0, r6
 80079ea:	f000 f842 	bl	8007a72 <__malloc_unlock>
 80079ee:	e7e4      	b.n	80079ba <_malloc_r+0x1e>
 80079f0:	680b      	ldr	r3, [r1, #0]
 80079f2:	1b5b      	subs	r3, r3, r5
 80079f4:	d418      	bmi.n	8007a28 <_malloc_r+0x8c>
 80079f6:	2b0b      	cmp	r3, #11
 80079f8:	d90f      	bls.n	8007a1a <_malloc_r+0x7e>
 80079fa:	600b      	str	r3, [r1, #0]
 80079fc:	50cd      	str	r5, [r1, r3]
 80079fe:	18cc      	adds	r4, r1, r3
 8007a00:	4630      	mov	r0, r6
 8007a02:	f000 f836 	bl	8007a72 <__malloc_unlock>
 8007a06:	f104 000b 	add.w	r0, r4, #11
 8007a0a:	1d23      	adds	r3, r4, #4
 8007a0c:	f020 0007 	bic.w	r0, r0, #7
 8007a10:	1ac3      	subs	r3, r0, r3
 8007a12:	d0d3      	beq.n	80079bc <_malloc_r+0x20>
 8007a14:	425a      	negs	r2, r3
 8007a16:	50e2      	str	r2, [r4, r3]
 8007a18:	e7d0      	b.n	80079bc <_malloc_r+0x20>
 8007a1a:	428c      	cmp	r4, r1
 8007a1c:	684b      	ldr	r3, [r1, #4]
 8007a1e:	bf16      	itet	ne
 8007a20:	6063      	strne	r3, [r4, #4]
 8007a22:	6013      	streq	r3, [r2, #0]
 8007a24:	460c      	movne	r4, r1
 8007a26:	e7eb      	b.n	8007a00 <_malloc_r+0x64>
 8007a28:	460c      	mov	r4, r1
 8007a2a:	6849      	ldr	r1, [r1, #4]
 8007a2c:	e7cc      	b.n	80079c8 <_malloc_r+0x2c>
 8007a2e:	1cc4      	adds	r4, r0, #3
 8007a30:	f024 0403 	bic.w	r4, r4, #3
 8007a34:	42a0      	cmp	r0, r4
 8007a36:	d005      	beq.n	8007a44 <_malloc_r+0xa8>
 8007a38:	1a21      	subs	r1, r4, r0
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f000 f808 	bl	8007a50 <_sbrk_r>
 8007a40:	3001      	adds	r0, #1
 8007a42:	d0cf      	beq.n	80079e4 <_malloc_r+0x48>
 8007a44:	6025      	str	r5, [r4, #0]
 8007a46:	e7db      	b.n	8007a00 <_malloc_r+0x64>
 8007a48:	200000b8 	.word	0x200000b8
 8007a4c:	200000bc 	.word	0x200000bc

08007a50 <_sbrk_r>:
 8007a50:	b538      	push	{r3, r4, r5, lr}
 8007a52:	4c06      	ldr	r4, [pc, #24]	; (8007a6c <_sbrk_r+0x1c>)
 8007a54:	2300      	movs	r3, #0
 8007a56:	4605      	mov	r5, r0
 8007a58:	4608      	mov	r0, r1
 8007a5a:	6023      	str	r3, [r4, #0]
 8007a5c:	f7f9 f8e8 	bl	8000c30 <_sbrk>
 8007a60:	1c43      	adds	r3, r0, #1
 8007a62:	d102      	bne.n	8007a6a <_sbrk_r+0x1a>
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	b103      	cbz	r3, 8007a6a <_sbrk_r+0x1a>
 8007a68:	602b      	str	r3, [r5, #0]
 8007a6a:	bd38      	pop	{r3, r4, r5, pc}
 8007a6c:	20000848 	.word	0x20000848

08007a70 <__malloc_lock>:
 8007a70:	4770      	bx	lr

08007a72 <__malloc_unlock>:
 8007a72:	4770      	bx	lr

08007a74 <_init>:
 8007a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a76:	bf00      	nop
 8007a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7a:	bc08      	pop	{r3}
 8007a7c:	469e      	mov	lr, r3
 8007a7e:	4770      	bx	lr

08007a80 <_fini>:
 8007a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a82:	bf00      	nop
 8007a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a86:	bc08      	pop	{r3}
 8007a88:	469e      	mov	lr, r3
 8007a8a:	4770      	bx	lr
