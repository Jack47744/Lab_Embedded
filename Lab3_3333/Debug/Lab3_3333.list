
Lab3_3333.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008e20  08008e20  00018e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e3c  08008e3c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008e3c  08008e3c  00018e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e44  08008e44  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e44  08008e44  00018e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e48  08008e48  00018e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  20000090  08008edc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  08008edc  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da1a  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c4d  00000000  00000000  0003dada  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001810  00000000  00000000  00041728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001678  00000000  00000000  00042f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024d0f  00000000  00000000  000445b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015339  00000000  00000000  000692bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4408  00000000  00000000  0007e5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152a00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067cc  00000000  00000000  00152a7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e08 	.word	0x08008e08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008e08 	.word	0x08008e08

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 feb4 	bl	8001238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f816 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fab6 	bl	8000a44 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f894 	bl	8000604 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004dc:	f000 f8c0 	bl	8000660 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e0:	f000 f8ee 	bl	80006c0 <MX_SPI1_Init>
  MX_TIM3_Init();
 80004e4:	f000 f998 	bl	8000818 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004e8:	f000 fa0c 	bl	8000904 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 fa80 	bl	80009f0 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 80004f0:	f008 f886 	bl	8008600 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80004f4:	f000 f91a 	bl	800072c <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f8:	f008 f8a8 	bl	800864c <MX_USB_HOST_Process>
 80004fc:	e7fc      	b.n	80004f8 <main+0x30>
	...

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b098      	sub	sp, #96	; 0x60
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f008 fbb8 	bl	8008c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 031c 	add.w	r3, r7, #28
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	4b31      	ldr	r3, [pc, #196]	; (80005fc <SystemClock_Config+0xfc>)
 8000538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053a:	4a30      	ldr	r2, [pc, #192]	; (80005fc <SystemClock_Config+0xfc>)
 800053c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000540:	6413      	str	r3, [r2, #64]	; 0x40
 8000542:	4b2e      	ldr	r3, [pc, #184]	; (80005fc <SystemClock_Config+0xfc>)
 8000544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <SystemClock_Config+0x100>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a2a      	ldr	r2, [pc, #168]	; (8000600 <SystemClock_Config+0x100>)
 8000558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055c:	6013      	str	r3, [r2, #0]
 800055e:	4b28      	ldr	r3, [pc, #160]	; (8000600 <SystemClock_Config+0x100>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056a:	2301      	movs	r3, #1
 800056c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000572:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000578:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800057e:	2308      	movs	r3, #8
 8000580:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000582:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000586:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058c:	2307      	movs	r3, #7
 800058e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000594:	4618      	mov	r0, r3
 8000596:	f003 fc0b 	bl	8003db0 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005a0:	f000 fb58 	bl	8000c54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2302      	movs	r3, #2
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005bc:	f107 031c 	add.w	r3, r7, #28
 80005c0:	2105      	movs	r1, #5
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fe64 	bl	8004290 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005ce:	f000 fb41 	bl	8000c54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005d2:	2301      	movs	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005d6:	23c0      	movs	r3, #192	; 0xc0
 80005d8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005da:	2302      	movs	r3, #2
 80005dc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4618      	mov	r0, r3
 80005e4:	f004 f846 	bl	8004674 <HAL_RCCEx_PeriphCLKConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80005ee:	f000 fb31 	bl	8000c54 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3760      	adds	r7, #96	; 0x60
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_I2C1_Init+0x50>)
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <MX_I2C1_Init+0x54>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_I2C1_Init+0x50>)
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_I2C1_Init+0x58>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_I2C1_Init+0x50>)
 8000622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_I2C1_Init+0x50>)
 8000642:	f002 fddd 	bl	8003200 <HAL_I2C_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800064c:	f000 fb02 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000100 	.word	0x20000100
 8000658:	40005400 	.word	0x40005400
 800065c:	000186a0 	.word	0x000186a0

08000660 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <MX_I2S3_Init+0x58>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800066a:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_I2S3_Init+0x54>)
 800066c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000670:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000684:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000688:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <MX_I2S3_Init+0x5c>)
 800068a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_I2S3_Init+0x54>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_I2S3_Init+0x54>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_I2S3_Init+0x54>)
 80006a0:	f002 fee6 	bl	8003470 <HAL_I2S_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006aa:	f000 fad3 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000026c 	.word	0x2000026c
 80006b8:	40003c00 	.word	0x40003c00
 80006bc:	00017700 	.word	0x00017700

080006c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <MX_SPI1_Init+0x64>)
 80006c6:	4a18      	ldr	r2, [pc, #96]	; (8000728 <MX_SPI1_Init+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_SPI1_Init+0x64>)
 80006cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_SPI1_Init+0x64>)
 80006ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_SPI1_Init+0x64>)
 800070c:	220a      	movs	r2, #10
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_SPI1_Init+0x64>)
 8000712:	f004 f8ed 	bl	80048f0 <HAL_SPI_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800071c:	f000 fa9a 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000194 	.word	0x20000194
 8000728:	40013000 	.word	0x40013000

0800072c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08e      	sub	sp, #56	; 0x38
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
 8000758:	615a      	str	r2, [r3, #20]
 800075a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800075c:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <MX_TIM2_Init+0xe8>)
 800075e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000762:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 209;
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <MX_TIM2_Init+0xe8>)
 8000766:	22d1      	movs	r2, #209	; 0xd1
 8000768:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076a:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <MX_TIM2_Init+0xe8>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <MX_TIM2_Init+0xe8>)
 8000772:	f240 128f 	movw	r2, #399	; 0x18f
 8000776:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b26      	ldr	r3, [pc, #152]	; (8000814 <MX_TIM2_Init+0xe8>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b25      	ldr	r3, [pc, #148]	; (8000814 <MX_TIM2_Init+0xe8>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000784:	4823      	ldr	r0, [pc, #140]	; (8000814 <MX_TIM2_Init+0xe8>)
 8000786:	f004 f917 	bl	80049b8 <HAL_TIM_Base_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000790:	f000 fa60 	bl	8000c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800079a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079e:	4619      	mov	r1, r3
 80007a0:	481c      	ldr	r0, [pc, #112]	; (8000814 <MX_TIM2_Init+0xe8>)
 80007a2:	f004 fa2f 	bl	8004c04 <HAL_TIM_ConfigClockSource>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007ac:	f000 fa52 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007b0:	4818      	ldr	r0, [pc, #96]	; (8000814 <MX_TIM2_Init+0xe8>)
 80007b2:	f004 f92c 	bl	8004a0e <HAL_TIM_PWM_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007bc:	f000 fa4a 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	4619      	mov	r1, r3
 80007ce:	4811      	ldr	r0, [pc, #68]	; (8000814 <MX_TIM2_Init+0xe8>)
 80007d0:	f004 fdba 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007da:	f000 fa3b 	bl	8000c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007de:	2360      	movs	r3, #96	; 0x60
 80007e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200;
 80007e2:	23c8      	movs	r3, #200	; 0xc8
 80007e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	4619      	mov	r1, r3
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <MX_TIM2_Init+0xe8>)
 80007f6:	f004 f93f 	bl	8004a78 <HAL_TIM_PWM_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000800:	f000 fa28 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000804:	4803      	ldr	r0, [pc, #12]	; (8000814 <MX_TIM2_Init+0xe8>)
 8000806:	f000 fb99 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 800080a:	bf00      	nop
 800080c:	3738      	adds	r7, #56	; 0x38
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200001ec 	.word	0x200001ec

08000818 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08e      	sub	sp, #56	; 0x38
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
 8000844:	615a      	str	r2, [r3, #20]
 8000846:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000848:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <MX_TIM3_Init+0xe4>)
 800084a:	4a2d      	ldr	r2, [pc, #180]	; (8000900 <MX_TIM3_Init+0xe8>)
 800084c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 188;
 800084e:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <MX_TIM3_Init+0xe4>)
 8000850:	22bc      	movs	r2, #188	; 0xbc
 8000852:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000854:	4b29      	ldr	r3, [pc, #164]	; (80008fc <MX_TIM3_Init+0xe4>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 217;
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <MX_TIM3_Init+0xe4>)
 800085c:	22d9      	movs	r2, #217	; 0xd9
 800085e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000860:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_TIM3_Init+0xe4>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <MX_TIM3_Init+0xe4>)
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800086c:	4823      	ldr	r0, [pc, #140]	; (80008fc <MX_TIM3_Init+0xe4>)
 800086e:	f004 f8a3 	bl	80049b8 <HAL_TIM_Base_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000878:	f000 f9ec 	bl	8000c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000886:	4619      	mov	r1, r3
 8000888:	481c      	ldr	r0, [pc, #112]	; (80008fc <MX_TIM3_Init+0xe4>)
 800088a:	f004 f9bb 	bl	8004c04 <HAL_TIM_ConfigClockSource>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000894:	f000 f9de 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000898:	4818      	ldr	r0, [pc, #96]	; (80008fc <MX_TIM3_Init+0xe4>)
 800089a:	f004 f8b8 	bl	8004a0e <HAL_TIM_PWM_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80008a4:	f000 f9d6 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008b0:	f107 0320 	add.w	r3, r7, #32
 80008b4:	4619      	mov	r1, r3
 80008b6:	4811      	ldr	r0, [pc, #68]	; (80008fc <MX_TIM3_Init+0xe4>)
 80008b8:	f004 fd46 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80008c2:	f000 f9c7 	bl	8000c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c6:	2360      	movs	r3, #96	; 0x60
 80008c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 109;
 80008ca:	236d      	movs	r3, #109	; 0x6d
 80008cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	4619      	mov	r1, r3
 80008dc:	4807      	ldr	r0, [pc, #28]	; (80008fc <MX_TIM3_Init+0xe4>)
 80008de:	f004 f8cb 	bl	8004a78 <HAL_TIM_PWM_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80008e8:	f000 f9b4 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <MX_TIM3_Init+0xe4>)
 80008ee:	f000 fb25 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 80008f2:	bf00      	nop
 80008f4:	3738      	adds	r7, #56	; 0x38
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000154 	.word	0x20000154
 8000900:	40000400 	.word	0x40000400

08000904 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	; 0x38
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	f107 0320 	add.w	r3, r7, #32
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
 8000930:	615a      	str	r2, [r3, #20]
 8000932:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000934:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <MX_TIM4_Init+0xe4>)
 8000936:	4a2d      	ldr	r2, [pc, #180]	; (80009ec <MX_TIM4_Init+0xe8>)
 8000938:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 209;
 800093a:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <MX_TIM4_Init+0xe4>)
 800093c:	22d1      	movs	r2, #209	; 0xd1
 800093e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000940:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <MX_TIM4_Init+0xe4>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8000946:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <MX_TIM4_Init+0xe4>)
 8000948:	22c7      	movs	r2, #199	; 0xc7
 800094a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <MX_TIM4_Init+0xe4>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000952:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <MX_TIM4_Init+0xe4>)
 8000954:	2280      	movs	r2, #128	; 0x80
 8000956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000958:	4823      	ldr	r0, [pc, #140]	; (80009e8 <MX_TIM4_Init+0xe4>)
 800095a:	f004 f82d 	bl	80049b8 <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000964:	f000 f976 	bl	8000c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800096e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000972:	4619      	mov	r1, r3
 8000974:	481c      	ldr	r0, [pc, #112]	; (80009e8 <MX_TIM4_Init+0xe4>)
 8000976:	f004 f945 	bl	8004c04 <HAL_TIM_ConfigClockSource>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000980:	f000 f968 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000984:	4818      	ldr	r0, [pc, #96]	; (80009e8 <MX_TIM4_Init+0xe4>)
 8000986:	f004 f842 	bl	8004a0e <HAL_TIM_PWM_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000990:	f000 f960 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800099c:	f107 0320 	add.w	r3, r7, #32
 80009a0:	4619      	mov	r1, r3
 80009a2:	4811      	ldr	r0, [pc, #68]	; (80009e8 <MX_TIM4_Init+0xe4>)
 80009a4:	f004 fcd0 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80009ae:	f000 f951 	bl	8000c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b2:	2360      	movs	r3, #96	; 0x60
 80009b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80009b6:	2364      	movs	r3, #100	; 0x64
 80009b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2208      	movs	r2, #8
 80009c6:	4619      	mov	r1, r3
 80009c8:	4807      	ldr	r0, [pc, #28]	; (80009e8 <MX_TIM4_Init+0xe4>)
 80009ca:	f004 f855 	bl	8004a78 <HAL_TIM_PWM_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80009d4:	f000 f93e 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <MX_TIM4_Init+0xe4>)
 80009da:	f000 faaf 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 80009de:	bf00      	nop
 80009e0:	3738      	adds	r7, #56	; 0x38
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000c0 	.word	0x200000c0
 80009ec:	40000800 	.word	0x40000800

080009f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_USART2_UART_Init+0x50>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a28:	f004 fd0a 	bl	8005440 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a32:	f000 f90f 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000022c 	.word	0x2000022c
 8000a40:	40004400 	.word	0x40004400

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	; 0x30
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	4b75      	ldr	r3, [pc, #468]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a74      	ldr	r2, [pc, #464]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000a64:	f043 0310 	orr.w	r3, r3, #16
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b72      	ldr	r3, [pc, #456]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0310 	and.w	r3, r3, #16
 8000a72:	61bb      	str	r3, [r7, #24]
 8000a74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	4b6e      	ldr	r3, [pc, #440]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a6d      	ldr	r2, [pc, #436]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b6b      	ldr	r3, [pc, #428]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b67      	ldr	r3, [pc, #412]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a66      	ldr	r2, [pc, #408]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b64      	ldr	r3, [pc, #400]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b60      	ldr	r3, [pc, #384]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a5f      	ldr	r2, [pc, #380]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b5d      	ldr	r3, [pc, #372]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	4b59      	ldr	r3, [pc, #356]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a58      	ldr	r2, [pc, #352]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b56      	ldr	r3, [pc, #344]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b52      	ldr	r3, [pc, #328]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a51      	ldr	r2, [pc, #324]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000af0:	f043 0308 	orr.w	r3, r3, #8
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b4f      	ldr	r3, [pc, #316]	; (8000c34 <MX_GPIO_Init+0x1f0>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2108      	movs	r1, #8
 8000b06:	484c      	ldr	r0, [pc, #304]	; (8000c38 <MX_GPIO_Init+0x1f4>)
 8000b08:	f000 fed6 	bl	80018b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2101      	movs	r1, #1
 8000b10:	484a      	ldr	r0, [pc, #296]	; (8000c3c <MX_GPIO_Init+0x1f8>)
 8000b12:	f000 fed1 	bl	80018b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000b16:	2200      	movs	r2, #0
 8000b18:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b1c:	4848      	ldr	r0, [pc, #288]	; (8000c40 <MX_GPIO_Init+0x1fc>)
 8000b1e:	f000 fecb 	bl	80018b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b22:	2308      	movs	r3, #8
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	483f      	ldr	r0, [pc, #252]	; (8000c38 <MX_GPIO_Init+0x1f4>)
 8000b3a:	f000 fd23 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4839      	ldr	r0, [pc, #228]	; (8000c3c <MX_GPIO_Init+0x1f8>)
 8000b56:	f000 fd15 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4831      	ldr	r0, [pc, #196]	; (8000c3c <MX_GPIO_Init+0x1f8>)
 8000b76:	f000 fd05 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7e:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <MX_GPIO_Init+0x200>)
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	482e      	ldr	r0, [pc, #184]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000b8e:	f000 fcf9 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b92:	2304      	movs	r3, #4
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4829      	ldr	r0, [pc, #164]	; (8000c4c <MX_GPIO_Init+0x208>)
 8000ba6:	f000 fced 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bbc:	2305      	movs	r3, #5
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4821      	ldr	r0, [pc, #132]	; (8000c4c <MX_GPIO_Init+0x208>)
 8000bc8:	f000 fcdc 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000bcc:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000bd0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4816      	ldr	r0, [pc, #88]	; (8000c40 <MX_GPIO_Init+0x1fc>)
 8000be6:	f000 fccd 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bea:	2320      	movs	r3, #32
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4810      	ldr	r0, [pc, #64]	; (8000c40 <MX_GPIO_Init+0x1fc>)
 8000bfe:	f000 fcc1 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MX_GPIO_Init+0x20c>)
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <MX_GPIO_Init+0x1f4>)
 8000c16:	f000 fcb5 	bl	8001584 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	2006      	movs	r0, #6
 8000c20:	f000 fc79 	bl	8001516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c24:	2006      	movs	r0, #6
 8000c26:	f000 fc92 	bl	800154e <HAL_NVIC_EnableIRQ>

}
 8000c2a:	bf00      	nop
 8000c2c:	3730      	adds	r7, #48	; 0x30
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40020800 	.word	0x40020800
 8000c40:	40020c00 	.word	0x40020c00
 8000c44:	10110000 	.word	0x10110000
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	10120000 	.word	0x10120000

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000ca2:	2005      	movs	r0, #5
 8000ca4:	f000 fc2c 	bl	8001500 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <HAL_I2C_MspInit+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12c      	bne.n	8000d30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cf2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf8:	2312      	movs	r3, #18
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d04:	2304      	movs	r3, #4
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480c      	ldr	r0, [pc, #48]	; (8000d40 <HAL_I2C_MspInit+0x8c>)
 8000d10:	f000 fc38 	bl	8001584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000d1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020400 	.word	0x40020400

08000d44 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a28      	ldr	r2, [pc, #160]	; (8000e04 <HAL_I2S_MspInit+0xc0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d14a      	bne.n	8000dfc <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <HAL_I2S_MspInit+0xc4>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a26      	ldr	r2, [pc, #152]	; (8000e08 <HAL_I2S_MspInit+0xc4>)
 8000d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <HAL_I2S_MspInit+0xc4>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <HAL_I2S_MspInit+0xc4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a1f      	ldr	r2, [pc, #124]	; (8000e08 <HAL_I2S_MspInit+0xc4>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <HAL_I2S_MspInit+0xc4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_I2S_MspInit+0xc4>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <HAL_I2S_MspInit+0xc4>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <HAL_I2S_MspInit+0xc4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dba:	2310      	movs	r3, #16
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dca:	2306      	movs	r3, #6
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <HAL_I2S_MspInit+0xc8>)
 8000dd6:	f000 fbd5 	bl	8001584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dda:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dec:	2306      	movs	r3, #6
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4806      	ldr	r0, [pc, #24]	; (8000e10 <HAL_I2S_MspInit+0xcc>)
 8000df8:	f000 fbc4 	bl	8001584 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40003c00 	.word	0x40003c00
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000
 8000e10:	40020800 	.word	0x40020800

08000e14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <HAL_SPI_MspInit+0x84>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d12b      	bne.n	8000e8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e44:	6453      	str	r3, [r2, #68]	; 0x44
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e6e:	23e0      	movs	r3, #224	; 0xe0
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e7e:	2305      	movs	r3, #5
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <HAL_SPI_MspInit+0x8c>)
 8000e8a:	f000 fb7b 	bl	8001584 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	; 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40013000 	.word	0x40013000
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb4:	d10e      	bne.n	8000ed4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <HAL_TIM_Base_MspInit+0x8c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <HAL_TIM_Base_MspInit+0x8c>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <HAL_TIM_Base_MspInit+0x8c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ed2:	e026      	b.n	8000f22 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a16      	ldr	r2, [pc, #88]	; (8000f34 <HAL_TIM_Base_MspInit+0x90>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d10e      	bne.n	8000efc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <HAL_TIM_Base_MspInit+0x8c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <HAL_TIM_Base_MspInit+0x8c>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <HAL_TIM_Base_MspInit+0x8c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
}
 8000efa:	e012      	b.n	8000f22 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_TIM_Base_MspInit+0x94>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d10d      	bne.n	8000f22 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_TIM_Base_MspInit+0x8c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_TIM_Base_MspInit+0x8c>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_TIM_Base_MspInit+0x8c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
}
 8000f22:	bf00      	nop
 8000f24:	371c      	adds	r7, #28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40000400 	.word	0x40000400
 8000f38:	40000800 	.word	0x40000800

08000f3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f5c:	d11f      	bne.n	8000f9e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	4b35      	ldr	r3, [pc, #212]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a34      	ldr	r2, [pc, #208]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b32      	ldr	r3, [pc, #200]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4829      	ldr	r0, [pc, #164]	; (800103c <HAL_TIM_MspPostInit+0x100>)
 8000f98:	f000 faf4 	bl	8001584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f9c:	e047      	b.n	800102e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a27      	ldr	r2, [pc, #156]	; (8001040 <HAL_TIM_MspPostInit+0x104>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d11e      	bne.n	8000fe6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	4a21      	ldr	r2, [pc, #132]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fc4:	2340      	movs	r3, #64	; 0x40
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4819      	ldr	r0, [pc, #100]	; (8001044 <HAL_TIM_MspPostInit+0x108>)
 8000fe0:	f000 fad0 	bl	8001584 <HAL_GPIO_Init>
}
 8000fe4:	e023      	b.n	800102e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a17      	ldr	r2, [pc, #92]	; (8001048 <HAL_TIM_MspPostInit+0x10c>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d11e      	bne.n	800102e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800100c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800101e:	2302      	movs	r3, #2
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4808      	ldr	r0, [pc, #32]	; (800104c <HAL_TIM_MspPostInit+0x110>)
 800102a:	f000 faab 	bl	8001584 <HAL_GPIO_Init>
}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40020000 	.word	0x40020000
 8001040:	40000400 	.word	0x40000400
 8001044:	40020800 	.word	0x40020800
 8001048:	40000800 	.word	0x40000800
 800104c:	40020400 	.word	0x40020400

08001050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a19      	ldr	r2, [pc, #100]	; (80010d4 <HAL_UART_MspInit+0x84>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d12b      	bne.n	80010ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_UART_MspInit+0x88>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <HAL_UART_MspInit+0x88>)
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	6413      	str	r3, [r2, #64]	; 0x40
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_UART_MspInit+0x88>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_UART_MspInit+0x88>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <HAL_UART_MspInit+0x88>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_UART_MspInit+0x88>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010aa:	230c      	movs	r3, #12
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ba:	2307      	movs	r3, #7
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <HAL_UART_MspInit+0x8c>)
 80010c6:	f000 fa5d 	bl	8001584 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	; 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40004400 	.word	0x40004400
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001134:	f000 f8d2 	bl	80012dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001140:	2001      	movs	r0, #1
 8001142:	f000 fbd3 	bl	80018ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <OTG_FS_IRQHandler+0x10>)
 8001152:	f000 fe73 	bl	8001e3c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000684 	.word	0x20000684

08001160 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <_sbrk+0x50>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <_sbrk+0x16>
		heap_end = &end;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <_sbrk+0x50>)
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <_sbrk+0x54>)
 8001174:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <_sbrk+0x50>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <_sbrk+0x50>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	466a      	mov	r2, sp
 8001186:	4293      	cmp	r3, r2
 8001188:	d907      	bls.n	800119a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800118a:	f007 fd41 	bl	8008c10 <__errno>
 800118e:	4602      	mov	r2, r0
 8001190:	230c      	movs	r3, #12
 8001192:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001198:	e006      	b.n	80011a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <_sbrk+0x50>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	4a03      	ldr	r2, [pc, #12]	; (80011b0 <_sbrk+0x50>)
 80011a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200000ac 	.word	0x200000ac
 80011b4:	20000950 	.word	0x20000950

080011b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <SystemInit+0x28>)
 80011be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c2:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <SystemInit+0x28>)
 80011c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SystemInit+0x28>)
 80011ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011d2:	609a      	str	r2, [r3, #8]
#endif
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800121c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011ea:	e003      	b.n	80011f4 <LoopCopyDataInit>

080011ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011f2:	3104      	adds	r1, #4

080011f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011f4:	480b      	ldr	r0, [pc, #44]	; (8001224 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011fc:	d3f6      	bcc.n	80011ec <CopyDataInit>
  ldr  r2, =_sbss
 80011fe:	4a0b      	ldr	r2, [pc, #44]	; (800122c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001200:	e002      	b.n	8001208 <LoopFillZerobss>

08001202 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001202:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001204:	f842 3b04 	str.w	r3, [r2], #4

08001208 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800120a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800120c:	d3f9      	bcc.n	8001202 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800120e:	f7ff ffd3 	bl	80011b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001212:	f007 fd03 	bl	8008c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001216:	f7ff f957 	bl	80004c8 <main>
  bx  lr    
 800121a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800121c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001220:	08008e4c 	.word	0x08008e4c
  ldr  r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001228:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 800122c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001230:	2000094c 	.word	0x2000094c

08001234 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC_IRQHandler>
	...

08001238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <HAL_Init+0x40>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <HAL_Init+0x40>)
 8001242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001246:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_Init+0x40>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <HAL_Init+0x40>)
 800124e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001252:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_Init+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_Init+0x40>)
 800125a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001260:	2003      	movs	r0, #3
 8001262:	f000 f94d 	bl	8001500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001266:	2000      	movs	r0, #0
 8001268:	f000 f808 	bl	800127c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800126c:	f7ff fcfa 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023c00 	.word	0x40023c00

0800127c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_InitTick+0x54>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_InitTick+0x58>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001292:	fbb3 f3f1 	udiv	r3, r3, r1
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f965 	bl	800156a <HAL_SYSTICK_Config>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00e      	b.n	80012c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d80a      	bhi.n	80012c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b0:	2200      	movs	r2, #0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012b8:	f000 f92d 	bl	8001516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012bc:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <HAL_InitTick+0x5c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000008 	.word	0x20000008
 80012d8:	20000004 	.word	0x20000004

080012dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x20>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_IncTick+0x24>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <HAL_IncTick+0x24>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008
 8001300:	200002b4 	.word	0x200002b4

08001304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_GetTick+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	200002b4 	.word	0x200002b4

0800131c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001324:	f7ff ffee 	bl	8001304 <HAL_GetTick>
 8001328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001334:	d005      	beq.n	8001342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_Delay+0x40>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4413      	add	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001342:	bf00      	nop
 8001344:	f7ff ffde 	bl	8001304 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	429a      	cmp	r2, r3
 8001352:	d8f7      	bhi.n	8001344 <HAL_Delay+0x28>
  {
  }
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000008 	.word	0x20000008

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db0b      	blt.n	80013ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	f003 021f 	and.w	r2, r3, #31
 80013dc:	4907      	ldr	r1, [pc, #28]	; (80013fc <__NVIC_EnableIRQ+0x38>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	2001      	movs	r0, #1
 80013e6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	; (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014cc:	d301      	bcc.n	80014d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00f      	b.n	80014f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <SysTick_Config+0x40>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014da:	210f      	movs	r1, #15
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014e0:	f7ff ff8e 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <SysTick_Config+0x40>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <SysTick_Config+0x40>)
 80014ec:	2207      	movs	r2, #7
 80014ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	e000e010 	.word	0xe000e010

08001500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff29 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001528:	f7ff ff3e 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 800152c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff ff8e 	bl	8001454 <NVIC_EncodePriority>
 8001538:	4602      	mov	r2, r0
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff5d 	bl	8001400 <__NVIC_SetPriority>
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff31 	bl	80013c4 <__NVIC_EnableIRQ>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ffa2 	bl	80014bc <SysTick_Config>
 8001578:	4603      	mov	r3, r0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	e16b      	b.n	8001878 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a0:	2201      	movs	r2, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	f040 815a 	bne.w	8001872 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d00b      	beq.n	80015de <HAL_GPIO_Init+0x5a>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d007      	beq.n	80015de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015d2:	2b11      	cmp	r3, #17
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b12      	cmp	r3, #18
 80015dc:	d130      	bne.n	8001640 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001614:	2201      	movs	r2, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 0201 	and.w	r2, r3, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0xfc>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b12      	cmp	r3, #18
 800167e:	d123      	bne.n	80016c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	08da      	lsrs	r2, r3, #3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3208      	adds	r2, #8
 8001688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	69b9      	ldr	r1, [r7, #24]
 80016c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0203 	and.w	r2, r3, #3
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80b4 	beq.w	8001872 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b5f      	ldr	r3, [pc, #380]	; (800188c <HAL_GPIO_Init+0x308>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a5e      	ldr	r2, [pc, #376]	; (800188c <HAL_GPIO_Init+0x308>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b5c      	ldr	r3, [pc, #368]	; (800188c <HAL_GPIO_Init+0x308>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001726:	4a5a      	ldr	r2, [pc, #360]	; (8001890 <HAL_GPIO_Init+0x30c>)
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	3302      	adds	r3, #2
 800172e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	220f      	movs	r2, #15
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a51      	ldr	r2, [pc, #324]	; (8001894 <HAL_GPIO_Init+0x310>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d02b      	beq.n	80017aa <HAL_GPIO_Init+0x226>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a50      	ldr	r2, [pc, #320]	; (8001898 <HAL_GPIO_Init+0x314>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d025      	beq.n	80017a6 <HAL_GPIO_Init+0x222>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4f      	ldr	r2, [pc, #316]	; (800189c <HAL_GPIO_Init+0x318>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d01f      	beq.n	80017a2 <HAL_GPIO_Init+0x21e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4e      	ldr	r2, [pc, #312]	; (80018a0 <HAL_GPIO_Init+0x31c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d019      	beq.n	800179e <HAL_GPIO_Init+0x21a>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4d      	ldr	r2, [pc, #308]	; (80018a4 <HAL_GPIO_Init+0x320>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d013      	beq.n	800179a <HAL_GPIO_Init+0x216>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a4c      	ldr	r2, [pc, #304]	; (80018a8 <HAL_GPIO_Init+0x324>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d00d      	beq.n	8001796 <HAL_GPIO_Init+0x212>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a4b      	ldr	r2, [pc, #300]	; (80018ac <HAL_GPIO_Init+0x328>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d007      	beq.n	8001792 <HAL_GPIO_Init+0x20e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4a      	ldr	r2, [pc, #296]	; (80018b0 <HAL_GPIO_Init+0x32c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d101      	bne.n	800178e <HAL_GPIO_Init+0x20a>
 800178a:	2307      	movs	r3, #7
 800178c:	e00e      	b.n	80017ac <HAL_GPIO_Init+0x228>
 800178e:	2308      	movs	r3, #8
 8001790:	e00c      	b.n	80017ac <HAL_GPIO_Init+0x228>
 8001792:	2306      	movs	r3, #6
 8001794:	e00a      	b.n	80017ac <HAL_GPIO_Init+0x228>
 8001796:	2305      	movs	r3, #5
 8001798:	e008      	b.n	80017ac <HAL_GPIO_Init+0x228>
 800179a:	2304      	movs	r3, #4
 800179c:	e006      	b.n	80017ac <HAL_GPIO_Init+0x228>
 800179e:	2303      	movs	r3, #3
 80017a0:	e004      	b.n	80017ac <HAL_GPIO_Init+0x228>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e002      	b.n	80017ac <HAL_GPIO_Init+0x228>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <HAL_GPIO_Init+0x228>
 80017aa:	2300      	movs	r3, #0
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	f002 0203 	and.w	r2, r2, #3
 80017b2:	0092      	lsls	r2, r2, #2
 80017b4:	4093      	lsls	r3, r2
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017bc:	4934      	ldr	r1, [pc, #208]	; (8001890 <HAL_GPIO_Init+0x30c>)
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	089b      	lsrs	r3, r3, #2
 80017c2:	3302      	adds	r3, #2
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ca:	4b3a      	ldr	r3, [pc, #232]	; (80018b4 <HAL_GPIO_Init+0x330>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ee:	4a31      	ldr	r2, [pc, #196]	; (80018b4 <HAL_GPIO_Init+0x330>)
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017f4:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <HAL_GPIO_Init+0x330>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001818:	4a26      	ldr	r2, [pc, #152]	; (80018b4 <HAL_GPIO_Init+0x330>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800181e:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <HAL_GPIO_Init+0x330>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001842:	4a1c      	ldr	r2, [pc, #112]	; (80018b4 <HAL_GPIO_Init+0x330>)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001848:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <HAL_GPIO_Init+0x330>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800186c:	4a11      	ldr	r2, [pc, #68]	; (80018b4 <HAL_GPIO_Init+0x330>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3301      	adds	r3, #1
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	2b0f      	cmp	r3, #15
 800187c:	f67f ae90 	bls.w	80015a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001880:	bf00      	nop
 8001882:	3724      	adds	r7, #36	; 0x24
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	40023800 	.word	0x40023800
 8001890:	40013800 	.word	0x40013800
 8001894:	40020000 	.word	0x40020000
 8001898:	40020400 	.word	0x40020400
 800189c:	40020800 	.word	0x40020800
 80018a0:	40020c00 	.word	0x40020c00
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40021400 	.word	0x40021400
 80018ac:	40021800 	.word	0x40021800
 80018b0:	40021c00 	.word	0x40021c00
 80018b4:	40013c00 	.word	0x40013c00

080018b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
 80018c4:	4613      	mov	r3, r2
 80018c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018c8:	787b      	ldrb	r3, [r7, #1]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ce:	887a      	ldrh	r2, [r7, #2]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018d4:	e003      	b.n	80018de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	041a      	lsls	r2, r3, #16
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	619a      	str	r2, [r3, #24]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d006      	beq.n	8001910 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f806 	bl	800191c <HAL_GPIO_EXTI_Callback>
  }
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40013c00 	.word	0x40013c00

0800191c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001932:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001934:	b08f      	sub	sp, #60	; 0x3c
 8001936:	af0a      	add	r7, sp, #40	; 0x28
 8001938:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e054      	b.n	80019ee <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f006 feac 	bl	80086bc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2203      	movs	r2, #3
 8001968:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f004 f998 	bl	8005cb8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	687e      	ldr	r6, [r7, #4]
 8001990:	466d      	mov	r5, sp
 8001992:	f106 0410 	add.w	r4, r6, #16
 8001996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80019a6:	1d33      	adds	r3, r6, #4
 80019a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019aa:	6838      	ldr	r0, [r7, #0]
 80019ac:	f004 f912 	bl	8005bd4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2101      	movs	r1, #1
 80019b6:	4618      	mov	r0, r3
 80019b8:	f004 f98f 	bl	8005cda <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	687e      	ldr	r6, [r7, #4]
 80019c4:	466d      	mov	r5, sp
 80019c6:	f106 0410 	add.w	r4, r6, #16
 80019ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80019da:	1d33      	adds	r3, r6, #4
 80019dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019de:	6838      	ldr	r0, [r7, #0]
 80019e0:	f004 faa2 	bl	8005f28 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019f6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80019f6:	b590      	push	{r4, r7, lr}
 80019f8:	b089      	sub	sp, #36	; 0x24
 80019fa:	af04      	add	r7, sp, #16
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	4608      	mov	r0, r1
 8001a00:	4611      	mov	r1, r2
 8001a02:	461a      	mov	r2, r3
 8001a04:	4603      	mov	r3, r0
 8001a06:	70fb      	strb	r3, [r7, #3]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	70bb      	strb	r3, [r7, #2]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_HCD_HC_Init+0x28>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e07f      	b.n	8001b1e <HAL_HCD_HC_Init+0x128>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a26:	78fa      	ldrb	r2, [r7, #3]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	440b      	add	r3, r1
 8001a34:	333d      	adds	r3, #61	; 0x3d
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a3a:	78fa      	ldrb	r2, [r7, #3]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	440b      	add	r3, r1
 8001a48:	3338      	adds	r3, #56	; 0x38
 8001a4a:	787a      	ldrb	r2, [r7, #1]
 8001a4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001a4e:	78fa      	ldrb	r2, [r7, #3]
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3340      	adds	r3, #64	; 0x40
 8001a5e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a60:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a62:	78fa      	ldrb	r2, [r7, #3]
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	3339      	adds	r3, #57	; 0x39
 8001a72:	78fa      	ldrb	r2, [r7, #3]
 8001a74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	440b      	add	r3, r1
 8001a84:	333f      	adds	r3, #63	; 0x3f
 8001a86:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	78bb      	ldrb	r3, [r7, #2]
 8001a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a94:	b2d8      	uxtb	r0, r3
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	440b      	add	r3, r1
 8001aa2:	333a      	adds	r3, #58	; 0x3a
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001aa8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	da0a      	bge.n	8001ac6 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	440b      	add	r3, r1
 8001abe:	333b      	adds	r3, #59	; 0x3b
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
 8001ac4:	e009      	b.n	8001ada <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001ac6:	78fa      	ldrb	r2, [r7, #3]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	440b      	add	r3, r1
 8001ad4:	333b      	adds	r3, #59	; 0x3b
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	333c      	adds	r3, #60	; 0x3c
 8001aea:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001aee:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	787c      	ldrb	r4, [r7, #1]
 8001af6:	78ba      	ldrb	r2, [r7, #2]
 8001af8:	78f9      	ldrb	r1, [r7, #3]
 8001afa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001afc:	9302      	str	r3, [sp, #8]
 8001afe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	4623      	mov	r3, r4
 8001b0c:	f004 fb8e 	bl	800622c <USB_HC_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd90      	pop	{r4, r7, pc}

08001b26 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_HCD_HC_Halt+0x1e>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e00f      	b.n	8001b64 <HAL_HCD_HC_Halt+0x3e>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f004 fdc8 	bl	80066ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	4608      	mov	r0, r1
 8001b76:	4611      	mov	r1, r2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	70fb      	strb	r3, [r7, #3]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	70bb      	strb	r3, [r7, #2]
 8001b82:	4613      	mov	r3, r2
 8001b84:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	333b      	adds	r3, #59	; 0x3b
 8001b96:	78ba      	ldrb	r2, [r7, #2]
 8001b98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b9a:	78fa      	ldrb	r2, [r7, #3]
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	440b      	add	r3, r1
 8001ba8:	333f      	adds	r3, #63	; 0x3f
 8001baa:	787a      	ldrb	r2, [r7, #1]
 8001bac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001bae:	7c3b      	ldrb	r3, [r7, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10a      	bne.n	8001bca <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3342      	adds	r3, #66	; 0x42
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	e009      	b.n	8001bde <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	3342      	adds	r3, #66	; 0x42
 8001bda:	2202      	movs	r2, #2
 8001bdc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001bde:	787b      	ldrb	r3, [r7, #1]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	f200 80d6 	bhi.w	8001d92 <HAL_HCD_HC_SubmitRequest+0x226>
 8001be6:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <HAL_HCD_HC_SubmitRequest+0x80>)
 8001be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bec:	08001bfd 	.word	0x08001bfd
 8001bf0:	08001d7d 	.word	0x08001d7d
 8001bf4:	08001c69 	.word	0x08001c69
 8001bf8:	08001cf3 	.word	0x08001cf3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001bfc:	7c3b      	ldrb	r3, [r7, #16]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	f040 80c9 	bne.w	8001d96 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001c04:	78bb      	ldrb	r3, [r7, #2]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f040 80c5 	bne.w	8001d96 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001c0c:	8b3b      	ldrh	r3, [r7, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c12:	78fa      	ldrb	r2, [r7, #3]
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	440b      	add	r3, r1
 8001c20:	3351      	adds	r3, #81	; 0x51
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	3351      	adds	r3, #81	; 0x51
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10a      	bne.n	8001c52 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c3c:	78fa      	ldrb	r2, [r7, #3]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	3342      	adds	r3, #66	; 0x42
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c50:	e0a1      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c52:	78fa      	ldrb	r2, [r7, #3]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	3342      	adds	r3, #66	; 0x42
 8001c62:	2202      	movs	r2, #2
 8001c64:	701a      	strb	r2, [r3, #0]
      break;
 8001c66:	e096      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c68:	78bb      	ldrb	r3, [r7, #2]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d120      	bne.n	8001cb0 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c6e:	78fa      	ldrb	r2, [r7, #3]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	440b      	add	r3, r1
 8001c7c:	3351      	adds	r3, #81	; 0x51
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10a      	bne.n	8001c9a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c84:	78fa      	ldrb	r2, [r7, #3]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	3342      	adds	r3, #66	; 0x42
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c98:	e07e      	b.n	8001d98 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	3342      	adds	r3, #66	; 0x42
 8001caa:	2202      	movs	r2, #2
 8001cac:	701a      	strb	r2, [r3, #0]
      break;
 8001cae:	e073      	b.n	8001d98 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cb0:	78fa      	ldrb	r2, [r7, #3]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3350      	adds	r3, #80	; 0x50
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10a      	bne.n	8001cdc <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cc6:	78fa      	ldrb	r2, [r7, #3]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	3342      	adds	r3, #66	; 0x42
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
      break;
 8001cda:	e05d      	b.n	8001d98 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	3342      	adds	r3, #66	; 0x42
 8001cec:	2202      	movs	r2, #2
 8001cee:	701a      	strb	r2, [r3, #0]
      break;
 8001cf0:	e052      	b.n	8001d98 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001cf2:	78bb      	ldrb	r3, [r7, #2]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d120      	bne.n	8001d3a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	440b      	add	r3, r1
 8001d06:	3351      	adds	r3, #81	; 0x51
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10a      	bne.n	8001d24 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d0e:	78fa      	ldrb	r2, [r7, #3]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3342      	adds	r3, #66	; 0x42
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d22:	e039      	b.n	8001d98 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	440b      	add	r3, r1
 8001d32:	3342      	adds	r3, #66	; 0x42
 8001d34:	2202      	movs	r2, #2
 8001d36:	701a      	strb	r2, [r3, #0]
      break;
 8001d38:	e02e      	b.n	8001d98 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d3a:	78fa      	ldrb	r2, [r7, #3]
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	440b      	add	r3, r1
 8001d48:	3350      	adds	r3, #80	; 0x50
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10a      	bne.n	8001d66 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d50:	78fa      	ldrb	r2, [r7, #3]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3342      	adds	r3, #66	; 0x42
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
      break;
 8001d64:	e018      	b.n	8001d98 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d66:	78fa      	ldrb	r2, [r7, #3]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	440b      	add	r3, r1
 8001d74:	3342      	adds	r3, #66	; 0x42
 8001d76:	2202      	movs	r2, #2
 8001d78:	701a      	strb	r2, [r3, #0]
      break;
 8001d7a:	e00d      	b.n	8001d98 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d7c:	78fa      	ldrb	r2, [r7, #3]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	440b      	add	r3, r1
 8001d8a:	3342      	adds	r3, #66	; 0x42
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
      break;
 8001d90:	e002      	b.n	8001d98 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001d92:	bf00      	nop
 8001d94:	e000      	b.n	8001d98 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001d96:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d98:	78fa      	ldrb	r2, [r7, #3]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	440b      	add	r3, r1
 8001da6:	3344      	adds	r3, #68	; 0x44
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001dac:	78fa      	ldrb	r2, [r7, #3]
 8001dae:	8b39      	ldrh	r1, [r7, #24]
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4403      	add	r3, r0
 8001dbc:	3348      	adds	r3, #72	; 0x48
 8001dbe:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	440b      	add	r3, r1
 8001dce:	335c      	adds	r3, #92	; 0x5c
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001dd4:	78fa      	ldrb	r2, [r7, #3]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	440b      	add	r3, r1
 8001de2:	334c      	adds	r3, #76	; 0x4c
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001de8:	78fa      	ldrb	r2, [r7, #3]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	440b      	add	r3, r1
 8001df6:	3339      	adds	r3, #57	; 0x39
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001dfc:	78fa      	ldrb	r2, [r7, #3]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	440b      	add	r3, r1
 8001e0a:	335d      	adds	r3, #93	; 0x5d
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	78fa      	ldrb	r2, [r7, #3]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	3338      	adds	r3, #56	; 0x38
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	18d1      	adds	r1, r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	f004 fb08 	bl	8006440 <USB_HC_StartXfer>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop

08001e3c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f004 f825 	bl	8005ea2 <USB_GetMode>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	f040 80f1 	bne.w	8002042 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f004 f809 	bl	8005e7c <USB_ReadInterrupts>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80e7 	beq.w	8002040 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f004 f800 	bl	8005e7c <USB_ReadInterrupts>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e86:	d104      	bne.n	8001e92 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f003 fff0 	bl	8005e7c <USB_ReadInterrupts>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ea6:	d104      	bne.n	8001eb2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001eb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 ffe0 	bl	8005e7c <USB_ReadInterrupts>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ec2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ec6:	d104      	bne.n	8001ed2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ed0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 ffd0 	bl	8005e7c <USB_ReadInterrupts>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d103      	bne.n	8001eee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2202      	movs	r2, #2
 8001eec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 ffc2 	bl	8005e7c <USB_ReadInterrupts>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f02:	d117      	bne.n	8001f34 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001f12:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001f16:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f006 fc4d 	bl	80087b8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2101      	movs	r1, #1
 8001f24:	4618      	mov	r0, r3
 8001f26:	f004 f8bb 	bl	80060a0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f003 ff9f 	bl	8005e7c <USB_ReadInterrupts>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f48:	d102      	bne.n	8001f50 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f001 f8c8 	bl	80030e0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 ff91 	bl	8005e7c <USB_ReadInterrupts>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d106      	bne.n	8001f72 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f006 fc0b 	bl	8008780 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2208      	movs	r2, #8
 8001f70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 ff80 	bl	8005e7c <USB_ReadInterrupts>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f86:	d138      	bne.n	8001ffa <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f004 fb9b 	bl	80066c8 <USB_HC_ReadInterrupt>
 8001f92:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	e025      	b.n	8001fe6 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d018      	beq.n	8001fe0 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fc4:	d106      	bne.n	8001fd4 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f8cf 	bl	8002170 <HCD_HC_IN_IRQHandler>
 8001fd2:	e005      	b.n	8001fe0 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	4619      	mov	r1, r3
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fc5f 	bl	800289e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d3d4      	bcc.n	8001f9a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 ff3c 	bl	8005e7c <USB_ReadInterrupts>
 8002004:	4603      	mov	r3, r0
 8002006:	f003 0310 	and.w	r3, r3, #16
 800200a:	2b10      	cmp	r3, #16
 800200c:	d101      	bne.n	8002012 <HAL_HCD_IRQHandler+0x1d6>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_HCD_IRQHandler+0x1d8>
 8002012:	2300      	movs	r3, #0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d014      	beq.n	8002042 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699a      	ldr	r2, [r3, #24]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0210 	bic.w	r2, r2, #16
 8002026:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 ffad 	bl	8002f88 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699a      	ldr	r2, [r3, #24]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0210 	orr.w	r2, r2, #16
 800203c:	619a      	str	r2, [r3, #24]
 800203e:	e000      	b.n	8002042 <HAL_HCD_IRQHandler+0x206>
      return;
 8002040:	bf00      	nop
    }
  }
}
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_HCD_Start+0x16>
 800205a:	2302      	movs	r3, #2
 800205c:	e013      	b.n	8002086 <HAL_HCD_Start+0x3e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f003 fe13 	bl	8005c96 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2101      	movs	r1, #1
 8002076:	4618      	mov	r0, r3
 8002078:	f004 f876 	bl	8006168 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_HCD_Stop+0x16>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e00d      	b.n	80020c0 <HAL_HCD_Stop+0x32>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f004 fc55 	bl	8006960 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f004 f81d 	bl	8006114 <USB_ResetPort>
 80020da:	4603      	mov	r3, r0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	440b      	add	r3, r1
 80020fe:	335c      	adds	r3, #92	; 0x5c
 8002100:	781b      	ldrb	r3, [r3, #0]
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	460b      	mov	r3, r1
 8002118:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	440b      	add	r3, r1
 8002128:	334c      	adds	r3, #76	; 0x4c
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f004 f85f 	bl	8006208 <USB_GetCurrentFrame>
 800214a:	4603      	mov	r3, r0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f004 f83a 	bl	80061da <USB_GetHostSpeed>
 8002166:	4603      	mov	r3, r0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b04      	cmp	r3, #4
 800219e:	d119      	bne.n	80021d4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ac:	461a      	mov	r2, r3
 80021ae:	2304      	movs	r3, #4
 80021b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	0151      	lsls	r1, r2, #5
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	440a      	add	r2, r1
 80021c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	60d3      	str	r3, [r2, #12]
 80021d2:	e095      	b.n	8002300 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b20      	cmp	r3, #32
 80021e8:	d109      	bne.n	80021fe <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f6:	461a      	mov	r2, r3
 80021f8:	2320      	movs	r3, #32
 80021fa:	6093      	str	r3, [r2, #8]
 80021fc:	e080      	b.n	8002300 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b08      	cmp	r3, #8
 8002212:	d134      	bne.n	800227e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4413      	add	r3, r2
 800221c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	0151      	lsls	r1, r2, #5
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	440a      	add	r2, r1
 800222a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800222e:	f043 0302 	orr.w	r3, r3, #2
 8002232:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	440b      	add	r3, r1
 8002242:	335d      	adds	r3, #93	; 0x5d
 8002244:	2205      	movs	r2, #5
 8002246:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002254:	461a      	mov	r2, r3
 8002256:	2310      	movs	r3, #16
 8002258:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4413      	add	r3, r2
 8002262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002266:	461a      	mov	r2, r3
 8002268:	2308      	movs	r3, #8
 800226a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f004 fa37 	bl	80066ea <USB_HC_Halt>
 800227c:	e040      	b.n	8002300 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002294:	d134      	bne.n	8002300 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4413      	add	r3, r2
 800229e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	0151      	lsls	r1, r2, #5
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	440a      	add	r2, r1
 80022ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f004 fa12 	bl	80066ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d2:	461a      	mov	r2, r3
 80022d4:	2310      	movs	r3, #16
 80022d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	440b      	add	r3, r1
 80022e6:	335d      	adds	r3, #93	; 0x5d
 80022e8:	2208      	movs	r2, #8
 80022ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f8:	461a      	mov	r2, r3
 80022fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022fe:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4413      	add	r3, r2
 8002308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002316:	d122      	bne.n	800235e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	0151      	lsls	r1, r2, #5
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	440a      	add	r2, r1
 800232e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002332:	f043 0302 	orr.w	r3, r3, #2
 8002336:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f004 f9d1 	bl	80066ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	461a      	mov	r2, r3
 8002356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800235a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800235c:	e29b      	b.n	8002896 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b01      	cmp	r3, #1
 8002372:	f040 80c1 	bne.w	80024f8 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01b      	beq.n	80023b6 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	3348      	adds	r3, #72	; 0x48
 800238e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	0159      	lsls	r1, r3, #5
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	440b      	add	r3, r1
 8002398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80023a2:	1ad1      	subs	r1, r2, r3
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4403      	add	r3, r0
 80023b2:	334c      	adds	r3, #76	; 0x4c
 80023b4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	440b      	add	r3, r1
 80023c4:	335d      	adds	r3, #93	; 0x5d
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	440b      	add	r3, r1
 80023d8:	3358      	adds	r3, #88	; 0x58
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ea:	461a      	mov	r2, r3
 80023ec:	2301      	movs	r3, #1
 80023ee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	333f      	adds	r3, #63	; 0x3f
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	440b      	add	r3, r1
 8002414:	333f      	adds	r3, #63	; 0x3f
 8002416:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002418:	2b02      	cmp	r3, #2
 800241a:	d121      	bne.n	8002460 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4413      	add	r3, r2
 8002424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	0151      	lsls	r1, r2, #5
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	440a      	add	r2, r1
 8002432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002436:	f043 0302 	orr.w	r3, r3, #2
 800243a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f004 f94f 	bl	80066ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	461a      	mov	r2, r3
 800245a:	2310      	movs	r3, #16
 800245c:	6093      	str	r3, [r2, #8]
 800245e:	e034      	b.n	80024ca <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	440b      	add	r3, r1
 800246e:	333f      	adds	r3, #63	; 0x3f
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b03      	cmp	r3, #3
 8002474:	d129      	bne.n	80024ca <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4413      	add	r3, r2
 800247e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	0151      	lsls	r1, r2, #5
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	440a      	add	r2, r1
 800248c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002490:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002494:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	440b      	add	r3, r1
 80024a4:	335c      	adds	r3, #92	; 0x5c
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	b2d8      	uxtb	r0, r3
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	335c      	adds	r3, #92	; 0x5c
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4601      	mov	r1, r0
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f006 f985 	bl	80087d4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	440b      	add	r3, r1
 80024d8:	3350      	adds	r3, #80	; 0x50
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	f083 0301 	eor.w	r3, r3, #1
 80024e0:	b2d8      	uxtb	r0, r3
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	3350      	adds	r3, #80	; 0x50
 80024f2:	4602      	mov	r2, r0
 80024f4:	701a      	strb	r2, [r3, #0]
}
 80024f6:	e1ce      	b.n	8002896 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b02      	cmp	r3, #2
 800250c:	f040 80f1 	bne.w	80026f2 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	0151      	lsls	r1, r2, #5
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	440a      	add	r2, r1
 8002526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800252a:	f023 0302 	bic.w	r3, r3, #2
 800252e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	440b      	add	r3, r1
 800253e:	335d      	adds	r3, #93	; 0x5d
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d10a      	bne.n	800255c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	440b      	add	r3, r1
 8002554:	335c      	adds	r3, #92	; 0x5c
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e0b0      	b.n	80026be <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	440b      	add	r3, r1
 800256a:	335d      	adds	r3, #93	; 0x5d
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b05      	cmp	r3, #5
 8002570:	d10a      	bne.n	8002588 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	440b      	add	r3, r1
 8002580:	335c      	adds	r3, #92	; 0x5c
 8002582:	2205      	movs	r2, #5
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e09a      	b.n	80026be <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	440b      	add	r3, r1
 8002596:	335d      	adds	r3, #93	; 0x5d
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b06      	cmp	r3, #6
 800259c:	d00a      	beq.n	80025b4 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	440b      	add	r3, r1
 80025ac:	335d      	adds	r3, #93	; 0x5d
 80025ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d156      	bne.n	8002662 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	3358      	adds	r3, #88	; 0x58
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	1c59      	adds	r1, r3, #1
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4403      	add	r3, r0
 80025d6:	3358      	adds	r3, #88	; 0x58
 80025d8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	440b      	add	r3, r1
 80025e8:	3358      	adds	r3, #88	; 0x58
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d914      	bls.n	800261a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	440b      	add	r3, r1
 80025fe:	3358      	adds	r3, #88	; 0x58
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	440b      	add	r3, r1
 8002612:	335c      	adds	r3, #92	; 0x5c
 8002614:	2204      	movs	r2, #4
 8002616:	701a      	strb	r2, [r3, #0]
 8002618:	e009      	b.n	800262e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	335c      	adds	r3, #92	; 0x5c
 800262a:	2202      	movs	r2, #2
 800262c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002644:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800264c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	461a      	mov	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	e02d      	b.n	80026be <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	440b      	add	r3, r1
 8002670:	335d      	adds	r3, #93	; 0x5d
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d122      	bne.n	80026be <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	335c      	adds	r3, #92	; 0x5c
 8002688:	2202      	movs	r2, #2
 800268a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	461a      	mov	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ca:	461a      	mov	r2, r3
 80026cc:	2302      	movs	r3, #2
 80026ce:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	b2d8      	uxtb	r0, r3
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	440b      	add	r3, r1
 80026e2:	335c      	adds	r3, #92	; 0x5c
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	4601      	mov	r1, r0
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f006 f872 	bl	80087d4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80026f0:	e0d1      	b.n	8002896 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002704:	2b80      	cmp	r3, #128	; 0x80
 8002706:	d13e      	bne.n	8002786 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4413      	add	r3, r2
 8002710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	0151      	lsls	r1, r2, #5
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	440a      	add	r2, r1
 800271e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	440b      	add	r3, r1
 8002736:	3358      	adds	r3, #88	; 0x58
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	1c59      	adds	r1, r3, #1
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4403      	add	r3, r0
 800274a:	3358      	adds	r3, #88	; 0x58
 800274c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	335d      	adds	r3, #93	; 0x5d
 800275e:	2206      	movs	r2, #6
 8002760:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f003 ffbc 	bl	80066ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	461a      	mov	r2, r3
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	6093      	str	r3, [r2, #8]
}
 8002784:	e087      	b.n	8002896 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4413      	add	r3, r2
 800278e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b10      	cmp	r3, #16
 800279a:	d17c      	bne.n	8002896 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	333f      	adds	r3, #63	; 0x3f
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d122      	bne.n	80027f8 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	3358      	adds	r3, #88	; 0x58
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	0151      	lsls	r1, r2, #5
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	440a      	add	r2, r1
 80027dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f003 ff7a 	bl	80066ea <USB_HC_Halt>
 80027f6:	e045      	b.n	8002884 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	333f      	adds	r3, #63	; 0x3f
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	333f      	adds	r3, #63	; 0x3f
 800281e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002820:	2b02      	cmp	r3, #2
 8002822:	d12f      	bne.n	8002884 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	440b      	add	r3, r1
 8002832:	3358      	adds	r3, #88	; 0x58
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d121      	bne.n	8002884 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	335d      	adds	r3, #93	; 0x5d
 8002850:	2203      	movs	r2, #3
 8002852:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	0151      	lsls	r1, r2, #5
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	440a      	add	r2, r1
 800286a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800286e:	f043 0302 	orr.w	r3, r3, #2
 8002872:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f003 ff33 	bl	80066ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	461a      	mov	r2, r3
 8002892:	2310      	movs	r3, #16
 8002894:	6093      	str	r3, [r2, #8]
}
 8002896:	bf00      	nop
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	460b      	mov	r3, r1
 80028a8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d119      	bne.n	8002902 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028da:	461a      	mov	r2, r3
 80028dc:	2304      	movs	r3, #4
 80028de:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	0151      	lsls	r1, r2, #5
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	440a      	add	r2, r1
 80028f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028fa:	f043 0302 	orr.w	r3, r3, #2
 80028fe:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002900:	e33e      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4413      	add	r3, r2
 800290a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b20      	cmp	r3, #32
 8002916:	d141      	bne.n	800299c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002924:	461a      	mov	r2, r3
 8002926:	2320      	movs	r3, #32
 8002928:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	333d      	adds	r3, #61	; 0x3d
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	f040 831f 	bne.w	8002f80 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	440b      	add	r3, r1
 8002950:	333d      	adds	r3, #61	; 0x3d
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	440b      	add	r3, r1
 8002964:	335c      	adds	r3, #92	; 0x5c
 8002966:	2202      	movs	r2, #2
 8002968:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4413      	add	r3, r2
 8002972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	0151      	lsls	r1, r2, #5
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	440a      	add	r2, r1
 8002980:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f003 fea8 	bl	80066ea <USB_HC_Halt>
}
 800299a:	e2f1      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ae:	2b40      	cmp	r3, #64	; 0x40
 80029b0:	d13f      	bne.n	8002a32 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	440b      	add	r3, r1
 80029c0:	335d      	adds	r3, #93	; 0x5d
 80029c2:	2204      	movs	r2, #4
 80029c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	333d      	adds	r3, #61	; 0x3d
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	3358      	adds	r3, #88	; 0x58
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	0151      	lsls	r1, r2, #5
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	440a      	add	r2, r1
 8002a04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f003 fe66 	bl	80066ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2340      	movs	r3, #64	; 0x40
 8002a2e:	6093      	str	r3, [r2, #8]
}
 8002a30:	e2a6      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a48:	d122      	bne.n	8002a90 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	0151      	lsls	r1, r2, #5
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	440a      	add	r2, r1
 8002a60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f003 fe38 	bl	80066ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a86:	461a      	mov	r2, r3
 8002a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a8c:	6093      	str	r3, [r2, #8]
}
 8002a8e:	e277      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d135      	bne.n	8002b12 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3358      	adds	r3, #88	; 0x58
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	0151      	lsls	r1, r2, #5
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	440a      	add	r2, r1
 8002ad0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ad4:	f043 0302 	orr.w	r3, r3, #2
 8002ad8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f003 fe00 	bl	80066ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af6:	461a      	mov	r2, r3
 8002af8:	2301      	movs	r3, #1
 8002afa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	335d      	adds	r3, #93	; 0x5d
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
}
 8002b10:	e236      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d12b      	bne.n	8002b80 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b34:	461a      	mov	r2, r3
 8002b36:	2308      	movs	r3, #8
 8002b38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	0151      	lsls	r1, r2, #5
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	440a      	add	r2, r1
 8002b50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f003 fdc0 	bl	80066ea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	335d      	adds	r3, #93	; 0x5d
 8002b7a:	2205      	movs	r2, #5
 8002b7c:	701a      	strb	r2, [r3, #0]
}
 8002b7e:	e1ff      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	2b10      	cmp	r3, #16
 8002b94:	d155      	bne.n	8002c42 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3358      	adds	r3, #88	; 0x58
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	440b      	add	r3, r1
 8002bb8:	335d      	adds	r3, #93	; 0x5d
 8002bba:	2203      	movs	r2, #3
 8002bbc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	440b      	add	r3, r1
 8002bcc:	333d      	adds	r3, #61	; 0x3d
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d114      	bne.n	8002bfe <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	440b      	add	r3, r1
 8002be2:	333c      	adds	r3, #60	; 0x3c
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	333d      	adds	r3, #61	; 0x3d
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	0151      	lsls	r1, r2, #5
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	440a      	add	r2, r1
 8002c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c18:	f043 0302 	orr.w	r3, r3, #2
 8002c1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f003 fd5e 	bl	80066ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	6093      	str	r3, [r2, #8]
}
 8002c40:	e19e      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c54:	2b80      	cmp	r3, #128	; 0x80
 8002c56:	d12b      	bne.n	8002cb0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	0151      	lsls	r1, r2, #5
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	440a      	add	r2, r1
 8002c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c72:	f043 0302 	orr.w	r3, r3, #2
 8002c76:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f003 fd31 	bl	80066ea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	440b      	add	r3, r1
 8002c96:	335d      	adds	r3, #93	; 0x5d
 8002c98:	2206      	movs	r2, #6
 8002c9a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	6093      	str	r3, [r2, #8]
}
 8002cae:	e167      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc6:	d135      	bne.n	8002d34 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	0151      	lsls	r1, r2, #5
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	440a      	add	r2, r1
 8002cde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ce2:	f043 0302 	orr.w	r3, r3, #2
 8002ce6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 fcf9 	bl	80066ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d04:	461a      	mov	r2, r3
 8002d06:	2310      	movs	r3, #16
 8002d08:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d16:	461a      	mov	r2, r3
 8002d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	440b      	add	r3, r1
 8002d2c:	335d      	adds	r3, #93	; 0x5d
 8002d2e:	2208      	movs	r2, #8
 8002d30:	701a      	strb	r2, [r3, #0]
}
 8002d32:	e125      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	f040 811a 	bne.w	8002f80 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	0151      	lsls	r1, r2, #5
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	440a      	add	r2, r1
 8002d62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d66:	f023 0302 	bic.w	r3, r3, #2
 8002d6a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	440b      	add	r3, r1
 8002d7a:	335d      	adds	r3, #93	; 0x5d
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d137      	bne.n	8002df2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	335c      	adds	r3, #92	; 0x5c
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	333f      	adds	r3, #63	; 0x3f
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d00b      	beq.n	8002dc4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	440b      	add	r3, r1
 8002dba:	333f      	adds	r3, #63	; 0x3f
 8002dbc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	f040 80c5 	bne.w	8002f4e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3351      	adds	r3, #81	; 0x51
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	f083 0301 	eor.w	r3, r3, #1
 8002dda:	b2d8      	uxtb	r0, r3
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	440b      	add	r3, r1
 8002dea:	3351      	adds	r3, #81	; 0x51
 8002dec:	4602      	mov	r2, r0
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	e0ad      	b.n	8002f4e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	440b      	add	r3, r1
 8002e00:	335d      	adds	r3, #93	; 0x5d
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d10a      	bne.n	8002e1e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	440b      	add	r3, r1
 8002e16:	335c      	adds	r3, #92	; 0x5c
 8002e18:	2202      	movs	r2, #2
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	e097      	b.n	8002f4e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	335d      	adds	r3, #93	; 0x5d
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d10a      	bne.n	8002e4a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	440b      	add	r3, r1
 8002e42:	335c      	adds	r3, #92	; 0x5c
 8002e44:	2202      	movs	r2, #2
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	e081      	b.n	8002f4e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	440b      	add	r3, r1
 8002e58:	335d      	adds	r3, #93	; 0x5d
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b05      	cmp	r3, #5
 8002e5e:	d10a      	bne.n	8002e76 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	335c      	adds	r3, #92	; 0x5c
 8002e70:	2205      	movs	r2, #5
 8002e72:	701a      	strb	r2, [r3, #0]
 8002e74:	e06b      	b.n	8002f4e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	440b      	add	r3, r1
 8002e84:	335d      	adds	r3, #93	; 0x5d
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b06      	cmp	r3, #6
 8002e8a:	d00a      	beq.n	8002ea2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	335d      	adds	r3, #93	; 0x5d
 8002e9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d155      	bne.n	8002f4e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	3358      	adds	r3, #88	; 0x58
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	1c59      	adds	r1, r3, #1
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4403      	add	r3, r0
 8002ec4:	3358      	adds	r3, #88	; 0x58
 8002ec6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3358      	adds	r3, #88	; 0x58
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d914      	bls.n	8002f08 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	3358      	adds	r3, #88	; 0x58
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	440b      	add	r3, r1
 8002f00:	335c      	adds	r3, #92	; 0x5c
 8002f02:	2204      	movs	r2, #4
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	e009      	b.n	8002f1c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	440b      	add	r3, r1
 8002f16:	335c      	adds	r3, #92	; 0x5c
 8002f18:	2202      	movs	r2, #2
 8002f1a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f32:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f3a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	b2d8      	uxtb	r0, r3
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	440b      	add	r3, r1
 8002f72:	335c      	adds	r3, #92	; 0x5c
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	4601      	mov	r1, r0
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f005 fc2a 	bl	80087d4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f80:	bf00      	nop
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	; 0x28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	0c5b      	lsrs	r3, r3, #17
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fbc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d003      	beq.n	8002fcc <HCD_RXQLVL_IRQHandler+0x44>
 8002fc4:	2b05      	cmp	r3, #5
 8002fc6:	f000 8082 	beq.w	80030ce <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002fca:	e083      	b.n	80030d4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d07f      	beq.n	80030d2 <HCD_RXQLVL_IRQHandler+0x14a>
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	440b      	add	r3, r1
 8002fe0:	3344      	adds	r3, #68	; 0x44
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d074      	beq.n	80030d2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	440b      	add	r3, r1
 8002ffa:	3344      	adds	r3, #68	; 0x44
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	b292      	uxth	r2, r2
 8003002:	4619      	mov	r1, r3
 8003004:	f002 ff11 	bl	8005e2a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	440b      	add	r3, r1
 8003016:	3344      	adds	r3, #68	; 0x44
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	18d1      	adds	r1, r2, r3
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4403      	add	r3, r0
 800302c:	3344      	adds	r3, #68	; 0x44
 800302e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	440b      	add	r3, r1
 800303e:	334c      	adds	r3, #76	; 0x4c
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	18d1      	adds	r1, r2, r3
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4403      	add	r3, r0
 8003054:	334c      	adds	r3, #76	; 0x4c
 8003056:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	4413      	add	r3, r2
 8003060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HCD_RXQLVL_IRQHandler+0x154>)
 8003068:	4013      	ands	r3, r2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d031      	beq.n	80030d2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	4413      	add	r3, r2
 8003076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003084:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800308c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	4413      	add	r3, r2
 8003096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309a:	461a      	mov	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	440b      	add	r3, r1
 80030ae:	3350      	adds	r3, #80	; 0x50
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	f083 0301 	eor.w	r3, r3, #1
 80030b6:	b2d8      	uxtb	r0, r3
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	440b      	add	r3, r1
 80030c6:	3350      	adds	r3, #80	; 0x50
 80030c8:	4602      	mov	r2, r0
 80030ca:	701a      	strb	r2, [r3, #0]
      break;
 80030cc:	e001      	b.n	80030d2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80030ce:	bf00      	nop
 80030d0:	e000      	b.n	80030d4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80030d2:	bf00      	nop
  }
}
 80030d4:	bf00      	nop
 80030d6:	3728      	adds	r7, #40	; 0x28
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	1ff80000 	.word	0x1ff80000

080030e0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800310c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b02      	cmp	r3, #2
 8003116:	d113      	bne.n	8003140 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b01      	cmp	r3, #1
 8003120:	d10a      	bne.n	8003138 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003130:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f005 fb32 	bl	800879c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f043 0302 	orr.w	r3, r3, #2
 800313e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b08      	cmp	r3, #8
 8003148:	d147      	bne.n	80031da <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f043 0308 	orr.w	r3, r3, #8
 8003150:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b04      	cmp	r3, #4
 800315a:	d129      	bne.n	80031b0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d113      	bne.n	800318c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800316a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800316e:	d106      	bne.n	800317e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2102      	movs	r1, #2
 8003176:	4618      	mov	r0, r3
 8003178:	f002 ff92 	bl	80060a0 <USB_InitFSLSPClkSel>
 800317c:	e011      	b.n	80031a2 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2101      	movs	r1, #1
 8003184:	4618      	mov	r0, r3
 8003186:	f002 ff8b 	bl	80060a0 <USB_InitFSLSPClkSel>
 800318a:	e00a      	b.n	80031a2 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d106      	bne.n	80031a2 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800319a:	461a      	mov	r2, r3
 800319c:	f64e 2360 	movw	r3, #60000	; 0xea60
 80031a0:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f005 fb24 	bl	80087f0 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f005 faf7 	bl	800879c <HAL_HCD_Connect_Callback>
 80031ae:	e014      	b.n	80031da <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f005 fb2b 	bl	800880c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80031c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80031c8:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699a      	ldr	r2, [r3, #24]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80031d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d103      	bne.n	80031ec <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f043 0320 	orr.w	r3, r3, #32
 80031ea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031f2:	461a      	mov	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	6013      	str	r3, [r2, #0]
}
 80031f8:	bf00      	nop
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e11f      	b.n	8003452 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fd fd44 	bl	8000cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2224      	movs	r2, #36	; 0x24
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003252:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003262:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003264:	f001 f9de 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8003268:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4a7b      	ldr	r2, [pc, #492]	; (800345c <HAL_I2C_Init+0x25c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d807      	bhi.n	8003284 <HAL_I2C_Init+0x84>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4a7a      	ldr	r2, [pc, #488]	; (8003460 <HAL_I2C_Init+0x260>)
 8003278:	4293      	cmp	r3, r2
 800327a:	bf94      	ite	ls
 800327c:	2301      	movls	r3, #1
 800327e:	2300      	movhi	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	e006      	b.n	8003292 <HAL_I2C_Init+0x92>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4a77      	ldr	r2, [pc, #476]	; (8003464 <HAL_I2C_Init+0x264>)
 8003288:	4293      	cmp	r3, r2
 800328a:	bf94      	ite	ls
 800328c:	2301      	movls	r3, #1
 800328e:	2300      	movhi	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e0db      	b.n	8003452 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4a72      	ldr	r2, [pc, #456]	; (8003468 <HAL_I2C_Init+0x268>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	0c9b      	lsrs	r3, r3, #18
 80032a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	4a64      	ldr	r2, [pc, #400]	; (800345c <HAL_I2C_Init+0x25c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d802      	bhi.n	80032d4 <HAL_I2C_Init+0xd4>
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	3301      	adds	r3, #1
 80032d2:	e009      	b.n	80032e8 <HAL_I2C_Init+0xe8>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	4a63      	ldr	r2, [pc, #396]	; (800346c <HAL_I2C_Init+0x26c>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	099b      	lsrs	r3, r3, #6
 80032e6:	3301      	adds	r3, #1
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4956      	ldr	r1, [pc, #344]	; (800345c <HAL_I2C_Init+0x25c>)
 8003304:	428b      	cmp	r3, r1
 8003306:	d80d      	bhi.n	8003324 <HAL_I2C_Init+0x124>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1e59      	subs	r1, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	fbb1 f3f3 	udiv	r3, r1, r3
 8003316:	3301      	adds	r3, #1
 8003318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800331c:	2b04      	cmp	r3, #4
 800331e:	bf38      	it	cc
 8003320:	2304      	movcc	r3, #4
 8003322:	e04f      	b.n	80033c4 <HAL_I2C_Init+0x1c4>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d111      	bne.n	8003350 <HAL_I2C_Init+0x150>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1e58      	subs	r0, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6859      	ldr	r1, [r3, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	440b      	add	r3, r1
 800333a:	fbb0 f3f3 	udiv	r3, r0, r3
 800333e:	3301      	adds	r3, #1
 8003340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	e012      	b.n	8003376 <HAL_I2C_Init+0x176>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1e58      	subs	r0, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	0099      	lsls	r1, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	fbb0 f3f3 	udiv	r3, r0, r3
 8003366:	3301      	adds	r3, #1
 8003368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_I2C_Init+0x17e>
 800337a:	2301      	movs	r3, #1
 800337c:	e022      	b.n	80033c4 <HAL_I2C_Init+0x1c4>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10e      	bne.n	80033a4 <HAL_I2C_Init+0x1a4>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1e58      	subs	r0, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6859      	ldr	r1, [r3, #4]
 800338e:	460b      	mov	r3, r1
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	440b      	add	r3, r1
 8003394:	fbb0 f3f3 	udiv	r3, r0, r3
 8003398:	3301      	adds	r3, #1
 800339a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033a2:	e00f      	b.n	80033c4 <HAL_I2C_Init+0x1c4>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1e58      	subs	r0, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	0099      	lsls	r1, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ba:	3301      	adds	r3, #1
 80033bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	6809      	ldr	r1, [r1, #0]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69da      	ldr	r2, [r3, #28]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6911      	ldr	r1, [r2, #16]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	68d2      	ldr	r2, [r2, #12]
 80033fe:	4311      	orrs	r1, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	430b      	orrs	r3, r1
 8003406:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	000186a0 	.word	0x000186a0
 8003460:	001e847f 	.word	0x001e847f
 8003464:	003d08ff 	.word	0x003d08ff
 8003468:	431bde83 	.word	0x431bde83
 800346c:	10624dd3 	.word	0x10624dd3

08003470 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e128      	b.n	80036d4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a90      	ldr	r2, [pc, #576]	; (80036dc <HAL_I2S_Init+0x26c>)
 800349a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7fd fc51 	bl	8000d44 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034b8:	f023 030f 	bic.w	r3, r3, #15
 80034bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2202      	movs	r2, #2
 80034c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d060      	beq.n	8003590 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d102      	bne.n	80034dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80034d6:	2310      	movs	r3, #16
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e001      	b.n	80034e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80034dc:	2320      	movs	r3, #32
 80034de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d802      	bhi.n	80034ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80034ee:	2001      	movs	r0, #1
 80034f0:	f001 f9a2 	bl	8004838 <HAL_RCCEx_GetPeriphCLKFreq>
 80034f4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fe:	d125      	bne.n	800354c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d010      	beq.n	800352a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	461a      	mov	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	fbb2 f3f3 	udiv	r3, r2, r3
 8003524:	3305      	adds	r3, #5
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	e01f      	b.n	800356a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	fbb2 f2f3 	udiv	r2, r2, r3
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	461a      	mov	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	fbb2 f3f3 	udiv	r3, r2, r3
 8003546:	3305      	adds	r3, #5
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	e00e      	b.n	800356a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	fbb2 f2f3 	udiv	r2, r2, r3
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	461a      	mov	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	fbb2 f3f3 	udiv	r3, r2, r3
 8003566:	3305      	adds	r3, #5
 8003568:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4a5c      	ldr	r2, [pc, #368]	; (80036e0 <HAL_I2S_Init+0x270>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	08db      	lsrs	r3, r3, #3
 8003574:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	e003      	b.n	8003598 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003590:	2302      	movs	r3, #2
 8003592:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d902      	bls.n	80035a4 <HAL_I2S_Init+0x134>
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	2bff      	cmp	r3, #255	; 0xff
 80035a2:	d907      	bls.n	80035b4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	f043 0210 	orr.w	r2, r3, #16
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e08f      	b.n	80036d4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	ea42 0103 	orr.w	r1, r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035d2:	f023 030f 	bic.w	r3, r3, #15
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6851      	ldr	r1, [r2, #4]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6892      	ldr	r2, [r2, #8]
 80035de:	4311      	orrs	r1, r2
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	68d2      	ldr	r2, [r2, #12]
 80035e4:	4311      	orrs	r1, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6992      	ldr	r2, [r2, #24]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d161      	bne.n	80036c4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a38      	ldr	r2, [pc, #224]	; (80036e4 <HAL_I2S_Init+0x274>)
 8003604:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a37      	ldr	r2, [pc, #220]	; (80036e8 <HAL_I2S_Init+0x278>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d101      	bne.n	8003614 <HAL_I2S_Init+0x1a4>
 8003610:	4b36      	ldr	r3, [pc, #216]	; (80036ec <HAL_I2S_Init+0x27c>)
 8003612:	e001      	b.n	8003618 <HAL_I2S_Init+0x1a8>
 8003614:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	4932      	ldr	r1, [pc, #200]	; (80036e8 <HAL_I2S_Init+0x278>)
 8003620:	428a      	cmp	r2, r1
 8003622:	d101      	bne.n	8003628 <HAL_I2S_Init+0x1b8>
 8003624:	4a31      	ldr	r2, [pc, #196]	; (80036ec <HAL_I2S_Init+0x27c>)
 8003626:	e001      	b.n	800362c <HAL_I2S_Init+0x1bc>
 8003628:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800362c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003630:	f023 030f 	bic.w	r3, r3, #15
 8003634:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2b      	ldr	r2, [pc, #172]	; (80036e8 <HAL_I2S_Init+0x278>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d101      	bne.n	8003644 <HAL_I2S_Init+0x1d4>
 8003640:	4b2a      	ldr	r3, [pc, #168]	; (80036ec <HAL_I2S_Init+0x27c>)
 8003642:	e001      	b.n	8003648 <HAL_I2S_Init+0x1d8>
 8003644:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003648:	2202      	movs	r2, #2
 800364a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a25      	ldr	r2, [pc, #148]	; (80036e8 <HAL_I2S_Init+0x278>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <HAL_I2S_Init+0x1ea>
 8003656:	4b25      	ldr	r3, [pc, #148]	; (80036ec <HAL_I2S_Init+0x27c>)
 8003658:	e001      	b.n	800365e <HAL_I2S_Init+0x1ee>
 800365a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800366a:	d003      	beq.n	8003674 <HAL_I2S_Init+0x204>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d103      	bne.n	800367c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	e001      	b.n	8003680 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	b299      	uxth	r1, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003696:	4303      	orrs	r3, r0
 8003698:	b29b      	uxth	r3, r3
 800369a:	430b      	orrs	r3, r1
 800369c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800369e:	4313      	orrs	r3, r2
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	897b      	ldrh	r3, [r7, #10]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036ac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a0d      	ldr	r2, [pc, #52]	; (80036e8 <HAL_I2S_Init+0x278>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d101      	bne.n	80036bc <HAL_I2S_Init+0x24c>
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <HAL_I2S_Init+0x27c>)
 80036ba:	e001      	b.n	80036c0 <HAL_I2S_Init+0x250>
 80036bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c0:	897a      	ldrh	r2, [r7, #10]
 80036c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3720      	adds	r7, #32
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	080037e7 	.word	0x080037e7
 80036e0:	cccccccd 	.word	0xcccccccd
 80036e4:	080038fd 	.word	0x080038fd
 80036e8:	40003800 	.word	0x40003800
 80036ec:	40003400 	.word	0x40003400

080036f0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	881a      	ldrh	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	1c9a      	adds	r2, r3, #2
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10e      	bne.n	8003780 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003770:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff ffb8 	bl	80036f0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	b292      	uxth	r2, r2
 800379c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	1c9a      	adds	r2, r3, #2
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10e      	bne.n	80037de <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ff93 	bl	8003704 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b086      	sub	sp, #24
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d13a      	bne.n	8003878 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d109      	bne.n	8003820 <I2S_IRQHandler+0x3a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003816:	2b40      	cmp	r3, #64	; 0x40
 8003818:	d102      	bne.n	8003820 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff ffb4 	bl	8003788 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b40      	cmp	r3, #64	; 0x40
 8003828:	d126      	bne.n	8003878 <I2S_IRQHandler+0x92>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b20      	cmp	r3, #32
 8003836:	d11f      	bne.n	8003878 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003846:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003848:	2300      	movs	r3, #0
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	f043 0202 	orr.w	r2, r3, #2
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ff50 	bl	8003718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b03      	cmp	r3, #3
 8003882:	d136      	bne.n	80038f2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b02      	cmp	r3, #2
 800388c:	d109      	bne.n	80038a2 <I2S_IRQHandler+0xbc>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003898:	2b80      	cmp	r3, #128	; 0x80
 800389a:	d102      	bne.n	80038a2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff ff45 	bl	800372c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d122      	bne.n	80038f2 <I2S_IRQHandler+0x10c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d11b      	bne.n	80038f2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038c8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	f043 0204 	orr.w	r2, r3, #4
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff ff13 	bl	8003718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038f2:	bf00      	nop
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4aa2      	ldr	r2, [pc, #648]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003916:	4ba2      	ldr	r3, [pc, #648]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003918:	e001      	b.n	800391e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800391a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a9b      	ldr	r2, [pc, #620]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d101      	bne.n	8003938 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003934:	4b9a      	ldr	r3, [pc, #616]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003936:	e001      	b.n	800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003938:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003948:	d004      	beq.n	8003954 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	f040 8099 	bne.w	8003a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b02      	cmp	r3, #2
 800395c:	d107      	bne.n	800396e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f925 	bl	8003bb8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d107      	bne.n	8003988 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f9c8 	bl	8003d18 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d13a      	bne.n	8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d035      	beq.n	8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a7e      	ldr	r2, [pc, #504]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d101      	bne.n	80039aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80039a6:	4b7e      	ldr	r3, [pc, #504]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039a8:	e001      	b.n	80039ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80039aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4979      	ldr	r1, [pc, #484]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039b6:	428b      	cmp	r3, r1
 80039b8:	d101      	bne.n	80039be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80039ba:	4b79      	ldr	r3, [pc, #484]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039bc:	e001      	b.n	80039c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80039be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	f043 0202 	orr.w	r2, r3, #2
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff fe88 	bl	8003718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	f040 80be 	bne.w	8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 80b8 	beq.w	8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a2e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a59      	ldr	r2, [pc, #356]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a3a:	4b59      	ldr	r3, [pc, #356]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a3c:	e001      	b.n	8003a42 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4954      	ldr	r1, [pc, #336]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a4a:	428b      	cmp	r3, r1
 8003a4c:	d101      	bne.n	8003a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a4e:	4b54      	ldr	r3, [pc, #336]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a50:	e001      	b.n	8003a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a5a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60bb      	str	r3, [r7, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	f043 0204 	orr.w	r2, r3, #4
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff fe4a 	bl	8003718 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a84:	e084      	b.n	8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d107      	bne.n	8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f8be 	bl	8003c1c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d107      	bne.n	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f8fd 	bl	8003cb4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac0:	2b40      	cmp	r3, #64	; 0x40
 8003ac2:	d12f      	bne.n	8003b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d02a      	beq.n	8003b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003adc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2e      	ldr	r2, [pc, #184]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d101      	bne.n	8003aec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ae8:	4b2d      	ldr	r3, [pc, #180]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003aea:	e001      	b.n	8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003aec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4929      	ldr	r1, [pc, #164]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003af8:	428b      	cmp	r3, r1
 8003afa:	d101      	bne.n	8003b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003afc:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003afe:	e001      	b.n	8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b08:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	f043 0202 	orr.w	r2, r3, #2
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff fdfa 	bl	8003718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d131      	bne.n	8003b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d02c      	beq.n	8003b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d101      	bne.n	8003b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b42:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b44:	e001      	b.n	8003b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4912      	ldr	r1, [pc, #72]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b52:	428b      	cmp	r3, r1
 8003b54:	d101      	bne.n	8003b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b58:	e001      	b.n	8003b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003b5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b62:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b72:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	f043 0204 	orr.w	r2, r3, #4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff fdc5 	bl	8003718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b8e:	e000      	b.n	8003b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b90:	bf00      	nop
}
 8003b92:	bf00      	nop
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40003800 	.word	0x40003800
 8003ba0:	40003400 	.word	0x40003400

08003ba4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	1c99      	adds	r1, r3, #2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6251      	str	r1, [r2, #36]	; 0x24
 8003bca:	881a      	ldrh	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d113      	bne.n	8003c12 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bf8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d106      	bne.n	8003c12 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ffc9 	bl	8003ba4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	1c99      	adds	r1, r3, #2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6251      	str	r1, [r2, #36]	; 0x24
 8003c2e:	8819      	ldrh	r1, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1d      	ldr	r2, [pc, #116]	; (8003cac <I2SEx_TxISR_I2SExt+0x90>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d101      	bne.n	8003c3e <I2SEx_TxISR_I2SExt+0x22>
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c3c:	e001      	b.n	8003c42 <I2SEx_TxISR_I2SExt+0x26>
 8003c3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c42:	460a      	mov	r2, r1
 8003c44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d121      	bne.n	8003ca2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a12      	ldr	r2, [pc, #72]	; (8003cac <I2SEx_TxISR_I2SExt+0x90>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d101      	bne.n	8003c6c <I2SEx_TxISR_I2SExt+0x50>
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c6a:	e001      	b.n	8003c70 <I2SEx_TxISR_I2SExt+0x54>
 8003c6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	490d      	ldr	r1, [pc, #52]	; (8003cac <I2SEx_TxISR_I2SExt+0x90>)
 8003c78:	428b      	cmp	r3, r1
 8003c7a:	d101      	bne.n	8003c80 <I2SEx_TxISR_I2SExt+0x64>
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c7e:	e001      	b.n	8003c84 <I2SEx_TxISR_I2SExt+0x68>
 8003c80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d106      	bne.n	8003ca2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ff81 	bl	8003ba4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40003800 	.word	0x40003800
 8003cb0:	40003400 	.word	0x40003400

08003cb4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68d8      	ldr	r0, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	1c99      	adds	r1, r3, #2
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ccc:	b282      	uxth	r2, r0
 8003cce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d113      	bne.n	8003d10 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cf6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff ff4a 	bl	8003ba4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d10:	bf00      	nop
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a20      	ldr	r2, [pc, #128]	; (8003da8 <I2SEx_RxISR_I2SExt+0x90>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <I2SEx_RxISR_I2SExt+0x16>
 8003d2a:	4b20      	ldr	r3, [pc, #128]	; (8003dac <I2SEx_RxISR_I2SExt+0x94>)
 8003d2c:	e001      	b.n	8003d32 <I2SEx_RxISR_I2SExt+0x1a>
 8003d2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d32:	68d8      	ldr	r0, [r3, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	1c99      	adds	r1, r3, #2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d3e:	b282      	uxth	r2, r0
 8003d40:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d121      	bne.n	8003d9e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <I2SEx_RxISR_I2SExt+0x90>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d101      	bne.n	8003d68 <I2SEx_RxISR_I2SExt+0x50>
 8003d64:	4b11      	ldr	r3, [pc, #68]	; (8003dac <I2SEx_RxISR_I2SExt+0x94>)
 8003d66:	e001      	b.n	8003d6c <I2SEx_RxISR_I2SExt+0x54>
 8003d68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	490d      	ldr	r1, [pc, #52]	; (8003da8 <I2SEx_RxISR_I2SExt+0x90>)
 8003d74:	428b      	cmp	r3, r1
 8003d76:	d101      	bne.n	8003d7c <I2SEx_RxISR_I2SExt+0x64>
 8003d78:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <I2SEx_RxISR_I2SExt+0x94>)
 8003d7a:	e001      	b.n	8003d80 <I2SEx_RxISR_I2SExt+0x68>
 8003d7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d84:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d106      	bne.n	8003d9e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ff03 	bl	8003ba4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40003800 	.word	0x40003800
 8003dac:	40003400 	.word	0x40003400

08003db0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e25b      	b.n	800427a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d075      	beq.n	8003eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dce:	4ba3      	ldr	r3, [pc, #652]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d00c      	beq.n	8003df4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dda:	4ba0      	ldr	r3, [pc, #640]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d112      	bne.n	8003e0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003de6:	4b9d      	ldr	r3, [pc, #628]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df2:	d10b      	bne.n	8003e0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df4:	4b99      	ldr	r3, [pc, #612]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d05b      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x108>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d157      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e236      	b.n	800427a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e14:	d106      	bne.n	8003e24 <HAL_RCC_OscConfig+0x74>
 8003e16:	4b91      	ldr	r3, [pc, #580]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a90      	ldr	r2, [pc, #576]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e01d      	b.n	8003e60 <HAL_RCC_OscConfig+0xb0>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0x98>
 8003e2e:	4b8b      	ldr	r3, [pc, #556]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a8a      	ldr	r2, [pc, #552]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b88      	ldr	r3, [pc, #544]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a87      	ldr	r2, [pc, #540]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e00b      	b.n	8003e60 <HAL_RCC_OscConfig+0xb0>
 8003e48:	4b84      	ldr	r3, [pc, #528]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a83      	ldr	r2, [pc, #524]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	4b81      	ldr	r3, [pc, #516]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a80      	ldr	r2, [pc, #512]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fd fa4c 	bl	8001304 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e70:	f7fd fa48 	bl	8001304 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	; 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e1fb      	b.n	800427a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b76      	ldr	r3, [pc, #472]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0xc0>
 8003e8e:	e014      	b.n	8003eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7fd fa38 	bl	8001304 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e98:	f7fd fa34 	bl	8001304 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	; 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e1e7      	b.n	800427a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	4b6c      	ldr	r3, [pc, #432]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0xe8>
 8003eb6:	e000      	b.n	8003eba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d063      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ec6:	4b65      	ldr	r3, [pc, #404]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed2:	4b62      	ldr	r3, [pc, #392]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d11c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ede:	4b5f      	ldr	r3, [pc, #380]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d116      	bne.n	8003f18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eea:	4b5c      	ldr	r3, [pc, #368]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_RCC_OscConfig+0x152>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d001      	beq.n	8003f02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e1bb      	b.n	800427a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f02:	4b56      	ldr	r3, [pc, #344]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4952      	ldr	r1, [pc, #328]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	e03a      	b.n	8003f8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d020      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f20:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <HAL_RCC_OscConfig+0x2b0>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f26:	f7fd f9ed 	bl	8001304 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f2e:	f7fd f9e9 	bl	8001304 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e19c      	b.n	800427a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f40:	4b46      	ldr	r3, [pc, #280]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4c:	4b43      	ldr	r3, [pc, #268]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4940      	ldr	r1, [pc, #256]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]
 8003f60:	e015      	b.n	8003f8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f62:	4b3f      	ldr	r3, [pc, #252]	; (8004060 <HAL_RCC_OscConfig+0x2b0>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fd f9cc 	bl	8001304 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f70:	f7fd f9c8 	bl	8001304 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e17b      	b.n	800427a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f82:	4b36      	ldr	r3, [pc, #216]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d030      	beq.n	8003ffc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d016      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa2:	4b30      	ldr	r3, [pc, #192]	; (8004064 <HAL_RCC_OscConfig+0x2b4>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fd f9ac 	bl	8001304 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb0:	f7fd f9a8 	bl	8001304 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e15b      	b.n	800427a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc2:	4b26      	ldr	r3, [pc, #152]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x200>
 8003fce:	e015      	b.n	8003ffc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd0:	4b24      	ldr	r3, [pc, #144]	; (8004064 <HAL_RCC_OscConfig+0x2b4>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd6:	f7fd f995 	bl	8001304 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fde:	f7fd f991 	bl	8001304 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e144      	b.n	800427a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff0:	4b1a      	ldr	r3, [pc, #104]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f0      	bne.n	8003fde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80a0 	beq.w	800414a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400e:	4b13      	ldr	r3, [pc, #76]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10f      	bne.n	800403a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	4b0f      	ldr	r3, [pc, #60]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	4a0e      	ldr	r2, [pc, #56]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8004024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004028:	6413      	str	r3, [r2, #64]	; 0x40
 800402a:	4b0c      	ldr	r3, [pc, #48]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004036:	2301      	movs	r3, #1
 8004038:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_RCC_OscConfig+0x2b8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d121      	bne.n	800408a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004046:	4b08      	ldr	r3, [pc, #32]	; (8004068 <HAL_RCC_OscConfig+0x2b8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a07      	ldr	r2, [pc, #28]	; (8004068 <HAL_RCC_OscConfig+0x2b8>)
 800404c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004052:	f7fd f957 	bl	8001304 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004058:	e011      	b.n	800407e <HAL_RCC_OscConfig+0x2ce>
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800
 8004060:	42470000 	.word	0x42470000
 8004064:	42470e80 	.word	0x42470e80
 8004068:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406c:	f7fd f94a 	bl	8001304 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e0fd      	b.n	800427a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407e:	4b81      	ldr	r3, [pc, #516]	; (8004284 <HAL_RCC_OscConfig+0x4d4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d106      	bne.n	80040a0 <HAL_RCC_OscConfig+0x2f0>
 8004092:	4b7d      	ldr	r3, [pc, #500]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	4a7c      	ldr	r2, [pc, #496]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6713      	str	r3, [r2, #112]	; 0x70
 800409e:	e01c      	b.n	80040da <HAL_RCC_OscConfig+0x32a>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b05      	cmp	r3, #5
 80040a6:	d10c      	bne.n	80040c2 <HAL_RCC_OscConfig+0x312>
 80040a8:	4b77      	ldr	r3, [pc, #476]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	4a76      	ldr	r2, [pc, #472]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 80040ae:	f043 0304 	orr.w	r3, r3, #4
 80040b2:	6713      	str	r3, [r2, #112]	; 0x70
 80040b4:	4b74      	ldr	r3, [pc, #464]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	4a73      	ldr	r2, [pc, #460]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	6713      	str	r3, [r2, #112]	; 0x70
 80040c0:	e00b      	b.n	80040da <HAL_RCC_OscConfig+0x32a>
 80040c2:	4b71      	ldr	r3, [pc, #452]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	4a70      	ldr	r2, [pc, #448]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	6713      	str	r3, [r2, #112]	; 0x70
 80040ce:	4b6e      	ldr	r3, [pc, #440]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a6d      	ldr	r2, [pc, #436]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 80040d4:	f023 0304 	bic.w	r3, r3, #4
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d015      	beq.n	800410e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e2:	f7fd f90f 	bl	8001304 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e8:	e00a      	b.n	8004100 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ea:	f7fd f90b 	bl	8001304 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e0bc      	b.n	800427a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004100:	4b61      	ldr	r3, [pc, #388]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 8004102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0ee      	beq.n	80040ea <HAL_RCC_OscConfig+0x33a>
 800410c:	e014      	b.n	8004138 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800410e:	f7fd f8f9 	bl	8001304 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004114:	e00a      	b.n	800412c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004116:	f7fd f8f5 	bl	8001304 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f241 3288 	movw	r2, #5000	; 0x1388
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e0a6      	b.n	800427a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412c:	4b56      	ldr	r3, [pc, #344]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1ee      	bne.n	8004116 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004138:	7dfb      	ldrb	r3, [r7, #23]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d105      	bne.n	800414a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413e:	4b52      	ldr	r3, [pc, #328]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	4a51      	ldr	r2, [pc, #324]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004148:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 8092 	beq.w	8004278 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004154:	4b4c      	ldr	r3, [pc, #304]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 030c 	and.w	r3, r3, #12
 800415c:	2b08      	cmp	r3, #8
 800415e:	d05c      	beq.n	800421a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d141      	bne.n	80041ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004168:	4b48      	ldr	r3, [pc, #288]	; (800428c <HAL_RCC_OscConfig+0x4dc>)
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416e:	f7fd f8c9 	bl	8001304 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004176:	f7fd f8c5 	bl	8001304 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e078      	b.n	800427a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004188:	4b3f      	ldr	r3, [pc, #252]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f0      	bne.n	8004176 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	019b      	lsls	r3, r3, #6
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	3b01      	subs	r3, #1
 80041ae:	041b      	lsls	r3, r3, #16
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	061b      	lsls	r3, r3, #24
 80041b8:	4933      	ldr	r1, [pc, #204]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041be:	4b33      	ldr	r3, [pc, #204]	; (800428c <HAL_RCC_OscConfig+0x4dc>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c4:	f7fd f89e 	bl	8001304 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041cc:	f7fd f89a 	bl	8001304 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e04d      	b.n	800427a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041de:	4b2a      	ldr	r3, [pc, #168]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x41c>
 80041ea:	e045      	b.n	8004278 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ec:	4b27      	ldr	r3, [pc, #156]	; (800428c <HAL_RCC_OscConfig+0x4dc>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f2:	f7fd f887 	bl	8001304 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fa:	f7fd f883 	bl	8001304 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e036      	b.n	800427a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420c:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f0      	bne.n	80041fa <HAL_RCC_OscConfig+0x44a>
 8004218:	e02e      	b.n	8004278 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e029      	b.n	800427a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004226:	4b18      	ldr	r3, [pc, #96]	; (8004288 <HAL_RCC_OscConfig+0x4d8>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	429a      	cmp	r2, r3
 8004238:	d11c      	bne.n	8004274 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d115      	bne.n	8004274 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800424e:	4013      	ands	r3, r2
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004254:	4293      	cmp	r3, r2
 8004256:	d10d      	bne.n	8004274 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004262:	429a      	cmp	r2, r3
 8004264:	d106      	bne.n	8004274 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40007000 	.word	0x40007000
 8004288:	40023800 	.word	0x40023800
 800428c:	42470060 	.word	0x42470060

08004290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0cc      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042a4:	4b68      	ldr	r3, [pc, #416]	; (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d90c      	bls.n	80042cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b65      	ldr	r3, [pc, #404]	; (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	4b63      	ldr	r3, [pc, #396]	; (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0b8      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e4:	4b59      	ldr	r3, [pc, #356]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	4a58      	ldr	r2, [pc, #352]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042fc:	4b53      	ldr	r3, [pc, #332]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4a52      	ldr	r2, [pc, #328]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004308:	4b50      	ldr	r3, [pc, #320]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	494d      	ldr	r1, [pc, #308]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d044      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d107      	bne.n	800433e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d119      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e07f      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d003      	beq.n	800434e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800434a:	2b03      	cmp	r3, #3
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434e:	4b3f      	ldr	r3, [pc, #252]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e06f      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435e:	4b3b      	ldr	r3, [pc, #236]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e067      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800436e:	4b37      	ldr	r3, [pc, #220]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f023 0203 	bic.w	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	4934      	ldr	r1, [pc, #208]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004380:	f7fc ffc0 	bl	8001304 <HAL_GetTick>
 8004384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	e00a      	b.n	800439e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004388:	f7fc ffbc 	bl	8001304 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f241 3288 	movw	r2, #5000	; 0x1388
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e04f      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439e:	4b2b      	ldr	r3, [pc, #172]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 020c 	and.w	r2, r3, #12
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d1eb      	bne.n	8004388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043b0:	4b25      	ldr	r3, [pc, #148]	; (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d20c      	bcs.n	80043d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043be:	4b22      	ldr	r3, [pc, #136]	; (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c6:	4b20      	ldr	r3, [pc, #128]	; (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e032      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e4:	4b19      	ldr	r3, [pc, #100]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4916      	ldr	r1, [pc, #88]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	490e      	ldr	r1, [pc, #56]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004416:	f000 f821 	bl	800445c <HAL_RCC_GetSysClockFreq>
 800441a:	4601      	mov	r1, r0
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 8004428:	5cd3      	ldrb	r3, [r2, r3]
 800442a:	fa21 f303 	lsr.w	r3, r1, r3
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004432:	4b09      	ldr	r3, [pc, #36]	; (8004458 <HAL_RCC_ClockConfig+0x1c8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fc ff20 	bl	800127c <HAL_InitTick>

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40023c00 	.word	0x40023c00
 800444c:	40023800 	.word	0x40023800
 8004450:	08008e24 	.word	0x08008e24
 8004454:	20000000 	.word	0x20000000
 8004458:	20000004 	.word	0x20000004

0800445c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800445c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	607b      	str	r3, [r7, #4]
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	2300      	movs	r3, #0
 800446c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004472:	4b63      	ldr	r3, [pc, #396]	; (8004600 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	2b04      	cmp	r3, #4
 800447c:	d007      	beq.n	800448e <HAL_RCC_GetSysClockFreq+0x32>
 800447e:	2b08      	cmp	r3, #8
 8004480:	d008      	beq.n	8004494 <HAL_RCC_GetSysClockFreq+0x38>
 8004482:	2b00      	cmp	r3, #0
 8004484:	f040 80b4 	bne.w	80045f0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004488:	4b5e      	ldr	r3, [pc, #376]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800448a:	60bb      	str	r3, [r7, #8]
       break;
 800448c:	e0b3      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800448e:	4b5e      	ldr	r3, [pc, #376]	; (8004608 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004490:	60bb      	str	r3, [r7, #8]
      break;
 8004492:	e0b0      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004494:	4b5a      	ldr	r3, [pc, #360]	; (8004600 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800449c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800449e:	4b58      	ldr	r3, [pc, #352]	; (8004600 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d04a      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044aa:	4b55      	ldr	r3, [pc, #340]	; (8004600 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	099b      	lsrs	r3, r3, #6
 80044b0:	f04f 0400 	mov.w	r4, #0
 80044b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	ea03 0501 	and.w	r5, r3, r1
 80044c0:	ea04 0602 	and.w	r6, r4, r2
 80044c4:	4629      	mov	r1, r5
 80044c6:	4632      	mov	r2, r6
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	f04f 0400 	mov.w	r4, #0
 80044d0:	0154      	lsls	r4, r2, #5
 80044d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044d6:	014b      	lsls	r3, r1, #5
 80044d8:	4619      	mov	r1, r3
 80044da:	4622      	mov	r2, r4
 80044dc:	1b49      	subs	r1, r1, r5
 80044de:	eb62 0206 	sbc.w	r2, r2, r6
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	f04f 0400 	mov.w	r4, #0
 80044ea:	0194      	lsls	r4, r2, #6
 80044ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044f0:	018b      	lsls	r3, r1, #6
 80044f2:	1a5b      	subs	r3, r3, r1
 80044f4:	eb64 0402 	sbc.w	r4, r4, r2
 80044f8:	f04f 0100 	mov.w	r1, #0
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	00e2      	lsls	r2, r4, #3
 8004502:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004506:	00d9      	lsls	r1, r3, #3
 8004508:	460b      	mov	r3, r1
 800450a:	4614      	mov	r4, r2
 800450c:	195b      	adds	r3, r3, r5
 800450e:	eb44 0406 	adc.w	r4, r4, r6
 8004512:	f04f 0100 	mov.w	r1, #0
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	0262      	lsls	r2, r4, #9
 800451c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004520:	0259      	lsls	r1, r3, #9
 8004522:	460b      	mov	r3, r1
 8004524:	4614      	mov	r4, r2
 8004526:	4618      	mov	r0, r3
 8004528:	4621      	mov	r1, r4
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f04f 0400 	mov.w	r4, #0
 8004530:	461a      	mov	r2, r3
 8004532:	4623      	mov	r3, r4
 8004534:	f7fb fe48 	bl	80001c8 <__aeabi_uldivmod>
 8004538:	4603      	mov	r3, r0
 800453a:	460c      	mov	r4, r1
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	e049      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004540:	4b2f      	ldr	r3, [pc, #188]	; (8004600 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	099b      	lsrs	r3, r3, #6
 8004546:	f04f 0400 	mov.w	r4, #0
 800454a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	ea03 0501 	and.w	r5, r3, r1
 8004556:	ea04 0602 	and.w	r6, r4, r2
 800455a:	4629      	mov	r1, r5
 800455c:	4632      	mov	r2, r6
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	f04f 0400 	mov.w	r4, #0
 8004566:	0154      	lsls	r4, r2, #5
 8004568:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800456c:	014b      	lsls	r3, r1, #5
 800456e:	4619      	mov	r1, r3
 8004570:	4622      	mov	r2, r4
 8004572:	1b49      	subs	r1, r1, r5
 8004574:	eb62 0206 	sbc.w	r2, r2, r6
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	f04f 0400 	mov.w	r4, #0
 8004580:	0194      	lsls	r4, r2, #6
 8004582:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004586:	018b      	lsls	r3, r1, #6
 8004588:	1a5b      	subs	r3, r3, r1
 800458a:	eb64 0402 	sbc.w	r4, r4, r2
 800458e:	f04f 0100 	mov.w	r1, #0
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	00e2      	lsls	r2, r4, #3
 8004598:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800459c:	00d9      	lsls	r1, r3, #3
 800459e:	460b      	mov	r3, r1
 80045a0:	4614      	mov	r4, r2
 80045a2:	195b      	adds	r3, r3, r5
 80045a4:	eb44 0406 	adc.w	r4, r4, r6
 80045a8:	f04f 0100 	mov.w	r1, #0
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	02a2      	lsls	r2, r4, #10
 80045b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80045b6:	0299      	lsls	r1, r3, #10
 80045b8:	460b      	mov	r3, r1
 80045ba:	4614      	mov	r4, r2
 80045bc:	4618      	mov	r0, r3
 80045be:	4621      	mov	r1, r4
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f04f 0400 	mov.w	r4, #0
 80045c6:	461a      	mov	r2, r3
 80045c8:	4623      	mov	r3, r4
 80045ca:	f7fb fdfd 	bl	80001c8 <__aeabi_uldivmod>
 80045ce:	4603      	mov	r3, r0
 80045d0:	460c      	mov	r4, r1
 80045d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045d4:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	3301      	adds	r3, #1
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ec:	60bb      	str	r3, [r7, #8]
      break;
 80045ee:	e002      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045f0:	4b04      	ldr	r3, [pc, #16]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80045f2:	60bb      	str	r3, [r7, #8]
      break;
 80045f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045f6:	68bb      	ldr	r3, [r7, #8]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004600:	40023800 	.word	0x40023800
 8004604:	00f42400 	.word	0x00f42400
 8004608:	007a1200 	.word	0x007a1200

0800460c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_RCC_GetHCLKFreq+0x14>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000000 	.word	0x20000000

08004624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004628:	f7ff fff0 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800462c:	4601      	mov	r1, r0
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	0a9b      	lsrs	r3, r3, #10
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	4a03      	ldr	r2, [pc, #12]	; (8004648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800463a:	5cd3      	ldrb	r3, [r2, r3]
 800463c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004640:	4618      	mov	r0, r3
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40023800 	.word	0x40023800
 8004648:	08008e34 	.word	0x08008e34

0800464c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004650:	f7ff ffdc 	bl	800460c <HAL_RCC_GetHCLKFreq>
 8004654:	4601      	mov	r1, r0
 8004656:	4b05      	ldr	r3, [pc, #20]	; (800466c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	0b5b      	lsrs	r3, r3, #13
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	4a03      	ldr	r2, [pc, #12]	; (8004670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004662:	5cd3      	ldrb	r3, [r2, r3]
 8004664:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004668:	4618      	mov	r0, r3
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40023800 	.word	0x40023800
 8004670:	08008e34 	.word	0x08008e34

08004674 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d105      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004698:	2b00      	cmp	r3, #0
 800469a:	d035      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800469c:	4b62      	ldr	r3, [pc, #392]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046a2:	f7fc fe2f 	bl	8001304 <HAL_GetTick>
 80046a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046a8:	e008      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046aa:	f7fc fe2b 	bl	8001304 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e0b0      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046bc:	4b5b      	ldr	r3, [pc, #364]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1f0      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	019a      	lsls	r2, r3, #6
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	071b      	lsls	r3, r3, #28
 80046d4:	4955      	ldr	r1, [pc, #340]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046dc:	4b52      	ldr	r3, [pc, #328]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046e2:	f7fc fe0f 	bl	8001304 <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046e8:	e008      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046ea:	f7fc fe0b 	bl	8001304 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e090      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046fc:	4b4b      	ldr	r3, [pc, #300]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8083 	beq.w	800481c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	4b44      	ldr	r3, [pc, #272]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	4a43      	ldr	r2, [pc, #268]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004724:	6413      	str	r3, [r2, #64]	; 0x40
 8004726:	4b41      	ldr	r3, [pc, #260]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004732:	4b3f      	ldr	r3, [pc, #252]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a3e      	ldr	r2, [pc, #248]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800473e:	f7fc fde1 	bl	8001304 <HAL_GetTick>
 8004742:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004744:	e008      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004746:	f7fc fddd 	bl	8001304 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e062      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004758:	4b35      	ldr	r3, [pc, #212]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004764:	4b31      	ldr	r3, [pc, #196]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d02f      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	429a      	cmp	r2, r3
 8004780:	d028      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004782:	4b2a      	ldr	r3, [pc, #168]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800478c:	4b29      	ldr	r3, [pc, #164]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800478e:	2201      	movs	r2, #1
 8004790:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004792:	4b28      	ldr	r3, [pc, #160]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004798:	4a24      	ldr	r2, [pc, #144]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800479e:	4b23      	ldr	r3, [pc, #140]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d114      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80047aa:	f7fc fdab 	bl	8001304 <HAL_GetTick>
 80047ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b0:	e00a      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b2:	f7fc fda7 	bl	8001304 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e02a      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c8:	4b18      	ldr	r3, [pc, #96]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0ee      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047e0:	d10d      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80047e2:	4b12      	ldr	r3, [pc, #72]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f6:	490d      	ldr	r1, [pc, #52]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	608b      	str	r3, [r1, #8]
 80047fc:	e005      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047fe:	4b0b      	ldr	r3, [pc, #44]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	4a0a      	ldr	r2, [pc, #40]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004804:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004808:	6093      	str	r3, [r2, #8]
 800480a:	4b08      	ldr	r3, [pc, #32]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800480c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004816:	4905      	ldr	r1, [pc, #20]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004818:	4313      	orrs	r3, r2
 800481a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	42470068 	.word	0x42470068
 800482c:	40023800 	.word	0x40023800
 8004830:	40007000 	.word	0x40007000
 8004834:	42470e40 	.word	0x42470e40

08004838 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d13d      	bne.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004856:	4b22      	ldr	r3, [pc, #136]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800485e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d004      	beq.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004866:	2b01      	cmp	r3, #1
 8004868:	d12f      	bne.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800486a:	4b1e      	ldr	r3, [pc, #120]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800486c:	617b      	str	r3, [r7, #20]
          break;
 800486e:	e02f      	b.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004870:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004878:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800487c:	d108      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800487e:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004886:	4a18      	ldr	r2, [pc, #96]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004888:	fbb2 f3f3 	udiv	r3, r2, r3
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	e007      	b.n	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004890:	4b13      	ldr	r3, [pc, #76]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004898:	4a14      	ldr	r2, [pc, #80]	; (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800489a:	fbb2 f3f3 	udiv	r3, r2, r3
 800489e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80048a0:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80048a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a6:	099b      	lsrs	r3, r3, #6
 80048a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80048b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ba:	0f1b      	lsrs	r3, r3, #28
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c6:	617b      	str	r3, [r7, #20]
          break;
 80048c8:	e002      	b.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]
          break;
 80048ce:	bf00      	nop
        }
      }
      break;
 80048d0:	bf00      	nop
    }
  }
  return frequency;
 80048d2:	697b      	ldr	r3, [r7, #20]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	40023800 	.word	0x40023800
 80048e4:	00bb8000 	.word	0x00bb8000
 80048e8:	007a1200 	.word	0x007a1200
 80048ec:	00f42400 	.word	0x00f42400

080048f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e056      	b.n	80049b0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d106      	bne.n	8004922 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7fc fa79 	bl	8000e14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004938:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	ea42 0103 	orr.w	r1, r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	0c1b      	lsrs	r3, r3, #16
 8004980:	f003 0104 	and.w	r1, r3, #4
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69da      	ldr	r2, [r3, #28]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800499e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e01d      	b.n	8004a06 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fc fa60 	bl	8000ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f000 f9bc 	bl	8004d74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e01d      	b.n	8004a5c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d106      	bne.n	8004a3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f815 	bl	8004a64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	f000 f991 	bl	8004d74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e0b4      	b.n	8004bfc <HAL_TIM_PWM_ConfigChannel+0x184>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b0c      	cmp	r3, #12
 8004aa6:	f200 809f 	bhi.w	8004be8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004aaa:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004ae5 	.word	0x08004ae5
 8004ab4:	08004be9 	.word	0x08004be9
 8004ab8:	08004be9 	.word	0x08004be9
 8004abc:	08004be9 	.word	0x08004be9
 8004ac0:	08004b25 	.word	0x08004b25
 8004ac4:	08004be9 	.word	0x08004be9
 8004ac8:	08004be9 	.word	0x08004be9
 8004acc:	08004be9 	.word	0x08004be9
 8004ad0:	08004b67 	.word	0x08004b67
 8004ad4:	08004be9 	.word	0x08004be9
 8004ad8:	08004be9 	.word	0x08004be9
 8004adc:	08004be9 	.word	0x08004be9
 8004ae0:	08004ba7 	.word	0x08004ba7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68b9      	ldr	r1, [r7, #8]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f9e2 	bl	8004eb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0208 	orr.w	r2, r2, #8
 8004afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0204 	bic.w	r2, r2, #4
 8004b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6999      	ldr	r1, [r3, #24]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	619a      	str	r2, [r3, #24]
      break;
 8004b22:	e062      	b.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fa32 	bl	8004f94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6999      	ldr	r1, [r3, #24]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	021a      	lsls	r2, r3, #8
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	619a      	str	r2, [r3, #24]
      break;
 8004b64:	e041      	b.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fa87 	bl	8005080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 0208 	orr.w	r2, r2, #8
 8004b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0204 	bic.w	r2, r2, #4
 8004b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69d9      	ldr	r1, [r3, #28]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	61da      	str	r2, [r3, #28]
      break;
 8004ba4:	e021      	b.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fadb 	bl	8005168 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69d9      	ldr	r1, [r3, #28]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	021a      	lsls	r2, r3, #8
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	61da      	str	r2, [r3, #28]
      break;
 8004be6:	e000      	b.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004be8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_TIM_ConfigClockSource+0x18>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e0a6      	b.n	8004d6a <HAL_TIM_ConfigClockSource+0x166>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b40      	cmp	r3, #64	; 0x40
 8004c52:	d067      	beq.n	8004d24 <HAL_TIM_ConfigClockSource+0x120>
 8004c54:	2b40      	cmp	r3, #64	; 0x40
 8004c56:	d80b      	bhi.n	8004c70 <HAL_TIM_ConfigClockSource+0x6c>
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d073      	beq.n	8004d44 <HAL_TIM_ConfigClockSource+0x140>
 8004c5c:	2b10      	cmp	r3, #16
 8004c5e:	d802      	bhi.n	8004c66 <HAL_TIM_ConfigClockSource+0x62>
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d06f      	beq.n	8004d44 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004c64:	e078      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d06c      	beq.n	8004d44 <HAL_TIM_ConfigClockSource+0x140>
 8004c6a:	2b30      	cmp	r3, #48	; 0x30
 8004c6c:	d06a      	beq.n	8004d44 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c6e:	e073      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c70:	2b70      	cmp	r3, #112	; 0x70
 8004c72:	d00d      	beq.n	8004c90 <HAL_TIM_ConfigClockSource+0x8c>
 8004c74:	2b70      	cmp	r3, #112	; 0x70
 8004c76:	d804      	bhi.n	8004c82 <HAL_TIM_ConfigClockSource+0x7e>
 8004c78:	2b50      	cmp	r3, #80	; 0x50
 8004c7a:	d033      	beq.n	8004ce4 <HAL_TIM_ConfigClockSource+0xe0>
 8004c7c:	2b60      	cmp	r3, #96	; 0x60
 8004c7e:	d041      	beq.n	8004d04 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c80:	e06a      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c86:	d066      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x152>
 8004c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c8c:	d017      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c8e:	e063      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	6899      	ldr	r1, [r3, #8]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f000 fb32 	bl	8005308 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cb2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	609a      	str	r2, [r3, #8]
      break;
 8004cbc:	e04c      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	6899      	ldr	r1, [r3, #8]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f000 fb1b 	bl	8005308 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ce0:	609a      	str	r2, [r3, #8]
      break;
 8004ce2:	e039      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	6859      	ldr	r1, [r3, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	f000 fa8f 	bl	8005214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2150      	movs	r1, #80	; 0x50
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fae8 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 8004d02:	e029      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	6859      	ldr	r1, [r3, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	461a      	mov	r2, r3
 8004d12:	f000 faae 	bl	8005272 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2160      	movs	r1, #96	; 0x60
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fad8 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 8004d22:	e019      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	6859      	ldr	r1, [r3, #4]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	461a      	mov	r2, r3
 8004d32:	f000 fa6f 	bl	8005214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2140      	movs	r1, #64	; 0x40
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fac8 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 8004d42:	e009      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4610      	mov	r0, r2
 8004d50:	f000 fabf 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 8004d54:	e000      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a40      	ldr	r2, [pc, #256]	; (8004e88 <TIM_Base_SetConfig+0x114>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d013      	beq.n	8004db4 <TIM_Base_SetConfig+0x40>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d92:	d00f      	beq.n	8004db4 <TIM_Base_SetConfig+0x40>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a3d      	ldr	r2, [pc, #244]	; (8004e8c <TIM_Base_SetConfig+0x118>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00b      	beq.n	8004db4 <TIM_Base_SetConfig+0x40>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a3c      	ldr	r2, [pc, #240]	; (8004e90 <TIM_Base_SetConfig+0x11c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d007      	beq.n	8004db4 <TIM_Base_SetConfig+0x40>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a3b      	ldr	r2, [pc, #236]	; (8004e94 <TIM_Base_SetConfig+0x120>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d003      	beq.n	8004db4 <TIM_Base_SetConfig+0x40>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a3a      	ldr	r2, [pc, #232]	; (8004e98 <TIM_Base_SetConfig+0x124>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d108      	bne.n	8004dc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a2f      	ldr	r2, [pc, #188]	; (8004e88 <TIM_Base_SetConfig+0x114>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d02b      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd4:	d027      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a2c      	ldr	r2, [pc, #176]	; (8004e8c <TIM_Base_SetConfig+0x118>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d023      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a2b      	ldr	r2, [pc, #172]	; (8004e90 <TIM_Base_SetConfig+0x11c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d01f      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a2a      	ldr	r2, [pc, #168]	; (8004e94 <TIM_Base_SetConfig+0x120>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01b      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a29      	ldr	r2, [pc, #164]	; (8004e98 <TIM_Base_SetConfig+0x124>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d017      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a28      	ldr	r2, [pc, #160]	; (8004e9c <TIM_Base_SetConfig+0x128>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a27      	ldr	r2, [pc, #156]	; (8004ea0 <TIM_Base_SetConfig+0x12c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00f      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a26      	ldr	r2, [pc, #152]	; (8004ea4 <TIM_Base_SetConfig+0x130>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00b      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a25      	ldr	r2, [pc, #148]	; (8004ea8 <TIM_Base_SetConfig+0x134>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d007      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a24      	ldr	r2, [pc, #144]	; (8004eac <TIM_Base_SetConfig+0x138>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d003      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a23      	ldr	r2, [pc, #140]	; (8004eb0 <TIM_Base_SetConfig+0x13c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d108      	bne.n	8004e38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a0a      	ldr	r2, [pc, #40]	; (8004e88 <TIM_Base_SetConfig+0x114>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d003      	beq.n	8004e6c <TIM_Base_SetConfig+0xf8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a0c      	ldr	r2, [pc, #48]	; (8004e98 <TIM_Base_SetConfig+0x124>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d103      	bne.n	8004e74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	615a      	str	r2, [r3, #20]
}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40010000 	.word	0x40010000
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	40000800 	.word	0x40000800
 8004e94:	40000c00 	.word	0x40000c00
 8004e98:	40010400 	.word	0x40010400
 8004e9c:	40014000 	.word	0x40014000
 8004ea0:	40014400 	.word	0x40014400
 8004ea4:	40014800 	.word	0x40014800
 8004ea8:	40001800 	.word	0x40001800
 8004eac:	40001c00 	.word	0x40001c00
 8004eb0:	40002000 	.word	0x40002000

08004eb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	f023 0201 	bic.w	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0303 	bic.w	r3, r3, #3
 8004eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f023 0302 	bic.w	r3, r3, #2
 8004efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a20      	ldr	r2, [pc, #128]	; (8004f8c <TIM_OC1_SetConfig+0xd8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d003      	beq.n	8004f18 <TIM_OC1_SetConfig+0x64>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a1f      	ldr	r2, [pc, #124]	; (8004f90 <TIM_OC1_SetConfig+0xdc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d10c      	bne.n	8004f32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f023 0308 	bic.w	r3, r3, #8
 8004f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f023 0304 	bic.w	r3, r3, #4
 8004f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a15      	ldr	r2, [pc, #84]	; (8004f8c <TIM_OC1_SetConfig+0xd8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d003      	beq.n	8004f42 <TIM_OC1_SetConfig+0x8e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a14      	ldr	r2, [pc, #80]	; (8004f90 <TIM_OC1_SetConfig+0xdc>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d111      	bne.n	8004f66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	621a      	str	r2, [r3, #32]
}
 8004f80:	bf00      	nop
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	40010400 	.word	0x40010400

08004f94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f023 0210 	bic.w	r2, r3, #16
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	021b      	lsls	r3, r3, #8
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f023 0320 	bic.w	r3, r3, #32
 8004fde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a22      	ldr	r2, [pc, #136]	; (8005078 <TIM_OC2_SetConfig+0xe4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_OC2_SetConfig+0x68>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a21      	ldr	r2, [pc, #132]	; (800507c <TIM_OC2_SetConfig+0xe8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d10d      	bne.n	8005018 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005016:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a17      	ldr	r2, [pc, #92]	; (8005078 <TIM_OC2_SetConfig+0xe4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_OC2_SetConfig+0x94>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a16      	ldr	r2, [pc, #88]	; (800507c <TIM_OC2_SetConfig+0xe8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d113      	bne.n	8005050 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800502e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005036:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	621a      	str	r2, [r3, #32]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40010000 	.word	0x40010000
 800507c:	40010400 	.word	0x40010400

08005080 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0303 	bic.w	r3, r3, #3
 80050b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a21      	ldr	r2, [pc, #132]	; (8005160 <TIM_OC3_SetConfig+0xe0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d003      	beq.n	80050e6 <TIM_OC3_SetConfig+0x66>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a20      	ldr	r2, [pc, #128]	; (8005164 <TIM_OC3_SetConfig+0xe4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d10d      	bne.n	8005102 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a16      	ldr	r2, [pc, #88]	; (8005160 <TIM_OC3_SetConfig+0xe0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d003      	beq.n	8005112 <TIM_OC3_SetConfig+0x92>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a15      	ldr	r2, [pc, #84]	; (8005164 <TIM_OC3_SetConfig+0xe4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d113      	bne.n	800513a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	621a      	str	r2, [r3, #32]
}
 8005154:	bf00      	nop
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	40010000 	.word	0x40010000
 8005164:	40010400 	.word	0x40010400

08005168 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	021b      	lsls	r3, r3, #8
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	031b      	lsls	r3, r3, #12
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a12      	ldr	r2, [pc, #72]	; (800520c <TIM_OC4_SetConfig+0xa4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_OC4_SetConfig+0x68>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a11      	ldr	r2, [pc, #68]	; (8005210 <TIM_OC4_SetConfig+0xa8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d109      	bne.n	80051e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	019b      	lsls	r3, r3, #6
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	621a      	str	r2, [r3, #32]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40010000 	.word	0x40010000
 8005210:	40010400 	.word	0x40010400

08005214 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	f023 0201 	bic.w	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800523e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f023 030a 	bic.w	r3, r3, #10
 8005250:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	621a      	str	r2, [r3, #32]
}
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005272:	b480      	push	{r7}
 8005274:	b087      	sub	sp, #28
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	f023 0210 	bic.w	r2, r3, #16
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800529c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	031b      	lsls	r3, r3, #12
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f043 0307 	orr.w	r3, r3, #7
 80052f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	609a      	str	r2, [r3, #8]
}
 80052fc:	bf00      	nop
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005322:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	021a      	lsls	r2, r3, #8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	431a      	orrs	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4313      	orrs	r3, r2
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	609a      	str	r2, [r3, #8]
}
 800533c:	bf00      	nop
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800535c:	2302      	movs	r3, #2
 800535e:	e05a      	b.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a21      	ldr	r2, [pc, #132]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d022      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ac:	d01d      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1d      	ldr	r2, [pc, #116]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d018      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1b      	ldr	r2, [pc, #108]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1a      	ldr	r2, [pc, #104]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00e      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a18      	ldr	r2, [pc, #96]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d009      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a17      	ldr	r2, [pc, #92]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d004      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a15      	ldr	r2, [pc, #84]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d10c      	bne.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40010000 	.word	0x40010000
 8005428:	40000400 	.word	0x40000400
 800542c:	40000800 	.word	0x40000800
 8005430:	40000c00 	.word	0x40000c00
 8005434:	40010400 	.word	0x40010400
 8005438:	40014000 	.word	0x40014000
 800543c:	40001800 	.word	0x40001800

08005440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e03f      	b.n	80054d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fb fdf2 	bl	8001050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2224      	movs	r2, #36	; 0x24
 8005470:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f829 	bl	80054dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695a      	ldr	r2, [r3, #20]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800551e:	f023 030c 	bic.w	r3, r3, #12
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	68f9      	ldr	r1, [r7, #12]
 8005528:	430b      	orrs	r3, r1
 800552a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699a      	ldr	r2, [r3, #24]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554a:	f040 818b 	bne.w	8005864 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4ac1      	ldr	r2, [pc, #772]	; (8005858 <UART_SetConfig+0x37c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d005      	beq.n	8005564 <UART_SetConfig+0x88>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4abf      	ldr	r2, [pc, #764]	; (800585c <UART_SetConfig+0x380>)
 800555e:	4293      	cmp	r3, r2
 8005560:	f040 80bd 	bne.w	80056de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005564:	f7ff f872 	bl	800464c <HAL_RCC_GetPCLK2Freq>
 8005568:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	461d      	mov	r5, r3
 800556e:	f04f 0600 	mov.w	r6, #0
 8005572:	46a8      	mov	r8, r5
 8005574:	46b1      	mov	r9, r6
 8005576:	eb18 0308 	adds.w	r3, r8, r8
 800557a:	eb49 0409 	adc.w	r4, r9, r9
 800557e:	4698      	mov	r8, r3
 8005580:	46a1      	mov	r9, r4
 8005582:	eb18 0805 	adds.w	r8, r8, r5
 8005586:	eb49 0906 	adc.w	r9, r9, r6
 800558a:	f04f 0100 	mov.w	r1, #0
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005596:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800559a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800559e:	4688      	mov	r8, r1
 80055a0:	4691      	mov	r9, r2
 80055a2:	eb18 0005 	adds.w	r0, r8, r5
 80055a6:	eb49 0106 	adc.w	r1, r9, r6
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	461d      	mov	r5, r3
 80055b0:	f04f 0600 	mov.w	r6, #0
 80055b4:	196b      	adds	r3, r5, r5
 80055b6:	eb46 0406 	adc.w	r4, r6, r6
 80055ba:	461a      	mov	r2, r3
 80055bc:	4623      	mov	r3, r4
 80055be:	f7fa fe03 	bl	80001c8 <__aeabi_uldivmod>
 80055c2:	4603      	mov	r3, r0
 80055c4:	460c      	mov	r4, r1
 80055c6:	461a      	mov	r2, r3
 80055c8:	4ba5      	ldr	r3, [pc, #660]	; (8005860 <UART_SetConfig+0x384>)
 80055ca:	fba3 2302 	umull	r2, r3, r3, r2
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	461d      	mov	r5, r3
 80055d8:	f04f 0600 	mov.w	r6, #0
 80055dc:	46a9      	mov	r9, r5
 80055de:	46b2      	mov	sl, r6
 80055e0:	eb19 0309 	adds.w	r3, r9, r9
 80055e4:	eb4a 040a 	adc.w	r4, sl, sl
 80055e8:	4699      	mov	r9, r3
 80055ea:	46a2      	mov	sl, r4
 80055ec:	eb19 0905 	adds.w	r9, r9, r5
 80055f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80055f4:	f04f 0100 	mov.w	r1, #0
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005600:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005604:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005608:	4689      	mov	r9, r1
 800560a:	4692      	mov	sl, r2
 800560c:	eb19 0005 	adds.w	r0, r9, r5
 8005610:	eb4a 0106 	adc.w	r1, sl, r6
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	461d      	mov	r5, r3
 800561a:	f04f 0600 	mov.w	r6, #0
 800561e:	196b      	adds	r3, r5, r5
 8005620:	eb46 0406 	adc.w	r4, r6, r6
 8005624:	461a      	mov	r2, r3
 8005626:	4623      	mov	r3, r4
 8005628:	f7fa fdce 	bl	80001c8 <__aeabi_uldivmod>
 800562c:	4603      	mov	r3, r0
 800562e:	460c      	mov	r4, r1
 8005630:	461a      	mov	r2, r3
 8005632:	4b8b      	ldr	r3, [pc, #556]	; (8005860 <UART_SetConfig+0x384>)
 8005634:	fba3 1302 	umull	r1, r3, r3, r2
 8005638:	095b      	lsrs	r3, r3, #5
 800563a:	2164      	movs	r1, #100	; 0x64
 800563c:	fb01 f303 	mul.w	r3, r1, r3
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	3332      	adds	r3, #50	; 0x32
 8005646:	4a86      	ldr	r2, [pc, #536]	; (8005860 <UART_SetConfig+0x384>)
 8005648:	fba2 2303 	umull	r2, r3, r2, r3
 800564c:	095b      	lsrs	r3, r3, #5
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005654:	4498      	add	r8, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	461d      	mov	r5, r3
 800565a:	f04f 0600 	mov.w	r6, #0
 800565e:	46a9      	mov	r9, r5
 8005660:	46b2      	mov	sl, r6
 8005662:	eb19 0309 	adds.w	r3, r9, r9
 8005666:	eb4a 040a 	adc.w	r4, sl, sl
 800566a:	4699      	mov	r9, r3
 800566c:	46a2      	mov	sl, r4
 800566e:	eb19 0905 	adds.w	r9, r9, r5
 8005672:	eb4a 0a06 	adc.w	sl, sl, r6
 8005676:	f04f 0100 	mov.w	r1, #0
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005682:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005686:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800568a:	4689      	mov	r9, r1
 800568c:	4692      	mov	sl, r2
 800568e:	eb19 0005 	adds.w	r0, r9, r5
 8005692:	eb4a 0106 	adc.w	r1, sl, r6
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	461d      	mov	r5, r3
 800569c:	f04f 0600 	mov.w	r6, #0
 80056a0:	196b      	adds	r3, r5, r5
 80056a2:	eb46 0406 	adc.w	r4, r6, r6
 80056a6:	461a      	mov	r2, r3
 80056a8:	4623      	mov	r3, r4
 80056aa:	f7fa fd8d 	bl	80001c8 <__aeabi_uldivmod>
 80056ae:	4603      	mov	r3, r0
 80056b0:	460c      	mov	r4, r1
 80056b2:	461a      	mov	r2, r3
 80056b4:	4b6a      	ldr	r3, [pc, #424]	; (8005860 <UART_SetConfig+0x384>)
 80056b6:	fba3 1302 	umull	r1, r3, r3, r2
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	2164      	movs	r1, #100	; 0x64
 80056be:	fb01 f303 	mul.w	r3, r1, r3
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	3332      	adds	r3, #50	; 0x32
 80056c8:	4a65      	ldr	r2, [pc, #404]	; (8005860 <UART_SetConfig+0x384>)
 80056ca:	fba2 2303 	umull	r2, r3, r2, r3
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	f003 0207 	and.w	r2, r3, #7
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4442      	add	r2, r8
 80056da:	609a      	str	r2, [r3, #8]
 80056dc:	e26f      	b.n	8005bbe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056de:	f7fe ffa1 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 80056e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	461d      	mov	r5, r3
 80056e8:	f04f 0600 	mov.w	r6, #0
 80056ec:	46a8      	mov	r8, r5
 80056ee:	46b1      	mov	r9, r6
 80056f0:	eb18 0308 	adds.w	r3, r8, r8
 80056f4:	eb49 0409 	adc.w	r4, r9, r9
 80056f8:	4698      	mov	r8, r3
 80056fa:	46a1      	mov	r9, r4
 80056fc:	eb18 0805 	adds.w	r8, r8, r5
 8005700:	eb49 0906 	adc.w	r9, r9, r6
 8005704:	f04f 0100 	mov.w	r1, #0
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005710:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005714:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005718:	4688      	mov	r8, r1
 800571a:	4691      	mov	r9, r2
 800571c:	eb18 0005 	adds.w	r0, r8, r5
 8005720:	eb49 0106 	adc.w	r1, r9, r6
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	461d      	mov	r5, r3
 800572a:	f04f 0600 	mov.w	r6, #0
 800572e:	196b      	adds	r3, r5, r5
 8005730:	eb46 0406 	adc.w	r4, r6, r6
 8005734:	461a      	mov	r2, r3
 8005736:	4623      	mov	r3, r4
 8005738:	f7fa fd46 	bl	80001c8 <__aeabi_uldivmod>
 800573c:	4603      	mov	r3, r0
 800573e:	460c      	mov	r4, r1
 8005740:	461a      	mov	r2, r3
 8005742:	4b47      	ldr	r3, [pc, #284]	; (8005860 <UART_SetConfig+0x384>)
 8005744:	fba3 2302 	umull	r2, r3, r3, r2
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	461d      	mov	r5, r3
 8005752:	f04f 0600 	mov.w	r6, #0
 8005756:	46a9      	mov	r9, r5
 8005758:	46b2      	mov	sl, r6
 800575a:	eb19 0309 	adds.w	r3, r9, r9
 800575e:	eb4a 040a 	adc.w	r4, sl, sl
 8005762:	4699      	mov	r9, r3
 8005764:	46a2      	mov	sl, r4
 8005766:	eb19 0905 	adds.w	r9, r9, r5
 800576a:	eb4a 0a06 	adc.w	sl, sl, r6
 800576e:	f04f 0100 	mov.w	r1, #0
 8005772:	f04f 0200 	mov.w	r2, #0
 8005776:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800577a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800577e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005782:	4689      	mov	r9, r1
 8005784:	4692      	mov	sl, r2
 8005786:	eb19 0005 	adds.w	r0, r9, r5
 800578a:	eb4a 0106 	adc.w	r1, sl, r6
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	461d      	mov	r5, r3
 8005794:	f04f 0600 	mov.w	r6, #0
 8005798:	196b      	adds	r3, r5, r5
 800579a:	eb46 0406 	adc.w	r4, r6, r6
 800579e:	461a      	mov	r2, r3
 80057a0:	4623      	mov	r3, r4
 80057a2:	f7fa fd11 	bl	80001c8 <__aeabi_uldivmod>
 80057a6:	4603      	mov	r3, r0
 80057a8:	460c      	mov	r4, r1
 80057aa:	461a      	mov	r2, r3
 80057ac:	4b2c      	ldr	r3, [pc, #176]	; (8005860 <UART_SetConfig+0x384>)
 80057ae:	fba3 1302 	umull	r1, r3, r3, r2
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	2164      	movs	r1, #100	; 0x64
 80057b6:	fb01 f303 	mul.w	r3, r1, r3
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	3332      	adds	r3, #50	; 0x32
 80057c0:	4a27      	ldr	r2, [pc, #156]	; (8005860 <UART_SetConfig+0x384>)
 80057c2:	fba2 2303 	umull	r2, r3, r2, r3
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057ce:	4498      	add	r8, r3
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	461d      	mov	r5, r3
 80057d4:	f04f 0600 	mov.w	r6, #0
 80057d8:	46a9      	mov	r9, r5
 80057da:	46b2      	mov	sl, r6
 80057dc:	eb19 0309 	adds.w	r3, r9, r9
 80057e0:	eb4a 040a 	adc.w	r4, sl, sl
 80057e4:	4699      	mov	r9, r3
 80057e6:	46a2      	mov	sl, r4
 80057e8:	eb19 0905 	adds.w	r9, r9, r5
 80057ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80057f0:	f04f 0100 	mov.w	r1, #0
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005800:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005804:	4689      	mov	r9, r1
 8005806:	4692      	mov	sl, r2
 8005808:	eb19 0005 	adds.w	r0, r9, r5
 800580c:	eb4a 0106 	adc.w	r1, sl, r6
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	461d      	mov	r5, r3
 8005816:	f04f 0600 	mov.w	r6, #0
 800581a:	196b      	adds	r3, r5, r5
 800581c:	eb46 0406 	adc.w	r4, r6, r6
 8005820:	461a      	mov	r2, r3
 8005822:	4623      	mov	r3, r4
 8005824:	f7fa fcd0 	bl	80001c8 <__aeabi_uldivmod>
 8005828:	4603      	mov	r3, r0
 800582a:	460c      	mov	r4, r1
 800582c:	461a      	mov	r2, r3
 800582e:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <UART_SetConfig+0x384>)
 8005830:	fba3 1302 	umull	r1, r3, r3, r2
 8005834:	095b      	lsrs	r3, r3, #5
 8005836:	2164      	movs	r1, #100	; 0x64
 8005838:	fb01 f303 	mul.w	r3, r1, r3
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	3332      	adds	r3, #50	; 0x32
 8005842:	4a07      	ldr	r2, [pc, #28]	; (8005860 <UART_SetConfig+0x384>)
 8005844:	fba2 2303 	umull	r2, r3, r2, r3
 8005848:	095b      	lsrs	r3, r3, #5
 800584a:	f003 0207 	and.w	r2, r3, #7
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4442      	add	r2, r8
 8005854:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005856:	e1b2      	b.n	8005bbe <UART_SetConfig+0x6e2>
 8005858:	40011000 	.word	0x40011000
 800585c:	40011400 	.word	0x40011400
 8005860:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4ad7      	ldr	r2, [pc, #860]	; (8005bc8 <UART_SetConfig+0x6ec>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d005      	beq.n	800587a <UART_SetConfig+0x39e>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4ad6      	ldr	r2, [pc, #856]	; (8005bcc <UART_SetConfig+0x6f0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	f040 80d1 	bne.w	8005a1c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800587a:	f7fe fee7 	bl	800464c <HAL_RCC_GetPCLK2Freq>
 800587e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	469a      	mov	sl, r3
 8005884:	f04f 0b00 	mov.w	fp, #0
 8005888:	46d0      	mov	r8, sl
 800588a:	46d9      	mov	r9, fp
 800588c:	eb18 0308 	adds.w	r3, r8, r8
 8005890:	eb49 0409 	adc.w	r4, r9, r9
 8005894:	4698      	mov	r8, r3
 8005896:	46a1      	mov	r9, r4
 8005898:	eb18 080a 	adds.w	r8, r8, sl
 800589c:	eb49 090b 	adc.w	r9, r9, fp
 80058a0:	f04f 0100 	mov.w	r1, #0
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058b4:	4688      	mov	r8, r1
 80058b6:	4691      	mov	r9, r2
 80058b8:	eb1a 0508 	adds.w	r5, sl, r8
 80058bc:	eb4b 0609 	adc.w	r6, fp, r9
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	4619      	mov	r1, r3
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	f04f 0300 	mov.w	r3, #0
 80058ce:	f04f 0400 	mov.w	r4, #0
 80058d2:	0094      	lsls	r4, r2, #2
 80058d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058d8:	008b      	lsls	r3, r1, #2
 80058da:	461a      	mov	r2, r3
 80058dc:	4623      	mov	r3, r4
 80058de:	4628      	mov	r0, r5
 80058e0:	4631      	mov	r1, r6
 80058e2:	f7fa fc71 	bl	80001c8 <__aeabi_uldivmod>
 80058e6:	4603      	mov	r3, r0
 80058e8:	460c      	mov	r4, r1
 80058ea:	461a      	mov	r2, r3
 80058ec:	4bb8      	ldr	r3, [pc, #736]	; (8005bd0 <UART_SetConfig+0x6f4>)
 80058ee:	fba3 2302 	umull	r2, r3, r3, r2
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	469b      	mov	fp, r3
 80058fc:	f04f 0c00 	mov.w	ip, #0
 8005900:	46d9      	mov	r9, fp
 8005902:	46e2      	mov	sl, ip
 8005904:	eb19 0309 	adds.w	r3, r9, r9
 8005908:	eb4a 040a 	adc.w	r4, sl, sl
 800590c:	4699      	mov	r9, r3
 800590e:	46a2      	mov	sl, r4
 8005910:	eb19 090b 	adds.w	r9, r9, fp
 8005914:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005918:	f04f 0100 	mov.w	r1, #0
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005924:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005928:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800592c:	4689      	mov	r9, r1
 800592e:	4692      	mov	sl, r2
 8005930:	eb1b 0509 	adds.w	r5, fp, r9
 8005934:	eb4c 060a 	adc.w	r6, ip, sl
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	4619      	mov	r1, r3
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	f04f 0400 	mov.w	r4, #0
 800594a:	0094      	lsls	r4, r2, #2
 800594c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005950:	008b      	lsls	r3, r1, #2
 8005952:	461a      	mov	r2, r3
 8005954:	4623      	mov	r3, r4
 8005956:	4628      	mov	r0, r5
 8005958:	4631      	mov	r1, r6
 800595a:	f7fa fc35 	bl	80001c8 <__aeabi_uldivmod>
 800595e:	4603      	mov	r3, r0
 8005960:	460c      	mov	r4, r1
 8005962:	461a      	mov	r2, r3
 8005964:	4b9a      	ldr	r3, [pc, #616]	; (8005bd0 <UART_SetConfig+0x6f4>)
 8005966:	fba3 1302 	umull	r1, r3, r3, r2
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	2164      	movs	r1, #100	; 0x64
 800596e:	fb01 f303 	mul.w	r3, r1, r3
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	3332      	adds	r3, #50	; 0x32
 8005978:	4a95      	ldr	r2, [pc, #596]	; (8005bd0 <UART_SetConfig+0x6f4>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005984:	4498      	add	r8, r3
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	469b      	mov	fp, r3
 800598a:	f04f 0c00 	mov.w	ip, #0
 800598e:	46d9      	mov	r9, fp
 8005990:	46e2      	mov	sl, ip
 8005992:	eb19 0309 	adds.w	r3, r9, r9
 8005996:	eb4a 040a 	adc.w	r4, sl, sl
 800599a:	4699      	mov	r9, r3
 800599c:	46a2      	mov	sl, r4
 800599e:	eb19 090b 	adds.w	r9, r9, fp
 80059a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059a6:	f04f 0100 	mov.w	r1, #0
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059ba:	4689      	mov	r9, r1
 80059bc:	4692      	mov	sl, r2
 80059be:	eb1b 0509 	adds.w	r5, fp, r9
 80059c2:	eb4c 060a 	adc.w	r6, ip, sl
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	4619      	mov	r1, r3
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	f04f 0400 	mov.w	r4, #0
 80059d8:	0094      	lsls	r4, r2, #2
 80059da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059de:	008b      	lsls	r3, r1, #2
 80059e0:	461a      	mov	r2, r3
 80059e2:	4623      	mov	r3, r4
 80059e4:	4628      	mov	r0, r5
 80059e6:	4631      	mov	r1, r6
 80059e8:	f7fa fbee 	bl	80001c8 <__aeabi_uldivmod>
 80059ec:	4603      	mov	r3, r0
 80059ee:	460c      	mov	r4, r1
 80059f0:	461a      	mov	r2, r3
 80059f2:	4b77      	ldr	r3, [pc, #476]	; (8005bd0 <UART_SetConfig+0x6f4>)
 80059f4:	fba3 1302 	umull	r1, r3, r3, r2
 80059f8:	095b      	lsrs	r3, r3, #5
 80059fa:	2164      	movs	r1, #100	; 0x64
 80059fc:	fb01 f303 	mul.w	r3, r1, r3
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	3332      	adds	r3, #50	; 0x32
 8005a06:	4a72      	ldr	r2, [pc, #456]	; (8005bd0 <UART_SetConfig+0x6f4>)
 8005a08:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0c:	095b      	lsrs	r3, r3, #5
 8005a0e:	f003 020f 	and.w	r2, r3, #15
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4442      	add	r2, r8
 8005a18:	609a      	str	r2, [r3, #8]
 8005a1a:	e0d0      	b.n	8005bbe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a1c:	f7fe fe02 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8005a20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	469a      	mov	sl, r3
 8005a26:	f04f 0b00 	mov.w	fp, #0
 8005a2a:	46d0      	mov	r8, sl
 8005a2c:	46d9      	mov	r9, fp
 8005a2e:	eb18 0308 	adds.w	r3, r8, r8
 8005a32:	eb49 0409 	adc.w	r4, r9, r9
 8005a36:	4698      	mov	r8, r3
 8005a38:	46a1      	mov	r9, r4
 8005a3a:	eb18 080a 	adds.w	r8, r8, sl
 8005a3e:	eb49 090b 	adc.w	r9, r9, fp
 8005a42:	f04f 0100 	mov.w	r1, #0
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a56:	4688      	mov	r8, r1
 8005a58:	4691      	mov	r9, r2
 8005a5a:	eb1a 0508 	adds.w	r5, sl, r8
 8005a5e:	eb4b 0609 	adc.w	r6, fp, r9
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	4619      	mov	r1, r3
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	f04f 0300 	mov.w	r3, #0
 8005a70:	f04f 0400 	mov.w	r4, #0
 8005a74:	0094      	lsls	r4, r2, #2
 8005a76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a7a:	008b      	lsls	r3, r1, #2
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	4623      	mov	r3, r4
 8005a80:	4628      	mov	r0, r5
 8005a82:	4631      	mov	r1, r6
 8005a84:	f7fa fba0 	bl	80001c8 <__aeabi_uldivmod>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	4b50      	ldr	r3, [pc, #320]	; (8005bd0 <UART_SetConfig+0x6f4>)
 8005a90:	fba3 2302 	umull	r2, r3, r3, r2
 8005a94:	095b      	lsrs	r3, r3, #5
 8005a96:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	469b      	mov	fp, r3
 8005a9e:	f04f 0c00 	mov.w	ip, #0
 8005aa2:	46d9      	mov	r9, fp
 8005aa4:	46e2      	mov	sl, ip
 8005aa6:	eb19 0309 	adds.w	r3, r9, r9
 8005aaa:	eb4a 040a 	adc.w	r4, sl, sl
 8005aae:	4699      	mov	r9, r3
 8005ab0:	46a2      	mov	sl, r4
 8005ab2:	eb19 090b 	adds.w	r9, r9, fp
 8005ab6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005aba:	f04f 0100 	mov.w	r1, #0
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ac6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005aca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ace:	4689      	mov	r9, r1
 8005ad0:	4692      	mov	sl, r2
 8005ad2:	eb1b 0509 	adds.w	r5, fp, r9
 8005ad6:	eb4c 060a 	adc.w	r6, ip, sl
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	f04f 0400 	mov.w	r4, #0
 8005aec:	0094      	lsls	r4, r2, #2
 8005aee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005af2:	008b      	lsls	r3, r1, #2
 8005af4:	461a      	mov	r2, r3
 8005af6:	4623      	mov	r3, r4
 8005af8:	4628      	mov	r0, r5
 8005afa:	4631      	mov	r1, r6
 8005afc:	f7fa fb64 	bl	80001c8 <__aeabi_uldivmod>
 8005b00:	4603      	mov	r3, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	461a      	mov	r2, r3
 8005b06:	4b32      	ldr	r3, [pc, #200]	; (8005bd0 <UART_SetConfig+0x6f4>)
 8005b08:	fba3 1302 	umull	r1, r3, r3, r2
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	2164      	movs	r1, #100	; 0x64
 8005b10:	fb01 f303 	mul.w	r3, r1, r3
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	011b      	lsls	r3, r3, #4
 8005b18:	3332      	adds	r3, #50	; 0x32
 8005b1a:	4a2d      	ldr	r2, [pc, #180]	; (8005bd0 <UART_SetConfig+0x6f4>)
 8005b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b20:	095b      	lsrs	r3, r3, #5
 8005b22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b26:	4498      	add	r8, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	469b      	mov	fp, r3
 8005b2c:	f04f 0c00 	mov.w	ip, #0
 8005b30:	46d9      	mov	r9, fp
 8005b32:	46e2      	mov	sl, ip
 8005b34:	eb19 0309 	adds.w	r3, r9, r9
 8005b38:	eb4a 040a 	adc.w	r4, sl, sl
 8005b3c:	4699      	mov	r9, r3
 8005b3e:	46a2      	mov	sl, r4
 8005b40:	eb19 090b 	adds.w	r9, r9, fp
 8005b44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b48:	f04f 0100 	mov.w	r1, #0
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b5c:	4689      	mov	r9, r1
 8005b5e:	4692      	mov	sl, r2
 8005b60:	eb1b 0509 	adds.w	r5, fp, r9
 8005b64:	eb4c 060a 	adc.w	r6, ip, sl
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	f04f 0200 	mov.w	r2, #0
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	f04f 0400 	mov.w	r4, #0
 8005b7a:	0094      	lsls	r4, r2, #2
 8005b7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b80:	008b      	lsls	r3, r1, #2
 8005b82:	461a      	mov	r2, r3
 8005b84:	4623      	mov	r3, r4
 8005b86:	4628      	mov	r0, r5
 8005b88:	4631      	mov	r1, r6
 8005b8a:	f7fa fb1d 	bl	80001c8 <__aeabi_uldivmod>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	460c      	mov	r4, r1
 8005b92:	461a      	mov	r2, r3
 8005b94:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <UART_SetConfig+0x6f4>)
 8005b96:	fba3 1302 	umull	r1, r3, r3, r2
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	2164      	movs	r1, #100	; 0x64
 8005b9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	3332      	adds	r3, #50	; 0x32
 8005ba8:	4a09      	ldr	r2, [pc, #36]	; (8005bd0 <UART_SetConfig+0x6f4>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	f003 020f 	and.w	r2, r3, #15
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4442      	add	r2, r8
 8005bba:	609a      	str	r2, [r3, #8]
}
 8005bbc:	e7ff      	b.n	8005bbe <UART_SetConfig+0x6e2>
 8005bbe:	bf00      	nop
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc8:	40011000 	.word	0x40011000
 8005bcc:	40011400 	.word	0x40011400
 8005bd0:	51eb851f 	.word	0x51eb851f

08005bd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	f107 001c 	add.w	r0, r7, #28
 8005be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d122      	bne.n	8005c32 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d105      	bne.n	8005c26 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f94a 	bl	8005ec0 <USB_CoreReset>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	73fb      	strb	r3, [r7, #15]
 8005c30:	e01a      	b.n	8005c68 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f93e 	bl	8005ec0 <USB_CoreReset>
 8005c44:	4603      	mov	r3, r0
 8005c46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d106      	bne.n	8005c5c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	639a      	str	r2, [r3, #56]	; 0x38
 8005c5a:	e005      	b.n	8005c68 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d10b      	bne.n	8005c86 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f043 0206 	orr.w	r2, r3, #6
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f043 0220 	orr.w	r2, r3, #32
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c92:	b004      	add	sp, #16
 8005c94:	4770      	bx	lr

08005c96 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f043 0201 	orr.w	r2, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f023 0201 	bic.w	r2, r3, #1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cf2:	78fb      	ldrb	r3, [r7, #3]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d106      	bne.n	8005d06 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	60da      	str	r2, [r3, #12]
 8005d04:	e00b      	b.n	8005d1e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d06:	78fb      	ldrb	r3, [r7, #3]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d106      	bne.n	8005d1a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	60da      	str	r2, [r3, #12]
 8005d18:	e001      	b.n	8005d1e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e003      	b.n	8005d26 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005d1e:	2032      	movs	r0, #50	; 0x32
 8005d20:	f7fb fafc 	bl	800131c <HAL_Delay>

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	019b      	lsls	r3, r3, #6
 8005d42:	f043 0220 	orr.w	r2, r3, #32
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4a09      	ldr	r2, [pc, #36]	; (8005d78 <USB_FlushTxFifo+0x48>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d901      	bls.n	8005d5c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e006      	b.n	8005d6a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f003 0320 	and.w	r3, r3, #32
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	d0f0      	beq.n	8005d4a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	00030d40 	.word	0x00030d40

08005d7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2210      	movs	r2, #16
 8005d8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3301      	adds	r3, #1
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4a09      	ldr	r2, [pc, #36]	; (8005dbc <USB_FlushRxFifo+0x40>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d901      	bls.n	8005da0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e006      	b.n	8005dae <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f003 0310 	and.w	r3, r3, #16
 8005da8:	2b10      	cmp	r3, #16
 8005daa:	d0f0      	beq.n	8005d8e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	00030d40 	.word	0x00030d40

08005dc0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b089      	sub	sp, #36	; 0x24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	4611      	mov	r1, r2
 8005dcc:	461a      	mov	r2, r3
 8005dce:	460b      	mov	r3, r1
 8005dd0:	71fb      	strb	r3, [r7, #7]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005dde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d11a      	bne.n	8005e1c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005de6:	88bb      	ldrh	r3, [r7, #4]
 8005de8:	3303      	adds	r3, #3
 8005dea:	089b      	lsrs	r3, r3, #2
 8005dec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005dee:	2300      	movs	r3, #0
 8005df0:	61bb      	str	r3, [r7, #24]
 8005df2:	e00f      	b.n	8005e14 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	031a      	lsls	r2, r3, #12
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e00:	461a      	mov	r2, r3
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	3301      	adds	r3, #1
 8005e12:	61bb      	str	r3, [r7, #24]
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d3eb      	bcc.n	8005df4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3724      	adds	r7, #36	; 0x24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b089      	sub	sp, #36	; 0x24
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	4613      	mov	r3, r2
 8005e36:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005e40:	88fb      	ldrh	r3, [r7, #6]
 8005e42:	3303      	adds	r3, #3
 8005e44:	089b      	lsrs	r3, r3, #2
 8005e46:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	61bb      	str	r3, [r7, #24]
 8005e4c:	e00b      	b.n	8005e66 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	3301      	adds	r3, #1
 8005e64:	61bb      	str	r3, [r7, #24]
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d3ef      	bcc.n	8005e4e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005e6e:	69fb      	ldr	r3, [r7, #28]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3724      	adds	r7, #36	; 0x24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4013      	ands	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e94:	68fb      	ldr	r3, [r7, #12]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	f003 0301 	and.w	r3, r3, #1
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	4a13      	ldr	r2, [pc, #76]	; (8005f24 <USB_CoreReset+0x64>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d901      	bls.n	8005ede <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e01b      	b.n	8005f16 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	daf2      	bge.n	8005ecc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f043 0201 	orr.w	r2, r3, #1
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4a09      	ldr	r2, [pc, #36]	; (8005f24 <USB_CoreReset+0x64>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d901      	bls.n	8005f08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e006      	b.n	8005f16 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d0f0      	beq.n	8005ef6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	00030d40 	.word	0x00030d40

08005f28 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f28:	b084      	sub	sp, #16
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	f107 001c 	add.w	r0, r7, #28
 8005f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f44:	461a      	mov	r2, r3
 8005f46:	2300      	movs	r3, #0
 8005f48:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f66:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d018      	beq.n	8005fac <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	2b03      	cmp	r3, #3
 8005f7e:	d10a      	bne.n	8005f96 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f8e:	f043 0304 	orr.w	r3, r3, #4
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	e014      	b.n	8005fc0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fa4:	f023 0304 	bic.w	r3, r3, #4
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	e009      	b.n	8005fc0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fba:	f023 0304 	bic.w	r3, r3, #4
 8005fbe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005fc0:	2110      	movs	r1, #16
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff feb4 	bl	8005d30 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff fed7 	bl	8005d7c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	e015      	b.n	8006000 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fe6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	429a      	cmp	r2, r3
 8006006:	d3e5      	bcc.n	8005fd4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006008:	2101      	movs	r1, #1
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f8ac 	bl	8006168 <USB_DriveVbus>

  HAL_Delay(200U);
 8006010:	20c8      	movs	r0, #200	; 0xc8
 8006012:	f7fb f983 	bl	800131c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006022:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00b      	beq.n	8006048 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006036:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a14      	ldr	r2, [pc, #80]	; (800608c <USB_HostInit+0x164>)
 800603c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a13      	ldr	r2, [pc, #76]	; (8006090 <USB_HostInit+0x168>)
 8006042:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006046:	e009      	b.n	800605c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2280      	movs	r2, #128	; 0x80
 800604c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a10      	ldr	r2, [pc, #64]	; (8006094 <USB_HostInit+0x16c>)
 8006052:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a10      	ldr	r2, [pc, #64]	; (8006098 <USB_HostInit+0x170>)
 8006058:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	2b00      	cmp	r3, #0
 8006060:	d105      	bne.n	800606e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	f043 0210 	orr.w	r2, r3, #16
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	4b0a      	ldr	r3, [pc, #40]	; (800609c <USB_HostInit+0x174>)
 8006074:	4313      	orrs	r3, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006086:	b004      	add	sp, #16
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	01000200 	.word	0x01000200
 8006090:	00e00300 	.word	0x00e00300
 8006094:	00600080 	.word	0x00600080
 8006098:	004000e0 	.word	0x004000e0
 800609c:	a3200008 	.word	0xa3200008

080060a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060be:	f023 0303 	bic.w	r3, r3, #3
 80060c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	68f9      	ldr	r1, [r7, #12]
 80060d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80060d8:	4313      	orrs	r3, r2
 80060da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80060dc:	78fb      	ldrb	r3, [r7, #3]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d107      	bne.n	80060f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060e8:	461a      	mov	r2, r3
 80060ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80060ee:	6053      	str	r3, [r2, #4]
 80060f0:	e009      	b.n	8006106 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80060f2:	78fb      	ldrb	r3, [r7, #3]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d106      	bne.n	8006106 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060fe:	461a      	mov	r2, r3
 8006100:	f241 7370 	movw	r3, #6000	; 0x1770
 8006104:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006134:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800613e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006142:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006144:	2064      	movs	r0, #100	; 0x64
 8006146:	f7fb f8e9 	bl	800131c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006152:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006156:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006158:	200a      	movs	r0, #10
 800615a:	f7fb f8df 	bl	800131c <HAL_Delay>

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800618c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d109      	bne.n	80061ac <USB_DriveVbus+0x44>
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d106      	bne.n	80061ac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061aa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b6:	d109      	bne.n	80061cc <USB_DriveVbus+0x64>
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d106      	bne.n	80061cc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061ca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80061da:	b480      	push	{r7}
 80061dc:	b085      	sub	sp, #20
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	0c5b      	lsrs	r3, r3, #17
 80061f8:	f003 0303 	and.w	r3, r3, #3
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	b29b      	uxth	r3, r3
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
	...

0800622c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	4608      	mov	r0, r1
 8006236:	4611      	mov	r1, r2
 8006238:	461a      	mov	r2, r3
 800623a:	4603      	mov	r3, r0
 800623c:	70fb      	strb	r3, [r7, #3]
 800623e:	460b      	mov	r3, r1
 8006240:	70bb      	strb	r3, [r7, #2]
 8006242:	4613      	mov	r3, r2
 8006244:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4413      	add	r3, r2
 8006256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625a:	461a      	mov	r2, r3
 800625c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006260:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006262:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006266:	2b03      	cmp	r3, #3
 8006268:	d87e      	bhi.n	8006368 <USB_HC_Init+0x13c>
 800626a:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <USB_HC_Init+0x44>)
 800626c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006270:	08006281 	.word	0x08006281
 8006274:	0800632b 	.word	0x0800632b
 8006278:	08006281 	.word	0x08006281
 800627c:	080062ed 	.word	0x080062ed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4413      	add	r3, r2
 8006288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628c:	461a      	mov	r2, r3
 800628e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006292:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006294:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006298:	2b00      	cmp	r3, #0
 800629a:	da10      	bge.n	80062be <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	78fa      	ldrb	r2, [r7, #3]
 80062ac:	0151      	lsls	r1, r2, #5
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	440a      	add	r2, r1
 80062b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ba:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80062bc:	e057      	b.n	800636e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d051      	beq.n	800636e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80062ca:	78fb      	ldrb	r3, [r7, #3]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	78fa      	ldrb	r2, [r7, #3]
 80062da:	0151      	lsls	r1, r2, #5
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	440a      	add	r2, r1
 80062e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80062e8:	60d3      	str	r3, [r2, #12]
      break;
 80062ea:	e040      	b.n	800636e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f8:	461a      	mov	r2, r3
 80062fa:	f240 639d 	movw	r3, #1693	; 0x69d
 80062fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006300:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006304:	2b00      	cmp	r3, #0
 8006306:	da34      	bge.n	8006372 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006308:	78fb      	ldrb	r3, [r7, #3]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4413      	add	r3, r2
 8006310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	78fa      	ldrb	r2, [r7, #3]
 8006318:	0151      	lsls	r1, r2, #5
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	440a      	add	r2, r1
 800631e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006326:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006328:	e023      	b.n	8006372 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	4413      	add	r3, r2
 8006332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006336:	461a      	mov	r2, r3
 8006338:	f240 2325 	movw	r3, #549	; 0x225
 800633c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800633e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006342:	2b00      	cmp	r3, #0
 8006344:	da17      	bge.n	8006376 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	4413      	add	r3, r2
 800634e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	78fa      	ldrb	r2, [r7, #3]
 8006356:	0151      	lsls	r1, r2, #5
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	440a      	add	r2, r1
 800635c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006360:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006364:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006366:	e006      	b.n	8006376 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	75fb      	strb	r3, [r7, #23]
      break;
 800636c:	e004      	b.n	8006378 <USB_HC_Init+0x14c>
      break;
 800636e:	bf00      	nop
 8006370:	e002      	b.n	8006378 <USB_HC_Init+0x14c>
      break;
 8006372:	bf00      	nop
 8006374:	e000      	b.n	8006378 <USB_HC_Init+0x14c>
      break;
 8006376:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800637e:	699a      	ldr	r2, [r3, #24]
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	2101      	movs	r1, #1
 8006388:	fa01 f303 	lsl.w	r3, r1, r3
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006392:	4313      	orrs	r3, r2
 8006394:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80063a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	da03      	bge.n	80063b2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80063aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ae:	613b      	str	r3, [r7, #16]
 80063b0:	e001      	b.n	80063b6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80063b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d103      	bne.n	80063c6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80063be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	e001      	b.n	80063ca <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063ca:	787b      	ldrb	r3, [r7, #1]
 80063cc:	059b      	lsls	r3, r3, #22
 80063ce:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063d2:	78bb      	ldrb	r3, [r7, #2]
 80063d4:	02db      	lsls	r3, r3, #11
 80063d6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063da:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80063e0:	049b      	lsls	r3, r3, #18
 80063e2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063e6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063ee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	0159      	lsls	r1, r3, #5
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	440b      	add	r3, r1
 80063fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006400:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006406:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006408:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800640c:	2b03      	cmp	r3, #3
 800640e:	d10f      	bne.n	8006430 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006410:	78fb      	ldrb	r3, [r7, #3]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4413      	add	r3, r2
 8006418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	78fa      	ldrb	r2, [r7, #3]
 8006420:	0151      	lsls	r1, r2, #5
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	440a      	add	r2, r1
 8006426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800642a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800642e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006430:	7dfb      	ldrb	r3, [r7, #23]
}
 8006432:	4618      	mov	r0, r3
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop

08006440 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08c      	sub	sp, #48	; 0x30
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	4613      	mov	r3, r2
 800644c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	785b      	ldrb	r3, [r3, #1]
 8006456:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800645c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006466:	2b00      	cmp	r3, #0
 8006468:	d028      	beq.n	80064bc <USB_HC_StartXfer+0x7c>
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	791b      	ldrb	r3, [r3, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d124      	bne.n	80064bc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10b      	bne.n	8006490 <USB_HC_StartXfer+0x50>
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	795b      	ldrb	r3, [r3, #5]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d107      	bne.n	8006490 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	785b      	ldrb	r3, [r3, #1]
 8006484:	4619      	mov	r1, r3
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 fa2e 	bl	80068e8 <USB_DoPing>
      return HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	e112      	b.n	80066b6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8006490:	79fb      	ldrb	r3, [r7, #7]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d112      	bne.n	80064bc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	4413      	add	r3, r2
 800649e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	69fa      	ldr	r2, [r7, #28]
 80064a6:	0151      	lsls	r1, r2, #5
 80064a8:	6a3a      	ldr	r2, [r7, #32]
 80064aa:	440a      	add	r2, r1
 80064ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80064b4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2200      	movs	r2, #0
 80064ba:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d018      	beq.n	80064f6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	8912      	ldrh	r2, [r2, #8]
 80064cc:	4413      	add	r3, r2
 80064ce:	3b01      	subs	r3, #1
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	8912      	ldrh	r2, [r2, #8]
 80064d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80064d8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80064da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80064dc:	8b7b      	ldrh	r3, [r7, #26]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d90b      	bls.n	80064fa <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80064e2:	8b7b      	ldrh	r3, [r7, #26]
 80064e4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80064e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	8912      	ldrh	r2, [r2, #8]
 80064ec:	fb02 f203 	mul.w	r2, r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	611a      	str	r2, [r3, #16]
 80064f4:	e001      	b.n	80064fa <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80064f6:	2301      	movs	r3, #1
 80064f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	78db      	ldrb	r3, [r3, #3]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d006      	beq.n	8006510 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006502:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	8912      	ldrh	r2, [r2, #8]
 8006508:	fb02 f203 	mul.w	r2, r2, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006518:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800651a:	04d9      	lsls	r1, r3, #19
 800651c:	4b68      	ldr	r3, [pc, #416]	; (80066c0 <USB_HC_StartXfer+0x280>)
 800651e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006520:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	7a9b      	ldrb	r3, [r3, #10]
 8006526:	075b      	lsls	r3, r3, #29
 8006528:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800652c:	69f9      	ldr	r1, [r7, #28]
 800652e:	0148      	lsls	r0, r1, #5
 8006530:	6a39      	ldr	r1, [r7, #32]
 8006532:	4401      	add	r1, r0
 8006534:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006538:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800653a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d009      	beq.n	8006556 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	68d9      	ldr	r1, [r3, #12]
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	4413      	add	r3, r2
 800654e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006552:	460a      	mov	r2, r1
 8006554:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	bf0c      	ite	eq
 8006566:	2301      	moveq	r3, #1
 8006568:	2300      	movne	r3, #0
 800656a:	b2db      	uxtb	r3, r3
 800656c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	4413      	add	r3, r2
 8006576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	69fa      	ldr	r2, [r7, #28]
 800657e:	0151      	lsls	r1, r2, #5
 8006580:	6a3a      	ldr	r2, [r7, #32]
 8006582:	440a      	add	r2, r1
 8006584:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006588:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800658c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	4413      	add	r3, r2
 8006596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	7e7b      	ldrb	r3, [r7, #25]
 800659e:	075b      	lsls	r3, r3, #29
 80065a0:	69f9      	ldr	r1, [r7, #28]
 80065a2:	0148      	lsls	r0, r1, #5
 80065a4:	6a39      	ldr	r1, [r7, #32]
 80065a6:	4401      	add	r1, r0
 80065a8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80065ac:	4313      	orrs	r3, r2
 80065ae:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a41      	ldr	r2, [pc, #260]	; (80066c4 <USB_HC_StartXfer+0x284>)
 80065c0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065c2:	4b40      	ldr	r3, [pc, #256]	; (80066c4 <USB_HC_StartXfer+0x284>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065ca:	4a3e      	ldr	r2, [pc, #248]	; (80066c4 <USB_HC_StartXfer+0x284>)
 80065cc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	78db      	ldrb	r3, [r3, #3]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d006      	beq.n	80065e4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80065d6:	4b3b      	ldr	r3, [pc, #236]	; (80066c4 <USB_HC_StartXfer+0x284>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065de:	4a39      	ldr	r2, [pc, #228]	; (80066c4 <USB_HC_StartXfer+0x284>)
 80065e0:	6013      	str	r3, [r2, #0]
 80065e2:	e005      	b.n	80065f0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80065e4:	4b37      	ldr	r3, [pc, #220]	; (80066c4 <USB_HC_StartXfer+0x284>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065ec:	4a35      	ldr	r2, [pc, #212]	; (80066c4 <USB_HC_StartXfer+0x284>)
 80065ee:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065f0:	4b34      	ldr	r3, [pc, #208]	; (80066c4 <USB_HC_StartXfer+0x284>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065f8:	4a32      	ldr	r2, [pc, #200]	; (80066c4 <USB_HC_StartXfer+0x284>)
 80065fa:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	4413      	add	r3, r2
 8006604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006608:	461a      	mov	r2, r3
 800660a:	4b2e      	ldr	r3, [pc, #184]	; (80066c4 <USB_HC_StartXfer+0x284>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006610:	79fb      	ldrb	r3, [r7, #7]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d14e      	bne.n	80066b4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	78db      	ldrb	r3, [r3, #3]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d14a      	bne.n	80066b4 <USB_HC_StartXfer+0x274>
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d046      	beq.n	80066b4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	79db      	ldrb	r3, [r3, #7]
 800662a:	2b03      	cmp	r3, #3
 800662c:	d830      	bhi.n	8006690 <USB_HC_StartXfer+0x250>
 800662e:	a201      	add	r2, pc, #4	; (adr r2, 8006634 <USB_HC_StartXfer+0x1f4>)
 8006630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006634:	08006645 	.word	0x08006645
 8006638:	08006669 	.word	0x08006669
 800663c:	08006645 	.word	0x08006645
 8006640:	08006669 	.word	0x08006669
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	3303      	adds	r3, #3
 800664a:	089b      	lsrs	r3, r3, #2
 800664c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800664e:	8afa      	ldrh	r2, [r7, #22]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	b29b      	uxth	r3, r3
 8006656:	429a      	cmp	r2, r3
 8006658:	d91c      	bls.n	8006694 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	f043 0220 	orr.w	r2, r3, #32
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	619a      	str	r2, [r3, #24]
          }
          break;
 8006666:	e015      	b.n	8006694 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	3303      	adds	r3, #3
 800666e:	089b      	lsrs	r3, r3, #2
 8006670:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006672:	8afa      	ldrh	r2, [r7, #22]
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	b29b      	uxth	r3, r3
 800667e:	429a      	cmp	r2, r3
 8006680:	d90a      	bls.n	8006698 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	619a      	str	r2, [r3, #24]
          }
          break;
 800668e:	e003      	b.n	8006698 <USB_HC_StartXfer+0x258>

        default:
          break;
 8006690:	bf00      	nop
 8006692:	e002      	b.n	800669a <USB_HC_StartXfer+0x25a>
          break;
 8006694:	bf00      	nop
 8006696:	e000      	b.n	800669a <USB_HC_StartXfer+0x25a>
          break;
 8006698:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	68d9      	ldr	r1, [r3, #12]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	785a      	ldrb	r2, [r3, #1]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	b298      	uxth	r0, r3
 80066a8:	2300      	movs	r3, #0
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	4603      	mov	r3, r0
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f7ff fb86 	bl	8005dc0 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3728      	adds	r7, #40	; 0x28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	1ff80000 	.word	0x1ff80000
 80066c4:	200000b0 	.word	0x200000b0

080066c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	b29b      	uxth	r3, r3
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b087      	sub	sp, #28
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	460b      	mov	r3, r1
 80066f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	4413      	add	r3, r2
 800670a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	0c9b      	lsrs	r3, r3, #18
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <USB_HC_Halt+0x3a>
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b02      	cmp	r3, #2
 8006722:	d16c      	bne.n	80067fe <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	4413      	add	r3, r2
 800672c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	440a      	add	r2, r1
 800673a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800673e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006742:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d143      	bne.n	80067d8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	4413      	add	r3, r2
 8006758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	440a      	add	r2, r1
 8006766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800676a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800676e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	4413      	add	r3, r2
 8006778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	440a      	add	r2, r1
 8006786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800678a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800678e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	4413      	add	r3, r2
 8006798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	0151      	lsls	r1, r2, #5
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	440a      	add	r2, r1
 80067a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067ae:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	3301      	adds	r3, #1
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067bc:	d81d      	bhi.n	80067fa <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067d4:	d0ec      	beq.n	80067b0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80067d6:	e080      	b.n	80068da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	0151      	lsls	r1, r2, #5
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	440a      	add	r2, r1
 80067ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067f6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80067f8:	e06f      	b.n	80068da <USB_HC_Halt+0x1f0>
          break;
 80067fa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80067fc:	e06d      	b.n	80068da <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	4413      	add	r3, r2
 8006806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	0151      	lsls	r1, r2, #5
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	440a      	add	r2, r1
 8006814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006818:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800681c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d143      	bne.n	80068b6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	4413      	add	r3, r2
 8006836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	0151      	lsls	r1, r2, #5
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	440a      	add	r2, r1
 8006844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006848:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800684c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	4413      	add	r3, r2
 8006856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	0151      	lsls	r1, r2, #5
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	440a      	add	r2, r1
 8006864:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006868:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800686c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	4413      	add	r3, r2
 8006876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	0151      	lsls	r1, r2, #5
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	440a      	add	r2, r1
 8006884:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006888:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800688c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	3301      	adds	r3, #1
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800689a:	d81d      	bhi.n	80068d8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068b2:	d0ec      	beq.n	800688e <USB_HC_Halt+0x1a4>
 80068b4:	e011      	b.n	80068da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	0151      	lsls	r1, r2, #5
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	440a      	add	r2, r1
 80068cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	e000      	b.n	80068da <USB_HC_Halt+0x1f0>
          break;
 80068d8:	bf00      	nop
    }
  }

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80068fc:	2301      	movs	r3, #1
 80068fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	04da      	lsls	r2, r3, #19
 8006904:	4b15      	ldr	r3, [pc, #84]	; (800695c <USB_DoPing+0x74>)
 8006906:	4013      	ands	r3, r2
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	0151      	lsls	r1, r2, #5
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	440a      	add	r2, r1
 8006910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006914:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006918:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	4413      	add	r3, r2
 8006922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006930:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006938:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	4413      	add	r3, r2
 8006942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006946:	461a      	mov	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	1ff80000 	.word	0x1ff80000

08006960 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800696c:	2300      	movs	r3, #0
 800696e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff f9a1 	bl	8005cb8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006976:	2110      	movs	r1, #16
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff f9d9 	bl	8005d30 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff f9fc 	bl	8005d7c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006984:	2300      	movs	r3, #0
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	e01f      	b.n	80069ca <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069be:	461a      	mov	r2, r3
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	3301      	adds	r3, #1
 80069c8:	613b      	str	r3, [r7, #16]
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	2b0f      	cmp	r3, #15
 80069ce:	d9dc      	bls.n	800698a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80069d0:	2300      	movs	r3, #0
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	e034      	b.n	8006a40 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	3301      	adds	r3, #1
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a1c:	d80c      	bhi.n	8006a38 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a34:	d0ec      	beq.n	8006a10 <USB_StopHost+0xb0>
 8006a36:	e000      	b.n	8006a3a <USB_StopHost+0xda>
        break;
 8006a38:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	613b      	str	r3, [r7, #16]
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	2b0f      	cmp	r3, #15
 8006a44:	d9c7      	bls.n	80069d6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a52:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a5a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7ff f91a 	bl	8005c96 <USB_EnableGlobalInt>

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3718      	adds	r7, #24
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8006a6c:	b590      	push	{r4, r7, lr}
 8006a6e:	b089      	sub	sp, #36	; 0x24
 8006a70:	af04      	add	r7, sp, #16
 8006a72:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8006a74:	2302      	movs	r3, #2
 8006a76:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006a78:	2301      	movs	r3, #1
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	2102      	movs	r1, #2
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fc3a 	bl	80072f8 <USBH_FindInterface>
 8006a84:	4603      	mov	r3, r0
 8006a86:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006a88:	7bbb      	ldrb	r3, [r7, #14]
 8006a8a:	2bff      	cmp	r3, #255	; 0xff
 8006a8c:	f000 812a 	beq.w	8006ce4 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fc13 	bl	80072c0 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8006aa0:	2050      	movs	r0, #80	; 0x50
 8006aa2:	f002 f8df 	bl	8008c64 <malloc>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	211a      	movs	r1, #26
 8006aba:	fb01 f303 	mul.w	r3, r1, r3
 8006abe:	4413      	add	r3, r2
 8006ac0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	b25b      	sxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	da15      	bge.n	8006af8 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006acc:	7bbb      	ldrb	r3, [r7, #14]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	211a      	movs	r1, #26
 8006ad2:	fb01 f303 	mul.w	r3, r1, r3
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006adc:	781a      	ldrb	r2, [r3, #0]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	211a      	movs	r1, #26
 8006ae8:	fb01 f303 	mul.w	r3, r1, r3
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006af2:	881a      	ldrh	r2, [r3, #0]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	785b      	ldrb	r3, [r3, #1]
 8006afc:	4619      	mov	r1, r3
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f001 fd21 	bl	8008546 <USBH_AllocPipe>
 8006b04:	4603      	mov	r3, r0
 8006b06:	461a      	mov	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	7819      	ldrb	r1, [r3, #0]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	7858      	ldrb	r0, [r3, #1]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	8952      	ldrh	r2, [r2, #10]
 8006b24:	9202      	str	r2, [sp, #8]
 8006b26:	2203      	movs	r2, #3
 8006b28:	9201      	str	r2, [sp, #4]
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	4623      	mov	r3, r4
 8006b2e:	4602      	mov	r2, r0
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 fcd9 	bl	80084e8 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f001 ffe0 	bl	8008b04 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006b44:	2300      	movs	r3, #0
 8006b46:	2200      	movs	r2, #0
 8006b48:	210a      	movs	r1, #10
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fbd4 	bl	80072f8 <USBH_FindInterface>
 8006b50:	4603      	mov	r3, r0
 8006b52:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006b54:	7bbb      	ldrb	r3, [r7, #14]
 8006b56:	2bff      	cmp	r3, #255	; 0xff
 8006b58:	f000 80c4 	beq.w	8006ce4 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	211a      	movs	r1, #26
 8006b62:	fb01 f303 	mul.w	r3, r1, r3
 8006b66:	4413      	add	r3, r2
 8006b68:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	b25b      	sxtb	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	da16      	bge.n	8006ba2 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	211a      	movs	r1, #26
 8006b7a:	fb01 f303 	mul.w	r3, r1, r3
 8006b7e:	4413      	add	r3, r2
 8006b80:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006b84:	781a      	ldrb	r2, [r3, #0]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b8a:	7bbb      	ldrb	r3, [r7, #14]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	211a      	movs	r1, #26
 8006b90:	fb01 f303 	mul.w	r3, r1, r3
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006b9a:	881a      	ldrh	r2, [r3, #0]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	835a      	strh	r2, [r3, #26]
 8006ba0:	e015      	b.n	8006bce <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	211a      	movs	r1, #26
 8006ba8:	fb01 f303 	mul.w	r3, r1, r3
 8006bac:	4413      	add	r3, r2
 8006bae:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006bb2:	781a      	ldrb	r2, [r3, #0]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006bb8:	7bbb      	ldrb	r3, [r7, #14]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	211a      	movs	r1, #26
 8006bbe:	fb01 f303 	mul.w	r3, r1, r3
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006bc8:	881a      	ldrh	r2, [r3, #0]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006bce:	7bbb      	ldrb	r3, [r7, #14]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	211a      	movs	r1, #26
 8006bd4:	fb01 f303 	mul.w	r3, r1, r3
 8006bd8:	4413      	add	r3, r2
 8006bda:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	b25b      	sxtb	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	da16      	bge.n	8006c14 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	211a      	movs	r1, #26
 8006bec:	fb01 f303 	mul.w	r3, r1, r3
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006bf6:	781a      	ldrb	r2, [r3, #0]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	211a      	movs	r1, #26
 8006c02:	fb01 f303 	mul.w	r3, r1, r3
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006c0c:	881a      	ldrh	r2, [r3, #0]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	835a      	strh	r2, [r3, #26]
 8006c12:	e015      	b.n	8006c40 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c14:	7bbb      	ldrb	r3, [r7, #14]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	211a      	movs	r1, #26
 8006c1a:	fb01 f303 	mul.w	r3, r1, r3
 8006c1e:	4413      	add	r3, r2
 8006c20:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006c24:	781a      	ldrb	r2, [r3, #0]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	211a      	movs	r1, #26
 8006c30:	fb01 f303 	mul.w	r3, r1, r3
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006c3a:	881a      	ldrh	r2, [r3, #0]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	7b9b      	ldrb	r3, [r3, #14]
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f001 fc7d 	bl	8008546 <USBH_AllocPipe>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	461a      	mov	r2, r3
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	7bdb      	ldrb	r3, [r3, #15]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 fc73 	bl	8008546 <USBH_AllocPipe>
 8006c60:	4603      	mov	r3, r0
 8006c62:	461a      	mov	r2, r3
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	7b59      	ldrb	r1, [r3, #13]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	7b98      	ldrb	r0, [r3, #14]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	8b12      	ldrh	r2, [r2, #24]
 8006c80:	9202      	str	r2, [sp, #8]
 8006c82:	2202      	movs	r2, #2
 8006c84:	9201      	str	r2, [sp, #4]
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	4623      	mov	r3, r4
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 fc2b 	bl	80084e8 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	7b19      	ldrb	r1, [r3, #12]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	7bd8      	ldrb	r0, [r3, #15]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	8b52      	ldrh	r2, [r2, #26]
 8006caa:	9202      	str	r2, [sp, #8]
 8006cac:	2202      	movs	r2, #2
 8006cae:	9201      	str	r2, [sp, #4]
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	4623      	mov	r3, r4
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 fc16 	bl	80084e8 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	7b5b      	ldrb	r3, [r3, #13]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 ff19 	bl	8008b04 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	7b1b      	ldrb	r3, [r3, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f001 ff12 	bl	8008b04 <USBH_LL_SetToggle>
      status = USBH_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd90      	pop	{r4, r7, pc}

08006cee <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00e      	beq.n	8006d26 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f001 fc09 	bl	8008526 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 fc31 	bl	8008582 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	7b1b      	ldrb	r3, [r3, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00e      	beq.n	8006d4c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	7b1b      	ldrb	r3, [r3, #12]
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 fbf6 	bl	8008526 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	7b1b      	ldrb	r3, [r3, #12]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 fc1e 	bl	8008582 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	7b5b      	ldrb	r3, [r3, #13]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00e      	beq.n	8006d72 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	7b5b      	ldrb	r3, [r3, #13]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 fbe3 	bl	8008526 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	7b5b      	ldrb	r3, [r3, #13]
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 fc0b 	bl	8008582 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00b      	beq.n	8006d96 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f001 ff74 	bl	8008c74 <free>
    phost->pActiveClass->pData = 0U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d92:	2200      	movs	r2, #0
 8006d94:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006da8:	2302      	movs	r3, #2
 8006daa:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	3340      	adds	r3, #64	; 0x40
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f8b2 	bl	8006f26 <GetLineCoding>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d105      	bne.n	8006dd8 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006dd2:	2102      	movs	r1, #2
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	4798      	blx	r3
  }
  return status;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006dec:	2301      	movs	r3, #1
 8006dee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d877      	bhi.n	8006ef8 <USBH_CDC_Process+0x114>
 8006e08:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <USBH_CDC_Process+0x2c>)
 8006e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0e:	bf00      	nop
 8006e10:	08006e25 	.word	0x08006e25
 8006e14:	08006e2b 	.word	0x08006e2b
 8006e18:	08006e5b 	.word	0x08006e5b
 8006e1c:	08006ecf 	.word	0x08006ecf
 8006e20:	08006edd 	.word	0x08006edd
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	73fb      	strb	r3, [r7, #15]
    break;
 8006e28:	e06d      	b.n	8006f06 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f897 	bl	8006f64 <SetLineCoding>
 8006e36:	4603      	mov	r3, r0
 8006e38:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d104      	bne.n	8006e4a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006e48:	e058      	b.n	8006efc <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d055      	beq.n	8006efc <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2204      	movs	r2, #4
 8006e54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006e58:	e050      	b.n	8006efc <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	3340      	adds	r3, #64	; 0x40
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f860 	bl	8006f26 <GetLineCoding>
 8006e66:	4603      	mov	r3, r0
 8006e68:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d126      	bne.n	8006ebe <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e82:	791b      	ldrb	r3, [r3, #4]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d13b      	bne.n	8006f00 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e92:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d133      	bne.n	8006f00 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea2:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d12b      	bne.n	8006f00 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb0:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d124      	bne.n	8006f00 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f95a 	bl	8007170 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006ebc:	e020      	b.n	8006f00 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d01d      	beq.n	8006f00 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006ecc:	e018      	b.n	8006f00 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f867 	bl	8006fa2 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f8dc 	bl	8007092 <CDC_ProcessReception>
    break;
 8006eda:	e014      	b.n	8006f06 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006edc:	2100      	movs	r1, #0
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fece 	bl	8007c80 <USBH_ClrFeature>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8006ef6:	e005      	b.n	8006f04 <USBH_CDC_Process+0x120>

  default:
    break;
 8006ef8:	bf00      	nop
 8006efa:	e004      	b.n	8006f06 <USBH_CDC_Process+0x122>
    break;
 8006efc:	bf00      	nop
 8006efe:	e002      	b.n	8006f06 <USBH_CDC_Process+0x122>
    break;
 8006f00:	bf00      	nop
 8006f02:	e000      	b.n	8006f06 <USBH_CDC_Process+0x122>
    break;
 8006f04:	bf00      	nop

  }

  return status;
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	22a1      	movs	r2, #161	; 0xa1
 8006f34:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2221      	movs	r2, #33	; 0x21
 8006f3a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2207      	movs	r2, #7
 8006f4c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2207      	movs	r2, #7
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 f873 	bl	8008040 <USBH_CtlReq>
 8006f5a:	4603      	mov	r3, r0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2221      	movs	r2, #33	; 0x21
 8006f72:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2220      	movs	r2, #32
 8006f78:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2207      	movs	r2, #7
 8006f8a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2207      	movs	r2, #7
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f001 f854 	bl	8008040 <USBH_CtlReq>
 8006f98:	4603      	mov	r3, r0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b086      	sub	sp, #24
 8006fa6:	af02      	add	r7, sp, #8
 8006fa8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d002      	beq.n	8006fc8 <CDC_ProcessTransmission+0x26>
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d025      	beq.n	8007012 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8006fc6:	e060      	b.n	800708a <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	8b12      	ldrh	r2, [r2, #24]
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d90c      	bls.n	8006fee <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	69d9      	ldr	r1, [r3, #28]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8b1a      	ldrh	r2, [r3, #24]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	7b58      	ldrb	r0, [r3, #13]
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f001 fa3b 	bl	8008462 <USBH_BulkSendData>
 8006fec:	e00c      	b.n	8007008 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	7b58      	ldrb	r0, [r3, #13]
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	4603      	mov	r3, r0
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f001 fa2d 	bl	8008462 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8007010:	e03b      	b.n	800708a <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	7b5b      	ldrb	r3, [r3, #13]
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 fd49 	bl	8008ab0 <USBH_LL_GetURBState>
 800701e:	4603      	mov	r3, r0
 8007020:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8007022:	7afb      	ldrb	r3, [r7, #11]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d128      	bne.n	800707a <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	8b12      	ldrh	r2, [r2, #24]
 8007030:	4293      	cmp	r3, r2
 8007032:	d90e      	bls.n	8007052 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	8b12      	ldrh	r2, [r2, #24]
 800703c:	1a9a      	subs	r2, r3, r2
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	8b12      	ldrh	r2, [r2, #24]
 800704a:	441a      	add	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	61da      	str	r2, [r3, #28]
 8007050:	e002      	b.n	8007058 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	2b00      	cmp	r3, #0
 800705e:	d004      	beq.n	800706a <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8007068:	e00e      	b.n	8007088 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f868 	bl	8007148 <USBH_CDC_TransmitCallback>
    break;
 8007078:	e006      	b.n	8007088 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 800707a:	7afb      	ldrb	r3, [r7, #11]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d103      	bne.n	8007088 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8007088:	bf00      	nop
  }
}
 800708a:	bf00      	nop
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b086      	sub	sp, #24
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80070a4:	2300      	movs	r3, #0
 80070a6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d002      	beq.n	80070b8 <CDC_ProcessReception+0x26>
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d00e      	beq.n	80070d4 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80070b6:	e043      	b.n	8007140 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	6a19      	ldr	r1, [r3, #32]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	8b5a      	ldrh	r2, [r3, #26]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	7b1b      	ldrb	r3, [r3, #12]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 f9f1 	bl	80084ac <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2204      	movs	r2, #4
 80070ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80070d2:	e035      	b.n	8007140 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	7b1b      	ldrb	r3, [r3, #12]
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f001 fce8 	bl	8008ab0 <USBH_LL_GetURBState>
 80070e0:	4603      	mov	r3, r0
 80070e2:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80070e4:	7cfb      	ldrb	r3, [r7, #19]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d129      	bne.n	800713e <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	7b1b      	ldrb	r3, [r3, #12]
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f001 fc4b 	bl	800898c <USBH_LL_GetLastXferSize>
 80070f6:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d016      	beq.n	8007130 <CDC_ProcessReception+0x9e>
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	8b5b      	ldrh	r3, [r3, #26]
 8007106:	461a      	mov	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4293      	cmp	r3, r2
 800710c:	d910      	bls.n	8007130 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	1ad2      	subs	r2, r2, r3
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	6a1a      	ldr	r2, [r3, #32]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	441a      	add	r2, r3
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2203      	movs	r2, #3
 800712a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800712e:	e006      	b.n	800713e <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f80f 	bl	800715c <USBH_CDC_ReceiveCallback>
    break;
 800713e:	bf00      	nop
  }
}
 8007140:	bf00      	nop
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]

}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]

}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]

}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	4613      	mov	r3, r2
 8007190:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007198:	2302      	movs	r3, #2
 800719a:	e019      	b.n	80071d0 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	79fa      	ldrb	r2, [r7, #7]
 80071a0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f000 f80f 	bl	80071d8 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f001 fb2d 	bl	8008828 <USBH_LL_Init>

  return USBH_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80071e4:	e008      	b.n	80071f8 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	32e0      	adds	r2, #224	; 0xe0
 80071ec:	2100      	movs	r1, #0
 80071ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3301      	adds	r3, #1
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b0e      	cmp	r3, #14
 80071fc:	d9f3      	bls.n	80071e6 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80071fe:	2300      	movs	r3, #0
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	e009      	b.n	8007218 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	4413      	add	r3, r2
 800720a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800720e:	2200      	movs	r2, #0
 8007210:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3301      	adds	r3, #1
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800721e:	d3f1      	bcc.n	8007204 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2240      	movs	r2, #64	; 0x40
 8007244:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800726a:	b480      	push	{r7}
 800726c:	b085      	sub	sp, #20
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d017      	beq.n	80072ae <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10f      	bne.n	80072a8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800728e:	1c59      	adds	r1, r3, #1
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	33dc      	adds	r3, #220	; 0xdc
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]
 80072a6:	e004      	b.n	80072b2 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80072a8:	2302      	movs	r3, #2
 80072aa:	73fb      	strb	r3, [r7, #15]
 80072ac:	e001      	b.n	80072b2 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80072ae:	2302      	movs	r3, #2
 80072b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	460b      	mov	r3, r1
 80072ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80072d6:	78fa      	ldrb	r2, [r7, #3]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d204      	bcs.n	80072e6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	78fa      	ldrb	r2, [r7, #3]
 80072e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80072e4:	e001      	b.n	80072ea <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80072e6:	2302      	movs	r3, #2
 80072e8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b087      	sub	sp, #28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	4608      	mov	r0, r1
 8007302:	4611      	mov	r1, r2
 8007304:	461a      	mov	r2, r3
 8007306:	4603      	mov	r3, r0
 8007308:	70fb      	strb	r3, [r7, #3]
 800730a:	460b      	mov	r3, r1
 800730c:	70bb      	strb	r3, [r7, #2]
 800730e:	4613      	mov	r3, r2
 8007310:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007316:	2300      	movs	r3, #0
 8007318:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007320:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007322:	e025      	b.n	8007370 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007324:	7dfb      	ldrb	r3, [r7, #23]
 8007326:	221a      	movs	r2, #26
 8007328:	fb02 f303 	mul.w	r3, r2, r3
 800732c:	3308      	adds	r3, #8
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4413      	add	r3, r2
 8007332:	3302      	adds	r3, #2
 8007334:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	795b      	ldrb	r3, [r3, #5]
 800733a:	78fa      	ldrb	r2, [r7, #3]
 800733c:	429a      	cmp	r2, r3
 800733e:	d002      	beq.n	8007346 <USBH_FindInterface+0x4e>
 8007340:	78fb      	ldrb	r3, [r7, #3]
 8007342:	2bff      	cmp	r3, #255	; 0xff
 8007344:	d111      	bne.n	800736a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800734a:	78ba      	ldrb	r2, [r7, #2]
 800734c:	429a      	cmp	r2, r3
 800734e:	d002      	beq.n	8007356 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007350:	78bb      	ldrb	r3, [r7, #2]
 8007352:	2bff      	cmp	r3, #255	; 0xff
 8007354:	d109      	bne.n	800736a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800735a:	787a      	ldrb	r2, [r7, #1]
 800735c:	429a      	cmp	r2, r3
 800735e:	d002      	beq.n	8007366 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007360:	787b      	ldrb	r3, [r7, #1]
 8007362:	2bff      	cmp	r3, #255	; 0xff
 8007364:	d101      	bne.n	800736a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	e006      	b.n	8007378 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	3301      	adds	r3, #1
 800736e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007370:	7dfb      	ldrb	r3, [r7, #23]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d9d6      	bls.n	8007324 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007376:	23ff      	movs	r3, #255	; 0xff
}
 8007378:	4618      	mov	r0, r3
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f001 fa87 	bl	80088a0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8007392:	2101      	movs	r1, #1
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f001 fb9e 	bl	8008ad6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b088      	sub	sp, #32
 80073a8:	af04      	add	r7, sp, #16
 80073aa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80073ac:	2302      	movs	r3, #2
 80073ae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 faec 	bl	8007992 <USBH_IsPortEnabled>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10c      	bne.n	80073da <USBH_Process+0x36>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d007      	beq.n	80073da <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d002      	beq.n	80073da <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2203      	movs	r2, #3
 80073d8:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b0b      	cmp	r3, #11
 80073e2:	f200 814c 	bhi.w	800767e <USBH_Process+0x2da>
 80073e6:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <USBH_Process+0x48>)
 80073e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ec:	0800741d 	.word	0x0800741d
 80073f0:	0800743f 	.word	0x0800743f
 80073f4:	08007453 	.word	0x08007453
 80073f8:	08007659 	.word	0x08007659
 80073fc:	0800767f 	.word	0x0800767f
 8007400:	080074e1 	.word	0x080074e1
 8007404:	0800760f 	.word	0x0800760f
 8007408:	08007511 	.word	0x08007511
 800740c:	08007531 	.word	0x08007531
 8007410:	08007551 	.word	0x08007551
 8007414:	0800757f 	.word	0x0800757f
 8007418:	08007641 	.word	0x08007641
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 812c 	beq.w	8007682 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8007430:	20c8      	movs	r0, #200	; 0xc8
 8007432:	f001 fb9a 	bl	8008b6a <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f001 fa8d 	bl	8008956 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800743c:	e121      	b.n	8007682 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007444:	2b01      	cmp	r3, #1
 8007446:	f040 811e 	bne.w	8007686 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2202      	movs	r2, #2
 800744e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007450:	e119      	b.n	8007686 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8007452:	2064      	movs	r0, #100	; 0x64
 8007454:	f001 fb89 	bl	8008b6a <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f001 fa57 	bl	800890c <USBH_LL_GetSpeed>
 800745e:	4603      	mov	r3, r0
 8007460:	461a      	mov	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2205      	movs	r2, #5
 800746c:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800746e:	2100      	movs	r1, #0
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 f868 	bl	8008546 <USBH_AllocPipe>
 8007476:	4603      	mov	r3, r0
 8007478:	461a      	mov	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800747e:	2180      	movs	r1, #128	; 0x80
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f001 f860 	bl	8008546 <USBH_AllocPipe>
 8007486:	4603      	mov	r3, r0
 8007488:	461a      	mov	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	7919      	ldrb	r1, [r3, #4]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80074a2:	b292      	uxth	r2, r2
 80074a4:	9202      	str	r2, [sp, #8]
 80074a6:	2200      	movs	r2, #0
 80074a8:	9201      	str	r2, [sp, #4]
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	4603      	mov	r3, r0
 80074ae:	2280      	movs	r2, #128	; 0x80
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 f819 	bl	80084e8 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	7959      	ldrb	r1, [r3, #5]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80074ca:	b292      	uxth	r2, r2
 80074cc:	9202      	str	r2, [sp, #8]
 80074ce:	2200      	movs	r2, #0
 80074d0:	9201      	str	r2, [sp, #4]
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	4603      	mov	r3, r0
 80074d6:	2200      	movs	r2, #0
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f001 f805 	bl	80084e8 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80074de:	e0e3      	b.n	80076a8 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f8e7 	bl	80076b4 <USBH_HandleEnum>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f040 80ce 	bne.w	800768a <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d103      	bne.n	8007508 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2208      	movs	r2, #8
 8007504:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8007506:	e0c0      	b.n	800768a <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2207      	movs	r2, #7
 800750c:	701a      	strb	r2, [r3, #0]
    break;
 800750e:	e0bc      	b.n	800768a <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007516:	2b00      	cmp	r3, #0
 8007518:	f000 80b9 	beq.w	800768e <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007522:	2101      	movs	r1, #1
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2208      	movs	r2, #8
 800752c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800752e:	e0ae      	b.n	800768e <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8007536:	b29b      	uxth	r3, r3
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fb59 	bl	8007bf2 <USBH_SetCfg>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	f040 80a5 	bne.w	8007692 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2209      	movs	r2, #9
 800754c:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800754e:	e0a0      	b.n	8007692 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00b      	beq.n	8007576 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800755e:	2101      	movs	r1, #1
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fb69 	bl	8007c38 <USBH_SetFeature>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	f040 8094 	bne.w	8007696 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	220a      	movs	r2, #10
 8007572:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007574:	e08f      	b.n	8007696 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	220a      	movs	r2, #10
 800757a:	701a      	strb	r2, [r3, #0]
    break;
 800757c:	e08b      	b.n	8007696 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 8088 	beq.w	800769a <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]
 8007596:	e017      	b.n	80075c8 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	33dc      	adds	r3, #220	; 0xdc
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	791a      	ldrb	r2, [r3, #4]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d108      	bne.n	80075c2 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	33dc      	adds	r3, #220	; 0xdc
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	3301      	adds	r3, #1
 80075c6:	73fb      	strb	r3, [r7, #15]
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0e4      	beq.n	8007598 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d016      	beq.n	8007606 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	4798      	blx	r3
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d109      	bne.n	80075fe <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2206      	movs	r2, #6
 80075ee:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80075f6:	2103      	movs	r1, #3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80075fc:	e04d      	b.n	800769a <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	220d      	movs	r2, #13
 8007602:	701a      	strb	r2, [r3, #0]
    break;
 8007604:	e049      	b.n	800769a <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	220d      	movs	r2, #13
 800760a:	701a      	strb	r2, [r3, #0]
    break;
 800760c:	e045      	b.n	800769a <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00f      	beq.n	8007638 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	4798      	blx	r3
 8007624:	4603      	mov	r3, r0
 8007626:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d136      	bne.n	800769e <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	220b      	movs	r2, #11
 8007634:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8007636:	e032      	b.n	800769e <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	220d      	movs	r2, #13
 800763c:	701a      	strb	r2, [r3, #0]
    break;
 800763e:	e02e      	b.n	800769e <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007646:	2b00      	cmp	r3, #0
 8007648:	d02b      	beq.n	80076a2 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	4798      	blx	r3
    }
    break;
 8007656:	e024      	b.n	80076a2 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff fdbd 	bl	80071d8 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007664:	2b00      	cmp	r3, #0
 8007666:	d01e      	beq.n	80076a6 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800767c:	e013      	b.n	80076a6 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 800767e:	bf00      	nop
 8007680:	e012      	b.n	80076a8 <USBH_Process+0x304>
    break;
 8007682:	bf00      	nop
 8007684:	e010      	b.n	80076a8 <USBH_Process+0x304>
    break;
 8007686:	bf00      	nop
 8007688:	e00e      	b.n	80076a8 <USBH_Process+0x304>
    break;
 800768a:	bf00      	nop
 800768c:	e00c      	b.n	80076a8 <USBH_Process+0x304>
    break;
 800768e:	bf00      	nop
 8007690:	e00a      	b.n	80076a8 <USBH_Process+0x304>
    break;
 8007692:	bf00      	nop
 8007694:	e008      	b.n	80076a8 <USBH_Process+0x304>
    break;
 8007696:	bf00      	nop
 8007698:	e006      	b.n	80076a8 <USBH_Process+0x304>
    break;
 800769a:	bf00      	nop
 800769c:	e004      	b.n	80076a8 <USBH_Process+0x304>
    break;
 800769e:	bf00      	nop
 80076a0:	e002      	b.n	80076a8 <USBH_Process+0x304>
    break;
 80076a2:	bf00      	nop
 80076a4:	e000      	b.n	80076a8 <USBH_Process+0x304>
    break;
 80076a6:	bf00      	nop
  }
 return USBH_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop

080076b4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af04      	add	r7, sp, #16
 80076ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076bc:	2301      	movs	r3, #1
 80076be:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	785b      	ldrb	r3, [r3, #1]
 80076c4:	2b07      	cmp	r3, #7
 80076c6:	f200 80f8 	bhi.w	80078ba <USBH_HandleEnum+0x206>
 80076ca:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <USBH_HandleEnum+0x1c>)
 80076cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d0:	080076f1 	.word	0x080076f1
 80076d4:	08007763 	.word	0x08007763
 80076d8:	0800777b 	.word	0x0800777b
 80076dc:	080077f1 	.word	0x080077f1
 80076e0:	08007807 	.word	0x08007807
 80076e4:	08007823 	.word	0x08007823
 80076e8:	08007857 	.word	0x08007857
 80076ec:	0800788b 	.word	0x0800788b
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80076f0:	2108      	movs	r1, #8
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f9ad 	bl	8007a52 <USBH_Get_DevDesc>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f040 80df 	bne.w	80078be <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	7919      	ldrb	r1, [r3, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007724:	b292      	uxth	r2, r2
 8007726:	9202      	str	r2, [sp, #8]
 8007728:	2200      	movs	r2, #0
 800772a:	9201      	str	r2, [sp, #4]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	4603      	mov	r3, r0
 8007730:	2280      	movs	r2, #128	; 0x80
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fed8 	bl	80084e8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	7959      	ldrb	r1, [r3, #5]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800774c:	b292      	uxth	r2, r2
 800774e:	9202      	str	r2, [sp, #8]
 8007750:	2200      	movs	r2, #0
 8007752:	9201      	str	r2, [sp, #4]
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	4603      	mov	r3, r0
 8007758:	2200      	movs	r2, #0
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fec4 	bl	80084e8 <USBH_OpenPipe>

    }
    break;
 8007760:	e0ad      	b.n	80078be <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8007762:	2112      	movs	r1, #18
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f974 	bl	8007a52 <USBH_Get_DevDesc>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	f040 80a8 	bne.w	80078c2 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2202      	movs	r2, #2
 8007776:	705a      	strb	r2, [r3, #1]

    }
    break;
 8007778:	e0a3      	b.n	80078c2 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800777a:	2101      	movs	r1, #1
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fa14 	bl	8007baa <USBH_SetAddress>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	f040 809e 	bne.w	80078c6 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 800778a:	2002      	movs	r0, #2
 800778c:	f001 f9ed 	bl	8008b6a <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2203      	movs	r2, #3
 800779c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	7919      	ldrb	r1, [r3, #4]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80077b2:	b292      	uxth	r2, r2
 80077b4:	9202      	str	r2, [sp, #8]
 80077b6:	2200      	movs	r2, #0
 80077b8:	9201      	str	r2, [sp, #4]
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	4603      	mov	r3, r0
 80077be:	2280      	movs	r2, #128	; 0x80
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fe91 	bl	80084e8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	7959      	ldrb	r1, [r3, #5]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80077da:	b292      	uxth	r2, r2
 80077dc:	9202      	str	r2, [sp, #8]
 80077de:	2200      	movs	r2, #0
 80077e0:	9201      	str	r2, [sp, #4]
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	4603      	mov	r3, r0
 80077e6:	2200      	movs	r2, #0
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fe7d 	bl	80084e8 <USBH_OpenPipe>
    }
    break;
 80077ee:	e06a      	b.n	80078c6 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80077f0:	2109      	movs	r1, #9
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f955 	bl	8007aa2 <USBH_Get_CfgDesc>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d165      	bne.n	80078ca <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2204      	movs	r2, #4
 8007802:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007804:	e061      	b.n	80078ca <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800780c:	4619      	mov	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f947 	bl	8007aa2 <USBH_Get_CfgDesc>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d159      	bne.n	80078ce <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2205      	movs	r2, #5
 800781e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007820:	e055      	b.n	80078ce <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007828:	2b00      	cmp	r3, #0
 800782a:	d010      	beq.n	800784e <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007838:	23ff      	movs	r3, #255	; 0xff
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f955 	bl	8007aea <USBH_Get_StringDesc>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d145      	bne.n	80078d2 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2206      	movs	r2, #6
 800784a:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800784c:	e041      	b.n	80078d2 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2206      	movs	r2, #6
 8007852:	705a      	strb	r2, [r3, #1]
    break;
 8007854:	e03d      	b.n	80078d2 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800785c:	2b00      	cmp	r3, #0
 800785e:	d010      	beq.n	8007882 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800786c:	23ff      	movs	r3, #255	; 0xff
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f93b 	bl	8007aea <USBH_Get_StringDesc>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d12d      	bne.n	80078d6 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2207      	movs	r2, #7
 800787e:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007880:	e029      	b.n	80078d6 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2207      	movs	r2, #7
 8007886:	705a      	strb	r2, [r3, #1]
    break;
 8007888:	e025      	b.n	80078d6 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00f      	beq.n	80078b4 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80078a0:	23ff      	movs	r3, #255	; 0xff
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f921 	bl	8007aea <USBH_Get_StringDesc>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d115      	bne.n	80078da <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80078b2:	e012      	b.n	80078da <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73fb      	strb	r3, [r7, #15]
    break;
 80078b8:	e00f      	b.n	80078da <USBH_HandleEnum+0x226>

  default:
    break;
 80078ba:	bf00      	nop
 80078bc:	e00e      	b.n	80078dc <USBH_HandleEnum+0x228>
    break;
 80078be:	bf00      	nop
 80078c0:	e00c      	b.n	80078dc <USBH_HandleEnum+0x228>
    break;
 80078c2:	bf00      	nop
 80078c4:	e00a      	b.n	80078dc <USBH_HandleEnum+0x228>
    break;
 80078c6:	bf00      	nop
 80078c8:	e008      	b.n	80078dc <USBH_HandleEnum+0x228>
    break;
 80078ca:	bf00      	nop
 80078cc:	e006      	b.n	80078dc <USBH_HandleEnum+0x228>
    break;
 80078ce:	bf00      	nop
 80078d0:	e004      	b.n	80078dc <USBH_HandleEnum+0x228>
    break;
 80078d2:	bf00      	nop
 80078d4:	e002      	b.n	80078dc <USBH_HandleEnum+0x228>
    break;
 80078d6:	bf00      	nop
 80078d8:	e000      	b.n	80078dc <USBH_HandleEnum+0x228>
    break;
 80078da:	bf00      	nop
  }
  return Status;
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop

080078e8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b082      	sub	sp, #8
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f804 	bl	800792a <USBH_HandleSof>
}
 8007922:	bf00      	nop
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b082      	sub	sp, #8
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b0b      	cmp	r3, #11
 800793a:	d10a      	bne.n	8007952 <USBH_HandleSof+0x28>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007942:	2b00      	cmp	r3, #0
 8007944:	d005      	beq.n	8007952 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	4798      	blx	r3
  }
}
 8007952:	bf00      	nop
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800796a:	bf00      	nop
}
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007976:	b480      	push	{r7}
 8007978:	b083      	sub	sp, #12
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007986:	bf00      	nop
}
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10f      	bne.n	80079de <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00e      	beq.n	80079ee <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80079d6:	2104      	movs	r1, #4
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	4798      	blx	r3
 80079dc:	e007      	b.n	80079ee <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d102      	bne.n	80079ee <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2202      	movs	r2, #2
 80079ec:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 ff68 	bl	80088d6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	791b      	ldrb	r3, [r3, #4]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fdb8 	bl	8008582 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	795b      	ldrb	r3, [r3, #5]
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fdb2 	bl	8008582 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d005      	beq.n	8007a3c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007a36:	2105      	movs	r1, #5
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 ff2f 	bl	80088a0 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2203      	movs	r2, #3
 8007a46:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b086      	sub	sp, #24
 8007a56:	af02      	add	r7, sp, #8
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a70:	2100      	movs	r1, #0
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f864 	bl	8007b40 <USBH_GetDescriptor>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	73fb      	strb	r3, [r7, #15]
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10a      	bne.n	8007a98 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a8e:	78fa      	ldrb	r2, [r7, #3]
 8007a90:	b292      	uxth	r2, r2
 8007a92:	4619      	mov	r1, r3
 8007a94:	f000 f918 	bl	8007cc8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b086      	sub	sp, #24
 8007aa6:	af02      	add	r7, sp, #8
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	460b      	mov	r3, r1
 8007aac:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	331c      	adds	r3, #28
 8007ab2:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8007ab4:	887b      	ldrh	r3, [r7, #2]
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007abe:	2100      	movs	r1, #0
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f83d 	bl	8007b40 <USBH_GetDescriptor>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	72fb      	strb	r3, [r7, #11]
 8007aca:	7afb      	ldrb	r3, [r7, #11]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d107      	bne.n	8007ae0 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007ad6:	887a      	ldrh	r2, [r7, #2]
 8007ad8:	68f9      	ldr	r1, [r7, #12]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f000 f964 	bl	8007da8 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007ae0:	7afb      	ldrb	r3, [r7, #11]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b088      	sub	sp, #32
 8007aee:	af02      	add	r7, sp, #8
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	461a      	mov	r2, r3
 8007af6:	460b      	mov	r3, r1
 8007af8:	72fb      	strb	r3, [r7, #11]
 8007afa:	4613      	mov	r3, r2
 8007afc:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8007afe:	7afb      	ldrb	r3, [r7, #11]
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b06:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007b0e:	893b      	ldrh	r3, [r7, #8]
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	460b      	mov	r3, r1
 8007b14:	2100      	movs	r1, #0
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 f812 	bl	8007b40 <USBH_GetDescriptor>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	75fb      	strb	r3, [r7, #23]
 8007b20:	7dfb      	ldrb	r3, [r7, #23]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d107      	bne.n	8007b36 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b2c:	893a      	ldrh	r2, [r7, #8]
 8007b2e:	6879      	ldr	r1, [r7, #4]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 fa37 	bl	8007fa4 <USBH_ParseStringDesc>
  }
  return status;
 8007b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	607b      	str	r3, [r7, #4]
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	72fb      	strb	r3, [r7, #11]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	789b      	ldrb	r3, [r3, #2]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d11c      	bne.n	8007b94 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007b5a:	7afb      	ldrb	r3, [r7, #11]
 8007b5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2206      	movs	r2, #6
 8007b6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	893a      	ldrh	r2, [r7, #8]
 8007b70:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007b72:	893b      	ldrh	r3, [r7, #8]
 8007b74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b7c:	d104      	bne.n	8007b88 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f240 4209 	movw	r2, #1033	; 0x409
 8007b84:	829a      	strh	r2, [r3, #20]
 8007b86:	e002      	b.n	8007b8e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8b3a      	ldrh	r2, [r7, #24]
 8007b92:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007b94:	8b3b      	ldrh	r3, [r7, #24]
 8007b96:	461a      	mov	r2, r3
 8007b98:	6879      	ldr	r1, [r7, #4]
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 fa50 	bl	8008040 <USBH_CtlReq>
 8007ba0:	4603      	mov	r3, r0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b082      	sub	sp, #8
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	789b      	ldrb	r3, [r3, #2]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d10f      	bne.n	8007bde <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2205      	movs	r2, #5
 8007bc8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007bca:	78fb      	ldrb	r3, [r7, #3]
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007bde:	2200      	movs	r2, #0
 8007be0:	2100      	movs	r1, #0
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fa2c 	bl	8008040 <USBH_CtlReq>
 8007be8:	4603      	mov	r3, r0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	789b      	ldrb	r3, [r3, #2]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d10e      	bne.n	8007c24 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2209      	movs	r2, #9
 8007c10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	887a      	ldrh	r2, [r7, #2]
 8007c16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8007c24:	2200      	movs	r2, #0
 8007c26:	2100      	movs	r1, #0
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fa09 	bl	8008040 <USBH_CtlReq>
 8007c2e:	4603      	mov	r3, r0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	789b      	ldrb	r3, [r3, #2]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d10f      	bne.n	8007c6c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2203      	movs	r2, #3
 8007c56:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2100      	movs	r1, #0
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f9e5 	bl	8008040 <USBH_CtlReq>
 8007c76:	4603      	mov	r3, r0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	789b      	ldrb	r3, [r3, #2]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d10f      	bne.n	8007cb4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2202      	movs	r2, #2
 8007c98:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007ca6:	78fb      	ldrb	r3, [r7, #3]
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f9c1 	bl	8008040 <USBH_CtlReq>
 8007cbe:	4603      	mov	r3, r0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	781a      	ldrb	r2, [r3, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	785a      	ldrb	r2, [r3, #1]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	3302      	adds	r3, #2
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	3303      	adds	r3, #3
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	021b      	lsls	r3, r3, #8
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	791a      	ldrb	r2, [r3, #4]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	795a      	ldrb	r2, [r3, #5]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	799a      	ldrb	r2, [r3, #6]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	79da      	ldrb	r2, [r3, #7]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007d22:	88fb      	ldrh	r3, [r7, #6]
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d939      	bls.n	8007d9c <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	3309      	adds	r3, #9
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	021b      	lsls	r3, r3, #8
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	330a      	adds	r3, #10
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	330b      	adds	r3, #11
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	021b      	lsls	r3, r3, #8
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	330c      	adds	r3, #12
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	330d      	adds	r3, #13
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	4313      	orrs	r3, r2
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	7b9a      	ldrb	r2, [r3, #14]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	7bda      	ldrb	r2, [r3, #15]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	7c1a      	ldrb	r2, [r3, #16]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	7c5a      	ldrb	r2, [r3, #17]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	745a      	strb	r2, [r3, #17]
  }
}
 8007d9c:	bf00      	nop
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08a      	sub	sp, #40	; 0x28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	4613      	mov	r3, r2
 8007db4:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	781a      	ldrb	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	785a      	ldrb	r2, [r3, #1]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	3302      	adds	r3, #2
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	3303      	adds	r3, #3
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	021b      	lsls	r3, r3, #8
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	4313      	orrs	r3, r2
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	791a      	ldrb	r2, [r3, #4]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	795a      	ldrb	r2, [r3, #5]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	799a      	ldrb	r2, [r3, #6]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	79da      	ldrb	r2, [r3, #7]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	7a1a      	ldrb	r2, [r3, #8]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e1e:	88fb      	ldrh	r3, [r7, #6]
 8007e20:	2b09      	cmp	r3, #9
 8007e22:	d95f      	bls.n	8007ee4 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e24:	2309      	movs	r3, #9
 8007e26:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e2c:	e051      	b.n	8007ed2 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e2e:	f107 0316 	add.w	r3, r7, #22
 8007e32:	4619      	mov	r1, r3
 8007e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e36:	f000 f8e8 	bl	800800a <USBH_GetNextDesc>
 8007e3a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3e:	785b      	ldrb	r3, [r3, #1]
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d146      	bne.n	8007ed2 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e48:	221a      	movs	r2, #26
 8007e4a:	fb02 f303 	mul.w	r3, r2, r3
 8007e4e:	3308      	adds	r3, #8
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	4413      	add	r3, r2
 8007e54:	3302      	adds	r3, #2
 8007e56:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e5a:	69f8      	ldr	r0, [r7, #28]
 8007e5c:	f000 f846 	bl	8007eec <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007e66:	2300      	movs	r3, #0
 8007e68:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e6a:	e022      	b.n	8007eb2 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8007e6c:	f107 0316 	add.w	r3, r7, #22
 8007e70:	4619      	mov	r1, r3
 8007e72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e74:	f000 f8c9 	bl	800800a <USBH_GetNextDesc>
 8007e78:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	785b      	ldrb	r3, [r3, #1]
 8007e7e:	2b05      	cmp	r3, #5
 8007e80:	d117      	bne.n	8007eb2 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007e82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e86:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007e8a:	3201      	adds	r2, #1
 8007e8c:	00d2      	lsls	r2, r2, #3
 8007e8e:	211a      	movs	r1, #26
 8007e90:	fb01 f303 	mul.w	r3, r1, r3
 8007e94:	4413      	add	r3, r2
 8007e96:	3308      	adds	r3, #8
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8007ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ea2:	69b8      	ldr	r0, [r7, #24]
 8007ea4:	f000 f851 	bl	8007f4a <USBH_ParseEPDesc>
            ep_ix++;
 8007ea8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007eac:	3301      	adds	r3, #1
 8007eae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	791b      	ldrb	r3, [r3, #4]
 8007eb6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d204      	bcs.n	8007ec8 <USBH_ParseCfgDesc+0x120>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	885a      	ldrh	r2, [r3, #2]
 8007ec2:	8afb      	ldrh	r3, [r7, #22]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d8d1      	bhi.n	8007e6c <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007ec8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ecc:	3301      	adds	r3, #1
 8007ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ed2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d804      	bhi.n	8007ee4 <USBH_ParseCfgDesc+0x13c>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	885a      	ldrh	r2, [r3, #2]
 8007ede:	8afb      	ldrh	r3, [r7, #22]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d8a4      	bhi.n	8007e2e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007ee4:	bf00      	nop
 8007ee6:	3728      	adds	r7, #40	; 0x28
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781a      	ldrb	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	785a      	ldrb	r2, [r3, #1]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	789a      	ldrb	r2, [r3, #2]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	78da      	ldrb	r2, [r3, #3]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	791a      	ldrb	r2, [r3, #4]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	795a      	ldrb	r2, [r3, #5]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	799a      	ldrb	r2, [r3, #6]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	79da      	ldrb	r2, [r3, #7]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	7a1a      	ldrb	r2, [r3, #8]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	721a      	strb	r2, [r3, #8]
}
 8007f3e:	bf00      	nop
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	781a      	ldrb	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	785a      	ldrb	r2, [r3, #1]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	789a      	ldrb	r2, [r3, #2]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	78da      	ldrb	r2, [r3, #3]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	3304      	adds	r3, #4
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	3305      	adds	r3, #5
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	021b      	lsls	r3, r3, #8
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	799a      	ldrb	r2, [r3, #6]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	719a      	strb	r2, [r3, #6]
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	2b03      	cmp	r3, #3
 8007fba:	d120      	bne.n	8007ffe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	1e9a      	subs	r2, r3, #2
 8007fc2:	88fb      	ldrh	r3, [r7, #6]
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	bf28      	it	cs
 8007fc8:	4613      	movcs	r3, r2
 8007fca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3302      	adds	r3, #2
 8007fd0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	82fb      	strh	r3, [r7, #22]
 8007fd6:	e00b      	b.n	8007ff0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007fd8:	8afb      	ldrh	r3, [r7, #22]
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	4413      	add	r3, r2
 8007fde:	781a      	ldrb	r2, [r3, #0]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007fea:	8afb      	ldrh	r3, [r7, #22]
 8007fec:	3302      	adds	r3, #2
 8007fee:	82fb      	strh	r3, [r7, #22]
 8007ff0:	8afa      	ldrh	r2, [r7, #22]
 8007ff2:	8abb      	ldrh	r3, [r7, #20]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d3ef      	bcc.n	8007fd8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	701a      	strb	r2, [r3, #0]
  }
}
 8007ffe:	bf00      	nop
 8008000:	371c      	adds	r7, #28
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800800a:	b480      	push	{r7}
 800800c:	b085      	sub	sp, #20
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	881a      	ldrh	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	b29b      	uxth	r3, r3
 800801e:	4413      	add	r3, r2
 8008020:	b29a      	uxth	r2, r3
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4413      	add	r3, r2
 8008030:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8008032:	68fb      	ldr	r3, [r7, #12]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	4613      	mov	r3, r2
 800804c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800804e:	2301      	movs	r3, #1
 8008050:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	789b      	ldrb	r3, [r3, #2]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d002      	beq.n	8008060 <USBH_CtlReq+0x20>
 800805a:	2b02      	cmp	r3, #2
 800805c:	d00f      	beq.n	800807e <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 800805e:	e034      	b.n	80080ca <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	88fa      	ldrh	r2, [r7, #6]
 800806a:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2201      	movs	r2, #1
 8008070:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2202      	movs	r2, #2
 8008076:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8008078:	2301      	movs	r3, #1
 800807a:	75fb      	strb	r3, [r7, #23]
    break;
 800807c:	e025      	b.n	80080ca <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 f828 	bl	80080d4 <USBH_HandleControl>
 8008084:	4603      	mov	r3, r0
 8008086:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8008088:	7dfb      	ldrb	r3, [r7, #23]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d108      	bne.n	80080a0 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2201      	movs	r2, #1
 8008092:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	75fb      	strb	r3, [r7, #23]
    break;
 800809e:	e013      	b.n	80080c8 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d108      	bne.n	80080b8 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2201      	movs	r2, #1
 80080aa:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80080b2:	2303      	movs	r3, #3
 80080b4:	75fb      	strb	r3, [r7, #23]
    break;
 80080b6:	e007      	b.n	80080c8 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d104      	bne.n	80080c8 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2201      	movs	r2, #1
 80080c2:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80080c4:	2302      	movs	r3, #2
 80080c6:	75fb      	strb	r3, [r7, #23]
    break;
 80080c8:	bf00      	nop
  }
  return status;
 80080ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af02      	add	r7, sp, #8
 80080da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80080dc:	2301      	movs	r3, #1
 80080de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	7e1b      	ldrb	r3, [r3, #24]
 80080e8:	3b01      	subs	r3, #1
 80080ea:	2b0a      	cmp	r3, #10
 80080ec:	f200 814c 	bhi.w	8008388 <USBH_HandleControl+0x2b4>
 80080f0:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <USBH_HandleControl+0x24>)
 80080f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f6:	bf00      	nop
 80080f8:	08008125 	.word	0x08008125
 80080fc:	0800813f 	.word	0x0800813f
 8008100:	080081a9 	.word	0x080081a9
 8008104:	080081cf 	.word	0x080081cf
 8008108:	08008207 	.word	0x08008207
 800810c:	08008233 	.word	0x08008233
 8008110:	08008285 	.word	0x08008285
 8008114:	080082a7 	.word	0x080082a7
 8008118:	080082e3 	.word	0x080082e3
 800811c:	0800830b 	.word	0x0800830b
 8008120:	08008349 	.word	0x08008349
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f103 0110 	add.w	r1, r3, #16
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	795b      	ldrb	r3, [r3, #5]
 800812e:	461a      	mov	r2, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f939 	bl	80083a8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2202      	movs	r2, #2
 800813a:	761a      	strb	r2, [r3, #24]
    break;
 800813c:	e12f      	b.n	800839e <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	795b      	ldrb	r3, [r3, #5]
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fcb3 	bl	8008ab0 <USBH_LL_GetURBState>
 800814a:	4603      	mov	r3, r0
 800814c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d11e      	bne.n	8008192 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7c1b      	ldrb	r3, [r3, #16]
 8008158:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800815c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	8adb      	ldrh	r3, [r3, #22]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00a      	beq.n	800817c <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8008166:	7b7b      	ldrb	r3, [r7, #13]
 8008168:	2b80      	cmp	r3, #128	; 0x80
 800816a:	d103      	bne.n	8008174 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2203      	movs	r2, #3
 8008170:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008172:	e10b      	b.n	800838c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2205      	movs	r2, #5
 8008178:	761a      	strb	r2, [r3, #24]
    break;
 800817a:	e107      	b.n	800838c <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 800817c:	7b7b      	ldrb	r3, [r7, #13]
 800817e:	2b80      	cmp	r3, #128	; 0x80
 8008180:	d103      	bne.n	800818a <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2209      	movs	r2, #9
 8008186:	761a      	strb	r2, [r3, #24]
    break;
 8008188:	e100      	b.n	800838c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2207      	movs	r2, #7
 800818e:	761a      	strb	r2, [r3, #24]
    break;
 8008190:	e0fc      	b.n	800838c <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008192:	7bbb      	ldrb	r3, [r7, #14]
 8008194:	2b04      	cmp	r3, #4
 8008196:	d003      	beq.n	80081a0 <USBH_HandleControl+0xcc>
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	2b02      	cmp	r3, #2
 800819c:	f040 80f6 	bne.w	800838c <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	220b      	movs	r2, #11
 80081a4:	761a      	strb	r2, [r3, #24]
    break;
 80081a6:	e0f1      	b.n	800838c <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6899      	ldr	r1, [r3, #8]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	899a      	ldrh	r2, [r3, #12]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	791b      	ldrb	r3, [r3, #4]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f930 	bl	8008426 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2204      	movs	r2, #4
 80081ca:	761a      	strb	r2, [r3, #24]
    break;
 80081cc:	e0e7      	b.n	800839e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	791b      	ldrb	r3, [r3, #4]
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fc6b 	bl	8008ab0 <USBH_LL_GetURBState>
 80081da:	4603      	mov	r3, r0
 80081dc:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80081de:	7bbb      	ldrb	r3, [r7, #14]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d102      	bne.n	80081ea <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2209      	movs	r2, #9
 80081e8:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80081ea:	7bbb      	ldrb	r3, [r7, #14]
 80081ec:	2b05      	cmp	r3, #5
 80081ee:	d102      	bne.n	80081f6 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 80081f0:	2303      	movs	r3, #3
 80081f2:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80081f4:	e0cc      	b.n	8008390 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	2b04      	cmp	r3, #4
 80081fa:	f040 80c9 	bne.w	8008390 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	220b      	movs	r2, #11
 8008202:	761a      	strb	r2, [r3, #24]
    break;
 8008204:	e0c4      	b.n	8008390 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6899      	ldr	r1, [r3, #8]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	899a      	ldrh	r2, [r3, #12]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	7958      	ldrb	r0, [r3, #5]
 8008212:	2301      	movs	r3, #1
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	4603      	mov	r3, r0
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f8df 	bl	80083dc <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008224:	b29a      	uxth	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2206      	movs	r2, #6
 800822e:	761a      	strb	r2, [r3, #24]
    break;
 8008230:	e0b5      	b.n	800839e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	795b      	ldrb	r3, [r3, #5]
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fc39 	bl	8008ab0 <USBH_LL_GetURBState>
 800823e:	4603      	mov	r3, r0
 8008240:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d103      	bne.n	8008250 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2207      	movs	r2, #7
 800824c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800824e:	e0a1      	b.n	8008394 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	2b05      	cmp	r3, #5
 8008254:	d105      	bne.n	8008262 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	220c      	movs	r2, #12
 800825a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800825c:	2303      	movs	r3, #3
 800825e:	73fb      	strb	r3, [r7, #15]
    break;
 8008260:	e098      	b.n	8008394 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	2b02      	cmp	r3, #2
 8008266:	d103      	bne.n	8008270 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2205      	movs	r2, #5
 800826c:	761a      	strb	r2, [r3, #24]
    break;
 800826e:	e091      	b.n	8008394 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	2b04      	cmp	r3, #4
 8008274:	f040 808e 	bne.w	8008394 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	220b      	movs	r2, #11
 800827c:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800827e:	2302      	movs	r3, #2
 8008280:	73fb      	strb	r3, [r7, #15]
    break;
 8008282:	e087      	b.n	8008394 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	791b      	ldrb	r3, [r3, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	2100      	movs	r1, #0
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f8ca 	bl	8008426 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008298:	b29a      	uxth	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2208      	movs	r2, #8
 80082a2:	761a      	strb	r2, [r3, #24]

    break;
 80082a4:	e07b      	b.n	800839e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	791b      	ldrb	r3, [r3, #4]
 80082aa:	4619      	mov	r1, r3
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fbff 	bl	8008ab0 <USBH_LL_GetURBState>
 80082b2:	4603      	mov	r3, r0
 80082b4:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d105      	bne.n	80082c8 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	220d      	movs	r2, #13
 80082c0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80082c6:	e067      	b.n	8008398 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	2b04      	cmp	r3, #4
 80082cc:	d103      	bne.n	80082d6 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	220b      	movs	r2, #11
 80082d2:	761a      	strb	r2, [r3, #24]
    break;
 80082d4:	e060      	b.n	8008398 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	2b05      	cmp	r3, #5
 80082da:	d15d      	bne.n	8008398 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 80082dc:	2303      	movs	r3, #3
 80082de:	73fb      	strb	r3, [r7, #15]
    break;
 80082e0:	e05a      	b.n	8008398 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	795a      	ldrb	r2, [r3, #5]
 80082e6:	2301      	movs	r3, #1
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	4613      	mov	r3, r2
 80082ec:	2200      	movs	r2, #0
 80082ee:	2100      	movs	r1, #0
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f873 	bl	80083dc <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	220a      	movs	r2, #10
 8008306:	761a      	strb	r2, [r3, #24]
    break;
 8008308:	e049      	b.n	800839e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	795b      	ldrb	r3, [r3, #5]
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fbcd 	bl	8008ab0 <USBH_LL_GetURBState>
 8008316:	4603      	mov	r3, r0
 8008318:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d105      	bne.n	800832c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	220d      	movs	r2, #13
 8008328:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800832a:	e037      	b.n	800839c <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800832c:	7bbb      	ldrb	r3, [r7, #14]
 800832e:	2b02      	cmp	r3, #2
 8008330:	d103      	bne.n	800833a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2209      	movs	r2, #9
 8008336:	761a      	strb	r2, [r3, #24]
    break;
 8008338:	e030      	b.n	800839c <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800833a:	7bbb      	ldrb	r3, [r7, #14]
 800833c:	2b04      	cmp	r3, #4
 800833e:	d12d      	bne.n	800839c <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	220b      	movs	r2, #11
 8008344:	761a      	strb	r2, [r3, #24]
    break;
 8008346:	e029      	b.n	800839c <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	7e5b      	ldrb	r3, [r3, #25]
 800834c:	3301      	adds	r3, #1
 800834e:	b2da      	uxtb	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	765a      	strb	r2, [r3, #25]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	7e5b      	ldrb	r3, [r3, #25]
 8008358:	2b02      	cmp	r3, #2
 800835a:	d809      	bhi.n	8008370 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 faba 	bl	80088d6 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800836e:	e016      	b.n	800839e <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008376:	2106      	movs	r1, #6
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8008382:	2302      	movs	r3, #2
 8008384:	73fb      	strb	r3, [r7, #15]
    break;
 8008386:	e00a      	b.n	800839e <USBH_HandleControl+0x2ca>

  default:
    break;
 8008388:	bf00      	nop
 800838a:	e008      	b.n	800839e <USBH_HandleControl+0x2ca>
    break;
 800838c:	bf00      	nop
 800838e:	e006      	b.n	800839e <USBH_HandleControl+0x2ca>
    break;
 8008390:	bf00      	nop
 8008392:	e004      	b.n	800839e <USBH_HandleControl+0x2ca>
    break;
 8008394:	bf00      	nop
 8008396:	e002      	b.n	800839e <USBH_HandleControl+0x2ca>
    break;
 8008398:	bf00      	nop
 800839a:	e000      	b.n	800839e <USBH_HandleControl+0x2ca>
    break;
 800839c:	bf00      	nop
  }
  return status;
 800839e:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af04      	add	r7, sp, #16
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	4613      	mov	r3, r2
 80083b4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80083b6:	79f9      	ldrb	r1, [r7, #7]
 80083b8:	2300      	movs	r3, #0
 80083ba:	9303      	str	r3, [sp, #12]
 80083bc:	2308      	movs	r3, #8
 80083be:	9302      	str	r3, [sp, #8]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	9301      	str	r3, [sp, #4]
 80083c4:	2300      	movs	r3, #0
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	2300      	movs	r3, #0
 80083ca:	2200      	movs	r2, #0
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 fb3e 	bl	8008a4e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b088      	sub	sp, #32
 80083e0:	af04      	add	r7, sp, #16
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	4611      	mov	r1, r2
 80083e8:	461a      	mov	r2, r3
 80083ea:	460b      	mov	r3, r1
 80083ec:	80fb      	strh	r3, [r7, #6]
 80083ee:	4613      	mov	r3, r2
 80083f0:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008400:	7979      	ldrb	r1, [r7, #5]
 8008402:	7e3b      	ldrb	r3, [r7, #24]
 8008404:	9303      	str	r3, [sp, #12]
 8008406:	88fb      	ldrh	r3, [r7, #6]
 8008408:	9302      	str	r3, [sp, #8]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	9301      	str	r3, [sp, #4]
 800840e:	2301      	movs	r3, #1
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	2300      	movs	r3, #0
 8008414:	2200      	movs	r2, #0
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f000 fb19 	bl	8008a4e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b088      	sub	sp, #32
 800842a:	af04      	add	r7, sp, #16
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	4611      	mov	r1, r2
 8008432:	461a      	mov	r2, r3
 8008434:	460b      	mov	r3, r1
 8008436:	80fb      	strh	r3, [r7, #6]
 8008438:	4613      	mov	r3, r2
 800843a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800843c:	7979      	ldrb	r1, [r7, #5]
 800843e:	2300      	movs	r3, #0
 8008440:	9303      	str	r3, [sp, #12]
 8008442:	88fb      	ldrh	r3, [r7, #6]
 8008444:	9302      	str	r3, [sp, #8]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	9301      	str	r3, [sp, #4]
 800844a:	2301      	movs	r3, #1
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	2300      	movs	r3, #0
 8008450:	2201      	movs	r2, #1
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 fafb 	bl	8008a4e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008458:	2300      	movs	r3, #0

}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b088      	sub	sp, #32
 8008466:	af04      	add	r7, sp, #16
 8008468:	60f8      	str	r0, [r7, #12]
 800846a:	60b9      	str	r1, [r7, #8]
 800846c:	4611      	mov	r1, r2
 800846e:	461a      	mov	r2, r3
 8008470:	460b      	mov	r3, r1
 8008472:	80fb      	strh	r3, [r7, #6]
 8008474:	4613      	mov	r3, r2
 8008476:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008482:	2300      	movs	r3, #0
 8008484:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008486:	7979      	ldrb	r1, [r7, #5]
 8008488:	7e3b      	ldrb	r3, [r7, #24]
 800848a:	9303      	str	r3, [sp, #12]
 800848c:	88fb      	ldrh	r3, [r7, #6]
 800848e:	9302      	str	r3, [sp, #8]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	9301      	str	r3, [sp, #4]
 8008494:	2301      	movs	r3, #1
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	2302      	movs	r3, #2
 800849a:	2200      	movs	r2, #0
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f000 fad6 	bl	8008a4e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af04      	add	r7, sp, #16
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	4611      	mov	r1, r2
 80084b8:	461a      	mov	r2, r3
 80084ba:	460b      	mov	r3, r1
 80084bc:	80fb      	strh	r3, [r7, #6]
 80084be:	4613      	mov	r3, r2
 80084c0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80084c2:	7979      	ldrb	r1, [r7, #5]
 80084c4:	2300      	movs	r3, #0
 80084c6:	9303      	str	r3, [sp, #12]
 80084c8:	88fb      	ldrh	r3, [r7, #6]
 80084ca:	9302      	str	r3, [sp, #8]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	2301      	movs	r3, #1
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	2302      	movs	r3, #2
 80084d6:	2201      	movs	r2, #1
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 fab8 	bl	8008a4e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af04      	add	r7, sp, #16
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	4608      	mov	r0, r1
 80084f2:	4611      	mov	r1, r2
 80084f4:	461a      	mov	r2, r3
 80084f6:	4603      	mov	r3, r0
 80084f8:	70fb      	strb	r3, [r7, #3]
 80084fa:	460b      	mov	r3, r1
 80084fc:	70bb      	strb	r3, [r7, #2]
 80084fe:	4613      	mov	r3, r2
 8008500:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8008502:	7878      	ldrb	r0, [r7, #1]
 8008504:	78ba      	ldrb	r2, [r7, #2]
 8008506:	78f9      	ldrb	r1, [r7, #3]
 8008508:	8b3b      	ldrh	r3, [r7, #24]
 800850a:	9302      	str	r3, [sp, #8]
 800850c:	7d3b      	ldrb	r3, [r7, #20]
 800850e:	9301      	str	r3, [sp, #4]
 8008510:	7c3b      	ldrb	r3, [r7, #16]
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	4603      	mov	r3, r0
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fa4b 	bl	80089b2 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800851c:	2300      	movs	r3, #0

}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b082      	sub	sp, #8
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
 800852e:	460b      	mov	r3, r1
 8008530:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8008532:	78fb      	ldrb	r3, [r7, #3]
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fa6a 	bl	8008a10 <USBH_LL_ClosePipe>

  return USBH_OK;
 800853c:	2300      	movs	r3, #0

}
 800853e:	4618      	mov	r0, r3
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	460b      	mov	r3, r1
 8008550:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f831 	bl	80085ba <USBH_GetFreePipe>
 8008558:	4603      	mov	r3, r0
 800855a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800855c:	89fb      	ldrh	r3, [r7, #14]
 800855e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008562:	4293      	cmp	r3, r2
 8008564:	d007      	beq.n	8008576 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8008566:	78fb      	ldrb	r3, [r7, #3]
 8008568:	89fa      	ldrh	r2, [r7, #14]
 800856a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	32e0      	adds	r2, #224	; 0xe0
 8008572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8008576:	89fb      	ldrh	r3, [r7, #14]
 8008578:	b2db      	uxtb	r3, r3
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008582:	b480      	push	{r7}
 8008584:	b083      	sub	sp, #12
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	460b      	mov	r3, r1
 800858c:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800858e:	78fb      	ldrb	r3, [r7, #3]
 8008590:	2b0a      	cmp	r3, #10
 8008592:	d80b      	bhi.n	80085ac <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8008594:	78fa      	ldrb	r2, [r7, #3]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	32e0      	adds	r2, #224	; 0xe0
 800859a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859e:	78fa      	ldrb	r2, [r7, #3]
 80085a0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	32e0      	adds	r2, #224	; 0xe0
 80085a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b085      	sub	sp, #20
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80085c6:	2300      	movs	r3, #0
 80085c8:	73fb      	strb	r3, [r7, #15]
 80085ca:	e00e      	b.n	80085ea <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80085cc:	7bfa      	ldrb	r2, [r7, #15]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	32e0      	adds	r2, #224	; 0xe0
 80085d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d102      	bne.n	80085e4 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80085de:	7bfb      	ldrb	r3, [r7, #15]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	e007      	b.n	80085f4 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
 80085e6:	3301      	adds	r3, #1
 80085e8:	73fb      	strb	r3, [r7, #15]
 80085ea:	7bfb      	ldrb	r3, [r7, #15]
 80085ec:	2b0a      	cmp	r3, #10
 80085ee:	d9ed      	bls.n	80085cc <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 80085f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008604:	2201      	movs	r2, #1
 8008606:	490e      	ldr	r1, [pc, #56]	; (8008640 <MX_USB_HOST_Init+0x40>)
 8008608:	480e      	ldr	r0, [pc, #56]	; (8008644 <MX_USB_HOST_Init+0x44>)
 800860a:	f7fe fdbb 	bl	8007184 <USBH_Init>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008614:	f7f8 fb1e 	bl	8000c54 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008618:	490b      	ldr	r1, [pc, #44]	; (8008648 <MX_USB_HOST_Init+0x48>)
 800861a:	480a      	ldr	r0, [pc, #40]	; (8008644 <MX_USB_HOST_Init+0x44>)
 800861c:	f7fe fe25 	bl	800726a <USBH_RegisterClass>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008626:	f7f8 fb15 	bl	8000c54 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800862a:	4806      	ldr	r0, [pc, #24]	; (8008644 <MX_USB_HOST_Init+0x44>)
 800862c:	f7fe feaa 	bl	8007384 <USBH_Start>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008636:	f7f8 fb0d 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800863a:	bf00      	nop
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	08008661 	.word	0x08008661
 8008644:	200002b8 	.word	0x200002b8
 8008648:	2000000c 	.word	0x2000000c

0800864c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008650:	4802      	ldr	r0, [pc, #8]	; (800865c <MX_USB_HOST_Process+0x10>)
 8008652:	f7fe fea7 	bl	80073a4 <USBH_Process>
}
 8008656:	bf00      	nop
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	200002b8 	.word	0x200002b8

08008660 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	460b      	mov	r3, r1
 800866a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800866c:	78fb      	ldrb	r3, [r7, #3]
 800866e:	3b01      	subs	r3, #1
 8008670:	2b04      	cmp	r3, #4
 8008672:	d819      	bhi.n	80086a8 <USBH_UserProcess+0x48>
 8008674:	a201      	add	r2, pc, #4	; (adr r2, 800867c <USBH_UserProcess+0x1c>)
 8008676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867a:	bf00      	nop
 800867c:	080086a9 	.word	0x080086a9
 8008680:	08008699 	.word	0x08008699
 8008684:	080086a9 	.word	0x080086a9
 8008688:	080086a1 	.word	0x080086a1
 800868c:	08008691 	.word	0x08008691
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008690:	4b09      	ldr	r3, [pc, #36]	; (80086b8 <USBH_UserProcess+0x58>)
 8008692:	2203      	movs	r2, #3
 8008694:	701a      	strb	r2, [r3, #0]
  break;
 8008696:	e008      	b.n	80086aa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008698:	4b07      	ldr	r3, [pc, #28]	; (80086b8 <USBH_UserProcess+0x58>)
 800869a:	2202      	movs	r2, #2
 800869c:	701a      	strb	r2, [r3, #0]
  break;
 800869e:	e004      	b.n	80086aa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80086a0:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <USBH_UserProcess+0x58>)
 80086a2:	2201      	movs	r2, #1
 80086a4:	701a      	strb	r2, [r3, #0]
  break;
 80086a6:	e000      	b.n	80086aa <USBH_UserProcess+0x4a>

  default:
  break;
 80086a8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80086aa:	bf00      	nop
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	200000b4 	.word	0x200000b4

080086bc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b08a      	sub	sp, #40	; 0x28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086c4:	f107 0314 	add.w	r3, r7, #20
 80086c8:	2200      	movs	r2, #0
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	605a      	str	r2, [r3, #4]
 80086ce:	609a      	str	r2, [r3, #8]
 80086d0:	60da      	str	r2, [r3, #12]
 80086d2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086dc:	d147      	bne.n	800876e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086de:	2300      	movs	r3, #0
 80086e0:	613b      	str	r3, [r7, #16]
 80086e2:	4b25      	ldr	r3, [pc, #148]	; (8008778 <HAL_HCD_MspInit+0xbc>)
 80086e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e6:	4a24      	ldr	r2, [pc, #144]	; (8008778 <HAL_HCD_MspInit+0xbc>)
 80086e8:	f043 0301 	orr.w	r3, r3, #1
 80086ec:	6313      	str	r3, [r2, #48]	; 0x30
 80086ee:	4b22      	ldr	r3, [pc, #136]	; (8008778 <HAL_HCD_MspInit+0xbc>)
 80086f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	613b      	str	r3, [r7, #16]
 80086f8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80086fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008700:	2300      	movs	r3, #0
 8008702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008704:	2300      	movs	r3, #0
 8008706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008708:	f107 0314 	add.w	r3, r7, #20
 800870c:	4619      	mov	r1, r3
 800870e:	481b      	ldr	r0, [pc, #108]	; (800877c <HAL_HCD_MspInit+0xc0>)
 8008710:	f7f8 ff38 	bl	8001584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008714:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800871a:	2302      	movs	r3, #2
 800871c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800871e:	2300      	movs	r3, #0
 8008720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008722:	2300      	movs	r3, #0
 8008724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008726:	230a      	movs	r3, #10
 8008728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800872a:	f107 0314 	add.w	r3, r7, #20
 800872e:	4619      	mov	r1, r3
 8008730:	4812      	ldr	r0, [pc, #72]	; (800877c <HAL_HCD_MspInit+0xc0>)
 8008732:	f7f8 ff27 	bl	8001584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008736:	4b10      	ldr	r3, [pc, #64]	; (8008778 <HAL_HCD_MspInit+0xbc>)
 8008738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873a:	4a0f      	ldr	r2, [pc, #60]	; (8008778 <HAL_HCD_MspInit+0xbc>)
 800873c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008740:	6353      	str	r3, [r2, #52]	; 0x34
 8008742:	2300      	movs	r3, #0
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <HAL_HCD_MspInit+0xbc>)
 8008748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800874a:	4a0b      	ldr	r2, [pc, #44]	; (8008778 <HAL_HCD_MspInit+0xbc>)
 800874c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008750:	6453      	str	r3, [r2, #68]	; 0x44
 8008752:	4b09      	ldr	r3, [pc, #36]	; (8008778 <HAL_HCD_MspInit+0xbc>)
 8008754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800875e:	2200      	movs	r2, #0
 8008760:	2100      	movs	r1, #0
 8008762:	2043      	movs	r0, #67	; 0x43
 8008764:	f7f8 fed7 	bl	8001516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008768:	2043      	movs	r0, #67	; 0x43
 800876a:	f7f8 fef0 	bl	800154e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800876e:	bf00      	nop
 8008770:	3728      	adds	r7, #40	; 0x28
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	40023800 	.word	0x40023800
 800877c:	40020000 	.word	0x40020000

08008780 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800878e:	4618      	mov	r0, r3
 8008790:	f7ff f8b9 	bl	8007906 <USBH_LL_IncTimer>
}
 8008794:	bf00      	nop
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7ff f8fe 	bl	80079ac <USBH_LL_Connect>
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7ff f916 	bl	80079f8 <USBH_LL_Disconnect>
}
 80087cc:	bf00      	nop
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
 80087e0:	4613      	mov	r3, r2
 80087e2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087fe:	4618      	mov	r0, r3
 8008800:	f7ff f8ab 	bl	800795a <USBH_LL_PortEnabled>
} 
 8008804:	bf00      	nop
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff f8ab 	bl	8007976 <USBH_LL_PortDisabled>
} 
 8008820:	bf00      	nop
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008836:	2b01      	cmp	r3, #1
 8008838:	d12a      	bne.n	8008890 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800883a:	4a18      	ldr	r2, [pc, #96]	; (800889c <USBH_LL_Init+0x74>)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a15      	ldr	r2, [pc, #84]	; (800889c <USBH_LL_Init+0x74>)
 8008846:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800884a:	4b14      	ldr	r3, [pc, #80]	; (800889c <USBH_LL_Init+0x74>)
 800884c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008850:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008852:	4b12      	ldr	r3, [pc, #72]	; (800889c <USBH_LL_Init+0x74>)
 8008854:	2208      	movs	r2, #8
 8008856:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008858:	4b10      	ldr	r3, [pc, #64]	; (800889c <USBH_LL_Init+0x74>)
 800885a:	2201      	movs	r2, #1
 800885c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800885e:	4b0f      	ldr	r3, [pc, #60]	; (800889c <USBH_LL_Init+0x74>)
 8008860:	2200      	movs	r2, #0
 8008862:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008864:	4b0d      	ldr	r3, [pc, #52]	; (800889c <USBH_LL_Init+0x74>)
 8008866:	2202      	movs	r2, #2
 8008868:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800886a:	4b0c      	ldr	r3, [pc, #48]	; (800889c <USBH_LL_Init+0x74>)
 800886c:	2200      	movs	r2, #0
 800886e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008870:	480a      	ldr	r0, [pc, #40]	; (800889c <USBH_LL_Init+0x74>)
 8008872:	f7f9 f85e 	bl	8001932 <HAL_HCD_Init>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800887c:	f7f8 f9ea 	bl	8000c54 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008880:	4806      	ldr	r0, [pc, #24]	; (800889c <USBH_LL_Init+0x74>)
 8008882:	f7f9 fc59 	bl	8002138 <HAL_HCD_GetCurrentFrame>
 8008886:	4603      	mov	r3, r0
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7ff f82c 	bl	80078e8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	20000684 	.word	0x20000684

080088a0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7f9 fbc6 	bl	8002048 <HAL_HCD_Start>
 80088bc:	4603      	mov	r3, r0
 80088be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088c0:	7bfb      	ldrb	r3, [r7, #15]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 f95c 	bl	8008b80 <USBH_Get_USB_Status>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80088cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b084      	sub	sp, #16
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7f9 fbce 	bl	800208e <HAL_HCD_Stop>
 80088f2:	4603      	mov	r3, r0
 80088f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 f941 	bl	8008b80 <USBH_Get_USB_Status>
 80088fe:	4603      	mov	r3, r0
 8008900:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008902:	7bbb      	ldrb	r3, [r7, #14]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008914:	2301      	movs	r3, #1
 8008916:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800891e:	4618      	mov	r0, r3
 8008920:	f7f9 fc18 	bl	8002154 <HAL_HCD_GetCurrentSpeed>
 8008924:	4603      	mov	r3, r0
 8008926:	2b01      	cmp	r3, #1
 8008928:	d007      	beq.n	800893a <USBH_LL_GetSpeed+0x2e>
 800892a:	2b01      	cmp	r3, #1
 800892c:	d302      	bcc.n	8008934 <USBH_LL_GetSpeed+0x28>
 800892e:	2b02      	cmp	r3, #2
 8008930:	d006      	beq.n	8008940 <USBH_LL_GetSpeed+0x34>
 8008932:	e008      	b.n	8008946 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008934:	2300      	movs	r3, #0
 8008936:	73fb      	strb	r3, [r7, #15]
    break;
 8008938:	e008      	b.n	800894c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800893a:	2301      	movs	r3, #1
 800893c:	73fb      	strb	r3, [r7, #15]
    break;
 800893e:	e005      	b.n	800894c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008940:	2302      	movs	r3, #2
 8008942:	73fb      	strb	r3, [r7, #15]
    break;
 8008944:	e002      	b.n	800894c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008946:	2301      	movs	r3, #1
 8008948:	73fb      	strb	r3, [r7, #15]
    break;
 800894a:	bf00      	nop
  }
  return  speed;
 800894c:	7bfb      	ldrb	r3, [r7, #15]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800896c:	4618      	mov	r0, r3
 800896e:	f7f9 fbab 	bl	80020c8 <HAL_HCD_ResetPort>
 8008972:	4603      	mov	r3, r0
 8008974:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	4618      	mov	r0, r3
 800897a:	f000 f901 	bl	8008b80 <USBH_Get_USB_Status>
 800897e:	4603      	mov	r3, r0
 8008980:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008982:	7bbb      	ldrb	r3, [r7, #14]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800899e:	78fa      	ldrb	r2, [r7, #3]
 80089a0:	4611      	mov	r1, r2
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7f9 fbb3 	bl	800210e <HAL_HCD_HC_GetXferCount>
 80089a8:	4603      	mov	r3, r0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80089b2:	b590      	push	{r4, r7, lr}
 80089b4:	b089      	sub	sp, #36	; 0x24
 80089b6:	af04      	add	r7, sp, #16
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	4608      	mov	r0, r1
 80089bc:	4611      	mov	r1, r2
 80089be:	461a      	mov	r2, r3
 80089c0:	4603      	mov	r3, r0
 80089c2:	70fb      	strb	r3, [r7, #3]
 80089c4:	460b      	mov	r3, r1
 80089c6:	70bb      	strb	r3, [r7, #2]
 80089c8:	4613      	mov	r3, r2
 80089ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80089da:	787c      	ldrb	r4, [r7, #1]
 80089dc:	78ba      	ldrb	r2, [r7, #2]
 80089de:	78f9      	ldrb	r1, [r7, #3]
 80089e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089e2:	9302      	str	r3, [sp, #8]
 80089e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80089e8:	9301      	str	r3, [sp, #4]
 80089ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089ee:	9300      	str	r3, [sp, #0]
 80089f0:	4623      	mov	r3, r4
 80089f2:	f7f9 f800 	bl	80019f6 <HAL_HCD_HC_Init>
 80089f6:	4603      	mov	r3, r0
 80089f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 f8bf 	bl	8008b80 <USBH_Get_USB_Status>
 8008a02:	4603      	mov	r3, r0
 8008a04:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd90      	pop	{r4, r7, pc}

08008a10 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a2a:	78fa      	ldrb	r2, [r7, #3]
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7f9 f879 	bl	8001b26 <HAL_HCD_HC_Halt>
 8008a34:	4603      	mov	r3, r0
 8008a36:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 f8a0 	bl	8008b80 <USBH_Get_USB_Status>
 8008a40:	4603      	mov	r3, r0
 8008a42:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008a4e:	b590      	push	{r4, r7, lr}
 8008a50:	b089      	sub	sp, #36	; 0x24
 8008a52:	af04      	add	r7, sp, #16
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	4608      	mov	r0, r1
 8008a58:	4611      	mov	r1, r2
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	70fb      	strb	r3, [r7, #3]
 8008a60:	460b      	mov	r3, r1
 8008a62:	70bb      	strb	r3, [r7, #2]
 8008a64:	4613      	mov	r3, r2
 8008a66:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8008a76:	787c      	ldrb	r4, [r7, #1]
 8008a78:	78ba      	ldrb	r2, [r7, #2]
 8008a7a:	78f9      	ldrb	r1, [r7, #3]
 8008a7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a80:	9303      	str	r3, [sp, #12]
 8008a82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a84:	9302      	str	r3, [sp, #8]
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	9301      	str	r3, [sp, #4]
 8008a8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	4623      	mov	r3, r4
 8008a92:	f7f9 f86b 	bl	8001b6c <HAL_HCD_HC_SubmitRequest>
 8008a96:	4603      	mov	r3, r0
 8008a98:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 f86f 	bl	8008b80 <USBH_Get_USB_Status>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008aa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd90      	pop	{r4, r7, pc}

08008ab0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ac2:	78fa      	ldrb	r2, [r7, #3]
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7f9 fb0c 	bl	80020e4 <HAL_HCD_HC_GetURBState>
 8008acc:	4603      	mov	r3, r0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b082      	sub	sp, #8
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d103      	bne.n	8008af4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008aec:	78fb      	ldrb	r3, [r7, #3]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 f872 	bl	8008bd8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008af4:	20c8      	movs	r0, #200	; 0xc8
 8008af6:	f7f8 fc11 	bl	800131c <HAL_Delay>
  return USBH_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
 8008b10:	4613      	mov	r3, r2
 8008b12:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b1a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008b1c:	78fa      	ldrb	r2, [r7, #3]
 8008b1e:	68f9      	ldr	r1, [r7, #12]
 8008b20:	4613      	mov	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	00db      	lsls	r3, r3, #3
 8008b28:	440b      	add	r3, r1
 8008b2a:	333b      	adds	r3, #59	; 0x3b
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00a      	beq.n	8008b48 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008b32:	78fa      	ldrb	r2, [r7, #3]
 8008b34:	68f9      	ldr	r1, [r7, #12]
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	440b      	add	r3, r1
 8008b40:	3350      	adds	r3, #80	; 0x50
 8008b42:	78ba      	ldrb	r2, [r7, #2]
 8008b44:	701a      	strb	r2, [r3, #0]
 8008b46:	e009      	b.n	8008b5c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008b48:	78fa      	ldrb	r2, [r7, #3]
 8008b4a:	68f9      	ldr	r1, [r7, #12]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	440b      	add	r3, r1
 8008b56:	3351      	adds	r3, #81	; 0x51
 8008b58:	78ba      	ldrb	r2, [r7, #2]
 8008b5a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b082      	sub	sp, #8
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7f8 fbd2 	bl	800131c <HAL_Delay>
}
 8008b78:	bf00      	nop
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	4603      	mov	r3, r0
 8008b88:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b8e:	79fb      	ldrb	r3, [r7, #7]
 8008b90:	2b03      	cmp	r3, #3
 8008b92:	d817      	bhi.n	8008bc4 <USBH_Get_USB_Status+0x44>
 8008b94:	a201      	add	r2, pc, #4	; (adr r2, 8008b9c <USBH_Get_USB_Status+0x1c>)
 8008b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9a:	bf00      	nop
 8008b9c:	08008bad 	.word	0x08008bad
 8008ba0:	08008bb3 	.word	0x08008bb3
 8008ba4:	08008bb9 	.word	0x08008bb9
 8008ba8:	08008bbf 	.word	0x08008bbf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	73fb      	strb	r3, [r7, #15]
    break;
 8008bb0:	e00b      	b.n	8008bca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	73fb      	strb	r3, [r7, #15]
    break;
 8008bb6:	e008      	b.n	8008bca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	73fb      	strb	r3, [r7, #15]
    break;
 8008bbc:	e005      	b.n	8008bca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	73fb      	strb	r3, [r7, #15]
    break;
 8008bc2:	e002      	b.n	8008bca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bc8:	bf00      	nop
  }
  return usb_status;
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3714      	adds	r7, #20
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	4603      	mov	r3, r0
 8008be0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8008be2:	79fb      	ldrb	r3, [r7, #7]
 8008be4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008be6:	79fb      	ldrb	r3, [r7, #7]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d102      	bne.n	8008bf2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8008bec:	2301      	movs	r3, #1
 8008bee:	73fb      	strb	r3, [r7, #15]
 8008bf0:	e001      	b.n	8008bf6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	4803      	ldr	r0, [pc, #12]	; (8008c0c <MX_DriverVbusFS+0x34>)
 8008bfe:	f7f8 fe5b 	bl	80018b8 <HAL_GPIO_WritePin>
}
 8008c02:	bf00      	nop
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	40020800 	.word	0x40020800

08008c10 <__errno>:
 8008c10:	4b01      	ldr	r3, [pc, #4]	; (8008c18 <__errno+0x8>)
 8008c12:	6818      	ldr	r0, [r3, #0]
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	2000002c 	.word	0x2000002c

08008c1c <__libc_init_array>:
 8008c1c:	b570      	push	{r4, r5, r6, lr}
 8008c1e:	4e0d      	ldr	r6, [pc, #52]	; (8008c54 <__libc_init_array+0x38>)
 8008c20:	4c0d      	ldr	r4, [pc, #52]	; (8008c58 <__libc_init_array+0x3c>)
 8008c22:	1ba4      	subs	r4, r4, r6
 8008c24:	10a4      	asrs	r4, r4, #2
 8008c26:	2500      	movs	r5, #0
 8008c28:	42a5      	cmp	r5, r4
 8008c2a:	d109      	bne.n	8008c40 <__libc_init_array+0x24>
 8008c2c:	4e0b      	ldr	r6, [pc, #44]	; (8008c5c <__libc_init_array+0x40>)
 8008c2e:	4c0c      	ldr	r4, [pc, #48]	; (8008c60 <__libc_init_array+0x44>)
 8008c30:	f000 f8ea 	bl	8008e08 <_init>
 8008c34:	1ba4      	subs	r4, r4, r6
 8008c36:	10a4      	asrs	r4, r4, #2
 8008c38:	2500      	movs	r5, #0
 8008c3a:	42a5      	cmp	r5, r4
 8008c3c:	d105      	bne.n	8008c4a <__libc_init_array+0x2e>
 8008c3e:	bd70      	pop	{r4, r5, r6, pc}
 8008c40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c44:	4798      	blx	r3
 8008c46:	3501      	adds	r5, #1
 8008c48:	e7ee      	b.n	8008c28 <__libc_init_array+0xc>
 8008c4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c4e:	4798      	blx	r3
 8008c50:	3501      	adds	r5, #1
 8008c52:	e7f2      	b.n	8008c3a <__libc_init_array+0x1e>
 8008c54:	08008e44 	.word	0x08008e44
 8008c58:	08008e44 	.word	0x08008e44
 8008c5c:	08008e44 	.word	0x08008e44
 8008c60:	08008e48 	.word	0x08008e48

08008c64 <malloc>:
 8008c64:	4b02      	ldr	r3, [pc, #8]	; (8008c70 <malloc+0xc>)
 8008c66:	4601      	mov	r1, r0
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	f000 b861 	b.w	8008d30 <_malloc_r>
 8008c6e:	bf00      	nop
 8008c70:	2000002c 	.word	0x2000002c

08008c74 <free>:
 8008c74:	4b02      	ldr	r3, [pc, #8]	; (8008c80 <free+0xc>)
 8008c76:	4601      	mov	r1, r0
 8008c78:	6818      	ldr	r0, [r3, #0]
 8008c7a:	f000 b80b 	b.w	8008c94 <_free_r>
 8008c7e:	bf00      	nop
 8008c80:	2000002c 	.word	0x2000002c

08008c84 <memset>:
 8008c84:	4402      	add	r2, r0
 8008c86:	4603      	mov	r3, r0
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d100      	bne.n	8008c8e <memset+0xa>
 8008c8c:	4770      	bx	lr
 8008c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c92:	e7f9      	b.n	8008c88 <memset+0x4>

08008c94 <_free_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	4605      	mov	r5, r0
 8008c98:	2900      	cmp	r1, #0
 8008c9a:	d045      	beq.n	8008d28 <_free_r+0x94>
 8008c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ca0:	1f0c      	subs	r4, r1, #4
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	bfb8      	it	lt
 8008ca6:	18e4      	addlt	r4, r4, r3
 8008ca8:	f000 f8ac 	bl	8008e04 <__malloc_lock>
 8008cac:	4a1f      	ldr	r2, [pc, #124]	; (8008d2c <_free_r+0x98>)
 8008cae:	6813      	ldr	r3, [r2, #0]
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	b933      	cbnz	r3, 8008cc2 <_free_r+0x2e>
 8008cb4:	6063      	str	r3, [r4, #4]
 8008cb6:	6014      	str	r4, [r2, #0]
 8008cb8:	4628      	mov	r0, r5
 8008cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cbe:	f000 b8a2 	b.w	8008e06 <__malloc_unlock>
 8008cc2:	42a3      	cmp	r3, r4
 8008cc4:	d90c      	bls.n	8008ce0 <_free_r+0x4c>
 8008cc6:	6821      	ldr	r1, [r4, #0]
 8008cc8:	1862      	adds	r2, r4, r1
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	bf04      	itt	eq
 8008cce:	681a      	ldreq	r2, [r3, #0]
 8008cd0:	685b      	ldreq	r3, [r3, #4]
 8008cd2:	6063      	str	r3, [r4, #4]
 8008cd4:	bf04      	itt	eq
 8008cd6:	1852      	addeq	r2, r2, r1
 8008cd8:	6022      	streq	r2, [r4, #0]
 8008cda:	6004      	str	r4, [r0, #0]
 8008cdc:	e7ec      	b.n	8008cb8 <_free_r+0x24>
 8008cde:	4613      	mov	r3, r2
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	b10a      	cbz	r2, 8008ce8 <_free_r+0x54>
 8008ce4:	42a2      	cmp	r2, r4
 8008ce6:	d9fa      	bls.n	8008cde <_free_r+0x4a>
 8008ce8:	6819      	ldr	r1, [r3, #0]
 8008cea:	1858      	adds	r0, r3, r1
 8008cec:	42a0      	cmp	r0, r4
 8008cee:	d10b      	bne.n	8008d08 <_free_r+0x74>
 8008cf0:	6820      	ldr	r0, [r4, #0]
 8008cf2:	4401      	add	r1, r0
 8008cf4:	1858      	adds	r0, r3, r1
 8008cf6:	4282      	cmp	r2, r0
 8008cf8:	6019      	str	r1, [r3, #0]
 8008cfa:	d1dd      	bne.n	8008cb8 <_free_r+0x24>
 8008cfc:	6810      	ldr	r0, [r2, #0]
 8008cfe:	6852      	ldr	r2, [r2, #4]
 8008d00:	605a      	str	r2, [r3, #4]
 8008d02:	4401      	add	r1, r0
 8008d04:	6019      	str	r1, [r3, #0]
 8008d06:	e7d7      	b.n	8008cb8 <_free_r+0x24>
 8008d08:	d902      	bls.n	8008d10 <_free_r+0x7c>
 8008d0a:	230c      	movs	r3, #12
 8008d0c:	602b      	str	r3, [r5, #0]
 8008d0e:	e7d3      	b.n	8008cb8 <_free_r+0x24>
 8008d10:	6820      	ldr	r0, [r4, #0]
 8008d12:	1821      	adds	r1, r4, r0
 8008d14:	428a      	cmp	r2, r1
 8008d16:	bf04      	itt	eq
 8008d18:	6811      	ldreq	r1, [r2, #0]
 8008d1a:	6852      	ldreq	r2, [r2, #4]
 8008d1c:	6062      	str	r2, [r4, #4]
 8008d1e:	bf04      	itt	eq
 8008d20:	1809      	addeq	r1, r1, r0
 8008d22:	6021      	streq	r1, [r4, #0]
 8008d24:	605c      	str	r4, [r3, #4]
 8008d26:	e7c7      	b.n	8008cb8 <_free_r+0x24>
 8008d28:	bd38      	pop	{r3, r4, r5, pc}
 8008d2a:	bf00      	nop
 8008d2c:	200000b8 	.word	0x200000b8

08008d30 <_malloc_r>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	1ccd      	adds	r5, r1, #3
 8008d34:	f025 0503 	bic.w	r5, r5, #3
 8008d38:	3508      	adds	r5, #8
 8008d3a:	2d0c      	cmp	r5, #12
 8008d3c:	bf38      	it	cc
 8008d3e:	250c      	movcc	r5, #12
 8008d40:	2d00      	cmp	r5, #0
 8008d42:	4606      	mov	r6, r0
 8008d44:	db01      	blt.n	8008d4a <_malloc_r+0x1a>
 8008d46:	42a9      	cmp	r1, r5
 8008d48:	d903      	bls.n	8008d52 <_malloc_r+0x22>
 8008d4a:	230c      	movs	r3, #12
 8008d4c:	6033      	str	r3, [r6, #0]
 8008d4e:	2000      	movs	r0, #0
 8008d50:	bd70      	pop	{r4, r5, r6, pc}
 8008d52:	f000 f857 	bl	8008e04 <__malloc_lock>
 8008d56:	4a21      	ldr	r2, [pc, #132]	; (8008ddc <_malloc_r+0xac>)
 8008d58:	6814      	ldr	r4, [r2, #0]
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	b991      	cbnz	r1, 8008d84 <_malloc_r+0x54>
 8008d5e:	4c20      	ldr	r4, [pc, #128]	; (8008de0 <_malloc_r+0xb0>)
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	b91b      	cbnz	r3, 8008d6c <_malloc_r+0x3c>
 8008d64:	4630      	mov	r0, r6
 8008d66:	f000 f83d 	bl	8008de4 <_sbrk_r>
 8008d6a:	6020      	str	r0, [r4, #0]
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f000 f838 	bl	8008de4 <_sbrk_r>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	d124      	bne.n	8008dc2 <_malloc_r+0x92>
 8008d78:	230c      	movs	r3, #12
 8008d7a:	6033      	str	r3, [r6, #0]
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f000 f842 	bl	8008e06 <__malloc_unlock>
 8008d82:	e7e4      	b.n	8008d4e <_malloc_r+0x1e>
 8008d84:	680b      	ldr	r3, [r1, #0]
 8008d86:	1b5b      	subs	r3, r3, r5
 8008d88:	d418      	bmi.n	8008dbc <_malloc_r+0x8c>
 8008d8a:	2b0b      	cmp	r3, #11
 8008d8c:	d90f      	bls.n	8008dae <_malloc_r+0x7e>
 8008d8e:	600b      	str	r3, [r1, #0]
 8008d90:	50cd      	str	r5, [r1, r3]
 8008d92:	18cc      	adds	r4, r1, r3
 8008d94:	4630      	mov	r0, r6
 8008d96:	f000 f836 	bl	8008e06 <__malloc_unlock>
 8008d9a:	f104 000b 	add.w	r0, r4, #11
 8008d9e:	1d23      	adds	r3, r4, #4
 8008da0:	f020 0007 	bic.w	r0, r0, #7
 8008da4:	1ac3      	subs	r3, r0, r3
 8008da6:	d0d3      	beq.n	8008d50 <_malloc_r+0x20>
 8008da8:	425a      	negs	r2, r3
 8008daa:	50e2      	str	r2, [r4, r3]
 8008dac:	e7d0      	b.n	8008d50 <_malloc_r+0x20>
 8008dae:	428c      	cmp	r4, r1
 8008db0:	684b      	ldr	r3, [r1, #4]
 8008db2:	bf16      	itet	ne
 8008db4:	6063      	strne	r3, [r4, #4]
 8008db6:	6013      	streq	r3, [r2, #0]
 8008db8:	460c      	movne	r4, r1
 8008dba:	e7eb      	b.n	8008d94 <_malloc_r+0x64>
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	6849      	ldr	r1, [r1, #4]
 8008dc0:	e7cc      	b.n	8008d5c <_malloc_r+0x2c>
 8008dc2:	1cc4      	adds	r4, r0, #3
 8008dc4:	f024 0403 	bic.w	r4, r4, #3
 8008dc8:	42a0      	cmp	r0, r4
 8008dca:	d005      	beq.n	8008dd8 <_malloc_r+0xa8>
 8008dcc:	1a21      	subs	r1, r4, r0
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f000 f808 	bl	8008de4 <_sbrk_r>
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	d0cf      	beq.n	8008d78 <_malloc_r+0x48>
 8008dd8:	6025      	str	r5, [r4, #0]
 8008dda:	e7db      	b.n	8008d94 <_malloc_r+0x64>
 8008ddc:	200000b8 	.word	0x200000b8
 8008de0:	200000bc 	.word	0x200000bc

08008de4 <_sbrk_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4c06      	ldr	r4, [pc, #24]	; (8008e00 <_sbrk_r+0x1c>)
 8008de8:	2300      	movs	r3, #0
 8008dea:	4605      	mov	r5, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	6023      	str	r3, [r4, #0]
 8008df0:	f7f8 f9b6 	bl	8001160 <_sbrk>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_sbrk_r+0x1a>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_sbrk_r+0x1a>
 8008dfc:	602b      	str	r3, [r5, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	20000948 	.word	0x20000948

08008e04 <__malloc_lock>:
 8008e04:	4770      	bx	lr

08008e06 <__malloc_unlock>:
 8008e06:	4770      	bx	lr

08008e08 <_init>:
 8008e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0a:	bf00      	nop
 8008e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0e:	bc08      	pop	{r3}
 8008e10:	469e      	mov	lr, r3
 8008e12:	4770      	bx	lr

08008e14 <_fini>:
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e16:	bf00      	nop
 8008e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1a:	bc08      	pop	{r3}
 8008e1c:	469e      	mov	lr, r3
 8008e1e:	4770      	bx	lr
