
Lab1111.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006a4c  08006a4c  00016a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a68  08006a68  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006a68  08006a68  00016a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a70  08006a70  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a70  08006a70  00016a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a74  08006a74  00016a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c4  20000090  08006b08  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000854  08006b08  00020854  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001833f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000357a  00000000  00000000  000383ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f8  00000000  00000000  0003b980  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f90  00000000  00000000  0003ca78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023865  00000000  00000000  0003da08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001132f  00000000  00000000  0006126d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca6a2  00000000  00000000  0007259c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013cc3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004778  00000000  00000000  0013ccbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006a34 	.word	0x08006a34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08006a34 	.word	0x08006a34

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fc44 	bl	8000d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f862 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f976 	bl	80007c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f8e0 	bl	800069c <MX_I2C1_Init>
  MX_I2S3_Init();
 80004dc:	f000 f90c 	bl	80006f8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e0:	f000 f93a 	bl	8000758 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e4:	f005 fef6 	bl	80062d4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  GPIOB->ODR = 0;
 80004e8:	4b29      	ldr	r3, [pc, #164]	; (8000590 <main+0xc8>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	615a      	str	r2, [r3, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80004ee:	2201      	movs	r2, #1
 80004f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f4:	4827      	ldr	r0, [pc, #156]	; (8000594 <main+0xcc>)
 80004f6:	f000 ff6f 	bl	80013d8 <HAL_GPIO_WritePin>
    HAL_Delay(750);
 80004fa:	f240 20ee 	movw	r0, #750	; 0x2ee
 80004fe:	f000 fc9d 	bl	8000e3c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000508:	4822      	ldr	r0, [pc, #136]	; (8000594 <main+0xcc>)
 800050a:	f000 ff65 	bl	80013d8 <HAL_GPIO_WritePin>
    HAL_Delay(750);
 800050e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000512:	f000 fc93 	bl	8000e3c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800051c:	481d      	ldr	r0, [pc, #116]	; (8000594 <main+0xcc>)
 800051e:	f000 ff5b 	bl	80013d8 <HAL_GPIO_WritePin>
    HAL_Delay(750);
 8000522:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000526:	f000 fc89 	bl	8000e3c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000530:	4818      	ldr	r0, [pc, #96]	; (8000594 <main+0xcc>)
 8000532:	f000 ff51 	bl	80013d8 <HAL_GPIO_WritePin>
    HAL_Delay(750);
 8000536:	f240 20ee 	movw	r0, #750	; 0x2ee
 800053a:	f000 fc7f 	bl	8000e3c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000544:	4813      	ldr	r0, [pc, #76]	; (8000594 <main+0xcc>)
 8000546:	f000 ff47 	bl	80013d8 <HAL_GPIO_WritePin>
    HAL_Delay(750);
 800054a:	f240 20ee 	movw	r0, #750	; 0x2ee
 800054e:	f000 fc75 	bl	8000e3c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000558:	480e      	ldr	r0, [pc, #56]	; (8000594 <main+0xcc>)
 800055a:	f000 ff3d 	bl	80013d8 <HAL_GPIO_WritePin>
    HAL_Delay(750);
 800055e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000562:	f000 fc6b 	bl	8000e3c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800056c:	4809      	ldr	r0, [pc, #36]	; (8000594 <main+0xcc>)
 800056e:	f000 ff33 	bl	80013d8 <HAL_GPIO_WritePin>
    HAL_Delay(750);
 8000572:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000576:	f000 fc61 	bl	8000e3c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <main+0xcc>)
 8000582:	f000 ff29 	bl	80013d8 <HAL_GPIO_WritePin>
    HAL_Delay(750);
 8000586:	f240 20ee 	movw	r0, #750	; 0x2ee
 800058a:	f000 fc57 	bl	8000e3c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800058e:	e7ae      	b.n	80004ee <main+0x26>
 8000590:	40020400 	.word	0x40020400
 8000594:	40020c00 	.word	0x40020c00

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b098      	sub	sp, #96	; 0x60
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f006 f982 	bl	80068b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	4b31      	ldr	r3, [pc, #196]	; (8000694 <SystemClock_Config+0xfc>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	4a30      	ldr	r2, [pc, #192]	; (8000694 <SystemClock_Config+0xfc>)
 80005d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d8:	6413      	str	r3, [r2, #64]	; 0x40
 80005da:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <SystemClock_Config+0xfc>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <SystemClock_Config+0x100>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a2a      	ldr	r2, [pc, #168]	; (8000698 <SystemClock_Config+0x100>)
 80005f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	4b28      	ldr	r3, [pc, #160]	; (8000698 <SystemClock_Config+0x100>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000602:	2301      	movs	r3, #1
 8000604:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000610:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000614:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000616:	2308      	movs	r3, #8
 8000618:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800061a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800061e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000624:	2307      	movs	r3, #7
 8000626:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800062c:	4618      	mov	r0, r3
 800062e:	f003 f90f 	bl	8003850 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000638:	f000 f9c2 	bl	80009c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000648:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	2105      	movs	r1, #5
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fb68 	bl	8003d30 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000666:	f000 f9ab 	bl	80009c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800066a:	2301      	movs	r3, #1
 800066c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800066e:	23c0      	movs	r3, #192	; 0xc0
 8000670:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000672:	2302      	movs	r3, #2
 8000674:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fd36 	bl	80040ec <HAL_RCCEx_PeriphCLKConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000686:	f000 f99b 	bl	80009c0 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3760      	adds	r7, #96	; 0x60
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_I2C1_Init+0x50>)
 80006a2:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <MX_I2C1_Init+0x54>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_I2C1_Init+0x50>)
 80006a8:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x58>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_I2C1_Init+0x50>)
 80006da:	f002 fae1 	bl	8002ca0 <HAL_I2C_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e4:	f000 f96c 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200000c4 	.word	0x200000c4
 80006f0:	40005400 	.word	0x40005400
 80006f4:	000186a0 	.word	0x000186a0

080006f8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_I2S3_Init+0x54>)
 80006fe:	4a14      	ldr	r2, [pc, #80]	; (8000750 <MX_I2S3_Init+0x58>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2S3_Init+0x54>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_I2S3_Init+0x54>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2S3_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_I2S3_Init+0x54>)
 8000718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800071c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_I2S3_Init+0x54>)
 8000720:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <MX_I2S3_Init+0x5c>)
 8000722:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_I2S3_Init+0x54>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_I2S3_Init+0x54>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_I2S3_Init+0x54>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_I2S3_Init+0x54>)
 8000738:	f002 fbea 	bl	8002f10 <HAL_I2S_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000742:	f000 f93d 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000174 	.word	0x20000174
 8000750:	40003c00 	.word	0x40003c00
 8000754:	00017700 	.word	0x00017700

08000758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_SPI1_Init+0x64>)
 800075e:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <MX_SPI1_Init+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_SPI1_Init+0x64>)
 8000764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_SPI1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_SPI1_Init+0x64>)
 8000784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000788:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_SPI1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_SPI1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_SPI1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_SPI1_Init+0x64>)
 80007a4:	220a      	movs	r2, #10
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_SPI1_Init+0x64>)
 80007aa:	f003 fddd 	bl	8004368 <HAL_SPI_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b4:	f000 f904 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2000011c 	.word	0x2000011c
 80007c0:	40013000 	.word	0x40013000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	4b71      	ldr	r3, [pc, #452]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a70      	ldr	r2, [pc, #448]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b6e      	ldr	r3, [pc, #440]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0310 	and.w	r3, r3, #16
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	4b6a      	ldr	r3, [pc, #424]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a69      	ldr	r2, [pc, #420]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b67      	ldr	r3, [pc, #412]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b63      	ldr	r3, [pc, #396]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a62      	ldr	r2, [pc, #392]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b60      	ldr	r3, [pc, #384]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b5c      	ldr	r3, [pc, #368]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a5b      	ldr	r2, [pc, #364]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b59      	ldr	r3, [pc, #356]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b55      	ldr	r3, [pc, #340]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a54      	ldr	r2, [pc, #336]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b52      	ldr	r3, [pc, #328]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b4e      	ldr	r3, [pc, #312]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a4d      	ldr	r2, [pc, #308]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b4b      	ldr	r3, [pc, #300]	; (80009a4 <MX_GPIO_Init+0x1e0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2108      	movs	r1, #8
 8000886:	4848      	ldr	r0, [pc, #288]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 8000888:	f000 fda6 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2101      	movs	r1, #1
 8000890:	4846      	ldr	r0, [pc, #280]	; (80009ac <MX_GPIO_Init+0x1e8>)
 8000892:	f000 fda1 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000896:	2200      	movs	r2, #0
 8000898:	f24f 0110 	movw	r1, #61456	; 0xf010
 800089c:	4844      	ldr	r0, [pc, #272]	; (80009b0 <MX_GPIO_Init+0x1ec>)
 800089e:	f000 fd9b 	bl	80013d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008a2:	2308      	movs	r3, #8
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	483b      	ldr	r0, [pc, #236]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 80008ba:	f000 fbf3 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008be:	2301      	movs	r3, #1
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4835      	ldr	r0, [pc, #212]	; (80009ac <MX_GPIO_Init+0x1e8>)
 80008d6:	f000 fbe5 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008da:	2308      	movs	r3, #8
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ea:	2305      	movs	r3, #5
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	482d      	ldr	r0, [pc, #180]	; (80009ac <MX_GPIO_Init+0x1e8>)
 80008f6:	f000 fbd5 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008fe:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <MX_GPIO_Init+0x1f0>)
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	482a      	ldr	r0, [pc, #168]	; (80009b8 <MX_GPIO_Init+0x1f4>)
 800090e:	f000 fbc9 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000912:	2304      	movs	r3, #4
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4825      	ldr	r0, [pc, #148]	; (80009bc <MX_GPIO_Init+0x1f8>)
 8000926:	f000 fbbd 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800092a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093c:	2305      	movs	r3, #5
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	481d      	ldr	r0, [pc, #116]	; (80009bc <MX_GPIO_Init+0x1f8>)
 8000948:	f000 fbac 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800094c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000950:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4812      	ldr	r0, [pc, #72]	; (80009b0 <MX_GPIO_Init+0x1ec>)
 8000966:	f000 fb9d 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800096a:	2320      	movs	r3, #32
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_GPIO_Init+0x1ec>)
 800097e:	f000 fb91 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000982:	2302      	movs	r3, #2
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_GPIO_Init+0x1f0>)
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 8000996:	f000 fb85 	bl	80010a4 <HAL_GPIO_Init>

}
 800099a:	bf00      	nop
 800099c:	3730      	adds	r7, #48	; 0x30
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40020800 	.word	0x40020800
 80009b0:	40020c00 	.word	0x40020c00
 80009b4:	10120000 	.word	0x10120000
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40020400 	.word	0x40020400

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	; 0x44
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_MspInit+0x4c>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a0e:	2007      	movs	r0, #7
 8000a10:	f000 fb06 	bl	8001020 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <HAL_I2C_MspInit+0x84>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d12c      	bne.n	8000a9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a5e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a64:	2312      	movs	r3, #18
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a70:	2304      	movs	r3, #4
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <HAL_I2C_MspInit+0x8c>)
 8000a7c:	f000 fb12 	bl	80010a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	; 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020400 	.word	0x40020400

08000ab0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a28      	ldr	r2, [pc, #160]	; (8000b70 <HAL_I2S_MspInit+0xc0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d14a      	bne.n	8000b68 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a26      	ldr	r2, [pc, #152]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a1f      	ldr	r2, [pc, #124]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_I2S_MspInit+0xc4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b26:	2310      	movs	r3, #16
 8000b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b36:	2306      	movs	r3, #6
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <HAL_I2S_MspInit+0xc8>)
 8000b42:	f000 faaf 	bl	80010a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b46:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b58:	2306      	movs	r3, #6
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4806      	ldr	r0, [pc, #24]	; (8000b7c <HAL_I2S_MspInit+0xcc>)
 8000b64:	f000 fa9e 	bl	80010a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40003c00 	.word	0x40003c00
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40020800 	.word	0x40020800

08000b80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <HAL_SPI_MspInit+0x84>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d12b      	bne.n	8000bfa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bda:	23e0      	movs	r3, #224	; 0xe0
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bea:	2305      	movs	r3, #5
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <HAL_SPI_MspInit+0x8c>)
 8000bf6:	f000 fa55 	bl	80010a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40013000 	.word	0x40013000
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 f8ca 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <OTG_FS_IRQHandler+0x10>)
 8000c72:	f000 fe4f 	bl	8001914 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000058c 	.word	0x2000058c

08000c80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x50>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x16>
		heap_end = &end;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <_sbrk+0x50>)
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <_sbrk+0x54>)
 8000c94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <_sbrk+0x50>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <_sbrk+0x50>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	466a      	mov	r2, sp
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d907      	bls.n	8000cba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000caa:	f005 fdc7 	bl	800683c <__errno>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cb8:	e006      	b.n	8000cc8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <_sbrk+0x50>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a03      	ldr	r2, [pc, #12]	; (8000cd0 <_sbrk+0x50>)
 8000cc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200000ac 	.word	0x200000ac
 8000cd4:	20000858 	.word	0x20000858

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <SystemInit+0x28>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <SystemInit+0x28>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <SystemInit+0x28>)
 8000cee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cf2:	609a      	str	r2, [r3, #8]
#endif
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d0a:	e003      	b.n	8000d14 <LoopCopyDataInit>

08000d0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d12:	3104      	adds	r1, #4

08000d14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d14:	480b      	ldr	r0, [pc, #44]	; (8000d44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d1c:	d3f6      	bcc.n	8000d0c <CopyDataInit>
  ldr  r2, =_sbss
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d20:	e002      	b.n	8000d28 <LoopFillZerobss>

08000d22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d24:	f842 3b04 	str.w	r3, [r2], #4

08000d28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d2c:	d3f9      	bcc.n	8000d22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d2e:	f7ff ffd3 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d32:	f005 fd89 	bl	8006848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d36:	f7ff fbc7 	bl	80004c8 <main>
  bx  lr    
 8000d3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d40:	08006a78 	.word	0x08006a78
  ldr  r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d48:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000d4c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000d50:	20000854 	.word	0x20000854

08000d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC_IRQHandler>
	...

08000d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <HAL_Init+0x40>)
 8000d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_Init+0x40>)
 8000d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <HAL_Init+0x40>)
 8000d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 f94d 	bl	8001020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 f808 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8c:	f7ff fe20 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023c00 	.word	0x40023c00

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_InitTick+0x54>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_InitTick+0x58>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f965 	bl	800108a <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00e      	b.n	8000de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d80a      	bhi.n	8000de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd8:	f000 f92d 	bl	8001036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ddc:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <HAL_InitTick+0x5c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000004 	.word	0x20000004

08000dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	200001bc 	.word	0x200001bc

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	200001bc 	.word	0x200001bc

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff ffee 	bl	8000e24 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_Delay+0x40>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffde 	bl	8000e24 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000008 	.word	0x20000008

08000e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	60d3      	str	r3, [r2, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db0b      	blt.n	8000f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 021f 	and.w	r2, r3, #31
 8000efc:	4907      	ldr	r1, [pc, #28]	; (8000f1c <__NVIC_EnableIRQ+0x38>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	2001      	movs	r0, #1
 8000f06:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e100 	.word	0xe000e100

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	; (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fec:	d301      	bcc.n	8000ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00f      	b.n	8001012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <SysTick_Config+0x40>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001000:	f7ff ff8e 	bl	8000f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <SysTick_Config+0x40>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <SysTick_Config+0x40>)
 800100c:	2207      	movs	r2, #7
 800100e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	e000e010 	.word	0xe000e010

08001020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff29 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001048:	f7ff ff3e 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 800104c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f7ff ff8e 	bl	8000f74 <NVIC_EncodePriority>
 8001058:	4602      	mov	r2, r0
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff5d 	bl	8000f20 <__NVIC_SetPriority>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff31 	bl	8000ee4 <__NVIC_EnableIRQ>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffa2 	bl	8000fdc <SysTick_Config>
 8001098:	4603      	mov	r3, r0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	e16b      	b.n	8001398 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c0:	2201      	movs	r2, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	429a      	cmp	r2, r3
 80010da:	f040 815a 	bne.w	8001392 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d00b      	beq.n	80010fe <HAL_GPIO_Init+0x5a>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f2:	2b11      	cmp	r3, #17
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b12      	cmp	r3, #18
 80010fc:	d130      	bne.n	8001160 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	f003 0201 	and.w	r2, r3, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0xfc>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b12      	cmp	r3, #18
 800119e:	d123      	bne.n	80011e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	08da      	lsrs	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3208      	adds	r2, #8
 80011a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3208      	adds	r2, #8
 80011e2:	69b9      	ldr	r1, [r7, #24]
 80011e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0203 	and.w	r2, r3, #3
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80b4 	beq.w	8001392 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b5f      	ldr	r3, [pc, #380]	; (80013ac <HAL_GPIO_Init+0x308>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	4a5e      	ldr	r2, [pc, #376]	; (80013ac <HAL_GPIO_Init+0x308>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001238:	6453      	str	r3, [r2, #68]	; 0x44
 800123a:	4b5c      	ldr	r3, [pc, #368]	; (80013ac <HAL_GPIO_Init+0x308>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001246:	4a5a      	ldr	r2, [pc, #360]	; (80013b0 <HAL_GPIO_Init+0x30c>)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a51      	ldr	r2, [pc, #324]	; (80013b4 <HAL_GPIO_Init+0x310>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d02b      	beq.n	80012ca <HAL_GPIO_Init+0x226>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a50      	ldr	r2, [pc, #320]	; (80013b8 <HAL_GPIO_Init+0x314>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d025      	beq.n	80012c6 <HAL_GPIO_Init+0x222>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4f      	ldr	r2, [pc, #316]	; (80013bc <HAL_GPIO_Init+0x318>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d01f      	beq.n	80012c2 <HAL_GPIO_Init+0x21e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4e      	ldr	r2, [pc, #312]	; (80013c0 <HAL_GPIO_Init+0x31c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d019      	beq.n	80012be <HAL_GPIO_Init+0x21a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4d      	ldr	r2, [pc, #308]	; (80013c4 <HAL_GPIO_Init+0x320>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0x216>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4c      	ldr	r2, [pc, #304]	; (80013c8 <HAL_GPIO_Init+0x324>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00d      	beq.n	80012b6 <HAL_GPIO_Init+0x212>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4b      	ldr	r2, [pc, #300]	; (80013cc <HAL_GPIO_Init+0x328>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d007      	beq.n	80012b2 <HAL_GPIO_Init+0x20e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4a      	ldr	r2, [pc, #296]	; (80013d0 <HAL_GPIO_Init+0x32c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_GPIO_Init+0x20a>
 80012aa:	2307      	movs	r3, #7
 80012ac:	e00e      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012ae:	2308      	movs	r3, #8
 80012b0:	e00c      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012b2:	2306      	movs	r3, #6
 80012b4:	e00a      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012b6:	2305      	movs	r3, #5
 80012b8:	e008      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012ba:	2304      	movs	r3, #4
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012be:	2303      	movs	r3, #3
 80012c0:	e004      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012ca:	2300      	movs	r3, #0
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	f002 0203 	and.w	r2, r2, #3
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	4093      	lsls	r3, r2
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012dc:	4934      	ldr	r1, [pc, #208]	; (80013b0 <HAL_GPIO_Init+0x30c>)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ea:	4b3a      	ldr	r3, [pc, #232]	; (80013d4 <HAL_GPIO_Init+0x330>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800130e:	4a31      	ldr	r2, [pc, #196]	; (80013d4 <HAL_GPIO_Init+0x330>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001314:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <HAL_GPIO_Init+0x330>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001338:	4a26      	ldr	r2, [pc, #152]	; (80013d4 <HAL_GPIO_Init+0x330>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <HAL_GPIO_Init+0x330>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <HAL_GPIO_Init+0x330>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_GPIO_Init+0x330>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800138c:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <HAL_GPIO_Init+0x330>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3301      	adds	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2b0f      	cmp	r3, #15
 800139c:	f67f ae90 	bls.w	80010c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a0:	bf00      	nop
 80013a2:	3724      	adds	r7, #36	; 0x24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40013800 	.word	0x40013800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	40020400 	.word	0x40020400
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020c00 	.word	0x40020c00
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40021400 	.word	0x40021400
 80013cc:	40021800 	.word	0x40021800
 80013d0:	40021c00 	.word	0x40021c00
 80013d4:	40013c00 	.word	0x40013c00

080013d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
 80013e4:	4613      	mov	r3, r2
 80013e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e8:	787b      	ldrb	r3, [r7, #1]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013f4:	e003      	b.n	80013fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	041a      	lsls	r2, r3, #16
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800140a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140c:	b08f      	sub	sp, #60	; 0x3c
 800140e:	af0a      	add	r7, sp, #40	; 0x28
 8001410:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e054      	b.n	80014c6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d106      	bne.n	800143c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f004 ffa0 	bl	800637c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2203      	movs	r2, #3
 8001440:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f003 f85a 	bl	8004514 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	687e      	ldr	r6, [r7, #4]
 8001468:	466d      	mov	r5, sp
 800146a:	f106 0410 	add.w	r4, r6, #16
 800146e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001476:	e894 0003 	ldmia.w	r4, {r0, r1}
 800147a:	e885 0003 	stmia.w	r5, {r0, r1}
 800147e:	1d33      	adds	r3, r6, #4
 8001480:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001482:	6838      	ldr	r0, [r7, #0]
 8001484:	f002 ffd4 	bl	8004430 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2101      	movs	r1, #1
 800148e:	4618      	mov	r0, r3
 8001490:	f003 f851 	bl	8004536 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	687e      	ldr	r6, [r7, #4]
 800149c:	466d      	mov	r5, sp
 800149e:	f106 0410 	add.w	r4, r6, #16
 80014a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80014b2:	1d33      	adds	r3, r6, #4
 80014b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b6:	6838      	ldr	r0, [r7, #0]
 80014b8:	f003 f964 	bl	8004784 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014ce <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014ce:	b590      	push	{r4, r7, lr}
 80014d0:	b089      	sub	sp, #36	; 0x24
 80014d2:	af04      	add	r7, sp, #16
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	4608      	mov	r0, r1
 80014d8:	4611      	mov	r1, r2
 80014da:	461a      	mov	r2, r3
 80014dc:	4603      	mov	r3, r0
 80014de:	70fb      	strb	r3, [r7, #3]
 80014e0:	460b      	mov	r3, r1
 80014e2:	70bb      	strb	r3, [r7, #2]
 80014e4:	4613      	mov	r3, r2
 80014e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_HCD_HC_Init+0x28>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e07f      	b.n	80015f6 <HAL_HCD_HC_Init+0x128>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80014fe:	78fa      	ldrb	r2, [r7, #3]
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	440b      	add	r3, r1
 800150c:	333d      	adds	r3, #61	; 0x3d
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001512:	78fa      	ldrb	r2, [r7, #3]
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	3338      	adds	r3, #56	; 0x38
 8001522:	787a      	ldrb	r2, [r7, #1]
 8001524:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001526:	78fa      	ldrb	r2, [r7, #3]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	3340      	adds	r3, #64	; 0x40
 8001536:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001538:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800153a:	78fa      	ldrb	r2, [r7, #3]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	3339      	adds	r3, #57	; 0x39
 800154a:	78fa      	ldrb	r2, [r7, #3]
 800154c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800154e:	78fa      	ldrb	r2, [r7, #3]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	333f      	adds	r3, #63	; 0x3f
 800155e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001562:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001564:	78fa      	ldrb	r2, [r7, #3]
 8001566:	78bb      	ldrb	r3, [r7, #2]
 8001568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800156c:	b2d8      	uxtb	r0, r3
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	333a      	adds	r3, #58	; 0x3a
 800157c:	4602      	mov	r2, r0
 800157e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001580:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001584:	2b00      	cmp	r3, #0
 8001586:	da0a      	bge.n	800159e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001588:	78fa      	ldrb	r2, [r7, #3]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	333b      	adds	r3, #59	; 0x3b
 8001598:	2201      	movs	r2, #1
 800159a:	701a      	strb	r2, [r3, #0]
 800159c:	e009      	b.n	80015b2 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800159e:	78fa      	ldrb	r2, [r7, #3]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	333b      	adds	r3, #59	; 0x3b
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80015b2:	78fa      	ldrb	r2, [r7, #3]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	333c      	adds	r3, #60	; 0x3c
 80015c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015c6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	787c      	ldrb	r4, [r7, #1]
 80015ce:	78ba      	ldrb	r2, [r7, #2]
 80015d0:	78f9      	ldrb	r1, [r7, #3]
 80015d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	4623      	mov	r3, r4
 80015e4:	f003 fa0e 	bl	8004a04 <USB_HC_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd90      	pop	{r4, r7, pc}

080015fe <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_HCD_HC_Halt+0x1e>
 8001618:	2302      	movs	r3, #2
 800161a:	e00f      	b.n	800163c <HAL_HCD_HC_Halt+0x3e>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fc48 	bl	8004ec2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	4608      	mov	r0, r1
 800164e:	4611      	mov	r1, r2
 8001650:	461a      	mov	r2, r3
 8001652:	4603      	mov	r3, r0
 8001654:	70fb      	strb	r3, [r7, #3]
 8001656:	460b      	mov	r3, r1
 8001658:	70bb      	strb	r3, [r7, #2]
 800165a:	4613      	mov	r3, r2
 800165c:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	440b      	add	r3, r1
 800166c:	333b      	adds	r3, #59	; 0x3b
 800166e:	78ba      	ldrb	r2, [r7, #2]
 8001670:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001672:	78fa      	ldrb	r2, [r7, #3]
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	440b      	add	r3, r1
 8001680:	333f      	adds	r3, #63	; 0x3f
 8001682:	787a      	ldrb	r2, [r7, #1]
 8001684:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001686:	7c3b      	ldrb	r3, [r7, #16]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10a      	bne.n	80016a2 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800168c:	78fa      	ldrb	r2, [r7, #3]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	3342      	adds	r3, #66	; 0x42
 800169c:	2203      	movs	r2, #3
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	e009      	b.n	80016b6 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016a2:	78fa      	ldrb	r2, [r7, #3]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	440b      	add	r3, r1
 80016b0:	3342      	adds	r3, #66	; 0x42
 80016b2:	2202      	movs	r2, #2
 80016b4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016b6:	787b      	ldrb	r3, [r7, #1]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	f200 80d6 	bhi.w	800186a <HAL_HCD_HC_SubmitRequest+0x226>
 80016be:	a201      	add	r2, pc, #4	; (adr r2, 80016c4 <HAL_HCD_HC_SubmitRequest+0x80>)
 80016c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c4:	080016d5 	.word	0x080016d5
 80016c8:	08001855 	.word	0x08001855
 80016cc:	08001741 	.word	0x08001741
 80016d0:	080017cb 	.word	0x080017cb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016d4:	7c3b      	ldrb	r3, [r7, #16]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	f040 80c9 	bne.w	800186e <HAL_HCD_HC_SubmitRequest+0x22a>
 80016dc:	78bb      	ldrb	r3, [r7, #2]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f040 80c5 	bne.w	800186e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80016e4:	8b3b      	ldrh	r3, [r7, #24]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d109      	bne.n	80016fe <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016ea:	78fa      	ldrb	r2, [r7, #3]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	440b      	add	r3, r1
 80016f8:	3351      	adds	r3, #81	; 0x51
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016fe:	78fa      	ldrb	r2, [r7, #3]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	440b      	add	r3, r1
 800170c:	3351      	adds	r3, #81	; 0x51
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10a      	bne.n	800172a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001714:	78fa      	ldrb	r2, [r7, #3]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	440b      	add	r3, r1
 8001722:	3342      	adds	r3, #66	; 0x42
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001728:	e0a1      	b.n	800186e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	3342      	adds	r3, #66	; 0x42
 800173a:	2202      	movs	r2, #2
 800173c:	701a      	strb	r2, [r3, #0]
      break;
 800173e:	e096      	b.n	800186e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001740:	78bb      	ldrb	r3, [r7, #2]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d120      	bne.n	8001788 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001746:	78fa      	ldrb	r2, [r7, #3]
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	440b      	add	r3, r1
 8001754:	3351      	adds	r3, #81	; 0x51
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10a      	bne.n	8001772 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800175c:	78fa      	ldrb	r2, [r7, #3]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	440b      	add	r3, r1
 800176a:	3342      	adds	r3, #66	; 0x42
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001770:	e07e      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	440b      	add	r3, r1
 8001780:	3342      	adds	r3, #66	; 0x42
 8001782:	2202      	movs	r2, #2
 8001784:	701a      	strb	r2, [r3, #0]
      break;
 8001786:	e073      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001788:	78fa      	ldrb	r2, [r7, #3]
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	440b      	add	r3, r1
 8001796:	3350      	adds	r3, #80	; 0x50
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10a      	bne.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	440b      	add	r3, r1
 80017ac:	3342      	adds	r3, #66	; 0x42
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
      break;
 80017b2:	e05d      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017b4:	78fa      	ldrb	r2, [r7, #3]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	3342      	adds	r3, #66	; 0x42
 80017c4:	2202      	movs	r2, #2
 80017c6:	701a      	strb	r2, [r3, #0]
      break;
 80017c8:	e052      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017ca:	78bb      	ldrb	r3, [r7, #2]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d120      	bne.n	8001812 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017d0:	78fa      	ldrb	r2, [r7, #3]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	440b      	add	r3, r1
 80017de:	3351      	adds	r3, #81	; 0x51
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10a      	bne.n	80017fc <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017e6:	78fa      	ldrb	r2, [r7, #3]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	440b      	add	r3, r1
 80017f4:	3342      	adds	r3, #66	; 0x42
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017fa:	e039      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017fc:	78fa      	ldrb	r2, [r7, #3]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	3342      	adds	r3, #66	; 0x42
 800180c:	2202      	movs	r2, #2
 800180e:	701a      	strb	r2, [r3, #0]
      break;
 8001810:	e02e      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001812:	78fa      	ldrb	r2, [r7, #3]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	3350      	adds	r3, #80	; 0x50
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10a      	bne.n	800183e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	440b      	add	r3, r1
 8001836:	3342      	adds	r3, #66	; 0x42
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
      break;
 800183c:	e018      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	440b      	add	r3, r1
 800184c:	3342      	adds	r3, #66	; 0x42
 800184e:	2202      	movs	r2, #2
 8001850:	701a      	strb	r2, [r3, #0]
      break;
 8001852:	e00d      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001854:	78fa      	ldrb	r2, [r7, #3]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	3342      	adds	r3, #66	; 0x42
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
      break;
 8001868:	e002      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800186a:	bf00      	nop
 800186c:	e000      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800186e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001870:	78fa      	ldrb	r2, [r7, #3]
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
 800187e:	3344      	adds	r3, #68	; 0x44
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	8b39      	ldrh	r1, [r7, #24]
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4403      	add	r3, r0
 8001894:	3348      	adds	r3, #72	; 0x48
 8001896:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	335c      	adds	r3, #92	; 0x5c
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018ac:	78fa      	ldrb	r2, [r7, #3]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	440b      	add	r3, r1
 80018ba:	334c      	adds	r3, #76	; 0x4c
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	3339      	adds	r3, #57	; 0x39
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	440b      	add	r3, r1
 80018e2:	335d      	adds	r3, #93	; 0x5d
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	3338      	adds	r3, #56	; 0x38
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	18d1      	adds	r1, r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	461a      	mov	r2, r3
 8001904:	f003 f988 	bl	8004c18 <USB_HC_StartXfer>
 8001908:	4603      	mov	r3, r0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop

08001914 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f002 fee7 	bl	80046fe <USB_GetMode>
 8001930:	4603      	mov	r3, r0
 8001932:	2b01      	cmp	r3, #1
 8001934:	f040 80f1 	bne.w	8001b1a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f002 fecb 	bl	80046d8 <USB_ReadInterrupts>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80e7 	beq.w	8001b18 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f002 fec2 	bl	80046d8 <USB_ReadInterrupts>
 8001954:	4603      	mov	r3, r0
 8001956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800195e:	d104      	bne.n	800196a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001968:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f002 feb2 	bl	80046d8 <USB_ReadInterrupts>
 8001974:	4603      	mov	r3, r0
 8001976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800197a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800197e:	d104      	bne.n	800198a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001988:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f002 fea2 	bl	80046d8 <USB_ReadInterrupts>
 8001994:	4603      	mov	r3, r0
 8001996:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800199a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800199e:	d104      	bne.n	80019aa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 fe92 	bl	80046d8 <USB_ReadInterrupts>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d103      	bne.n	80019c6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2202      	movs	r2, #2
 80019c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 fe84 	bl	80046d8 <USB_ReadInterrupts>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019da:	d117      	bne.n	8001a0c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80019ea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80019ee:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f004 fd41 	bl	8006478 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2101      	movs	r1, #1
 80019fc:	4618      	mov	r0, r3
 80019fe:	f002 ff7d 	bl	80048fc <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 fe61 	bl	80046d8 <USB_ReadInterrupts>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a20:	d102      	bne.n	8001a28 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f001 f8ac 	bl	8002b80 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f002 fe53 	bl	80046d8 <USB_ReadInterrupts>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d106      	bne.n	8001a4a <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f004 fcff 	bl	8006440 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2208      	movs	r2, #8
 8001a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 fe42 	bl	80046d8 <USB_ReadInterrupts>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a5e:	d138      	bne.n	8001ad2 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f003 fa1b 	bl	8004ea0 <USB_HC_ReadInterrupt>
 8001a6a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	e025      	b.n	8001abe <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f003 030f 	and.w	r3, r3, #15
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d018      	beq.n	8001ab8 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	015a      	lsls	r2, r3, #5
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a9c:	d106      	bne.n	8001aac <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f8b3 	bl	8001c10 <HCD_HC_IN_IRQHandler>
 8001aaa:	e005      	b.n	8001ab8 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fc43 	bl	800233e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	3301      	adds	r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d3d4      	bcc.n	8001a72 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f002 fdfe 	bl	80046d8 <USB_ReadInterrupts>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b10      	cmp	r3, #16
 8001ae4:	d101      	bne.n	8001aea <HAL_HCD_IRQHandler+0x1d6>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_HCD_IRQHandler+0x1d8>
 8001aea:	2300      	movs	r3, #0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d014      	beq.n	8001b1a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0210 	bic.w	r2, r2, #16
 8001afe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 ff91 	bl	8002a28 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699a      	ldr	r2, [r3, #24]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0210 	orr.w	r2, r2, #16
 8001b14:	619a      	str	r2, [r3, #24]
 8001b16:	e000      	b.n	8001b1a <HAL_HCD_IRQHandler+0x206>
      return;
 8001b18:	bf00      	nop
    }
  }
}
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_HCD_Start+0x16>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e013      	b.n	8001b5e <HAL_HCD_Start+0x3e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fcd5 	bl	80044f2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 ff0e 	bl	8004970 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_HCD_Stop+0x16>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e00d      	b.n	8001b98 <HAL_HCD_Stop+0x32>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 fad5 	bl	8005138 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	440b      	add	r3, r1
 8001bba:	335c      	adds	r3, #92	; 0x5c
 8001bbc:	781b      	ldrb	r3, [r3, #0]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001bd6:	78fa      	ldrb	r2, [r7, #3]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	440b      	add	r3, r1
 8001be4:	334c      	adds	r3, #76	; 0x4c
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f002 feee 	bl	80049e2 <USB_GetCurrentFrame>
 8001c06:	4603      	mov	r3, r0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d119      	bne.n	8001c74 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	015a      	lsls	r2, r3, #5
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	2304      	movs	r3, #4
 8001c50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	0151      	lsls	r1, r2, #5
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	440a      	add	r2, r1
 8001c68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	60d3      	str	r3, [r2, #12]
 8001c72:	e095      	b.n	8001da0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	015a      	lsls	r2, r3, #5
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0320 	and.w	r3, r3, #32
 8001c86:	2b20      	cmp	r3, #32
 8001c88:	d109      	bne.n	8001c9e <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c96:	461a      	mov	r2, r3
 8001c98:	2320      	movs	r3, #32
 8001c9a:	6093      	str	r3, [r2, #8]
 8001c9c:	e080      	b.n	8001da0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	015a      	lsls	r2, r3, #5
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d134      	bne.n	8001d1e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	015a      	lsls	r2, r3, #5
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	0151      	lsls	r1, r2, #5
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	440a      	add	r2, r1
 8001cca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	335d      	adds	r3, #93	; 0x5d
 8001ce4:	2205      	movs	r2, #5
 8001ce6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	015a      	lsls	r2, r3, #5
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2310      	movs	r3, #16
 8001cf8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d06:	461a      	mov	r2, r3
 8001d08:	2308      	movs	r3, #8
 8001d0a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 f8d3 	bl	8004ec2 <USB_HC_Halt>
 8001d1c:	e040      	b.n	8001da0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	015a      	lsls	r2, r3, #5
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d34:	d134      	bne.n	8001da0 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	015a      	lsls	r2, r3, #5
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	0151      	lsls	r1, r2, #5
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	440a      	add	r2, r1
 8001d4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 f8ae 	bl	8004ec2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	015a      	lsls	r2, r3, #5
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d72:	461a      	mov	r2, r3
 8001d74:	2310      	movs	r3, #16
 8001d76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	335d      	adds	r3, #93	; 0x5d
 8001d88:	2208      	movs	r2, #8
 8001d8a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d98:	461a      	mov	r2, r3
 8001d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d9e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001db6:	d122      	bne.n	8001dfe <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	0151      	lsls	r1, r2, #5
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	440a      	add	r2, r1
 8001dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dd2:	f043 0302 	orr.w	r3, r3, #2
 8001dd6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 f86d 	bl	8004ec2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	461a      	mov	r2, r3
 8001df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dfa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001dfc:	e29b      	b.n	8002336 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	f040 80c1 	bne.w	8001f98 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d01b      	beq.n	8001e56 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	440b      	add	r3, r1
 8001e2c:	3348      	adds	r3, #72	; 0x48
 8001e2e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	0159      	lsls	r1, r3, #5
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	440b      	add	r3, r1
 8001e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e42:	1ad1      	subs	r1, r2, r3
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4403      	add	r3, r0
 8001e52:	334c      	adds	r3, #76	; 0x4c
 8001e54:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	440b      	add	r3, r1
 8001e64:	335d      	adds	r3, #93	; 0x5d
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	440b      	add	r3, r1
 8001e78:	3358      	adds	r3, #88	; 0x58
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	333f      	adds	r3, #63	; 0x3f
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	333f      	adds	r3, #63	; 0x3f
 8001eb6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d121      	bne.n	8001f00 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	0151      	lsls	r1, r2, #5
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	440a      	add	r2, r1
 8001ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed6:	f043 0302 	orr.w	r3, r3, #2
 8001eda:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f002 ffeb 	bl	8004ec2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2310      	movs	r3, #16
 8001efc:	6093      	str	r3, [r2, #8]
 8001efe:	e034      	b.n	8001f6a <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	440b      	add	r3, r1
 8001f0e:	333f      	adds	r3, #63	; 0x3f
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d129      	bne.n	8001f6a <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	0151      	lsls	r1, r2, #5
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	440a      	add	r2, r1
 8001f2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f34:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	335c      	adds	r3, #92	; 0x5c
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	b2d8      	uxtb	r0, r3
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	440b      	add	r3, r1
 8001f5c:	335c      	adds	r3, #92	; 0x5c
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	4601      	mov	r1, r0
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f004 fa95 	bl	8006494 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	440b      	add	r3, r1
 8001f78:	3350      	adds	r3, #80	; 0x50
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	f083 0301 	eor.w	r3, r3, #1
 8001f80:	b2d8      	uxtb	r0, r3
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	3350      	adds	r3, #80	; 0x50
 8001f92:	4602      	mov	r2, r0
 8001f94:	701a      	strb	r2, [r3, #0]
}
 8001f96:	e1ce      	b.n	8002336 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	015a      	lsls	r2, r3, #5
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	f040 80f1 	bne.w	8002192 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	0151      	lsls	r1, r2, #5
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	440a      	add	r2, r1
 8001fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fca:	f023 0302 	bic.w	r3, r3, #2
 8001fce:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	335d      	adds	r3, #93	; 0x5d
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d10a      	bne.n	8001ffc <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	335c      	adds	r3, #92	; 0x5c
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	e0b0      	b.n	800215e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	335d      	adds	r3, #93	; 0x5d
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b05      	cmp	r3, #5
 8002010:	d10a      	bne.n	8002028 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	440b      	add	r3, r1
 8002020:	335c      	adds	r3, #92	; 0x5c
 8002022:	2205      	movs	r2, #5
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	e09a      	b.n	800215e <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	335d      	adds	r3, #93	; 0x5d
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b06      	cmp	r3, #6
 800203c:	d00a      	beq.n	8002054 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	440b      	add	r3, r1
 800204c:	335d      	adds	r3, #93	; 0x5d
 800204e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002050:	2b08      	cmp	r3, #8
 8002052:	d156      	bne.n	8002102 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	3358      	adds	r3, #88	; 0x58
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	1c59      	adds	r1, r3, #1
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4403      	add	r3, r0
 8002076:	3358      	adds	r3, #88	; 0x58
 8002078:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	440b      	add	r3, r1
 8002088:	3358      	adds	r3, #88	; 0x58
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d914      	bls.n	80020ba <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	3358      	adds	r3, #88	; 0x58
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	335c      	adds	r3, #92	; 0x5c
 80020b4:	2204      	movs	r2, #4
 80020b6:	701a      	strb	r2, [r3, #0]
 80020b8:	e009      	b.n	80020ce <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	440b      	add	r3, r1
 80020c8:	335c      	adds	r3, #92	; 0x5c
 80020ca:	2202      	movs	r2, #2
 80020cc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020e4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020ec:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fa:	461a      	mov	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	e02d      	b.n	800215e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	335d      	adds	r3, #93	; 0x5d
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d122      	bne.n	800215e <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	335c      	adds	r3, #92	; 0x5c
 8002128:	2202      	movs	r2, #2
 800212a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002142:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800214a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4413      	add	r3, r2
 8002154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002158:	461a      	mov	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216a:	461a      	mov	r2, r3
 800216c:	2302      	movs	r3, #2
 800216e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	b2d8      	uxtb	r0, r3
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	335c      	adds	r3, #92	; 0x5c
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	4601      	mov	r1, r0
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f004 f982 	bl	8006494 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002190:	e0d1      	b.n	8002336 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a4:	2b80      	cmp	r3, #128	; 0x80
 80021a6:	d13e      	bne.n	8002226 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	0151      	lsls	r1, r2, #5
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	440a      	add	r2, r1
 80021be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021c2:	f043 0302 	orr.w	r3, r3, #2
 80021c6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	440b      	add	r3, r1
 80021d6:	3358      	adds	r3, #88	; 0x58
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	1c59      	adds	r1, r3, #1
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4403      	add	r3, r0
 80021ea:	3358      	adds	r3, #88	; 0x58
 80021ec:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	440b      	add	r3, r1
 80021fc:	335d      	adds	r3, #93	; 0x5d
 80021fe:	2206      	movs	r2, #6
 8002200:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f002 fe58 	bl	8004ec2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4413      	add	r3, r2
 800221a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221e:	461a      	mov	r2, r3
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	6093      	str	r3, [r2, #8]
}
 8002224:	e087      	b.n	8002336 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4413      	add	r3, r2
 800222e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	2b10      	cmp	r3, #16
 800223a:	d17c      	bne.n	8002336 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	440b      	add	r3, r1
 800224a:	333f      	adds	r3, #63	; 0x3f
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d122      	bne.n	8002298 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	440b      	add	r3, r1
 8002260:	3358      	adds	r3, #88	; 0x58
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4413      	add	r3, r2
 800226e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	0151      	lsls	r1, r2, #5
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	440a      	add	r2, r1
 800227c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f002 fe16 	bl	8004ec2 <USB_HC_Halt>
 8002296:	e045      	b.n	8002324 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	440b      	add	r3, r1
 80022a6:	333f      	adds	r3, #63	; 0x3f
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	333f      	adds	r3, #63	; 0x3f
 80022be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d12f      	bne.n	8002324 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	3358      	adds	r3, #88	; 0x58
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d121      	bne.n	8002324 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	335d      	adds	r3, #93	; 0x5d
 80022f0:	2203      	movs	r2, #3
 80022f2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	0151      	lsls	r1, r2, #5
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	440a      	add	r2, r1
 800230a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800230e:	f043 0302 	orr.w	r3, r3, #2
 8002312:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f002 fdcf 	bl	8004ec2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	015a      	lsls	r2, r3, #5
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4413      	add	r3, r2
 800232c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002330:	461a      	mov	r2, r3
 8002332:	2310      	movs	r3, #16
 8002334:	6093      	str	r3, [r2, #8]
}
 8002336:	bf00      	nop
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4413      	add	r3, r2
 8002360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b04      	cmp	r3, #4
 800236c:	d119      	bne.n	80023a2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4413      	add	r3, r2
 8002376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237a:	461a      	mov	r2, r3
 800237c:	2304      	movs	r3, #4
 800237e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4413      	add	r3, r2
 8002388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	0151      	lsls	r1, r2, #5
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	440a      	add	r2, r1
 8002396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800239a:	f043 0302 	orr.w	r3, r3, #2
 800239e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80023a0:	e33e      	b.n	8002a20 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0320 	and.w	r3, r3, #32
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	d141      	bne.n	800243c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c4:	461a      	mov	r2, r3
 80023c6:	2320      	movs	r3, #32
 80023c8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	440b      	add	r3, r1
 80023d8:	333d      	adds	r3, #61	; 0x3d
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	f040 831f 	bne.w	8002a20 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	440b      	add	r3, r1
 80023f0:	333d      	adds	r3, #61	; 0x3d
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	440b      	add	r3, r1
 8002404:	335c      	adds	r3, #92	; 0x5c
 8002406:	2202      	movs	r2, #2
 8002408:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4413      	add	r3, r2
 8002412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	0151      	lsls	r1, r2, #5
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	440a      	add	r2, r1
 8002420:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f002 fd44 	bl	8004ec2 <USB_HC_Halt>
}
 800243a:	e2f1      	b.n	8002a20 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4413      	add	r3, r2
 8002444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244e:	2b40      	cmp	r3, #64	; 0x40
 8002450:	d13f      	bne.n	80024d2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	440b      	add	r3, r1
 8002460:	335d      	adds	r3, #93	; 0x5d
 8002462:	2204      	movs	r2, #4
 8002464:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	440b      	add	r3, r1
 8002474:	333d      	adds	r3, #61	; 0x3d
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	440b      	add	r3, r1
 8002488:	3358      	adds	r3, #88	; 0x58
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4413      	add	r3, r2
 8002496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	0151      	lsls	r1, r2, #5
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	440a      	add	r2, r1
 80024a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 fd02 	bl	8004ec2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	461a      	mov	r2, r3
 80024cc:	2340      	movs	r3, #64	; 0x40
 80024ce:	6093      	str	r3, [r2, #8]
}
 80024d0:	e2a6      	b.n	8002a20 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e8:	d122      	bne.n	8002530 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	0151      	lsls	r1, r2, #5
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	440a      	add	r2, r1
 8002500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f002 fcd4 	bl	8004ec2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002526:	461a      	mov	r2, r3
 8002528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800252c:	6093      	str	r3, [r2, #8]
}
 800252e:	e277      	b.n	8002a20 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d135      	bne.n	80025b2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	440b      	add	r3, r1
 8002554:	3358      	adds	r3, #88	; 0x58
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	0151      	lsls	r1, r2, #5
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	440a      	add	r2, r1
 8002570:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f002 fc9c 	bl	8004ec2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	461a      	mov	r2, r3
 8002598:	2301      	movs	r3, #1
 800259a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	440b      	add	r3, r1
 80025aa:	335d      	adds	r3, #93	; 0x5d
 80025ac:	2201      	movs	r2, #1
 80025ae:	701a      	strb	r2, [r3, #0]
}
 80025b0:	e236      	b.n	8002a20 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d12b      	bne.n	8002620 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	461a      	mov	r2, r3
 80025d6:	2308      	movs	r3, #8
 80025d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	0151      	lsls	r1, r2, #5
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	440a      	add	r2, r1
 80025f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f002 fc5c 	bl	8004ec2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	440b      	add	r3, r1
 8002618:	335d      	adds	r3, #93	; 0x5d
 800261a:	2205      	movs	r2, #5
 800261c:	701a      	strb	r2, [r3, #0]
}
 800261e:	e1ff      	b.n	8002a20 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b10      	cmp	r3, #16
 8002634:	d155      	bne.n	80026e2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	440b      	add	r3, r1
 8002644:	3358      	adds	r3, #88	; 0x58
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	335d      	adds	r3, #93	; 0x5d
 800265a:	2203      	movs	r2, #3
 800265c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	333d      	adds	r3, #61	; 0x3d
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d114      	bne.n	800269e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	440b      	add	r3, r1
 8002682:	333c      	adds	r3, #60	; 0x3c
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	333d      	adds	r3, #61	; 0x3d
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	0151      	lsls	r1, r2, #5
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	440a      	add	r2, r1
 80026b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f002 fbfa 	bl	8004ec2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026da:	461a      	mov	r2, r3
 80026dc:	2310      	movs	r3, #16
 80026de:	6093      	str	r3, [r2, #8]
}
 80026e0:	e19e      	b.n	8002a20 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f4:	2b80      	cmp	r3, #128	; 0x80
 80026f6:	d12b      	bne.n	8002750 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	0151      	lsls	r1, r2, #5
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	440a      	add	r2, r1
 800270e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fbcd 	bl	8004ec2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	440b      	add	r3, r1
 8002736:	335d      	adds	r3, #93	; 0x5d
 8002738:	2206      	movs	r2, #6
 800273a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002748:	461a      	mov	r2, r3
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	6093      	str	r3, [r2, #8]
}
 800274e:	e167      	b.n	8002a20 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002766:	d135      	bne.n	80027d4 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	0151      	lsls	r1, r2, #5
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	440a      	add	r2, r1
 800277e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002782:	f043 0302 	orr.w	r3, r3, #2
 8002786:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	4611      	mov	r1, r2
 8002792:	4618      	mov	r0, r3
 8002794:	f002 fb95 	bl	8004ec2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	461a      	mov	r2, r3
 80027a6:	2310      	movs	r3, #16
 80027a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b6:	461a      	mov	r2, r3
 80027b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	335d      	adds	r3, #93	; 0x5d
 80027ce:	2208      	movs	r2, #8
 80027d0:	701a      	strb	r2, [r3, #0]
}
 80027d2:	e125      	b.n	8002a20 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	f040 811a 	bne.w	8002a20 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	0151      	lsls	r1, r2, #5
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	440a      	add	r2, r1
 8002802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002806:	f023 0302 	bic.w	r3, r3, #2
 800280a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	440b      	add	r3, r1
 800281a:	335d      	adds	r3, #93	; 0x5d
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d137      	bne.n	8002892 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	440b      	add	r3, r1
 8002830:	335c      	adds	r3, #92	; 0x5c
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	440b      	add	r3, r1
 8002844:	333f      	adds	r3, #63	; 0x3f
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d00b      	beq.n	8002864 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	440b      	add	r3, r1
 800285a:	333f      	adds	r3, #63	; 0x3f
 800285c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800285e:	2b03      	cmp	r3, #3
 8002860:	f040 80c5 	bne.w	80029ee <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	3351      	adds	r3, #81	; 0x51
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	f083 0301 	eor.w	r3, r3, #1
 800287a:	b2d8      	uxtb	r0, r3
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	440b      	add	r3, r1
 800288a:	3351      	adds	r3, #81	; 0x51
 800288c:	4602      	mov	r2, r0
 800288e:	701a      	strb	r2, [r3, #0]
 8002890:	e0ad      	b.n	80029ee <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	335d      	adds	r3, #93	; 0x5d
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d10a      	bne.n	80028be <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	440b      	add	r3, r1
 80028b6:	335c      	adds	r3, #92	; 0x5c
 80028b8:	2202      	movs	r2, #2
 80028ba:	701a      	strb	r2, [r3, #0]
 80028bc:	e097      	b.n	80029ee <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	335d      	adds	r3, #93	; 0x5d
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d10a      	bne.n	80028ea <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	440b      	add	r3, r1
 80028e2:	335c      	adds	r3, #92	; 0x5c
 80028e4:	2202      	movs	r2, #2
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	e081      	b.n	80029ee <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	440b      	add	r3, r1
 80028f8:	335d      	adds	r3, #93	; 0x5d
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b05      	cmp	r3, #5
 80028fe:	d10a      	bne.n	8002916 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	440b      	add	r3, r1
 800290e:	335c      	adds	r3, #92	; 0x5c
 8002910:	2205      	movs	r2, #5
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	e06b      	b.n	80029ee <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	335d      	adds	r3, #93	; 0x5d
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b06      	cmp	r3, #6
 800292a:	d00a      	beq.n	8002942 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	440b      	add	r3, r1
 800293a:	335d      	adds	r3, #93	; 0x5d
 800293c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800293e:	2b08      	cmp	r3, #8
 8002940:	d155      	bne.n	80029ee <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	440b      	add	r3, r1
 8002950:	3358      	adds	r3, #88	; 0x58
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	1c59      	adds	r1, r3, #1
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4403      	add	r3, r0
 8002964:	3358      	adds	r3, #88	; 0x58
 8002966:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	3358      	adds	r3, #88	; 0x58
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b03      	cmp	r3, #3
 800297c:	d914      	bls.n	80029a8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	440b      	add	r3, r1
 800298c:	3358      	adds	r3, #88	; 0x58
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	440b      	add	r3, r1
 80029a0:	335c      	adds	r3, #92	; 0x5c
 80029a2:	2204      	movs	r2, #4
 80029a4:	701a      	strb	r2, [r3, #0]
 80029a6:	e009      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	440b      	add	r3, r1
 80029b6:	335c      	adds	r3, #92	; 0x5c
 80029b8:	2202      	movs	r2, #2
 80029ba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029d2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029da:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	461a      	mov	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fa:	461a      	mov	r2, r3
 80029fc:	2302      	movs	r3, #2
 80029fe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	b2d8      	uxtb	r0, r3
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	440b      	add	r3, r1
 8002a12:	335c      	adds	r3, #92	; 0x5c
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	4601      	mov	r1, r0
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f003 fd3a 	bl	8006494 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a20:	bf00      	nop
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08a      	sub	sp, #40	; 0x28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	0c5b      	lsrs	r3, r3, #17
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a5c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d003      	beq.n	8002a6c <HCD_RXQLVL_IRQHandler+0x44>
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	f000 8082 	beq.w	8002b6e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a6a:	e083      	b.n	8002b74 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d07f      	beq.n	8002b72 <HCD_RXQLVL_IRQHandler+0x14a>
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	3344      	adds	r3, #68	; 0x44
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d074      	beq.n	8002b72 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	3344      	adds	r3, #68	; 0x44
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	b292      	uxth	r2, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f001 fdef 	bl	8004686 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3344      	adds	r3, #68	; 0x44
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	18d1      	adds	r1, r2, r3
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4403      	add	r3, r0
 8002acc:	3344      	adds	r3, #68	; 0x44
 8002ace:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	334c      	adds	r3, #76	; 0x4c
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	18d1      	adds	r1, r2, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4403      	add	r3, r0
 8002af4:	334c      	adds	r3, #76	; 0x4c
 8002af6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HCD_RXQLVL_IRQHandler+0x154>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d031      	beq.n	8002b72 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b24:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b2c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3350      	adds	r3, #80	; 0x50
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	f083 0301 	eor.w	r3, r3, #1
 8002b56:	b2d8      	uxtb	r0, r3
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	3350      	adds	r3, #80	; 0x50
 8002b68:	4602      	mov	r2, r0
 8002b6a:	701a      	strb	r2, [r3, #0]
      break;
 8002b6c:	e001      	b.n	8002b72 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002b6e:	bf00      	nop
 8002b70:	e000      	b.n	8002b74 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002b72:	bf00      	nop
  }
}
 8002b74:	bf00      	nop
 8002b76:	3728      	adds	r7, #40	; 0x28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	1ff80000 	.word	0x1ff80000

08002b80 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002bac:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d113      	bne.n	8002be0 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d10a      	bne.n	8002bd8 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699a      	ldr	r2, [r3, #24]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002bd0:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f003 fc42 	bl	800645c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f043 0302 	orr.w	r3, r3, #2
 8002bde:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d147      	bne.n	8002c7a <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f043 0308 	orr.w	r3, r3, #8
 8002bf0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d129      	bne.n	8002c50 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d113      	bne.n	8002c2c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c0e:	d106      	bne.n	8002c1e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2102      	movs	r1, #2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 fe70 	bl	80048fc <USB_InitFSLSPClkSel>
 8002c1c:	e011      	b.n	8002c42 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2101      	movs	r1, #1
 8002c24:	4618      	mov	r0, r3
 8002c26:	f001 fe69 	bl	80048fc <USB_InitFSLSPClkSel>
 8002c2a:	e00a      	b.n	8002c42 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d106      	bne.n	8002c42 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c40:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f003 fc34 	bl	80064b0 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f003 fc07 	bl	800645c <HAL_HCD_Connect_Callback>
 8002c4e:	e014      	b.n	8002c7a <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f003 fc3b 	bl	80064cc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002c64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c68:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699a      	ldr	r2, [r3, #24]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c78:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d103      	bne.n	8002c8c <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f043 0320 	orr.w	r3, r3, #32
 8002c8a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c92:	461a      	mov	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	6013      	str	r3, [r2, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e11f      	b.n	8002ef2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fd feaa 	bl	8000a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2224      	movs	r2, #36	; 0x24
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d04:	f001 f9de 	bl	80040c4 <HAL_RCC_GetPCLK1Freq>
 8002d08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4a7b      	ldr	r2, [pc, #492]	; (8002efc <HAL_I2C_Init+0x25c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d807      	bhi.n	8002d24 <HAL_I2C_Init+0x84>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4a7a      	ldr	r2, [pc, #488]	; (8002f00 <HAL_I2C_Init+0x260>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	bf94      	ite	ls
 8002d1c:	2301      	movls	r3, #1
 8002d1e:	2300      	movhi	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	e006      	b.n	8002d32 <HAL_I2C_Init+0x92>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4a77      	ldr	r2, [pc, #476]	; (8002f04 <HAL_I2C_Init+0x264>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	bf94      	ite	ls
 8002d2c:	2301      	movls	r3, #1
 8002d2e:	2300      	movhi	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0db      	b.n	8002ef2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a72      	ldr	r2, [pc, #456]	; (8002f08 <HAL_I2C_Init+0x268>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	0c9b      	lsrs	r3, r3, #18
 8002d44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a64      	ldr	r2, [pc, #400]	; (8002efc <HAL_I2C_Init+0x25c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d802      	bhi.n	8002d74 <HAL_I2C_Init+0xd4>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3301      	adds	r3, #1
 8002d72:	e009      	b.n	8002d88 <HAL_I2C_Init+0xe8>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	4a63      	ldr	r2, [pc, #396]	; (8002f0c <HAL_I2C_Init+0x26c>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	3301      	adds	r3, #1
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4956      	ldr	r1, [pc, #344]	; (8002efc <HAL_I2C_Init+0x25c>)
 8002da4:	428b      	cmp	r3, r1
 8002da6:	d80d      	bhi.n	8002dc4 <HAL_I2C_Init+0x124>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1e59      	subs	r1, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	bf38      	it	cc
 8002dc0:	2304      	movcc	r3, #4
 8002dc2:	e04f      	b.n	8002e64 <HAL_I2C_Init+0x1c4>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d111      	bne.n	8002df0 <HAL_I2C_Init+0x150>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1e58      	subs	r0, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	440b      	add	r3, r1
 8002dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dde:	3301      	adds	r3, #1
 8002de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	e012      	b.n	8002e16 <HAL_I2C_Init+0x176>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1e58      	subs	r0, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	0099      	lsls	r1, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Init+0x17e>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e022      	b.n	8002e64 <HAL_I2C_Init+0x1c4>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10e      	bne.n	8002e44 <HAL_I2C_Init+0x1a4>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1e58      	subs	r0, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6859      	ldr	r1, [r3, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	440b      	add	r3, r1
 8002e34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e38:	3301      	adds	r3, #1
 8002e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e42:	e00f      	b.n	8002e64 <HAL_I2C_Init+0x1c4>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1e58      	subs	r0, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	0099      	lsls	r1, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	6809      	ldr	r1, [r1, #0]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69da      	ldr	r2, [r3, #28]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6911      	ldr	r1, [r2, #16]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68d2      	ldr	r2, [r2, #12]
 8002e9e:	4311      	orrs	r1, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	000186a0 	.word	0x000186a0
 8002f00:	001e847f 	.word	0x001e847f
 8002f04:	003d08ff 	.word	0x003d08ff
 8002f08:	431bde83 	.word	0x431bde83
 8002f0c:	10624dd3 	.word	0x10624dd3

08002f10 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e128      	b.n	8003174 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a90      	ldr	r2, [pc, #576]	; (800317c <HAL_I2S_Init+0x26c>)
 8002f3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7fd fdb7 	bl	8000ab0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2202      	movs	r2, #2
 8002f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f58:	f023 030f 	bic.w	r3, r3, #15
 8002f5c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2202      	movs	r2, #2
 8002f64:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d060      	beq.n	8003030 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d102      	bne.n	8002f7c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f76:	2310      	movs	r3, #16
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	e001      	b.n	8002f80 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d802      	bhi.n	8002f8e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f8e:	2001      	movs	r0, #1
 8002f90:	f001 f98e 	bl	80042b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f94:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f9e:	d125      	bne.n	8002fec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d010      	beq.n	8002fca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	461a      	mov	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	3305      	adds	r3, #5
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	e01f      	b.n	800300a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	461a      	mov	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	3305      	adds	r3, #5
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	e00e      	b.n	800300a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	fbb2 f3f3 	udiv	r3, r2, r3
 8003006:	3305      	adds	r3, #5
 8003008:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4a5c      	ldr	r2, [pc, #368]	; (8003180 <HAL_I2S_Init+0x270>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	08db      	lsrs	r3, r3, #3
 8003014:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	e003      	b.n	8003038 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003030:	2302      	movs	r3, #2
 8003032:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d902      	bls.n	8003044 <HAL_I2S_Init+0x134>
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	2bff      	cmp	r3, #255	; 0xff
 8003042:	d907      	bls.n	8003054 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003048:	f043 0210 	orr.w	r2, r3, #16
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e08f      	b.n	8003174 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	ea42 0103 	orr.w	r1, r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	430a      	orrs	r2, r1
 8003066:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003072:	f023 030f 	bic.w	r3, r3, #15
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6851      	ldr	r1, [r2, #4]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6892      	ldr	r2, [r2, #8]
 800307e:	4311      	orrs	r1, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	68d2      	ldr	r2, [r2, #12]
 8003084:	4311      	orrs	r1, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6992      	ldr	r2, [r2, #24]
 800308a:	430a      	orrs	r2, r1
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003096:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d161      	bne.n	8003164 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a38      	ldr	r2, [pc, #224]	; (8003184 <HAL_I2S_Init+0x274>)
 80030a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a37      	ldr	r2, [pc, #220]	; (8003188 <HAL_I2S_Init+0x278>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d101      	bne.n	80030b4 <HAL_I2S_Init+0x1a4>
 80030b0:	4b36      	ldr	r3, [pc, #216]	; (800318c <HAL_I2S_Init+0x27c>)
 80030b2:	e001      	b.n	80030b8 <HAL_I2S_Init+0x1a8>
 80030b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	4932      	ldr	r1, [pc, #200]	; (8003188 <HAL_I2S_Init+0x278>)
 80030c0:	428a      	cmp	r2, r1
 80030c2:	d101      	bne.n	80030c8 <HAL_I2S_Init+0x1b8>
 80030c4:	4a31      	ldr	r2, [pc, #196]	; (800318c <HAL_I2S_Init+0x27c>)
 80030c6:	e001      	b.n	80030cc <HAL_I2S_Init+0x1bc>
 80030c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80030cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030d0:	f023 030f 	bic.w	r3, r3, #15
 80030d4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a2b      	ldr	r2, [pc, #172]	; (8003188 <HAL_I2S_Init+0x278>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d101      	bne.n	80030e4 <HAL_I2S_Init+0x1d4>
 80030e0:	4b2a      	ldr	r3, [pc, #168]	; (800318c <HAL_I2S_Init+0x27c>)
 80030e2:	e001      	b.n	80030e8 <HAL_I2S_Init+0x1d8>
 80030e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030e8:	2202      	movs	r2, #2
 80030ea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a25      	ldr	r2, [pc, #148]	; (8003188 <HAL_I2S_Init+0x278>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <HAL_I2S_Init+0x1ea>
 80030f6:	4b25      	ldr	r3, [pc, #148]	; (800318c <HAL_I2S_Init+0x27c>)
 80030f8:	e001      	b.n	80030fe <HAL_I2S_Init+0x1ee>
 80030fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310a:	d003      	beq.n	8003114 <HAL_I2S_Init+0x204>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d103      	bne.n	800311c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003114:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	e001      	b.n	8003120 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	b299      	uxth	r1, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003136:	4303      	orrs	r3, r0
 8003138:	b29b      	uxth	r3, r3
 800313a:	430b      	orrs	r3, r1
 800313c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800313e:	4313      	orrs	r3, r2
 8003140:	b29a      	uxth	r2, r3
 8003142:	897b      	ldrh	r3, [r7, #10]
 8003144:	4313      	orrs	r3, r2
 8003146:	b29b      	uxth	r3, r3
 8003148:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800314c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a0d      	ldr	r2, [pc, #52]	; (8003188 <HAL_I2S_Init+0x278>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d101      	bne.n	800315c <HAL_I2S_Init+0x24c>
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_I2S_Init+0x27c>)
 800315a:	e001      	b.n	8003160 <HAL_I2S_Init+0x250>
 800315c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003160:	897a      	ldrh	r2, [r7, #10]
 8003162:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3720      	adds	r7, #32
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	08003287 	.word	0x08003287
 8003180:	cccccccd 	.word	0xcccccccd
 8003184:	0800339d 	.word	0x0800339d
 8003188:	40003800 	.word	0x40003800
 800318c:	40003400 	.word	0x40003400

08003190 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	881a      	ldrh	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	1c9a      	adds	r2, r3, #2
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10e      	bne.n	8003220 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003210:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff ffb8 	bl	8003190 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	b292      	uxth	r2, r2
 800323c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	1c9a      	adds	r2, r3, #2
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800325a:	b29b      	uxth	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10e      	bne.n	800327e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800326e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ff93 	bl	80031a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b086      	sub	sp, #24
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d13a      	bne.n	8003318 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d109      	bne.n	80032c0 <I2S_IRQHandler+0x3a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	d102      	bne.n	80032c0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff ffb4 	bl	8003228 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d126      	bne.n	8003318 <I2S_IRQHandler+0x92>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d11f      	bne.n	8003318 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032e8:	2300      	movs	r3, #0
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	f043 0202 	orr.w	r2, r3, #2
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff ff50 	bl	80031b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b03      	cmp	r3, #3
 8003322:	d136      	bne.n	8003392 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b02      	cmp	r3, #2
 800332c:	d109      	bne.n	8003342 <I2S_IRQHandler+0xbc>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003338:	2b80      	cmp	r3, #128	; 0x80
 800333a:	d102      	bne.n	8003342 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff ff45 	bl	80031cc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b08      	cmp	r3, #8
 800334a:	d122      	bne.n	8003392 <I2S_IRQHandler+0x10c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b20      	cmp	r3, #32
 8003358:	d11b      	bne.n	8003392 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003368:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003384:	f043 0204 	orr.w	r2, r3, #4
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ff13 	bl	80031b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003392:	bf00      	nop
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4aa2      	ldr	r2, [pc, #648]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d101      	bne.n	80033ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80033b6:	4ba2      	ldr	r3, [pc, #648]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033b8:	e001      	b.n	80033be <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80033ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a9b      	ldr	r2, [pc, #620]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d101      	bne.n	80033d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80033d4:	4b9a      	ldr	r3, [pc, #616]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033d6:	e001      	b.n	80033dc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80033d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e8:	d004      	beq.n	80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 8099 	bne.w	8003526 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d107      	bne.n	800340e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f925 	bl	8003658 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f9c8 	bl	80037b8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342e:	2b40      	cmp	r3, #64	; 0x40
 8003430:	d13a      	bne.n	80034a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d035      	beq.n	80034a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a7e      	ldr	r2, [pc, #504]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d101      	bne.n	800344a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003446:	4b7e      	ldr	r3, [pc, #504]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003448:	e001      	b.n	800344e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800344a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4979      	ldr	r1, [pc, #484]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003456:	428b      	cmp	r3, r1
 8003458:	d101      	bne.n	800345e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800345a:	4b79      	ldr	r3, [pc, #484]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800345c:	e001      	b.n	8003462 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800345e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003462:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003466:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003476:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	f043 0202 	orr.w	r2, r3, #2
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff fe88 	bl	80031b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	f040 80be 	bne.w	8003630 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80b8 	beq.w	8003630 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034ce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a59      	ldr	r2, [pc, #356]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d101      	bne.n	80034de <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80034da:	4b59      	ldr	r3, [pc, #356]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034dc:	e001      	b.n	80034e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80034de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4954      	ldr	r1, [pc, #336]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034ea:	428b      	cmp	r3, r1
 80034ec:	d101      	bne.n	80034f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80034ee:	4b54      	ldr	r3, [pc, #336]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034f0:	e001      	b.n	80034f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80034f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034fa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034fc:	2300      	movs	r3, #0
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f043 0204 	orr.w	r2, r3, #4
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fe4a 	bl	80031b8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003524:	e084      	b.n	8003630 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b02      	cmp	r3, #2
 800352e:	d107      	bne.n	8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f8be 	bl	80036bc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b01      	cmp	r3, #1
 8003548:	d107      	bne.n	800355a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f8fd 	bl	8003754 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003560:	2b40      	cmp	r3, #64	; 0x40
 8003562:	d12f      	bne.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d02a      	beq.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800357c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a2e      	ldr	r2, [pc, #184]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d101      	bne.n	800358c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003588:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800358a:	e001      	b.n	8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800358c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4929      	ldr	r1, [pc, #164]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003598:	428b      	cmp	r3, r1
 800359a:	d101      	bne.n	80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800359c:	4b28      	ldr	r3, [pc, #160]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800359e:	e001      	b.n	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80035a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f043 0202 	orr.w	r2, r3, #2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff fdfa 	bl	80031b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d131      	bne.n	8003632 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d02c      	beq.n	8003632 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a17      	ldr	r2, [pc, #92]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d101      	bne.n	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80035e2:	4b17      	ldr	r3, [pc, #92]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035e4:	e001      	b.n	80035ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80035e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4912      	ldr	r1, [pc, #72]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035f2:	428b      	cmp	r3, r1
 80035f4:	d101      	bne.n	80035fa <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035f8:	e001      	b.n	80035fe <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80035fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003602:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003612:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003620:	f043 0204 	orr.w	r2, r3, #4
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff fdc5 	bl	80031b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800362e:	e000      	b.n	8003632 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003630:	bf00      	nop
}
 8003632:	bf00      	nop
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40003800 	.word	0x40003800
 8003640:	40003400 	.word	0x40003400

08003644 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	1c99      	adds	r1, r3, #2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6251      	str	r1, [r2, #36]	; 0x24
 800366a:	881a      	ldrh	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d113      	bne.n	80036b2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003698:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d106      	bne.n	80036b2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ffc9 	bl	8003644 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	1c99      	adds	r1, r3, #2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6251      	str	r1, [r2, #36]	; 0x24
 80036ce:	8819      	ldrh	r1, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1d      	ldr	r2, [pc, #116]	; (800374c <I2SEx_TxISR_I2SExt+0x90>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <I2SEx_TxISR_I2SExt+0x22>
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <I2SEx_TxISR_I2SExt+0x94>)
 80036dc:	e001      	b.n	80036e2 <I2SEx_TxISR_I2SExt+0x26>
 80036de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e2:	460a      	mov	r2, r1
 80036e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d121      	bne.n	8003742 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <I2SEx_TxISR_I2SExt+0x90>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d101      	bne.n	800370c <I2SEx_TxISR_I2SExt+0x50>
 8003708:	4b11      	ldr	r3, [pc, #68]	; (8003750 <I2SEx_TxISR_I2SExt+0x94>)
 800370a:	e001      	b.n	8003710 <I2SEx_TxISR_I2SExt+0x54>
 800370c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	490d      	ldr	r1, [pc, #52]	; (800374c <I2SEx_TxISR_I2SExt+0x90>)
 8003718:	428b      	cmp	r3, r1
 800371a:	d101      	bne.n	8003720 <I2SEx_TxISR_I2SExt+0x64>
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <I2SEx_TxISR_I2SExt+0x94>)
 800371e:	e001      	b.n	8003724 <I2SEx_TxISR_I2SExt+0x68>
 8003720:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003724:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003728:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d106      	bne.n	8003742 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff ff81 	bl	8003644 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40003800 	.word	0x40003800
 8003750:	40003400 	.word	0x40003400

08003754 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68d8      	ldr	r0, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	1c99      	adds	r1, r3, #2
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800376c:	b282      	uxth	r2, r0
 800376e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d113      	bne.n	80037b0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003796:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff ff4a 	bl	8003644 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a20      	ldr	r2, [pc, #128]	; (8003848 <I2SEx_RxISR_I2SExt+0x90>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d101      	bne.n	80037ce <I2SEx_RxISR_I2SExt+0x16>
 80037ca:	4b20      	ldr	r3, [pc, #128]	; (800384c <I2SEx_RxISR_I2SExt+0x94>)
 80037cc:	e001      	b.n	80037d2 <I2SEx_RxISR_I2SExt+0x1a>
 80037ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d2:	68d8      	ldr	r0, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	1c99      	adds	r1, r3, #2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037de:	b282      	uxth	r2, r0
 80037e0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d121      	bne.n	800383e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a12      	ldr	r2, [pc, #72]	; (8003848 <I2SEx_RxISR_I2SExt+0x90>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d101      	bne.n	8003808 <I2SEx_RxISR_I2SExt+0x50>
 8003804:	4b11      	ldr	r3, [pc, #68]	; (800384c <I2SEx_RxISR_I2SExt+0x94>)
 8003806:	e001      	b.n	800380c <I2SEx_RxISR_I2SExt+0x54>
 8003808:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	490d      	ldr	r1, [pc, #52]	; (8003848 <I2SEx_RxISR_I2SExt+0x90>)
 8003814:	428b      	cmp	r3, r1
 8003816:	d101      	bne.n	800381c <I2SEx_RxISR_I2SExt+0x64>
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <I2SEx_RxISR_I2SExt+0x94>)
 800381a:	e001      	b.n	8003820 <I2SEx_RxISR_I2SExt+0x68>
 800381c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003820:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003824:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff ff03 	bl	8003644 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40003800 	.word	0x40003800
 800384c:	40003400 	.word	0x40003400

08003850 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e25b      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d075      	beq.n	800395a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800386e:	4ba3      	ldr	r3, [pc, #652]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
 8003876:	2b04      	cmp	r3, #4
 8003878:	d00c      	beq.n	8003894 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800387a:	4ba0      	ldr	r3, [pc, #640]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003882:	2b08      	cmp	r3, #8
 8003884:	d112      	bne.n	80038ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003886:	4b9d      	ldr	r3, [pc, #628]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800388e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003892:	d10b      	bne.n	80038ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003894:	4b99      	ldr	r3, [pc, #612]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d05b      	beq.n	8003958 <HAL_RCC_OscConfig+0x108>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d157      	bne.n	8003958 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e236      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b4:	d106      	bne.n	80038c4 <HAL_RCC_OscConfig+0x74>
 80038b6:	4b91      	ldr	r3, [pc, #580]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a90      	ldr	r2, [pc, #576]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e01d      	b.n	8003900 <HAL_RCC_OscConfig+0xb0>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038cc:	d10c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x98>
 80038ce:	4b8b      	ldr	r3, [pc, #556]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a8a      	ldr	r2, [pc, #552]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	4b88      	ldr	r3, [pc, #544]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a87      	ldr	r2, [pc, #540]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e00b      	b.n	8003900 <HAL_RCC_OscConfig+0xb0>
 80038e8:	4b84      	ldr	r3, [pc, #528]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a83      	ldr	r2, [pc, #524]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 80038ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	4b81      	ldr	r3, [pc, #516]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a80      	ldr	r2, [pc, #512]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 80038fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d013      	beq.n	8003930 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003908:	f7fd fa8c 	bl	8000e24 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003910:	f7fd fa88 	bl	8000e24 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b64      	cmp	r3, #100	; 0x64
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e1fb      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	4b76      	ldr	r3, [pc, #472]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0xc0>
 800392e:	e014      	b.n	800395a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fd fa78 	bl	8000e24 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003938:	f7fd fa74 	bl	8000e24 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b64      	cmp	r3, #100	; 0x64
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e1e7      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394a:	4b6c      	ldr	r3, [pc, #432]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0xe8>
 8003956:	e000      	b.n	800395a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d063      	beq.n	8003a2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003966:	4b65      	ldr	r3, [pc, #404]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00b      	beq.n	800398a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003972:	4b62      	ldr	r3, [pc, #392]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800397a:	2b08      	cmp	r3, #8
 800397c:	d11c      	bne.n	80039b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800397e:	4b5f      	ldr	r3, [pc, #380]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d116      	bne.n	80039b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398a:	4b5c      	ldr	r3, [pc, #368]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <HAL_RCC_OscConfig+0x152>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d001      	beq.n	80039a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e1bb      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a2:	4b56      	ldr	r3, [pc, #344]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4952      	ldr	r1, [pc, #328]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039b6:	e03a      	b.n	8003a2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d020      	beq.n	8003a02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c0:	4b4f      	ldr	r3, [pc, #316]	; (8003b00 <HAL_RCC_OscConfig+0x2b0>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c6:	f7fd fa2d 	bl	8000e24 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ce:	f7fd fa29 	bl	8000e24 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e19c      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e0:	4b46      	ldr	r3, [pc, #280]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ec:	4b43      	ldr	r3, [pc, #268]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4940      	ldr	r1, [pc, #256]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	600b      	str	r3, [r1, #0]
 8003a00:	e015      	b.n	8003a2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a02:	4b3f      	ldr	r3, [pc, #252]	; (8003b00 <HAL_RCC_OscConfig+0x2b0>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fd fa0c 	bl	8000e24 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a10:	f7fd fa08 	bl	8000e24 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e17b      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a22:	4b36      	ldr	r3, [pc, #216]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d030      	beq.n	8003a9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d016      	beq.n	8003a70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a42:	4b30      	ldr	r3, [pc, #192]	; (8003b04 <HAL_RCC_OscConfig+0x2b4>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a48:	f7fd f9ec 	bl	8000e24 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a50:	f7fd f9e8 	bl	8000e24 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e15b      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a62:	4b26      	ldr	r3, [pc, #152]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCC_OscConfig+0x200>
 8003a6e:	e015      	b.n	8003a9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a70:	4b24      	ldr	r3, [pc, #144]	; (8003b04 <HAL_RCC_OscConfig+0x2b4>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a76:	f7fd f9d5 	bl	8000e24 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a7e:	f7fd f9d1 	bl	8000e24 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e144      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a90:	4b1a      	ldr	r3, [pc, #104]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 8003a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1f0      	bne.n	8003a7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80a0 	beq.w	8003bea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aae:	4b13      	ldr	r3, [pc, #76]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10f      	bne.n	8003ada <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	4a0e      	ldr	r2, [pc, #56]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aca:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ada:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_RCC_OscConfig+0x2b8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d121      	bne.n	8003b2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae6:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <HAL_RCC_OscConfig+0x2b8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a07      	ldr	r2, [pc, #28]	; (8003b08 <HAL_RCC_OscConfig+0x2b8>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af2:	f7fd f997 	bl	8000e24 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	e011      	b.n	8003b1e <HAL_RCC_OscConfig+0x2ce>
 8003afa:	bf00      	nop
 8003afc:	40023800 	.word	0x40023800
 8003b00:	42470000 	.word	0x42470000
 8003b04:	42470e80 	.word	0x42470e80
 8003b08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0c:	f7fd f98a 	bl	8000e24 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0fd      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1e:	4b81      	ldr	r3, [pc, #516]	; (8003d24 <HAL_RCC_OscConfig+0x4d4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d106      	bne.n	8003b40 <HAL_RCC_OscConfig+0x2f0>
 8003b32:	4b7d      	ldr	r3, [pc, #500]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	4a7c      	ldr	r2, [pc, #496]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3e:	e01c      	b.n	8003b7a <HAL_RCC_OscConfig+0x32a>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b05      	cmp	r3, #5
 8003b46:	d10c      	bne.n	8003b62 <HAL_RCC_OscConfig+0x312>
 8003b48:	4b77      	ldr	r3, [pc, #476]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4c:	4a76      	ldr	r2, [pc, #472]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003b4e:	f043 0304 	orr.w	r3, r3, #4
 8003b52:	6713      	str	r3, [r2, #112]	; 0x70
 8003b54:	4b74      	ldr	r3, [pc, #464]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b58:	4a73      	ldr	r2, [pc, #460]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b60:	e00b      	b.n	8003b7a <HAL_RCC_OscConfig+0x32a>
 8003b62:	4b71      	ldr	r3, [pc, #452]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b66:	4a70      	ldr	r2, [pc, #448]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b6e:	4b6e      	ldr	r3, [pc, #440]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	4a6d      	ldr	r2, [pc, #436]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003b74:	f023 0304 	bic.w	r3, r3, #4
 8003b78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d015      	beq.n	8003bae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b82:	f7fd f94f 	bl	8000e24 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fd f94b 	bl	8000e24 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e0bc      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba0:	4b61      	ldr	r3, [pc, #388]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0ee      	beq.n	8003b8a <HAL_RCC_OscConfig+0x33a>
 8003bac:	e014      	b.n	8003bd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bae:	f7fd f939 	bl	8000e24 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fd f935 	bl	8000e24 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e0a6      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bcc:	4b56      	ldr	r3, [pc, #344]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1ee      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bd8:	7dfb      	ldrb	r3, [r7, #23]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d105      	bne.n	8003bea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bde:	4b52      	ldr	r3, [pc, #328]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	4a51      	ldr	r2, [pc, #324]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8092 	beq.w	8003d18 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bf4:	4b4c      	ldr	r3, [pc, #304]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d05c      	beq.n	8003cba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d141      	bne.n	8003c8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c08:	4b48      	ldr	r3, [pc, #288]	; (8003d2c <HAL_RCC_OscConfig+0x4dc>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0e:	f7fd f909 	bl	8000e24 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c16:	f7fd f905 	bl	8000e24 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e078      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c28:	4b3f      	ldr	r3, [pc, #252]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f0      	bne.n	8003c16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69da      	ldr	r2, [r3, #28]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	019b      	lsls	r3, r3, #6
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	085b      	lsrs	r3, r3, #1
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	041b      	lsls	r3, r3, #16
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	061b      	lsls	r3, r3, #24
 8003c58:	4933      	ldr	r1, [pc, #204]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c5e:	4b33      	ldr	r3, [pc, #204]	; (8003d2c <HAL_RCC_OscConfig+0x4dc>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fd f8de 	bl	8000e24 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c6c:	f7fd f8da 	bl	8000e24 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e04d      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7e:	4b2a      	ldr	r3, [pc, #168]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0x41c>
 8003c8a:	e045      	b.n	8003d18 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8c:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <HAL_RCC_OscConfig+0x4dc>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c92:	f7fd f8c7 	bl	8000e24 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9a:	f7fd f8c3 	bl	8000e24 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e036      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cac:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1f0      	bne.n	8003c9a <HAL_RCC_OscConfig+0x44a>
 8003cb8:	e02e      	b.n	8003d18 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e029      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cc6:	4b18      	ldr	r3, [pc, #96]	; (8003d28 <HAL_RCC_OscConfig+0x4d8>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d11c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d115      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cee:	4013      	ands	r3, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d10d      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d106      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40007000 	.word	0x40007000
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	42470060 	.word	0x42470060

08003d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0cc      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d44:	4b68      	ldr	r3, [pc, #416]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d90c      	bls.n	8003d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d52:	4b65      	ldr	r3, [pc, #404]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5a:	4b63      	ldr	r3, [pc, #396]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0b8      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d020      	beq.n	8003dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d84:	4b59      	ldr	r3, [pc, #356]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a58      	ldr	r2, [pc, #352]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d9c:	4b53      	ldr	r3, [pc, #332]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	4a52      	ldr	r2, [pc, #328]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da8:	4b50      	ldr	r3, [pc, #320]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	494d      	ldr	r1, [pc, #308]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d044      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	4b47      	ldr	r3, [pc, #284]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d119      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e07f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d003      	beq.n	8003dee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d107      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dee:	4b3f      	ldr	r3, [pc, #252]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e06f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfe:	4b3b      	ldr	r3, [pc, #236]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e067      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e0e:	4b37      	ldr	r3, [pc, #220]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f023 0203 	bic.w	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4934      	ldr	r1, [pc, #208]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e20:	f7fd f800 	bl	8000e24 <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e28:	f7fc fffc 	bl	8000e24 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e04f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3e:	4b2b      	ldr	r3, [pc, #172]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 020c 	and.w	r2, r3, #12
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d1eb      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e50:	4b25      	ldr	r3, [pc, #148]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d20c      	bcs.n	8003e78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5e:	4b22      	ldr	r3, [pc, #136]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b20      	ldr	r3, [pc, #128]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e032      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e84:	4b19      	ldr	r3, [pc, #100]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4916      	ldr	r1, [pc, #88]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ea2:	4b12      	ldr	r3, [pc, #72]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	490e      	ldr	r1, [pc, #56]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eb6:	f000 f821 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8003eba:	4601      	mov	r1, r0
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec8:	5cd3      	ldrb	r3, [r2, r3]
 8003eca:	fa21 f303 	lsr.w	r3, r1, r3
 8003ece:	4a09      	ldr	r2, [pc, #36]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ed2:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fc ff60 	bl	8000d9c <HAL_InitTick>

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40023c00 	.word	0x40023c00
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	08006a50 	.word	0x08006a50
 8003ef4:	20000000 	.word	0x20000000
 8003ef8:	20000004 	.word	0x20000004

08003efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	607b      	str	r3, [r7, #4]
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f12:	4b63      	ldr	r3, [pc, #396]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d007      	beq.n	8003f2e <HAL_RCC_GetSysClockFreq+0x32>
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d008      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x38>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f040 80b4 	bne.w	8004090 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f28:	4b5e      	ldr	r3, [pc, #376]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f2a:	60bb      	str	r3, [r7, #8]
       break;
 8003f2c:	e0b3      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f2e:	4b5e      	ldr	r3, [pc, #376]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003f30:	60bb      	str	r3, [r7, #8]
      break;
 8003f32:	e0b0      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f34:	4b5a      	ldr	r3, [pc, #360]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f3e:	4b58      	ldr	r3, [pc, #352]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d04a      	beq.n	8003fe0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4a:	4b55      	ldr	r3, [pc, #340]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	099b      	lsrs	r3, r3, #6
 8003f50:	f04f 0400 	mov.w	r4, #0
 8003f54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	ea03 0501 	and.w	r5, r3, r1
 8003f60:	ea04 0602 	and.w	r6, r4, r2
 8003f64:	4629      	mov	r1, r5
 8003f66:	4632      	mov	r2, r6
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	f04f 0400 	mov.w	r4, #0
 8003f70:	0154      	lsls	r4, r2, #5
 8003f72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f76:	014b      	lsls	r3, r1, #5
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	1b49      	subs	r1, r1, r5
 8003f7e:	eb62 0206 	sbc.w	r2, r2, r6
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	f04f 0400 	mov.w	r4, #0
 8003f8a:	0194      	lsls	r4, r2, #6
 8003f8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f90:	018b      	lsls	r3, r1, #6
 8003f92:	1a5b      	subs	r3, r3, r1
 8003f94:	eb64 0402 	sbc.w	r4, r4, r2
 8003f98:	f04f 0100 	mov.w	r1, #0
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	00e2      	lsls	r2, r4, #3
 8003fa2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003fa6:	00d9      	lsls	r1, r3, #3
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4614      	mov	r4, r2
 8003fac:	195b      	adds	r3, r3, r5
 8003fae:	eb44 0406 	adc.w	r4, r4, r6
 8003fb2:	f04f 0100 	mov.w	r1, #0
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	0262      	lsls	r2, r4, #9
 8003fbc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003fc0:	0259      	lsls	r1, r3, #9
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4614      	mov	r4, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	4621      	mov	r1, r4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f04f 0400 	mov.w	r4, #0
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4623      	mov	r3, r4
 8003fd4:	f7fc f8f8 	bl	80001c8 <__aeabi_uldivmod>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	460c      	mov	r4, r1
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	e049      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe0:	4b2f      	ldr	r3, [pc, #188]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	099b      	lsrs	r3, r3, #6
 8003fe6:	f04f 0400 	mov.w	r4, #0
 8003fea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	ea03 0501 	and.w	r5, r3, r1
 8003ff6:	ea04 0602 	and.w	r6, r4, r2
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	4632      	mov	r2, r6
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	f04f 0400 	mov.w	r4, #0
 8004006:	0154      	lsls	r4, r2, #5
 8004008:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800400c:	014b      	lsls	r3, r1, #5
 800400e:	4619      	mov	r1, r3
 8004010:	4622      	mov	r2, r4
 8004012:	1b49      	subs	r1, r1, r5
 8004014:	eb62 0206 	sbc.w	r2, r2, r6
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	f04f 0400 	mov.w	r4, #0
 8004020:	0194      	lsls	r4, r2, #6
 8004022:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004026:	018b      	lsls	r3, r1, #6
 8004028:	1a5b      	subs	r3, r3, r1
 800402a:	eb64 0402 	sbc.w	r4, r4, r2
 800402e:	f04f 0100 	mov.w	r1, #0
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	00e2      	lsls	r2, r4, #3
 8004038:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800403c:	00d9      	lsls	r1, r3, #3
 800403e:	460b      	mov	r3, r1
 8004040:	4614      	mov	r4, r2
 8004042:	195b      	adds	r3, r3, r5
 8004044:	eb44 0406 	adc.w	r4, r4, r6
 8004048:	f04f 0100 	mov.w	r1, #0
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	02a2      	lsls	r2, r4, #10
 8004052:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004056:	0299      	lsls	r1, r3, #10
 8004058:	460b      	mov	r3, r1
 800405a:	4614      	mov	r4, r2
 800405c:	4618      	mov	r0, r3
 800405e:	4621      	mov	r1, r4
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f04f 0400 	mov.w	r4, #0
 8004066:	461a      	mov	r2, r3
 8004068:	4623      	mov	r3, r4
 800406a:	f7fc f8ad 	bl	80001c8 <__aeabi_uldivmod>
 800406e:	4603      	mov	r3, r0
 8004070:	460c      	mov	r4, r1
 8004072:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004074:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	0c1b      	lsrs	r3, r3, #16
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	3301      	adds	r3, #1
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	60bb      	str	r3, [r7, #8]
      break;
 800408e:	e002      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004090:	4b04      	ldr	r3, [pc, #16]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004092:	60bb      	str	r3, [r7, #8]
      break;
 8004094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004096:	68bb      	ldr	r3, [r7, #8]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040a0:	40023800 	.word	0x40023800
 80040a4:	00f42400 	.word	0x00f42400
 80040a8:	007a1200 	.word	0x007a1200

080040ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b0:	4b03      	ldr	r3, [pc, #12]	; (80040c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040b2:	681b      	ldr	r3, [r3, #0]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20000000 	.word	0x20000000

080040c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040c8:	f7ff fff0 	bl	80040ac <HAL_RCC_GetHCLKFreq>
 80040cc:	4601      	mov	r1, r0
 80040ce:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	0a9b      	lsrs	r3, r3, #10
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	4a03      	ldr	r2, [pc, #12]	; (80040e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040da:	5cd3      	ldrb	r3, [r2, r3]
 80040dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40023800 	.word	0x40023800
 80040e8:	08006a60 	.word	0x08006a60

080040ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004110:	2b00      	cmp	r3, #0
 8004112:	d035      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004114:	4b62      	ldr	r3, [pc, #392]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800411a:	f7fc fe83 	bl	8000e24 <HAL_GetTick>
 800411e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004120:	e008      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004122:	f7fc fe7f 	bl	8000e24 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e0b0      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004134:	4b5b      	ldr	r3, [pc, #364]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f0      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	019a      	lsls	r2, r3, #6
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	071b      	lsls	r3, r3, #28
 800414c:	4955      	ldr	r1, [pc, #340]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004154:	4b52      	ldr	r3, [pc, #328]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004156:	2201      	movs	r2, #1
 8004158:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800415a:	f7fc fe63 	bl	8000e24 <HAL_GetTick>
 800415e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004162:	f7fc fe5f 	bl	8000e24 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e090      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004174:	4b4b      	ldr	r3, [pc, #300]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0f0      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8083 	beq.w	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	4b44      	ldr	r3, [pc, #272]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	4a43      	ldr	r2, [pc, #268]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419c:	6413      	str	r3, [r2, #64]	; 0x40
 800419e:	4b41      	ldr	r3, [pc, #260]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041aa:	4b3f      	ldr	r3, [pc, #252]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a3e      	ldr	r2, [pc, #248]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041b6:	f7fc fe35 	bl	8000e24 <HAL_GetTick>
 80041ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041bc:	e008      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041be:	f7fc fe31 	bl	8000e24 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e062      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041d0:	4b35      	ldr	r3, [pc, #212]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041dc:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d02f      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d028      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041fa:	4b2a      	ldr	r3, [pc, #168]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004202:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004204:	4b29      	ldr	r3, [pc, #164]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800420a:	4b28      	ldr	r3, [pc, #160]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004210:	4a24      	ldr	r2, [pc, #144]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004216:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b01      	cmp	r3, #1
 8004220:	d114      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004222:	f7fc fdff 	bl	8000e24 <HAL_GetTick>
 8004226:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004228:	e00a      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800422a:	f7fc fdfb 	bl	8000e24 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f241 3288 	movw	r2, #5000	; 0x1388
 8004238:	4293      	cmp	r3, r2
 800423a:	d901      	bls.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e02a      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004240:	4b18      	ldr	r3, [pc, #96]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ee      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004258:	d10d      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800426a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426e:	490d      	ldr	r1, [pc, #52]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004270:	4313      	orrs	r3, r2
 8004272:	608b      	str	r3, [r1, #8]
 8004274:	e005      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004276:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	4a0a      	ldr	r2, [pc, #40]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800427c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004280:	6093      	str	r3, [r2, #8]
 8004282:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004284:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800428e:	4905      	ldr	r1, [pc, #20]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004290:	4313      	orrs	r3, r2
 8004292:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	42470068 	.word	0x42470068
 80042a4:	40023800 	.word	0x40023800
 80042a8:	40007000 	.word	0x40007000
 80042ac:	42470e40 	.word	0x42470e40

080042b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d13d      	bne.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80042ce:	4b22      	ldr	r3, [pc, #136]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042d6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d004      	beq.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d12f      	bne.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80042e2:	4b1e      	ldr	r3, [pc, #120]	; (800435c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042e4:	617b      	str	r3, [r7, #20]
          break;
 80042e6:	e02f      	b.n	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042e8:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042f4:	d108      	bne.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80042f6:	4b18      	ldr	r3, [pc, #96]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042fe:	4a18      	ldr	r2, [pc, #96]	; (8004360 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	e007      	b.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004308:	4b13      	ldr	r3, [pc, #76]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004310:	4a14      	ldr	r2, [pc, #80]	; (8004364 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004312:	fbb2 f3f3 	udiv	r3, r2, r3
 8004316:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800431a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800431e:	099b      	lsrs	r3, r3, #6
 8004320:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800432c:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800432e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004332:	0f1b      	lsrs	r3, r3, #28
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	fbb2 f3f3 	udiv	r3, r2, r3
 800433e:	617b      	str	r3, [r7, #20]
          break;
 8004340:	e002      	b.n	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
          break;
 8004346:	bf00      	nop
        }
      }
      break;
 8004348:	bf00      	nop
    }
  }
  return frequency;
 800434a:	697b      	ldr	r3, [r7, #20]
}
 800434c:	4618      	mov	r0, r3
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	40023800 	.word	0x40023800
 800435c:	00bb8000 	.word	0x00bb8000
 8004360:	007a1200 	.word	0x007a1200
 8004364:	00f42400 	.word	0x00f42400

08004368 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e056      	b.n	8004428 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d106      	bne.n	800439a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7fc fbf3 	bl	8000b80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	ea42 0103 	orr.w	r1, r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	0c1b      	lsrs	r3, r3, #16
 80043f8:	f003 0104 	and.w	r1, r3, #4
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69da      	ldr	r2, [r3, #28]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004416:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004430:	b084      	sub	sp, #16
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	f107 001c 	add.w	r0, r7, #28
 800443e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	2b01      	cmp	r3, #1
 8004446:	d122      	bne.n	800448e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800445c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004472:	2b01      	cmp	r3, #1
 8004474:	d105      	bne.n	8004482 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f94a 	bl	800471c <USB_CoreReset>
 8004488:	4603      	mov	r3, r0
 800448a:	73fb      	strb	r3, [r7, #15]
 800448c:	e01a      	b.n	80044c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f93e 	bl	800471c <USB_CoreReset>
 80044a0:	4603      	mov	r3, r0
 80044a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	639a      	str	r2, [r3, #56]	; 0x38
 80044b6:	e005      	b.n	80044c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d10b      	bne.n	80044e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f043 0206 	orr.w	r2, r3, #6
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f043 0220 	orr.w	r2, r3, #32
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044ee:	b004      	add	sp, #16
 80044f0:	4770      	bx	lr

080044f2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f043 0201 	orr.w	r2, r3, #1
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f023 0201 	bic.w	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b082      	sub	sp, #8
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	460b      	mov	r3, r1
 8004540:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d106      	bne.n	8004562 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	60da      	str	r2, [r3, #12]
 8004560:	e00b      	b.n	800457a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004562:	78fb      	ldrb	r3, [r7, #3]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d106      	bne.n	8004576 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]
 8004574:	e001      	b.n	800457a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e003      	b.n	8004582 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800457a:	2032      	movs	r0, #50	; 0x32
 800457c:	f7fc fc5e 	bl	8000e3c <HAL_Delay>

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	019b      	lsls	r3, r3, #6
 800459e:	f043 0220 	orr.w	r2, r3, #32
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3301      	adds	r3, #1
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4a09      	ldr	r2, [pc, #36]	; (80045d4 <USB_FlushTxFifo+0x48>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d901      	bls.n	80045b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e006      	b.n	80045c6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	d0f0      	beq.n	80045a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	00030d40 	.word	0x00030d40

080045d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2210      	movs	r2, #16
 80045e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3301      	adds	r3, #1
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4a09      	ldr	r2, [pc, #36]	; (8004618 <USB_FlushRxFifo+0x40>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e006      	b.n	800460a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b10      	cmp	r3, #16
 8004606:	d0f0      	beq.n	80045ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	00030d40 	.word	0x00030d40

0800461c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800461c:	b480      	push	{r7}
 800461e:	b089      	sub	sp, #36	; 0x24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	4611      	mov	r1, r2
 8004628:	461a      	mov	r2, r3
 800462a:	460b      	mov	r3, r1
 800462c:	71fb      	strb	r3, [r7, #7]
 800462e:	4613      	mov	r3, r2
 8004630:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800463a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800463e:	2b00      	cmp	r3, #0
 8004640:	d11a      	bne.n	8004678 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004642:	88bb      	ldrh	r3, [r7, #4]
 8004644:	3303      	adds	r3, #3
 8004646:	089b      	lsrs	r3, r3, #2
 8004648:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800464a:	2300      	movs	r3, #0
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	e00f      	b.n	8004670 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	031a      	lsls	r2, r3, #12
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	4413      	add	r3, r2
 8004658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800465c:	461a      	mov	r2, r3
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	3304      	adds	r3, #4
 8004668:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	3301      	adds	r3, #1
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	429a      	cmp	r2, r3
 8004676:	d3eb      	bcc.n	8004650 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3724      	adds	r7, #36	; 0x24
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004686:	b480      	push	{r7}
 8004688:	b089      	sub	sp, #36	; 0x24
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	4613      	mov	r3, r2
 8004692:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800469c:	88fb      	ldrh	r3, [r7, #6]
 800469e:	3303      	adds	r3, #3
 80046a0:	089b      	lsrs	r3, r3, #2
 80046a2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80046a4:	2300      	movs	r3, #0
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	e00b      	b.n	80046c2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	601a      	str	r2, [r3, #0]
    pDest++;
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	3304      	adds	r3, #4
 80046ba:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	3301      	adds	r3, #1
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d3ef      	bcc.n	80046aa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80046ca:	69fb      	ldr	r3, [r7, #28]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3724      	adds	r7, #36	; 0x24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4013      	ands	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80046f0:	68fb      	ldr	r3, [r7, #12]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f003 0301 	and.w	r3, r3, #1
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3301      	adds	r3, #1
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a13      	ldr	r2, [pc, #76]	; (8004780 <USB_CoreReset+0x64>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e01b      	b.n	8004772 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	daf2      	bge.n	8004728 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f043 0201 	orr.w	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3301      	adds	r3, #1
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a09      	ldr	r2, [pc, #36]	; (8004780 <USB_CoreReset+0x64>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d901      	bls.n	8004764 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e006      	b.n	8004772 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b01      	cmp	r3, #1
 800476e:	d0f0      	beq.n	8004752 <USB_CoreReset+0x36>

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	00030d40 	.word	0x00030d40

08004784 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004784:	b084      	sub	sp, #16
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	f107 001c 	add.w	r0, r7, #28
 8004792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047a0:	461a      	mov	r2, r3
 80047a2:	2300      	movs	r3, #0
 80047a4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d018      	beq.n	8004808 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d10a      	bne.n	80047f2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047ea:	f043 0304 	orr.w	r3, r3, #4
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	e014      	b.n	800481c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004800:	f023 0304 	bic.w	r3, r3, #4
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	e009      	b.n	800481c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004816:	f023 0304 	bic.w	r3, r3, #4
 800481a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800481c:	2110      	movs	r1, #16
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff feb4 	bl	800458c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff fed7 	bl	80045d8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	e015      	b.n	800485c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4413      	add	r3, r2
 8004838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483c:	461a      	mov	r2, r3
 800483e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004842:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4413      	add	r3, r2
 800484c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004850:	461a      	mov	r2, r3
 8004852:	2300      	movs	r3, #0
 8004854:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3301      	adds	r3, #1
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	429a      	cmp	r2, r3
 8004862:	d3e5      	bcc.n	8004830 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004864:	2101      	movs	r1, #1
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f882 	bl	8004970 <USB_DriveVbus>

  HAL_Delay(200U);
 800486c:	20c8      	movs	r0, #200	; 0xc8
 800486e:	f7fc fae5 	bl	8000e3c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800487e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00b      	beq.n	80048a4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004892:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a14      	ldr	r2, [pc, #80]	; (80048e8 <USB_HostInit+0x164>)
 8004898:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a13      	ldr	r2, [pc, #76]	; (80048ec <USB_HostInit+0x168>)
 800489e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80048a2:	e009      	b.n	80048b8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2280      	movs	r2, #128	; 0x80
 80048a8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a10      	ldr	r2, [pc, #64]	; (80048f0 <USB_HostInit+0x16c>)
 80048ae:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a10      	ldr	r2, [pc, #64]	; (80048f4 <USB_HostInit+0x170>)
 80048b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d105      	bne.n	80048ca <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f043 0210 	orr.w	r2, r3, #16
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <USB_HostInit+0x174>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048e2:	b004      	add	sp, #16
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	01000200 	.word	0x01000200
 80048ec:	00e00300 	.word	0x00e00300
 80048f0:	00600080 	.word	0x00600080
 80048f4:	004000e0 	.word	0x004000e0
 80048f8:	a3200008 	.word	0xa3200008

080048fc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800491a:	f023 0303 	bic.w	r3, r3, #3
 800491e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	68f9      	ldr	r1, [r7, #12]
 8004930:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004934:	4313      	orrs	r3, r2
 8004936:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d107      	bne.n	800494e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004944:	461a      	mov	r2, r3
 8004946:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800494a:	6053      	str	r3, [r2, #4]
 800494c:	e009      	b.n	8004962 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800494e:	78fb      	ldrb	r3, [r7, #3]
 8004950:	2b02      	cmp	r3, #2
 8004952:	d106      	bne.n	8004962 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800495a:	461a      	mov	r2, r3
 800495c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004960:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004994:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d109      	bne.n	80049b4 <USB_DriveVbus+0x44>
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d106      	bne.n	80049b4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80049ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049b2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049be:	d109      	bne.n	80049d4 <USB_DriveVbus+0x64>
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80049ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049d2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	b29b      	uxth	r3, r3
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	4611      	mov	r1, r2
 8004a10:	461a      	mov	r2, r3
 8004a12:	4603      	mov	r3, r0
 8004a14:	70fb      	strb	r3, [r7, #3]
 8004a16:	460b      	mov	r3, r1
 8004a18:	70bb      	strb	r3, [r7, #2]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a32:	461a      	mov	r2, r3
 8004a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a38:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004a3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d87e      	bhi.n	8004b40 <USB_HC_Init+0x13c>
 8004a42:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <USB_HC_Init+0x44>)
 8004a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a48:	08004a59 	.word	0x08004a59
 8004a4c:	08004b03 	.word	0x08004b03
 8004a50:	08004a59 	.word	0x08004a59
 8004a54:	08004ac5 	.word	0x08004ac5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a64:	461a      	mov	r2, r3
 8004a66:	f240 439d 	movw	r3, #1181	; 0x49d
 8004a6a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004a6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	da10      	bge.n	8004a96 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	78fa      	ldrb	r2, [r7, #3]
 8004a84:	0151      	lsls	r1, r2, #5
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	440a      	add	r2, r1
 8004a8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a92:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004a94:	e057      	b.n	8004b46 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d051      	beq.n	8004b46 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	78fa      	ldrb	r2, [r7, #3]
 8004ab2:	0151      	lsls	r1, r2, #5
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	440a      	add	r2, r1
 8004ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004abc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ac0:	60d3      	str	r3, [r2, #12]
      break;
 8004ac2:	e040      	b.n	8004b46 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f240 639d 	movw	r3, #1693	; 0x69d
 8004ad6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ad8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	da34      	bge.n	8004b4a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	78fa      	ldrb	r2, [r7, #3]
 8004af0:	0151      	lsls	r1, r2, #5
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	440a      	add	r2, r1
 8004af6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004b00:	e023      	b.n	8004b4a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f240 2325 	movw	r3, #549	; 0x225
 8004b14:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004b16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	da17      	bge.n	8004b4e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004b1e:	78fb      	ldrb	r3, [r7, #3]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b38:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004b3c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004b3e:	e006      	b.n	8004b4e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	75fb      	strb	r3, [r7, #23]
      break;
 8004b44:	e004      	b.n	8004b50 <USB_HC_Init+0x14c>
      break;
 8004b46:	bf00      	nop
 8004b48:	e002      	b.n	8004b50 <USB_HC_Init+0x14c>
      break;
 8004b4a:	bf00      	nop
 8004b4c:	e000      	b.n	8004b50 <USB_HC_Init+0x14c>
      break;
 8004b4e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b56:	699a      	ldr	r2, [r3, #24]
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	2101      	movs	r1, #1
 8004b60:	fa01 f303 	lsl.w	r3, r1, r3
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004b7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	da03      	bge.n	8004b8a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	e001      	b.n	8004b8e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004b8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d103      	bne.n	8004b9e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004b96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	e001      	b.n	8004ba2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ba2:	787b      	ldrb	r3, [r7, #1]
 8004ba4:	059b      	lsls	r3, r3, #22
 8004ba6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004baa:	78bb      	ldrb	r3, [r7, #2]
 8004bac:	02db      	lsls	r3, r3, #11
 8004bae:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bb2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004bb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bb8:	049b      	lsls	r3, r3, #18
 8004bba:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004bbe:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004bc0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004bc6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	0159      	lsls	r1, r3, #5
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	440b      	add	r3, r1
 8004bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd8:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bde:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004be0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	d10f      	bne.n	8004c08 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	78fa      	ldrb	r2, [r7, #3]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c06:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop

08004c18 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08c      	sub	sp, #48	; 0x30
 8004c1c:	af02      	add	r7, sp, #8
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	4613      	mov	r3, r2
 8004c24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	785b      	ldrb	r3, [r3, #1]
 8004c2e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c34:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d028      	beq.n	8004c94 <USB_HC_StartXfer+0x7c>
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	791b      	ldrb	r3, [r3, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d124      	bne.n	8004c94 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10b      	bne.n	8004c68 <USB_HC_StartXfer+0x50>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	795b      	ldrb	r3, [r3, #5]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d107      	bne.n	8004c68 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	785b      	ldrb	r3, [r3, #1]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fa2e 	bl	80050c0 <USB_DoPing>
      return HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	e112      	b.n	8004e8e <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d112      	bne.n	8004c94 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	0151      	lsls	r1, r2, #5
 8004c80:	6a3a      	ldr	r2, [r7, #32]
 8004c82:	440a      	add	r2, r1
 8004c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c88:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004c8c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2200      	movs	r2, #0
 8004c92:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d018      	beq.n	8004cce <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	8912      	ldrh	r2, [r2, #8]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	8912      	ldrh	r2, [r2, #8]
 8004cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cb0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004cb2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004cb4:	8b7b      	ldrh	r3, [r7, #26]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d90b      	bls.n	8004cd2 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004cba:	8b7b      	ldrh	r3, [r7, #26]
 8004cbc:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004cbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	8912      	ldrh	r2, [r2, #8]
 8004cc4:	fb02 f203 	mul.w	r2, r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	611a      	str	r2, [r3, #16]
 8004ccc:	e001      	b.n	8004cd2 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	78db      	ldrb	r3, [r3, #3]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d006      	beq.n	8004ce8 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004cda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	8912      	ldrh	r2, [r2, #8]
 8004ce0:	fb02 f203 	mul.w	r2, r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004cf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cf2:	04d9      	lsls	r1, r3, #19
 8004cf4:	4b68      	ldr	r3, [pc, #416]	; (8004e98 <USB_HC_StartXfer+0x280>)
 8004cf6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004cf8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	7a9b      	ldrb	r3, [r3, #10]
 8004cfe:	075b      	lsls	r3, r3, #29
 8004d00:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d04:	69f9      	ldr	r1, [r7, #28]
 8004d06:	0148      	lsls	r0, r1, #5
 8004d08:	6a39      	ldr	r1, [r7, #32]
 8004d0a:	4401      	add	r1, r0
 8004d0c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d10:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d12:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	68d9      	ldr	r1, [r3, #12]
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	bf0c      	ite	eq
 8004d3e:	2301      	moveq	r3, #1
 8004d40:	2300      	movne	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	0151      	lsls	r1, r2, #5
 8004d58:	6a3a      	ldr	r2, [r7, #32]
 8004d5a:	440a      	add	r2, r1
 8004d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d64:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	7e7b      	ldrb	r3, [r7, #25]
 8004d76:	075b      	lsls	r3, r3, #29
 8004d78:	69f9      	ldr	r1, [r7, #28]
 8004d7a:	0148      	lsls	r0, r1, #5
 8004d7c:	6a39      	ldr	r1, [r7, #32]
 8004d7e:	4401      	add	r1, r0
 8004d80:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004d84:	4313      	orrs	r3, r2
 8004d86:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a41      	ldr	r2, [pc, #260]	; (8004e9c <USB_HC_StartXfer+0x284>)
 8004d98:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d9a:	4b40      	ldr	r3, [pc, #256]	; (8004e9c <USB_HC_StartXfer+0x284>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004da2:	4a3e      	ldr	r2, [pc, #248]	; (8004e9c <USB_HC_StartXfer+0x284>)
 8004da4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	78db      	ldrb	r3, [r3, #3]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d006      	beq.n	8004dbc <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004dae:	4b3b      	ldr	r3, [pc, #236]	; (8004e9c <USB_HC_StartXfer+0x284>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db6:	4a39      	ldr	r2, [pc, #228]	; (8004e9c <USB_HC_StartXfer+0x284>)
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	e005      	b.n	8004dc8 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004dbc:	4b37      	ldr	r3, [pc, #220]	; (8004e9c <USB_HC_StartXfer+0x284>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dc4:	4a35      	ldr	r2, [pc, #212]	; (8004e9c <USB_HC_StartXfer+0x284>)
 8004dc6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004dc8:	4b34      	ldr	r3, [pc, #208]	; (8004e9c <USB_HC_StartXfer+0x284>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dd0:	4a32      	ldr	r2, [pc, #200]	; (8004e9c <USB_HC_StartXfer+0x284>)
 8004dd2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b2e      	ldr	r3, [pc, #184]	; (8004e9c <USB_HC_StartXfer+0x284>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d14e      	bne.n	8004e8c <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	78db      	ldrb	r3, [r3, #3]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d14a      	bne.n	8004e8c <USB_HC_StartXfer+0x274>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d046      	beq.n	8004e8c <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	79db      	ldrb	r3, [r3, #7]
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d830      	bhi.n	8004e68 <USB_HC_StartXfer+0x250>
 8004e06:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <USB_HC_StartXfer+0x1f4>)
 8004e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0c:	08004e1d 	.word	0x08004e1d
 8004e10:	08004e41 	.word	0x08004e41
 8004e14:	08004e1d 	.word	0x08004e1d
 8004e18:	08004e41 	.word	0x08004e41
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	3303      	adds	r3, #3
 8004e22:	089b      	lsrs	r3, r3, #2
 8004e24:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004e26:	8afa      	ldrh	r2, [r7, #22]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d91c      	bls.n	8004e6c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	f043 0220 	orr.w	r2, r3, #32
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	619a      	str	r2, [r3, #24]
          }
          break;
 8004e3e:	e015      	b.n	8004e6c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	3303      	adds	r3, #3
 8004e46:	089b      	lsrs	r3, r3, #2
 8004e48:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004e4a:	8afa      	ldrh	r2, [r7, #22]
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d90a      	bls.n	8004e70 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	619a      	str	r2, [r3, #24]
          }
          break;
 8004e66:	e003      	b.n	8004e70 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004e68:	bf00      	nop
 8004e6a:	e002      	b.n	8004e72 <USB_HC_StartXfer+0x25a>
          break;
 8004e6c:	bf00      	nop
 8004e6e:	e000      	b.n	8004e72 <USB_HC_StartXfer+0x25a>
          break;
 8004e70:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	68d9      	ldr	r1, [r3, #12]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	785a      	ldrb	r2, [r3, #1]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	b298      	uxth	r0, r3
 8004e80:	2300      	movs	r3, #0
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	4603      	mov	r3, r0
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f7ff fbc8 	bl	800461c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3728      	adds	r7, #40	; 0x28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	1ff80000 	.word	0x1ff80000
 8004e9c:	200000b0 	.word	0x200000b0

08004ea0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	b29b      	uxth	r3, r3
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b087      	sub	sp, #28
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004ed2:	78fb      	ldrb	r3, [r7, #3]
 8004ed4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	0c9b      	lsrs	r3, r3, #18
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <USB_HC_Halt+0x3a>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d16c      	bne.n	8004fd6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f1a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d143      	bne.n	8004fb0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	0151      	lsls	r1, r2, #5
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	440a      	add	r2, r1
 8004f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f46:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	0151      	lsls	r1, r2, #5
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f66:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	0151      	lsls	r1, r2, #5
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f86:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f94:	d81d      	bhi.n	8004fd2 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fac:	d0ec      	beq.n	8004f88 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004fae:	e080      	b.n	80050b2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	0151      	lsls	r1, r2, #5
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	440a      	add	r2, r1
 8004fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fce:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004fd0:	e06f      	b.n	80050b2 <USB_HC_Halt+0x1f0>
          break;
 8004fd2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004fd4:	e06d      	b.n	80050b2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	0151      	lsls	r1, r2, #5
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	440a      	add	r2, r1
 8004fec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ff0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ff4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d143      	bne.n	800508e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	4413      	add	r3, r2
 800500e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	0151      	lsls	r1, r2, #5
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	440a      	add	r2, r1
 800501c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005020:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005024:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	4413      	add	r3, r2
 800502e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	0151      	lsls	r1, r2, #5
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	440a      	add	r2, r1
 800503c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005040:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005044:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	4413      	add	r3, r2
 800504e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	0151      	lsls	r1, r2, #5
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	440a      	add	r2, r1
 800505c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005060:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005064:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	3301      	adds	r3, #1
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005072:	d81d      	bhi.n	80050b0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	4413      	add	r3, r2
 800507c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005086:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800508a:	d0ec      	beq.n	8005066 <USB_HC_Halt+0x1a4>
 800508c:	e011      	b.n	80050b2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4413      	add	r3, r2
 8005096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e000      	b.n	80050b2 <USB_HC_Halt+0x1f0>
          break;
 80050b0:	bf00      	nop
    }
  }

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80050d4:	2301      	movs	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	04da      	lsls	r2, r3, #19
 80050dc:	4b15      	ldr	r3, [pc, #84]	; (8005134 <USB_DoPing+0x74>)
 80050de:	4013      	ands	r3, r2
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	0151      	lsls	r1, r2, #5
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	440a      	add	r2, r1
 80050e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050f0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005108:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005110:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	4413      	add	r3, r2
 800511a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511e:	461a      	mov	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	1ff80000 	.word	0x1ff80000

08005138 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff f9e3 	bl	8004514 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800514e:	2110      	movs	r1, #16
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff fa1b 	bl	800458c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff fa3e 	bl	80045d8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800515c:	2300      	movs	r3, #0
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	e01f      	b.n	80051a2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005178:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005180:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005188:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005196:	461a      	mov	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	3301      	adds	r3, #1
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	2b0f      	cmp	r3, #15
 80051a6:	d9dc      	bls.n	8005162 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80051a8:	2300      	movs	r3, #0
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	e034      	b.n	8005218 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051c4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051cc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051d4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e2:	461a      	mov	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	3301      	adds	r3, #1
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051f4:	d80c      	bhi.n	8005210 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005208:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800520c:	d0ec      	beq.n	80051e8 <USB_StopHost+0xb0>
 800520e:	e000      	b.n	8005212 <USB_StopHost+0xda>
        break;
 8005210:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	3301      	adds	r3, #1
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b0f      	cmp	r3, #15
 800521c:	d9c7      	bls.n	80051ae <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005224:	461a      	mov	r2, r3
 8005226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800522a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005232:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7ff f95c 	bl	80044f2 <USB_EnableGlobalInt>

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b089      	sub	sp, #36	; 0x24
 8005248:	af04      	add	r7, sp, #16
 800524a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800524c:	2302      	movs	r3, #2
 800524e:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005250:	2301      	movs	r3, #1
 8005252:	2202      	movs	r2, #2
 8005254:	2102      	movs	r1, #2
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fc3a 	bl	8005ad0 <USBH_FindInterface>
 800525c:	4603      	mov	r3, r0
 800525e:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005260:	7bbb      	ldrb	r3, [r7, #14]
 8005262:	2bff      	cmp	r3, #255	; 0xff
 8005264:	f000 812a 	beq.w	80054bc <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005268:	7bbb      	ldrb	r3, [r7, #14]
 800526a:	4619      	mov	r1, r3
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fc13 	bl	8005a98 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005278:	2050      	movs	r0, #80	; 0x50
 800527a:	f001 fb09 	bl	8006890 <malloc>
 800527e:	4603      	mov	r3, r0
 8005280:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800528c:	7bbb      	ldrb	r3, [r7, #14]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	211a      	movs	r1, #26
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	4413      	add	r3, r2
 8005298:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	b25b      	sxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	da15      	bge.n	80052d0 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80052a4:	7bbb      	ldrb	r3, [r7, #14]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	211a      	movs	r1, #26
 80052aa:	fb01 f303 	mul.w	r3, r1, r3
 80052ae:	4413      	add	r3, r2
 80052b0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80052b4:	781a      	ldrb	r2, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80052ba:	7bbb      	ldrb	r3, [r7, #14]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	211a      	movs	r1, #26
 80052c0:	fb01 f303 	mul.w	r3, r1, r3
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80052ca:	881a      	ldrh	r2, [r3, #0]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	785b      	ldrb	r3, [r3, #1]
 80052d4:	4619      	mov	r1, r3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 ff9f 	bl	800621a <USBH_AllocPipe>
 80052dc:	4603      	mov	r3, r0
 80052de:	461a      	mov	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	7819      	ldrb	r1, [r3, #0]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	7858      	ldrb	r0, [r3, #1]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	8952      	ldrh	r2, [r2, #10]
 80052fc:	9202      	str	r2, [sp, #8]
 80052fe:	2203      	movs	r2, #3
 8005300:	9201      	str	r2, [sp, #4]
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	4623      	mov	r3, r4
 8005306:	4602      	mov	r2, r0
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 ff57 	bl	80061bc <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2200      	movs	r2, #0
 8005314:	4619      	mov	r1, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f001 fa14 	bl	8006744 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800531c:	2300      	movs	r3, #0
 800531e:	2200      	movs	r2, #0
 8005320:	210a      	movs	r1, #10
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fbd4 	bl	8005ad0 <USBH_FindInterface>
 8005328:	4603      	mov	r3, r0
 800532a:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800532c:	7bbb      	ldrb	r3, [r7, #14]
 800532e:	2bff      	cmp	r3, #255	; 0xff
 8005330:	f000 80c4 	beq.w	80054bc <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005334:	7bbb      	ldrb	r3, [r7, #14]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	211a      	movs	r1, #26
 800533a:	fb01 f303 	mul.w	r3, r1, r3
 800533e:	4413      	add	r3, r2
 8005340:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	b25b      	sxtb	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	da16      	bge.n	800537a <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800534c:	7bbb      	ldrb	r3, [r7, #14]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	211a      	movs	r1, #26
 8005352:	fb01 f303 	mul.w	r3, r1, r3
 8005356:	4413      	add	r3, r2
 8005358:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800535c:	781a      	ldrb	r2, [r3, #0]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005362:	7bbb      	ldrb	r3, [r7, #14]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	211a      	movs	r1, #26
 8005368:	fb01 f303 	mul.w	r3, r1, r3
 800536c:	4413      	add	r3, r2
 800536e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005372:	881a      	ldrh	r2, [r3, #0]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	835a      	strh	r2, [r3, #26]
 8005378:	e015      	b.n	80053a6 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800537a:	7bbb      	ldrb	r3, [r7, #14]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	211a      	movs	r1, #26
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	4413      	add	r3, r2
 8005386:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800538a:	781a      	ldrb	r2, [r3, #0]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005390:	7bbb      	ldrb	r3, [r7, #14]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	211a      	movs	r1, #26
 8005396:	fb01 f303 	mul.w	r3, r1, r3
 800539a:	4413      	add	r3, r2
 800539c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80053a0:	881a      	ldrh	r2, [r3, #0]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80053a6:	7bbb      	ldrb	r3, [r7, #14]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	211a      	movs	r1, #26
 80053ac:	fb01 f303 	mul.w	r3, r1, r3
 80053b0:	4413      	add	r3, r2
 80053b2:	f203 3352 	addw	r3, r3, #850	; 0x352
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	b25b      	sxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	da16      	bge.n	80053ec <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80053be:	7bbb      	ldrb	r3, [r7, #14]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	211a      	movs	r1, #26
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	4413      	add	r3, r2
 80053ca:	f203 3352 	addw	r3, r3, #850	; 0x352
 80053ce:	781a      	ldrb	r2, [r3, #0]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80053d4:	7bbb      	ldrb	r3, [r7, #14]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	211a      	movs	r1, #26
 80053da:	fb01 f303 	mul.w	r3, r1, r3
 80053de:	4413      	add	r3, r2
 80053e0:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80053e4:	881a      	ldrh	r2, [r3, #0]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	835a      	strh	r2, [r3, #26]
 80053ea:	e015      	b.n	8005418 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80053ec:	7bbb      	ldrb	r3, [r7, #14]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	211a      	movs	r1, #26
 80053f2:	fb01 f303 	mul.w	r3, r1, r3
 80053f6:	4413      	add	r3, r2
 80053f8:	f203 3352 	addw	r3, r3, #850	; 0x352
 80053fc:	781a      	ldrb	r2, [r3, #0]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005402:	7bbb      	ldrb	r3, [r7, #14]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	211a      	movs	r1, #26
 8005408:	fb01 f303 	mul.w	r3, r1, r3
 800540c:	4413      	add	r3, r2
 800540e:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005412:	881a      	ldrh	r2, [r3, #0]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	7b9b      	ldrb	r3, [r3, #14]
 800541c:	4619      	mov	r1, r3
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fefb 	bl	800621a <USBH_AllocPipe>
 8005424:	4603      	mov	r3, r0
 8005426:	461a      	mov	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	7bdb      	ldrb	r3, [r3, #15]
 8005430:	4619      	mov	r1, r3
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fef1 	bl	800621a <USBH_AllocPipe>
 8005438:	4603      	mov	r3, r0
 800543a:	461a      	mov	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	7b59      	ldrb	r1, [r3, #13]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	7b98      	ldrb	r0, [r3, #14]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	8b12      	ldrh	r2, [r2, #24]
 8005458:	9202      	str	r2, [sp, #8]
 800545a:	2202      	movs	r2, #2
 800545c:	9201      	str	r2, [sp, #4]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	4623      	mov	r3, r4
 8005462:	4602      	mov	r2, r0
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 fea9 	bl	80061bc <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	7b19      	ldrb	r1, [r3, #12]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	7bd8      	ldrb	r0, [r3, #15]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	8b52      	ldrh	r2, [r2, #26]
 8005482:	9202      	str	r2, [sp, #8]
 8005484:	2202      	movs	r2, #2
 8005486:	9201      	str	r2, [sp, #4]
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	4623      	mov	r3, r4
 800548c:	4602      	mov	r2, r0
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fe94 	bl	80061bc <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	7b5b      	ldrb	r3, [r3, #13]
 80054a0:	2200      	movs	r2, #0
 80054a2:	4619      	mov	r1, r3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f001 f94d 	bl	8006744 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	7b1b      	ldrb	r3, [r3, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	4619      	mov	r1, r3
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f001 f946 	bl	8006744 <USBH_LL_SetToggle>
      status = USBH_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd90      	pop	{r4, r7, pc}

080054c6 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00e      	beq.n	80054fe <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	4619      	mov	r1, r3
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fe87 	bl	80061fa <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	4619      	mov	r1, r3
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 feaf 	bl	8006256 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	7b1b      	ldrb	r3, [r3, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00e      	beq.n	8005524 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	7b1b      	ldrb	r3, [r3, #12]
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fe74 	bl	80061fa <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	7b1b      	ldrb	r3, [r3, #12]
 8005516:	4619      	mov	r1, r3
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fe9c 	bl	8006256 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	7b5b      	ldrb	r3, [r3, #13]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00e      	beq.n	800554a <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	7b5b      	ldrb	r3, [r3, #13]
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fe61 	bl	80061fa <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	7b5b      	ldrb	r3, [r3, #13]
 800553c:	4619      	mov	r1, r3
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fe89 	bl	8006256 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	4618      	mov	r0, r3
 8005560:	f001 f99e 	bl	80068a0 <free>
    phost->pActiveClass->pData = 0U;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800556a:	2200      	movs	r2, #0
 800556c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005580:	2302      	movs	r3, #2
 8005582:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	3340      	adds	r3, #64	; 0x40
 8005592:	4619      	mov	r1, r3
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f8b2 	bl	80056fe <GetLineCoding>
 800559a:	4603      	mov	r3, r0
 800559c:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80055aa:	2102      	movs	r1, #2
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	4798      	blx	r3
  }
  return status;
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80055c4:	2301      	movs	r3, #1
 80055c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d877      	bhi.n	80056d0 <USBH_CDC_Process+0x114>
 80055e0:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <USBH_CDC_Process+0x2c>)
 80055e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e6:	bf00      	nop
 80055e8:	080055fd 	.word	0x080055fd
 80055ec:	08005603 	.word	0x08005603
 80055f0:	08005633 	.word	0x08005633
 80055f4:	080056a7 	.word	0x080056a7
 80055f8:	080056b5 	.word	0x080056b5
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80055fc:	2300      	movs	r3, #0
 80055fe:	73fb      	strb	r3, [r7, #15]
    break;
 8005600:	e06d      	b.n	80056de <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005606:	4619      	mov	r1, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f897 	bl	800573c <SetLineCoding>
 800560e:	4603      	mov	r3, r0
 8005610:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005612:	7bbb      	ldrb	r3, [r7, #14]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d104      	bne.n	8005622 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005620:	e058      	b.n	80056d4 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8005622:	7bbb      	ldrb	r3, [r7, #14]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d055      	beq.n	80056d4 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2204      	movs	r2, #4
 800562c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005630:	e050      	b.n	80056d4 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	3340      	adds	r3, #64	; 0x40
 8005636:	4619      	mov	r1, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f860 	bl	80056fe <GetLineCoding>
 800563e:	4603      	mov	r3, r0
 8005640:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005642:	7bbb      	ldrb	r3, [r7, #14]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d126      	bne.n	8005696 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800565a:	791b      	ldrb	r3, [r3, #4]
 800565c:	429a      	cmp	r2, r3
 800565e:	d13b      	bne.n	80056d8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800566a:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800566c:	429a      	cmp	r2, r3
 800566e:	d133      	bne.n	80056d8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567a:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800567c:	429a      	cmp	r2, r3
 800567e:	d12b      	bne.n	80056d8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005688:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800568a:	429a      	cmp	r2, r3
 800568c:	d124      	bne.n	80056d8 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f95a 	bl	8005948 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005694:	e020      	b.n	80056d8 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005696:	7bbb      	ldrb	r3, [r7, #14]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d01d      	beq.n	80056d8 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2204      	movs	r2, #4
 80056a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80056a4:	e018      	b.n	80056d8 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f867 	bl	800577a <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f8dc 	bl	800586a <CDC_ProcessReception>
    break;
 80056b2:	e014      	b.n	80056de <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 80056b4:	2100      	movs	r1, #0
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fb08 	bl	8005ccc <USBH_ClrFeature>
 80056bc:	4603      	mov	r3, r0
 80056be:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80056c0:	7bbb      	ldrb	r3, [r7, #14]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10a      	bne.n	80056dc <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80056ce:	e005      	b.n	80056dc <USBH_CDC_Process+0x120>

  default:
    break;
 80056d0:	bf00      	nop
 80056d2:	e004      	b.n	80056de <USBH_CDC_Process+0x122>
    break;
 80056d4:	bf00      	nop
 80056d6:	e002      	b.n	80056de <USBH_CDC_Process+0x122>
    break;
 80056d8:	bf00      	nop
 80056da:	e000      	b.n	80056de <USBH_CDC_Process+0x122>
    break;
 80056dc:	bf00      	nop

  }

  return status;
 80056de:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	22a1      	movs	r2, #161	; 0xa1
 800570c:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2221      	movs	r2, #33	; 0x21
 8005712:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2207      	movs	r2, #7
 8005724:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2207      	movs	r2, #7
 800572a:	4619      	mov	r1, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 faf1 	bl	8005d14 <USBH_CtlReq>
 8005732:	4603      	mov	r3, r0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2221      	movs	r2, #33	; 0x21
 800574a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2207      	movs	r2, #7
 8005762:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2207      	movs	r2, #7
 8005768:	4619      	mov	r1, r3
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fad2 	bl	8005d14 <USBH_CtlReq>
 8005770:	4603      	mov	r3, r0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b086      	sub	sp, #24
 800577e:	af02      	add	r7, sp, #8
 8005780:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800578c:	2300      	movs	r3, #0
 800578e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005796:	2b01      	cmp	r3, #1
 8005798:	d002      	beq.n	80057a0 <CDC_ProcessTransmission+0x26>
 800579a:	2b02      	cmp	r3, #2
 800579c:	d025      	beq.n	80057ea <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800579e:	e060      	b.n	8005862 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	8b12      	ldrh	r2, [r2, #24]
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d90c      	bls.n	80057c6 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	69d9      	ldr	r1, [r3, #28]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8b1a      	ldrh	r2, [r3, #24]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	7b58      	ldrb	r0, [r3, #13]
 80057b8:	2301      	movs	r3, #1
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	4603      	mov	r3, r0
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fcb9 	bl	8006136 <USBH_BulkSendData>
 80057c4:	e00c      	b.n	80057e0 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	7b58      	ldrb	r0, [r3, #13]
 80057d4:	2301      	movs	r3, #1
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	4603      	mov	r3, r0
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fcab 	bl	8006136 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80057e8:	e03b      	b.n	8005862 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	7b5b      	ldrb	r3, [r3, #13]
 80057ee:	4619      	mov	r1, r3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 ff7d 	bl	80066f0 <USBH_LL_GetURBState>
 80057f6:	4603      	mov	r3, r0
 80057f8:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 80057fa:	7afb      	ldrb	r3, [r7, #11]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d128      	bne.n	8005852 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	8b12      	ldrh	r2, [r2, #24]
 8005808:	4293      	cmp	r3, r2
 800580a:	d90e      	bls.n	800582a <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	8b12      	ldrh	r2, [r2, #24]
 8005814:	1a9a      	subs	r2, r3, r2
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	8b12      	ldrh	r2, [r2, #24]
 8005822:	441a      	add	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	61da      	str	r2, [r3, #28]
 8005828:	e002      	b.n	8005830 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	2b00      	cmp	r3, #0
 8005836:	d004      	beq.n	8005842 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005840:	e00e      	b.n	8005860 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f868 	bl	8005920 <USBH_CDC_TransmitCallback>
    break;
 8005850:	e006      	b.n	8005860 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005852:	7afb      	ldrb	r3, [r7, #11]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d103      	bne.n	8005860 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005860:	bf00      	nop
  }
}
 8005862:	bf00      	nop
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b086      	sub	sp, #24
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800587c:	2300      	movs	r3, #0
 800587e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005886:	2b03      	cmp	r3, #3
 8005888:	d002      	beq.n	8005890 <CDC_ProcessReception+0x26>
 800588a:	2b04      	cmp	r3, #4
 800588c:	d00e      	beq.n	80058ac <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800588e:	e043      	b.n	8005918 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	6a19      	ldr	r1, [r3, #32]
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	8b5a      	ldrh	r2, [r3, #26]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	7b1b      	ldrb	r3, [r3, #12]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fc6f 	bl	8006180 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2204      	movs	r2, #4
 80058a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80058aa:	e035      	b.n	8005918 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	7b1b      	ldrb	r3, [r3, #12]
 80058b0:	4619      	mov	r1, r3
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 ff1c 	bl	80066f0 <USBH_LL_GetURBState>
 80058b8:	4603      	mov	r3, r0
 80058ba:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80058bc:	7cfb      	ldrb	r3, [r7, #19]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d129      	bne.n	8005916 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	7b1b      	ldrb	r3, [r3, #12]
 80058c6:	4619      	mov	r1, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fe7f 	bl	80065cc <USBH_LL_GetLastXferSize>
 80058ce:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d016      	beq.n	8005908 <CDC_ProcessReception+0x9e>
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	8b5b      	ldrh	r3, [r3, #26]
 80058de:	461a      	mov	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d910      	bls.n	8005908 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1ad2      	subs	r2, r2, r3
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	6a1a      	ldr	r2, [r3, #32]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	441a      	add	r2, r3
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2203      	movs	r2, #3
 8005902:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005906:	e006      	b.n	8005916 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f80f 	bl	8005934 <USBH_CDC_ReceiveCallback>
    break;
 8005916:	bf00      	nop
  }
}
 8005918:	bf00      	nop
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]

}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]

}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]

}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	4613      	mov	r3, r2
 8005968:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005970:	2302      	movs	r3, #2
 8005972:	e019      	b.n	80059a8 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	79fa      	ldrb	r2, [r7, #7]
 8005978:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f80f 	bl	80059b0 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 fda1 	bl	80064e8 <USBH_LL_Init>

  return USBH_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80059bc:	e008      	b.n	80059d0 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	32e0      	adds	r2, #224	; 0xe0
 80059c4:	2100      	movs	r1, #0
 80059c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3301      	adds	r3, #1
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b0e      	cmp	r3, #14
 80059d4:	d9f3      	bls.n	80059be <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	e009      	b.n	80059f0 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80059e6:	2200      	movs	r2, #0
 80059e8:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3301      	adds	r3, #1
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059f6:	d3f1      	bcc.n	80059dc <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2240      	movs	r2, #64	; 0x40
 8005a1c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d017      	beq.n	8005a86 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10f      	bne.n	8005a80 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a66:	1c59      	adds	r1, r3, #1
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	33dc      	adds	r3, #220	; 0xdc
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	73fb      	strb	r3, [r7, #15]
 8005a7e:	e004      	b.n	8005a8a <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005a80:	2302      	movs	r3, #2
 8005a82:	73fb      	strb	r3, [r7, #15]
 8005a84:	e001      	b.n	8005a8a <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005a86:	2302      	movs	r3, #2
 8005a88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005aae:	78fa      	ldrb	r2, [r7, #3]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d204      	bcs.n	8005abe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	78fa      	ldrb	r2, [r7, #3]
 8005ab8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005abc:	e001      	b.n	8005ac2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005abe:	2302      	movs	r3, #2
 8005ac0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	4608      	mov	r0, r1
 8005ada:	4611      	mov	r1, r2
 8005adc:	461a      	mov	r2, r3
 8005ade:	4603      	mov	r3, r0
 8005ae0:	70fb      	strb	r3, [r7, #3]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	70bb      	strb	r3, [r7, #2]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005af8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005afa:	e025      	b.n	8005b48 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
 8005afe:	221a      	movs	r2, #26
 8005b00:	fb02 f303 	mul.w	r3, r2, r3
 8005b04:	3308      	adds	r3, #8
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4413      	add	r3, r2
 8005b0a:	3302      	adds	r3, #2
 8005b0c:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	795b      	ldrb	r3, [r3, #5]
 8005b12:	78fa      	ldrb	r2, [r7, #3]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d002      	beq.n	8005b1e <USBH_FindInterface+0x4e>
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	2bff      	cmp	r3, #255	; 0xff
 8005b1c:	d111      	bne.n	8005b42 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005b22:	78ba      	ldrb	r2, [r7, #2]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d002      	beq.n	8005b2e <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005b28:	78bb      	ldrb	r3, [r7, #2]
 8005b2a:	2bff      	cmp	r3, #255	; 0xff
 8005b2c:	d109      	bne.n	8005b42 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005b32:	787a      	ldrb	r2, [r7, #1]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d002      	beq.n	8005b3e <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005b38:	787b      	ldrb	r3, [r7, #1]
 8005b3a:	2bff      	cmp	r3, #255	; 0xff
 8005b3c:	d101      	bne.n	8005b42 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005b3e:	7dfb      	ldrb	r3, [r7, #23]
 8005b40:	e006      	b.n	8005b50 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005b42:	7dfb      	ldrb	r3, [r7, #23]
 8005b44:	3301      	adds	r3, #1
 8005b46:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005b48:	7dfb      	ldrb	r3, [r7, #23]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d9d6      	bls.n	8005afc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005b4e:	23ff      	movs	r3, #255	; 0xff
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	371c      	adds	r7, #28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fcfb 	bl	8006560 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fdd2 	bl	8006716 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b082      	sub	sp, #8
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f804 	bl	8005bbe <USBH_HandleSof>
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b0b      	cmp	r3, #11
 8005bce:	d10a      	bne.n	8005be6 <USBH_HandleSof+0x28>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d005      	beq.n	8005be6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	4798      	blx	r3
  }
}
 8005be6:	bf00      	nop
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8005bfe:	bf00      	nop
}
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8005c1a:	bf00      	nop
}
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10f      	bne.n	8005c58 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00e      	beq.n	8005c68 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005c50:	2104      	movs	r1, #4
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	4798      	blx	r3
 8005c56:	e007      	b.n	8005c68 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d102      	bne.n	8005c68 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2202      	movs	r2, #2
 8005c66:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fc8b 	bl	8006596 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	791b      	ldrb	r3, [r3, #4]
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fae5 	bl	8006256 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	795b      	ldrb	r3, [r3, #5]
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fadf 	bl	8006256 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d005      	beq.n	8005cb6 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005cb0:	2105      	movs	r1, #5
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fc52 	bl	8006560 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	789b      	ldrb	r3, [r3, #2]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d10f      	bne.n	8005d00 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005cf2:	78fb      	ldrb	r3, [r7, #3]
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8005d00:	2200      	movs	r2, #0
 8005d02:	2100      	movs	r1, #0
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f805 	bl	8005d14 <USBH_CtlReq>
 8005d0a:	4603      	mov	r3, r0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005d22:	2301      	movs	r3, #1
 8005d24:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	789b      	ldrb	r3, [r3, #2]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d002      	beq.n	8005d34 <USBH_CtlReq+0x20>
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d00f      	beq.n	8005d52 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8005d32:	e034      	b.n	8005d9e <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	88fa      	ldrh	r2, [r7, #6]
 8005d3e:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	75fb      	strb	r3, [r7, #23]
    break;
 8005d50:	e025      	b.n	8005d9e <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 f828 	bl	8005da8 <USBH_HandleControl>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d108      	bne.n	8005d74 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2201      	movs	r2, #1
 8005d66:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	75fb      	strb	r3, [r7, #23]
    break;
 8005d72:	e013      	b.n	8005d9c <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d108      	bne.n	8005d8c <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8005d86:	2303      	movs	r3, #3
 8005d88:	75fb      	strb	r3, [r7, #23]
    break;
 8005d8a:	e007      	b.n	8005d9c <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8005d8c:	7dfb      	ldrb	r3, [r7, #23]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d104      	bne.n	8005d9c <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2201      	movs	r2, #1
 8005d96:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8005d98:	2302      	movs	r3, #2
 8005d9a:	75fb      	strb	r3, [r7, #23]
    break;
 8005d9c:	bf00      	nop
  }
  return status;
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005db4:	2300      	movs	r3, #0
 8005db6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	7e1b      	ldrb	r3, [r3, #24]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	2b0a      	cmp	r3, #10
 8005dc0:	f200 814c 	bhi.w	800605c <USBH_HandleControl+0x2b4>
 8005dc4:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <USBH_HandleControl+0x24>)
 8005dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dca:	bf00      	nop
 8005dcc:	08005df9 	.word	0x08005df9
 8005dd0:	08005e13 	.word	0x08005e13
 8005dd4:	08005e7d 	.word	0x08005e7d
 8005dd8:	08005ea3 	.word	0x08005ea3
 8005ddc:	08005edb 	.word	0x08005edb
 8005de0:	08005f07 	.word	0x08005f07
 8005de4:	08005f59 	.word	0x08005f59
 8005de8:	08005f7b 	.word	0x08005f7b
 8005dec:	08005fb7 	.word	0x08005fb7
 8005df0:	08005fdf 	.word	0x08005fdf
 8005df4:	0800601d 	.word	0x0800601d
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f103 0110 	add.w	r1, r3, #16
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	795b      	ldrb	r3, [r3, #5]
 8005e02:	461a      	mov	r2, r3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f939 	bl	800607c <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	761a      	strb	r2, [r3, #24]
    break;
 8005e10:	e12f      	b.n	8006072 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	795b      	ldrb	r3, [r3, #5]
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fc69 	bl	80066f0 <USBH_LL_GetURBState>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8005e22:	7bbb      	ldrb	r3, [r7, #14]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d11e      	bne.n	8005e66 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	7c1b      	ldrb	r3, [r3, #16]
 8005e2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e30:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	8adb      	ldrh	r3, [r3, #22]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8005e3a:	7b7b      	ldrb	r3, [r7, #13]
 8005e3c:	2b80      	cmp	r3, #128	; 0x80
 8005e3e:	d103      	bne.n	8005e48 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2203      	movs	r2, #3
 8005e44:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005e46:	e10b      	b.n	8006060 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2205      	movs	r2, #5
 8005e4c:	761a      	strb	r2, [r3, #24]
    break;
 8005e4e:	e107      	b.n	8006060 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8005e50:	7b7b      	ldrb	r3, [r7, #13]
 8005e52:	2b80      	cmp	r3, #128	; 0x80
 8005e54:	d103      	bne.n	8005e5e <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2209      	movs	r2, #9
 8005e5a:	761a      	strb	r2, [r3, #24]
    break;
 8005e5c:	e100      	b.n	8006060 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2207      	movs	r2, #7
 8005e62:	761a      	strb	r2, [r3, #24]
    break;
 8005e64:	e0fc      	b.n	8006060 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005e66:	7bbb      	ldrb	r3, [r7, #14]
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d003      	beq.n	8005e74 <USBH_HandleControl+0xcc>
 8005e6c:	7bbb      	ldrb	r3, [r7, #14]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	f040 80f6 	bne.w	8006060 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	220b      	movs	r2, #11
 8005e78:	761a      	strb	r2, [r3, #24]
    break;
 8005e7a:	e0f1      	b.n	8006060 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6899      	ldr	r1, [r3, #8]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	899a      	ldrh	r2, [r3, #12]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	791b      	ldrb	r3, [r3, #4]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f930 	bl	80060fa <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	761a      	strb	r2, [r3, #24]
    break;
 8005ea0:	e0e7      	b.n	8006072 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	791b      	ldrb	r3, [r3, #4]
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fc21 	bl	80066f0 <USBH_LL_GetURBState>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8005eb2:	7bbb      	ldrb	r3, [r7, #14]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d102      	bne.n	8005ebe <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2209      	movs	r2, #9
 8005ebc:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8005ebe:	7bbb      	ldrb	r3, [r7, #14]
 8005ec0:	2b05      	cmp	r3, #5
 8005ec2:	d102      	bne.n	8005eca <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005ec8:	e0cc      	b.n	8006064 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8005eca:	7bbb      	ldrb	r3, [r7, #14]
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	f040 80c9 	bne.w	8006064 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	220b      	movs	r2, #11
 8005ed6:	761a      	strb	r2, [r3, #24]
    break;
 8005ed8:	e0c4      	b.n	8006064 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6899      	ldr	r1, [r3, #8]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	899a      	ldrh	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	7958      	ldrb	r0, [r3, #5]
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	4603      	mov	r3, r0
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f8df 	bl	80060b0 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2206      	movs	r2, #6
 8005f02:	761a      	strb	r2, [r3, #24]
    break;
 8005f04:	e0b5      	b.n	8006072 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	795b      	ldrb	r3, [r3, #5]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fbef 	bl	80066f0 <USBH_LL_GetURBState>
 8005f12:	4603      	mov	r3, r0
 8005f14:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8005f16:	7bbb      	ldrb	r3, [r7, #14]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d103      	bne.n	8005f24 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2207      	movs	r2, #7
 8005f20:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005f22:	e0a1      	b.n	8006068 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	d105      	bne.n	8005f36 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	220c      	movs	r2, #12
 8005f2e:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8005f30:	2303      	movs	r3, #3
 8005f32:	73fb      	strb	r3, [r7, #15]
    break;
 8005f34:	e098      	b.n	8006068 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005f36:	7bbb      	ldrb	r3, [r7, #14]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d103      	bne.n	8005f44 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2205      	movs	r2, #5
 8005f40:	761a      	strb	r2, [r3, #24]
    break;
 8005f42:	e091      	b.n	8006068 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8005f44:	7bbb      	ldrb	r3, [r7, #14]
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	f040 808e 	bne.w	8006068 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	220b      	movs	r2, #11
 8005f50:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8005f52:	2302      	movs	r3, #2
 8005f54:	73fb      	strb	r3, [r7, #15]
    break;
 8005f56:	e087      	b.n	8006068 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	791b      	ldrb	r3, [r3, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2100      	movs	r1, #0
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f8ca 	bl	80060fa <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2208      	movs	r2, #8
 8005f76:	761a      	strb	r2, [r3, #24]

    break;
 8005f78:	e07b      	b.n	8006072 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	791b      	ldrb	r3, [r3, #4]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fbb5 	bl	80066f0 <USBH_LL_GetURBState>
 8005f86:	4603      	mov	r3, r0
 8005f88:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8005f8a:	7bbb      	ldrb	r3, [r7, #14]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d105      	bne.n	8005f9c <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	220d      	movs	r2, #13
 8005f94:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005f9a:	e067      	b.n	800606c <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8005f9c:	7bbb      	ldrb	r3, [r7, #14]
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d103      	bne.n	8005faa <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	220b      	movs	r2, #11
 8005fa6:	761a      	strb	r2, [r3, #24]
    break;
 8005fa8:	e060      	b.n	800606c <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8005faa:	7bbb      	ldrb	r3, [r7, #14]
 8005fac:	2b05      	cmp	r3, #5
 8005fae:	d15d      	bne.n	800606c <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8005fb4:	e05a      	b.n	800606c <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	795a      	ldrb	r2, [r3, #5]
 8005fba:	2301      	movs	r3, #1
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f873 	bl	80060b0 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	220a      	movs	r2, #10
 8005fda:	761a      	strb	r2, [r3, #24]
    break;
 8005fdc:	e049      	b.n	8006072 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	795b      	ldrb	r3, [r3, #5]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fb83 	bl	80066f0 <USBH_LL_GetURBState>
 8005fea:	4603      	mov	r3, r0
 8005fec:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d105      	bne.n	8006000 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	220d      	movs	r2, #13
 8005ffc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8005ffe:	e037      	b.n	8006070 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	2b02      	cmp	r3, #2
 8006004:	d103      	bne.n	800600e <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2209      	movs	r2, #9
 800600a:	761a      	strb	r2, [r3, #24]
    break;
 800600c:	e030      	b.n	8006070 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800600e:	7bbb      	ldrb	r3, [r7, #14]
 8006010:	2b04      	cmp	r3, #4
 8006012:	d12d      	bne.n	8006070 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	220b      	movs	r2, #11
 8006018:	761a      	strb	r2, [r3, #24]
    break;
 800601a:	e029      	b.n	8006070 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	7e5b      	ldrb	r3, [r3, #25]
 8006020:	3301      	adds	r3, #1
 8006022:	b2da      	uxtb	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	765a      	strb	r2, [r3, #25]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	7e5b      	ldrb	r3, [r3, #25]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d809      	bhi.n	8006044 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fab0 	bl	8006596 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006042:	e016      	b.n	8006072 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800604a:	2106      	movs	r1, #6
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006056:	2302      	movs	r3, #2
 8006058:	73fb      	strb	r3, [r7, #15]
    break;
 800605a:	e00a      	b.n	8006072 <USBH_HandleControl+0x2ca>

  default:
    break;
 800605c:	bf00      	nop
 800605e:	e008      	b.n	8006072 <USBH_HandleControl+0x2ca>
    break;
 8006060:	bf00      	nop
 8006062:	e006      	b.n	8006072 <USBH_HandleControl+0x2ca>
    break;
 8006064:	bf00      	nop
 8006066:	e004      	b.n	8006072 <USBH_HandleControl+0x2ca>
    break;
 8006068:	bf00      	nop
 800606a:	e002      	b.n	8006072 <USBH_HandleControl+0x2ca>
    break;
 800606c:	bf00      	nop
 800606e:	e000      	b.n	8006072 <USBH_HandleControl+0x2ca>
    break;
 8006070:	bf00      	nop
  }
  return status;
 8006072:	7bfb      	ldrb	r3, [r7, #15]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af04      	add	r7, sp, #16
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	4613      	mov	r3, r2
 8006088:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800608a:	79f9      	ldrb	r1, [r7, #7]
 800608c:	2300      	movs	r3, #0
 800608e:	9303      	str	r3, [sp, #12]
 8006090:	2308      	movs	r3, #8
 8006092:	9302      	str	r3, [sp, #8]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	9301      	str	r3, [sp, #4]
 8006098:	2300      	movs	r3, #0
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	2300      	movs	r3, #0
 800609e:	2200      	movs	r2, #0
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 faf4 	bl	800668e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af04      	add	r7, sp, #16
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	4611      	mov	r1, r2
 80060bc:	461a      	mov	r2, r3
 80060be:	460b      	mov	r3, r1
 80060c0:	80fb      	strh	r3, [r7, #6]
 80060c2:	4613      	mov	r3, r2
 80060c4:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80060d4:	7979      	ldrb	r1, [r7, #5]
 80060d6:	7e3b      	ldrb	r3, [r7, #24]
 80060d8:	9303      	str	r3, [sp, #12]
 80060da:	88fb      	ldrh	r3, [r7, #6]
 80060dc:	9302      	str	r3, [sp, #8]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	9301      	str	r3, [sp, #4]
 80060e2:	2301      	movs	r3, #1
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	2300      	movs	r3, #0
 80060e8:	2200      	movs	r2, #0
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 facf 	bl	800668e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b088      	sub	sp, #32
 80060fe:	af04      	add	r7, sp, #16
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	4611      	mov	r1, r2
 8006106:	461a      	mov	r2, r3
 8006108:	460b      	mov	r3, r1
 800610a:	80fb      	strh	r3, [r7, #6]
 800610c:	4613      	mov	r3, r2
 800610e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006110:	7979      	ldrb	r1, [r7, #5]
 8006112:	2300      	movs	r3, #0
 8006114:	9303      	str	r3, [sp, #12]
 8006116:	88fb      	ldrh	r3, [r7, #6]
 8006118:	9302      	str	r3, [sp, #8]
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	9301      	str	r3, [sp, #4]
 800611e:	2301      	movs	r3, #1
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	2300      	movs	r3, #0
 8006124:	2201      	movs	r2, #1
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 fab1 	bl	800668e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800612c:	2300      	movs	r3, #0

}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b088      	sub	sp, #32
 800613a:	af04      	add	r7, sp, #16
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	4611      	mov	r1, r2
 8006142:	461a      	mov	r2, r3
 8006144:	460b      	mov	r3, r1
 8006146:	80fb      	strh	r3, [r7, #6]
 8006148:	4613      	mov	r3, r2
 800614a:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800615a:	7979      	ldrb	r1, [r7, #5]
 800615c:	7e3b      	ldrb	r3, [r7, #24]
 800615e:	9303      	str	r3, [sp, #12]
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	9302      	str	r3, [sp, #8]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	9301      	str	r3, [sp, #4]
 8006168:	2301      	movs	r3, #1
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	2302      	movs	r3, #2
 800616e:	2200      	movs	r2, #0
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 fa8c 	bl	800668e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af04      	add	r7, sp, #16
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	4611      	mov	r1, r2
 800618c:	461a      	mov	r2, r3
 800618e:	460b      	mov	r3, r1
 8006190:	80fb      	strh	r3, [r7, #6]
 8006192:	4613      	mov	r3, r2
 8006194:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006196:	7979      	ldrb	r1, [r7, #5]
 8006198:	2300      	movs	r3, #0
 800619a:	9303      	str	r3, [sp, #12]
 800619c:	88fb      	ldrh	r3, [r7, #6]
 800619e:	9302      	str	r3, [sp, #8]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	9301      	str	r3, [sp, #4]
 80061a4:	2301      	movs	r3, #1
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	2302      	movs	r3, #2
 80061aa:	2201      	movs	r2, #1
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 fa6e 	bl	800668e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af04      	add	r7, sp, #16
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	4608      	mov	r0, r1
 80061c6:	4611      	mov	r1, r2
 80061c8:	461a      	mov	r2, r3
 80061ca:	4603      	mov	r3, r0
 80061cc:	70fb      	strb	r3, [r7, #3]
 80061ce:	460b      	mov	r3, r1
 80061d0:	70bb      	strb	r3, [r7, #2]
 80061d2:	4613      	mov	r3, r2
 80061d4:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 80061d6:	7878      	ldrb	r0, [r7, #1]
 80061d8:	78ba      	ldrb	r2, [r7, #2]
 80061da:	78f9      	ldrb	r1, [r7, #3]
 80061dc:	8b3b      	ldrh	r3, [r7, #24]
 80061de:	9302      	str	r3, [sp, #8]
 80061e0:	7d3b      	ldrb	r3, [r7, #20]
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	7c3b      	ldrb	r3, [r7, #16]
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	4603      	mov	r3, r0
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fa01 	bl	80065f2 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 80061f0:	2300      	movs	r3, #0

}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	460b      	mov	r3, r1
 8006204:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8006206:	78fb      	ldrb	r3, [r7, #3]
 8006208:	4619      	mov	r1, r3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fa20 	bl	8006650 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006210:	2300      	movs	r3, #0

}
 8006212:	4618      	mov	r0, r3
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	460b      	mov	r3, r1
 8006224:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f831 	bl	800628e <USBH_GetFreePipe>
 800622c:	4603      	mov	r3, r0
 800622e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006230:	89fb      	ldrh	r3, [r7, #14]
 8006232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006236:	4293      	cmp	r3, r2
 8006238:	d007      	beq.n	800624a <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800623a:	78fb      	ldrb	r3, [r7, #3]
 800623c:	89fa      	ldrh	r2, [r7, #14]
 800623e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	32e0      	adds	r2, #224	; 0xe0
 8006246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800624a:	89fb      	ldrh	r3, [r7, #14]
 800624c:	b2db      	uxtb	r3, r3
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	460b      	mov	r3, r1
 8006260:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	2b0a      	cmp	r3, #10
 8006266:	d80b      	bhi.n	8006280 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8006268:	78fa      	ldrb	r2, [r7, #3]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	32e0      	adds	r2, #224	; 0xe0
 800626e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006272:	78fa      	ldrb	r2, [r7, #3]
 8006274:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	32e0      	adds	r2, #224	; 0xe0
 800627c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800629a:	2300      	movs	r3, #0
 800629c:	73fb      	strb	r3, [r7, #15]
 800629e:	e00e      	b.n	80062be <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80062a0:	7bfa      	ldrb	r2, [r7, #15]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	32e0      	adds	r2, #224	; 0xe0
 80062a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	e007      	b.n	80062c8 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	3301      	adds	r3, #1
 80062bc:	73fb      	strb	r3, [r7, #15]
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	2b0a      	cmp	r3, #10
 80062c2:	d9ed      	bls.n	80062a0 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 80062c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80062d8:	2201      	movs	r2, #1
 80062da:	490e      	ldr	r1, [pc, #56]	; (8006314 <MX_USB_HOST_Init+0x40>)
 80062dc:	480e      	ldr	r0, [pc, #56]	; (8006318 <MX_USB_HOST_Init+0x44>)
 80062de:	f7ff fb3d 	bl	800595c <USBH_Init>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80062e8:	f7fa fb6a 	bl	80009c0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80062ec:	490b      	ldr	r1, [pc, #44]	; (800631c <MX_USB_HOST_Init+0x48>)
 80062ee:	480a      	ldr	r0, [pc, #40]	; (8006318 <MX_USB_HOST_Init+0x44>)
 80062f0:	f7ff fba7 	bl	8005a42 <USBH_RegisterClass>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80062fa:	f7fa fb61 	bl	80009c0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80062fe:	4806      	ldr	r0, [pc, #24]	; (8006318 <MX_USB_HOST_Init+0x44>)
 8006300:	f7ff fc2c 	bl	8005b5c <USBH_Start>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800630a:	f7fa fb59 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800630e:	bf00      	nop
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	08006321 	.word	0x08006321
 8006318:	200001c0 	.word	0x200001c0
 800631c:	2000000c 	.word	0x2000000c

08006320 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	3b01      	subs	r3, #1
 8006330:	2b04      	cmp	r3, #4
 8006332:	d819      	bhi.n	8006368 <USBH_UserProcess+0x48>
 8006334:	a201      	add	r2, pc, #4	; (adr r2, 800633c <USBH_UserProcess+0x1c>)
 8006336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633a:	bf00      	nop
 800633c:	08006369 	.word	0x08006369
 8006340:	08006359 	.word	0x08006359
 8006344:	08006369 	.word	0x08006369
 8006348:	08006361 	.word	0x08006361
 800634c:	08006351 	.word	0x08006351
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006350:	4b09      	ldr	r3, [pc, #36]	; (8006378 <USBH_UserProcess+0x58>)
 8006352:	2203      	movs	r2, #3
 8006354:	701a      	strb	r2, [r3, #0]
  break;
 8006356:	e008      	b.n	800636a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006358:	4b07      	ldr	r3, [pc, #28]	; (8006378 <USBH_UserProcess+0x58>)
 800635a:	2202      	movs	r2, #2
 800635c:	701a      	strb	r2, [r3, #0]
  break;
 800635e:	e004      	b.n	800636a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <USBH_UserProcess+0x58>)
 8006362:	2201      	movs	r2, #1
 8006364:	701a      	strb	r2, [r3, #0]
  break;
 8006366:	e000      	b.n	800636a <USBH_UserProcess+0x4a>

  default:
  break;
 8006368:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	200000b4 	.word	0x200000b4

0800637c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08a      	sub	sp, #40	; 0x28
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006384:	f107 0314 	add.w	r3, r7, #20
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	605a      	str	r2, [r3, #4]
 800638e:	609a      	str	r2, [r3, #8]
 8006390:	60da      	str	r2, [r3, #12]
 8006392:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800639c:	d147      	bne.n	800642e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800639e:	2300      	movs	r3, #0
 80063a0:	613b      	str	r3, [r7, #16]
 80063a2:	4b25      	ldr	r3, [pc, #148]	; (8006438 <HAL_HCD_MspInit+0xbc>)
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	4a24      	ldr	r2, [pc, #144]	; (8006438 <HAL_HCD_MspInit+0xbc>)
 80063a8:	f043 0301 	orr.w	r3, r3, #1
 80063ac:	6313      	str	r3, [r2, #48]	; 0x30
 80063ae:	4b22      	ldr	r3, [pc, #136]	; (8006438 <HAL_HCD_MspInit+0xbc>)
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80063ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80063c0:	2300      	movs	r3, #0
 80063c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80063c8:	f107 0314 	add.w	r3, r7, #20
 80063cc:	4619      	mov	r1, r3
 80063ce:	481b      	ldr	r0, [pc, #108]	; (800643c <HAL_HCD_MspInit+0xc0>)
 80063d0:	f7fa fe68 	bl	80010a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80063d4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80063d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063da:	2302      	movs	r3, #2
 80063dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063e2:	2300      	movs	r3, #0
 80063e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80063e6:	230a      	movs	r3, #10
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063ea:	f107 0314 	add.w	r3, r7, #20
 80063ee:	4619      	mov	r1, r3
 80063f0:	4812      	ldr	r0, [pc, #72]	; (800643c <HAL_HCD_MspInit+0xc0>)
 80063f2:	f7fa fe57 	bl	80010a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80063f6:	4b10      	ldr	r3, [pc, #64]	; (8006438 <HAL_HCD_MspInit+0xbc>)
 80063f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fa:	4a0f      	ldr	r2, [pc, #60]	; (8006438 <HAL_HCD_MspInit+0xbc>)
 80063fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006400:	6353      	str	r3, [r2, #52]	; 0x34
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <HAL_HCD_MspInit+0xbc>)
 8006408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640a:	4a0b      	ldr	r2, [pc, #44]	; (8006438 <HAL_HCD_MspInit+0xbc>)
 800640c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006410:	6453      	str	r3, [r2, #68]	; 0x44
 8006412:	4b09      	ldr	r3, [pc, #36]	; (8006438 <HAL_HCD_MspInit+0xbc>)
 8006414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800641e:	2200      	movs	r2, #0
 8006420:	2100      	movs	r1, #0
 8006422:	2043      	movs	r0, #67	; 0x43
 8006424:	f7fa fe07 	bl	8001036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006428:	2043      	movs	r0, #67	; 0x43
 800642a:	f7fa fe20 	bl	800106e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800642e:	bf00      	nop
 8006430:	3728      	adds	r7, #40	; 0x28
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40023800 	.word	0x40023800
 800643c:	40020000 	.word	0x40020000

08006440 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff fba3 	bl	8005b9a <USBH_LL_IncTimer>
}
 8006454:	bf00      	nop
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800646a:	4618      	mov	r0, r3
 800646c:	f7ff fbdb 	bl	8005c26 <USBH_LL_Connect>
}
 8006470:	bf00      	nop
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff fbf3 	bl	8005c72 <USBH_LL_Disconnect>
}
 800648c:	bf00      	nop
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	70fb      	strb	r3, [r7, #3]
 80064a0:	4613      	mov	r3, r2
 80064a2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff fb95 	bl	8005bee <USBH_LL_PortEnabled>
} 
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff fb95 	bl	8005c0a <USBH_LL_PortDisabled>
} 
 80064e0:	bf00      	nop
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d12a      	bne.n	8006550 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80064fa:	4a18      	ldr	r2, [pc, #96]	; (800655c <USBH_LL_Init+0x74>)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a15      	ldr	r2, [pc, #84]	; (800655c <USBH_LL_Init+0x74>)
 8006506:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800650a:	4b14      	ldr	r3, [pc, #80]	; (800655c <USBH_LL_Init+0x74>)
 800650c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006510:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006512:	4b12      	ldr	r3, [pc, #72]	; (800655c <USBH_LL_Init+0x74>)
 8006514:	2208      	movs	r2, #8
 8006516:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006518:	4b10      	ldr	r3, [pc, #64]	; (800655c <USBH_LL_Init+0x74>)
 800651a:	2201      	movs	r2, #1
 800651c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800651e:	4b0f      	ldr	r3, [pc, #60]	; (800655c <USBH_LL_Init+0x74>)
 8006520:	2200      	movs	r2, #0
 8006522:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006524:	4b0d      	ldr	r3, [pc, #52]	; (800655c <USBH_LL_Init+0x74>)
 8006526:	2202      	movs	r2, #2
 8006528:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800652a:	4b0c      	ldr	r3, [pc, #48]	; (800655c <USBH_LL_Init+0x74>)
 800652c:	2200      	movs	r2, #0
 800652e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006530:	480a      	ldr	r0, [pc, #40]	; (800655c <USBH_LL_Init+0x74>)
 8006532:	f7fa ff6a 	bl	800140a <HAL_HCD_Init>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800653c:	f7fa fa40 	bl	80009c0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006540:	4806      	ldr	r0, [pc, #24]	; (800655c <USBH_LL_Init+0x74>)
 8006542:	f7fb fb57 	bl	8001bf4 <HAL_HCD_GetCurrentFrame>
 8006546:	4603      	mov	r3, r0
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff fb16 	bl	8005b7c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	2000058c 	.word	0x2000058c

08006560 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006576:	4618      	mov	r0, r3
 8006578:	f7fb fad2 	bl	8001b20 <HAL_HCD_Start>
 800657c:	4603      	mov	r3, r0
 800657e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006580:	7bfb      	ldrb	r3, [r7, #15]
 8006582:	4618      	mov	r0, r3
 8006584:	f000 f912 	bl	80067ac <USBH_Get_USB_Status>
 8006588:	4603      	mov	r3, r0
 800658a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800658c:	7bbb      	ldrb	r3, [r7, #14]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fb fada 	bl	8001b66 <HAL_HCD_Stop>
 80065b2:	4603      	mov	r3, r0
 80065b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 f8f7 	bl	80067ac <USBH_Get_USB_Status>
 80065be:	4603      	mov	r3, r0
 80065c0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80065c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80065de:	78fa      	ldrb	r2, [r7, #3]
 80065e0:	4611      	mov	r1, r2
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fb faf1 	bl	8001bca <HAL_HCD_HC_GetXferCount>
 80065e8:	4603      	mov	r3, r0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80065f2:	b590      	push	{r4, r7, lr}
 80065f4:	b089      	sub	sp, #36	; 0x24
 80065f6:	af04      	add	r7, sp, #16
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	4608      	mov	r0, r1
 80065fc:	4611      	mov	r1, r2
 80065fe:	461a      	mov	r2, r3
 8006600:	4603      	mov	r3, r0
 8006602:	70fb      	strb	r3, [r7, #3]
 8006604:	460b      	mov	r3, r1
 8006606:	70bb      	strb	r3, [r7, #2]
 8006608:	4613      	mov	r3, r2
 800660a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800660c:	2300      	movs	r3, #0
 800660e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800661a:	787c      	ldrb	r4, [r7, #1]
 800661c:	78ba      	ldrb	r2, [r7, #2]
 800661e:	78f9      	ldrb	r1, [r7, #3]
 8006620:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006622:	9302      	str	r3, [sp, #8]
 8006624:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006628:	9301      	str	r3, [sp, #4]
 800662a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	4623      	mov	r3, r4
 8006632:	f7fa ff4c 	bl	80014ce <HAL_HCD_HC_Init>
 8006636:	4603      	mov	r3, r0
 8006638:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800663a:	7bfb      	ldrb	r3, [r7, #15]
 800663c:	4618      	mov	r0, r3
 800663e:	f000 f8b5 	bl	80067ac <USBH_Get_USB_Status>
 8006642:	4603      	mov	r3, r0
 8006644:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006646:	7bbb      	ldrb	r3, [r7, #14]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	bd90      	pop	{r4, r7, pc}

08006650 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800666a:	78fa      	ldrb	r2, [r7, #3]
 800666c:	4611      	mov	r1, r2
 800666e:	4618      	mov	r0, r3
 8006670:	f7fa ffc5 	bl	80015fe <HAL_HCD_HC_Halt>
 8006674:	4603      	mov	r3, r0
 8006676:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	4618      	mov	r0, r3
 800667c:	f000 f896 	bl	80067ac <USBH_Get_USB_Status>
 8006680:	4603      	mov	r3, r0
 8006682:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006684:	7bbb      	ldrb	r3, [r7, #14]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800668e:	b590      	push	{r4, r7, lr}
 8006690:	b089      	sub	sp, #36	; 0x24
 8006692:	af04      	add	r7, sp, #16
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	4608      	mov	r0, r1
 8006698:	4611      	mov	r1, r2
 800669a:	461a      	mov	r2, r3
 800669c:	4603      	mov	r3, r0
 800669e:	70fb      	strb	r3, [r7, #3]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70bb      	strb	r3, [r7, #2]
 80066a4:	4613      	mov	r3, r2
 80066a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80066b6:	787c      	ldrb	r4, [r7, #1]
 80066b8:	78ba      	ldrb	r2, [r7, #2]
 80066ba:	78f9      	ldrb	r1, [r7, #3]
 80066bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80066c0:	9303      	str	r3, [sp, #12]
 80066c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80066c4:	9302      	str	r3, [sp, #8]
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	9301      	str	r3, [sp, #4]
 80066ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	4623      	mov	r3, r4
 80066d2:	f7fa ffb7 	bl	8001644 <HAL_HCD_HC_SubmitRequest>
 80066d6:	4603      	mov	r3, r0
 80066d8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 f865 	bl	80067ac <USBH_Get_USB_Status>
 80066e2:	4603      	mov	r3, r0
 80066e4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80066e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd90      	pop	{r4, r7, pc}

080066f0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006702:	78fa      	ldrb	r2, [r7, #3]
 8006704:	4611      	mov	r1, r2
 8006706:	4618      	mov	r0, r3
 8006708:	f7fb fa4a 	bl	8001ba0 <HAL_HCD_HC_GetURBState>
 800670c:	4603      	mov	r3, r0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b082      	sub	sp, #8
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	460b      	mov	r3, r1
 8006720:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8006728:	2b01      	cmp	r3, #1
 800672a:	d103      	bne.n	8006734 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 f868 	bl	8006804 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006734:	20c8      	movs	r0, #200	; 0xc8
 8006736:	f7fa fb81 	bl	8000e3c <HAL_Delay>
  return USBH_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
 8006750:	4613      	mov	r3, r2
 8006752:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800675a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800675c:	78fa      	ldrb	r2, [r7, #3]
 800675e:	68f9      	ldr	r1, [r7, #12]
 8006760:	4613      	mov	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	00db      	lsls	r3, r3, #3
 8006768:	440b      	add	r3, r1
 800676a:	333b      	adds	r3, #59	; 0x3b
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006772:	78fa      	ldrb	r2, [r7, #3]
 8006774:	68f9      	ldr	r1, [r7, #12]
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	440b      	add	r3, r1
 8006780:	3350      	adds	r3, #80	; 0x50
 8006782:	78ba      	ldrb	r2, [r7, #2]
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	e009      	b.n	800679c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006788:	78fa      	ldrb	r2, [r7, #3]
 800678a:	68f9      	ldr	r1, [r7, #12]
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	440b      	add	r3, r1
 8006796:	3351      	adds	r3, #81	; 0x51
 8006798:	78ba      	ldrb	r2, [r7, #2]
 800679a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	4603      	mov	r3, r0
 80067b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d817      	bhi.n	80067f0 <USBH_Get_USB_Status+0x44>
 80067c0:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <USBH_Get_USB_Status+0x1c>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	080067d9 	.word	0x080067d9
 80067cc:	080067df 	.word	0x080067df
 80067d0:	080067e5 	.word	0x080067e5
 80067d4:	080067eb 	.word	0x080067eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80067d8:	2300      	movs	r3, #0
 80067da:	73fb      	strb	r3, [r7, #15]
    break;
 80067dc:	e00b      	b.n	80067f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80067de:	2302      	movs	r3, #2
 80067e0:	73fb      	strb	r3, [r7, #15]
    break;
 80067e2:	e008      	b.n	80067f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80067e4:	2301      	movs	r3, #1
 80067e6:	73fb      	strb	r3, [r7, #15]
    break;
 80067e8:	e005      	b.n	80067f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80067ea:	2302      	movs	r3, #2
 80067ec:	73fb      	strb	r3, [r7, #15]
    break;
 80067ee:	e002      	b.n	80067f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80067f0:	2302      	movs	r3, #2
 80067f2:	73fb      	strb	r3, [r7, #15]
    break;
 80067f4:	bf00      	nop
  }
  return usb_status;
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	4603      	mov	r3, r0
 800680c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006812:	79fb      	ldrb	r3, [r7, #7]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d102      	bne.n	800681e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8006818:	2301      	movs	r3, #1
 800681a:	73fb      	strb	r3, [r7, #15]
 800681c:	e001      	b.n	8006822 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800681e:	2300      	movs	r3, #0
 8006820:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	461a      	mov	r2, r3
 8006826:	2101      	movs	r1, #1
 8006828:	4803      	ldr	r0, [pc, #12]	; (8006838 <MX_DriverVbusFS+0x34>)
 800682a:	f7fa fdd5 	bl	80013d8 <HAL_GPIO_WritePin>
}
 800682e:	bf00      	nop
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	40020800 	.word	0x40020800

0800683c <__errno>:
 800683c:	4b01      	ldr	r3, [pc, #4]	; (8006844 <__errno+0x8>)
 800683e:	6818      	ldr	r0, [r3, #0]
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	2000002c 	.word	0x2000002c

08006848 <__libc_init_array>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	4e0d      	ldr	r6, [pc, #52]	; (8006880 <__libc_init_array+0x38>)
 800684c:	4c0d      	ldr	r4, [pc, #52]	; (8006884 <__libc_init_array+0x3c>)
 800684e:	1ba4      	subs	r4, r4, r6
 8006850:	10a4      	asrs	r4, r4, #2
 8006852:	2500      	movs	r5, #0
 8006854:	42a5      	cmp	r5, r4
 8006856:	d109      	bne.n	800686c <__libc_init_array+0x24>
 8006858:	4e0b      	ldr	r6, [pc, #44]	; (8006888 <__libc_init_array+0x40>)
 800685a:	4c0c      	ldr	r4, [pc, #48]	; (800688c <__libc_init_array+0x44>)
 800685c:	f000 f8ea 	bl	8006a34 <_init>
 8006860:	1ba4      	subs	r4, r4, r6
 8006862:	10a4      	asrs	r4, r4, #2
 8006864:	2500      	movs	r5, #0
 8006866:	42a5      	cmp	r5, r4
 8006868:	d105      	bne.n	8006876 <__libc_init_array+0x2e>
 800686a:	bd70      	pop	{r4, r5, r6, pc}
 800686c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006870:	4798      	blx	r3
 8006872:	3501      	adds	r5, #1
 8006874:	e7ee      	b.n	8006854 <__libc_init_array+0xc>
 8006876:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800687a:	4798      	blx	r3
 800687c:	3501      	adds	r5, #1
 800687e:	e7f2      	b.n	8006866 <__libc_init_array+0x1e>
 8006880:	08006a70 	.word	0x08006a70
 8006884:	08006a70 	.word	0x08006a70
 8006888:	08006a70 	.word	0x08006a70
 800688c:	08006a74 	.word	0x08006a74

08006890 <malloc>:
 8006890:	4b02      	ldr	r3, [pc, #8]	; (800689c <malloc+0xc>)
 8006892:	4601      	mov	r1, r0
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	f000 b861 	b.w	800695c <_malloc_r>
 800689a:	bf00      	nop
 800689c:	2000002c 	.word	0x2000002c

080068a0 <free>:
 80068a0:	4b02      	ldr	r3, [pc, #8]	; (80068ac <free+0xc>)
 80068a2:	4601      	mov	r1, r0
 80068a4:	6818      	ldr	r0, [r3, #0]
 80068a6:	f000 b80b 	b.w	80068c0 <_free_r>
 80068aa:	bf00      	nop
 80068ac:	2000002c 	.word	0x2000002c

080068b0 <memset>:
 80068b0:	4402      	add	r2, r0
 80068b2:	4603      	mov	r3, r0
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d100      	bne.n	80068ba <memset+0xa>
 80068b8:	4770      	bx	lr
 80068ba:	f803 1b01 	strb.w	r1, [r3], #1
 80068be:	e7f9      	b.n	80068b4 <memset+0x4>

080068c0 <_free_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4605      	mov	r5, r0
 80068c4:	2900      	cmp	r1, #0
 80068c6:	d045      	beq.n	8006954 <_free_r+0x94>
 80068c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068cc:	1f0c      	subs	r4, r1, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	bfb8      	it	lt
 80068d2:	18e4      	addlt	r4, r4, r3
 80068d4:	f000 f8ac 	bl	8006a30 <__malloc_lock>
 80068d8:	4a1f      	ldr	r2, [pc, #124]	; (8006958 <_free_r+0x98>)
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	4610      	mov	r0, r2
 80068de:	b933      	cbnz	r3, 80068ee <_free_r+0x2e>
 80068e0:	6063      	str	r3, [r4, #4]
 80068e2:	6014      	str	r4, [r2, #0]
 80068e4:	4628      	mov	r0, r5
 80068e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ea:	f000 b8a2 	b.w	8006a32 <__malloc_unlock>
 80068ee:	42a3      	cmp	r3, r4
 80068f0:	d90c      	bls.n	800690c <_free_r+0x4c>
 80068f2:	6821      	ldr	r1, [r4, #0]
 80068f4:	1862      	adds	r2, r4, r1
 80068f6:	4293      	cmp	r3, r2
 80068f8:	bf04      	itt	eq
 80068fa:	681a      	ldreq	r2, [r3, #0]
 80068fc:	685b      	ldreq	r3, [r3, #4]
 80068fe:	6063      	str	r3, [r4, #4]
 8006900:	bf04      	itt	eq
 8006902:	1852      	addeq	r2, r2, r1
 8006904:	6022      	streq	r2, [r4, #0]
 8006906:	6004      	str	r4, [r0, #0]
 8006908:	e7ec      	b.n	80068e4 <_free_r+0x24>
 800690a:	4613      	mov	r3, r2
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	b10a      	cbz	r2, 8006914 <_free_r+0x54>
 8006910:	42a2      	cmp	r2, r4
 8006912:	d9fa      	bls.n	800690a <_free_r+0x4a>
 8006914:	6819      	ldr	r1, [r3, #0]
 8006916:	1858      	adds	r0, r3, r1
 8006918:	42a0      	cmp	r0, r4
 800691a:	d10b      	bne.n	8006934 <_free_r+0x74>
 800691c:	6820      	ldr	r0, [r4, #0]
 800691e:	4401      	add	r1, r0
 8006920:	1858      	adds	r0, r3, r1
 8006922:	4282      	cmp	r2, r0
 8006924:	6019      	str	r1, [r3, #0]
 8006926:	d1dd      	bne.n	80068e4 <_free_r+0x24>
 8006928:	6810      	ldr	r0, [r2, #0]
 800692a:	6852      	ldr	r2, [r2, #4]
 800692c:	605a      	str	r2, [r3, #4]
 800692e:	4401      	add	r1, r0
 8006930:	6019      	str	r1, [r3, #0]
 8006932:	e7d7      	b.n	80068e4 <_free_r+0x24>
 8006934:	d902      	bls.n	800693c <_free_r+0x7c>
 8006936:	230c      	movs	r3, #12
 8006938:	602b      	str	r3, [r5, #0]
 800693a:	e7d3      	b.n	80068e4 <_free_r+0x24>
 800693c:	6820      	ldr	r0, [r4, #0]
 800693e:	1821      	adds	r1, r4, r0
 8006940:	428a      	cmp	r2, r1
 8006942:	bf04      	itt	eq
 8006944:	6811      	ldreq	r1, [r2, #0]
 8006946:	6852      	ldreq	r2, [r2, #4]
 8006948:	6062      	str	r2, [r4, #4]
 800694a:	bf04      	itt	eq
 800694c:	1809      	addeq	r1, r1, r0
 800694e:	6021      	streq	r1, [r4, #0]
 8006950:	605c      	str	r4, [r3, #4]
 8006952:	e7c7      	b.n	80068e4 <_free_r+0x24>
 8006954:	bd38      	pop	{r3, r4, r5, pc}
 8006956:	bf00      	nop
 8006958:	200000b8 	.word	0x200000b8

0800695c <_malloc_r>:
 800695c:	b570      	push	{r4, r5, r6, lr}
 800695e:	1ccd      	adds	r5, r1, #3
 8006960:	f025 0503 	bic.w	r5, r5, #3
 8006964:	3508      	adds	r5, #8
 8006966:	2d0c      	cmp	r5, #12
 8006968:	bf38      	it	cc
 800696a:	250c      	movcc	r5, #12
 800696c:	2d00      	cmp	r5, #0
 800696e:	4606      	mov	r6, r0
 8006970:	db01      	blt.n	8006976 <_malloc_r+0x1a>
 8006972:	42a9      	cmp	r1, r5
 8006974:	d903      	bls.n	800697e <_malloc_r+0x22>
 8006976:	230c      	movs	r3, #12
 8006978:	6033      	str	r3, [r6, #0]
 800697a:	2000      	movs	r0, #0
 800697c:	bd70      	pop	{r4, r5, r6, pc}
 800697e:	f000 f857 	bl	8006a30 <__malloc_lock>
 8006982:	4a21      	ldr	r2, [pc, #132]	; (8006a08 <_malloc_r+0xac>)
 8006984:	6814      	ldr	r4, [r2, #0]
 8006986:	4621      	mov	r1, r4
 8006988:	b991      	cbnz	r1, 80069b0 <_malloc_r+0x54>
 800698a:	4c20      	ldr	r4, [pc, #128]	; (8006a0c <_malloc_r+0xb0>)
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	b91b      	cbnz	r3, 8006998 <_malloc_r+0x3c>
 8006990:	4630      	mov	r0, r6
 8006992:	f000 f83d 	bl	8006a10 <_sbrk_r>
 8006996:	6020      	str	r0, [r4, #0]
 8006998:	4629      	mov	r1, r5
 800699a:	4630      	mov	r0, r6
 800699c:	f000 f838 	bl	8006a10 <_sbrk_r>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d124      	bne.n	80069ee <_malloc_r+0x92>
 80069a4:	230c      	movs	r3, #12
 80069a6:	6033      	str	r3, [r6, #0]
 80069a8:	4630      	mov	r0, r6
 80069aa:	f000 f842 	bl	8006a32 <__malloc_unlock>
 80069ae:	e7e4      	b.n	800697a <_malloc_r+0x1e>
 80069b0:	680b      	ldr	r3, [r1, #0]
 80069b2:	1b5b      	subs	r3, r3, r5
 80069b4:	d418      	bmi.n	80069e8 <_malloc_r+0x8c>
 80069b6:	2b0b      	cmp	r3, #11
 80069b8:	d90f      	bls.n	80069da <_malloc_r+0x7e>
 80069ba:	600b      	str	r3, [r1, #0]
 80069bc:	50cd      	str	r5, [r1, r3]
 80069be:	18cc      	adds	r4, r1, r3
 80069c0:	4630      	mov	r0, r6
 80069c2:	f000 f836 	bl	8006a32 <__malloc_unlock>
 80069c6:	f104 000b 	add.w	r0, r4, #11
 80069ca:	1d23      	adds	r3, r4, #4
 80069cc:	f020 0007 	bic.w	r0, r0, #7
 80069d0:	1ac3      	subs	r3, r0, r3
 80069d2:	d0d3      	beq.n	800697c <_malloc_r+0x20>
 80069d4:	425a      	negs	r2, r3
 80069d6:	50e2      	str	r2, [r4, r3]
 80069d8:	e7d0      	b.n	800697c <_malloc_r+0x20>
 80069da:	428c      	cmp	r4, r1
 80069dc:	684b      	ldr	r3, [r1, #4]
 80069de:	bf16      	itet	ne
 80069e0:	6063      	strne	r3, [r4, #4]
 80069e2:	6013      	streq	r3, [r2, #0]
 80069e4:	460c      	movne	r4, r1
 80069e6:	e7eb      	b.n	80069c0 <_malloc_r+0x64>
 80069e8:	460c      	mov	r4, r1
 80069ea:	6849      	ldr	r1, [r1, #4]
 80069ec:	e7cc      	b.n	8006988 <_malloc_r+0x2c>
 80069ee:	1cc4      	adds	r4, r0, #3
 80069f0:	f024 0403 	bic.w	r4, r4, #3
 80069f4:	42a0      	cmp	r0, r4
 80069f6:	d005      	beq.n	8006a04 <_malloc_r+0xa8>
 80069f8:	1a21      	subs	r1, r4, r0
 80069fa:	4630      	mov	r0, r6
 80069fc:	f000 f808 	bl	8006a10 <_sbrk_r>
 8006a00:	3001      	adds	r0, #1
 8006a02:	d0cf      	beq.n	80069a4 <_malloc_r+0x48>
 8006a04:	6025      	str	r5, [r4, #0]
 8006a06:	e7db      	b.n	80069c0 <_malloc_r+0x64>
 8006a08:	200000b8 	.word	0x200000b8
 8006a0c:	200000bc 	.word	0x200000bc

08006a10 <_sbrk_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4c06      	ldr	r4, [pc, #24]	; (8006a2c <_sbrk_r+0x1c>)
 8006a14:	2300      	movs	r3, #0
 8006a16:	4605      	mov	r5, r0
 8006a18:	4608      	mov	r0, r1
 8006a1a:	6023      	str	r3, [r4, #0]
 8006a1c:	f7fa f930 	bl	8000c80 <_sbrk>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d102      	bne.n	8006a2a <_sbrk_r+0x1a>
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	b103      	cbz	r3, 8006a2a <_sbrk_r+0x1a>
 8006a28:	602b      	str	r3, [r5, #0]
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	20000850 	.word	0x20000850

08006a30 <__malloc_lock>:
 8006a30:	4770      	bx	lr

08006a32 <__malloc_unlock>:
 8006a32:	4770      	bx	lr

08006a34 <_init>:
 8006a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a36:	bf00      	nop
 8006a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a3a:	bc08      	pop	{r3}
 8006a3c:	469e      	mov	lr, r3
 8006a3e:	4770      	bx	lr

08006a40 <_fini>:
 8006a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a42:	bf00      	nop
 8006a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a46:	bc08      	pop	{r3}
 8006a48:	469e      	mov	lr, r3
 8006a4a:	4770      	bx	lr
