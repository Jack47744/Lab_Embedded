
Lab_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007484  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800760c  0800760c  0001760c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007628  08007628  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007628  08007628  00017628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007630  08007630  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007630  08007630  00017630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007634  08007634  00017634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  20000090  080076c8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  080076c8  0002084c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018320  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003553  00000000  00000000  000383e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f8  00000000  00000000  0003b938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f90  00000000  00000000  0003ca30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023865  00000000  00000000  0003d9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000112dc  00000000  00000000  00061225  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca6a0  00000000  00000000  00072501  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013cba1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004778  00000000  00000000  0013cc1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080075f4 	.word	0x080075f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080075f4 	.word	0x080075f4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fbf0 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f80e 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f922 	bl	800071c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f88c 	bl	80005f4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004dc:	f000 f8b8 	bl	8000650 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e0:	f000 f8e6 	bl	80006b0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e4:	f006 fc82 	bl	8006dec <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e8:	f006 fca6 	bl	8006e38 <MX_USB_HOST_Process>
 80004ec:	e7fc      	b.n	80004e8 <main+0x20>
	...

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b098      	sub	sp, #96	; 0x60
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004fa:	2230      	movs	r2, #48	; 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f006 ffb6 	bl	8007470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 031c 	add.w	r3, r7, #28
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	4b31      	ldr	r3, [pc, #196]	; (80005ec <SystemClock_Config+0xfc>)
 8000528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052a:	4a30      	ldr	r2, [pc, #192]	; (80005ec <SystemClock_Config+0xfc>)
 800052c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000530:	6413      	str	r3, [r2, #64]	; 0x40
 8000532:	4b2e      	ldr	r3, [pc, #184]	; (80005ec <SystemClock_Config+0xfc>)
 8000534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	4b2b      	ldr	r3, [pc, #172]	; (80005f0 <SystemClock_Config+0x100>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a2a      	ldr	r2, [pc, #168]	; (80005f0 <SystemClock_Config+0x100>)
 8000548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054c:	6013      	str	r3, [r2, #0]
 800054e:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0x100>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055a:	2301      	movs	r3, #1
 800055c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000562:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000568:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800056e:	2308      	movs	r3, #8
 8000570:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000572:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000576:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057c:	2307      	movs	r3, #7
 800057e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000584:	4618      	mov	r0, r3
 8000586:	f003 f92b 	bl	80037e0 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000590:	f000 f9c2 	bl	8000918 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2302      	movs	r3, #2
 800059a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	2105      	movs	r1, #5
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 fb84 	bl	8003cc0 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005be:	f000 f9ab 	bl	8000918 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005c6:	23c0      	movs	r3, #192	; 0xc0
 80005c8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 fd52 	bl	800407c <HAL_RCCEx_PeriphCLKConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80005de:	f000 f99b 	bl	8000918 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3760      	adds	r7, #96	; 0x60
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_I2C1_Init+0x50>)
 80005fa:	4a13      	ldr	r2, [pc, #76]	; (8000648 <MX_I2C1_Init+0x54>)
 80005fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_I2C1_Init+0x50>)
 8000600:	4a12      	ldr	r2, [pc, #72]	; (800064c <MX_I2C1_Init+0x58>)
 8000602:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_I2C1_Init+0x50>)
 8000612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000616:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_I2C1_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_I2C1_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_I2C1_Init+0x50>)
 8000632:	f002 fafd 	bl	8002c30 <HAL_I2C_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800063c:	f000 f96c 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000c0 	.word	0x200000c0
 8000648:	40005400 	.word	0x40005400
 800064c:	000186a0 	.word	0x000186a0

08000650 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <MX_I2S3_Init+0x58>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_I2S3_Init+0x54>)
 800065c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000660:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_I2S3_Init+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000674:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000678:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <MX_I2S3_Init+0x5c>)
 800067a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_I2S3_Init+0x54>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000684:	2200      	movs	r2, #0
 8000686:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_I2S3_Init+0x54>)
 800068a:	2200      	movs	r2, #0
 800068c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000690:	f002 fc06 	bl	8002ea0 <HAL_I2S_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800069a:	f000 f93d 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000016c 	.word	0x2000016c
 80006a8:	40003c00 	.word	0x40003c00
 80006ac:	00017700 	.word	0x00017700

080006b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_SPI1_Init+0x64>)
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <MX_SPI1_Init+0x68>)
 80006b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_SPI1_Init+0x64>)
 80006fc:	220a      	movs	r2, #10
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_SPI1_Init+0x64>)
 8000702:	f003 fdf9 	bl	80042f8 <HAL_SPI_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800070c:	f000 f904 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000114 	.word	0x20000114
 8000718:	40013000 	.word	0x40013000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
 8000736:	4b71      	ldr	r3, [pc, #452]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a70      	ldr	r2, [pc, #448]	; (80008fc <MX_GPIO_Init+0x1e0>)
 800073c:	f043 0310 	orr.w	r3, r3, #16
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b6e      	ldr	r3, [pc, #440]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0310 	and.w	r3, r3, #16
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	4b6a      	ldr	r3, [pc, #424]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a69      	ldr	r2, [pc, #420]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b67      	ldr	r3, [pc, #412]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b63      	ldr	r3, [pc, #396]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a62      	ldr	r2, [pc, #392]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b60      	ldr	r3, [pc, #384]	; (80008fc <MX_GPIO_Init+0x1e0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b5c      	ldr	r3, [pc, #368]	; (80008fc <MX_GPIO_Init+0x1e0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a5b      	ldr	r2, [pc, #364]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b59      	ldr	r3, [pc, #356]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b55      	ldr	r3, [pc, #340]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a54      	ldr	r2, [pc, #336]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b52      	ldr	r3, [pc, #328]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b4e      	ldr	r3, [pc, #312]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a4d      	ldr	r2, [pc, #308]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b4b      	ldr	r3, [pc, #300]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2108      	movs	r1, #8
 80007de:	4848      	ldr	r0, [pc, #288]	; (8000900 <MX_GPIO_Init+0x1e4>)
 80007e0:	f000 fda6 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2101      	movs	r1, #1
 80007e8:	4846      	ldr	r0, [pc, #280]	; (8000904 <MX_GPIO_Init+0x1e8>)
 80007ea:	f000 fda1 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80007ee:	2200      	movs	r2, #0
 80007f0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f4:	4844      	ldr	r0, [pc, #272]	; (8000908 <MX_GPIO_Init+0x1ec>)
 80007f6:	f000 fd9b 	bl	8001330 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007fa:	2308      	movs	r3, #8
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	483b      	ldr	r0, [pc, #236]	; (8000900 <MX_GPIO_Init+0x1e4>)
 8000812:	f000 fbf3 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4835      	ldr	r0, [pc, #212]	; (8000904 <MX_GPIO_Init+0x1e8>)
 800082e:	f000 fbe5 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000832:	2308      	movs	r3, #8
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000842:	2305      	movs	r3, #5
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	482d      	ldr	r0, [pc, #180]	; (8000904 <MX_GPIO_Init+0x1e8>)
 800084e:	f000 fbd5 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000852:	2301      	movs	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <MX_GPIO_Init+0x1f0>)
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	482a      	ldr	r0, [pc, #168]	; (8000910 <MX_GPIO_Init+0x1f4>)
 8000866:	f000 fbc9 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800086a:	2304      	movs	r3, #4
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4825      	ldr	r0, [pc, #148]	; (8000914 <MX_GPIO_Init+0x1f8>)
 800087e:	f000 fbbd 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000894:	2305      	movs	r3, #5
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	481d      	ldr	r0, [pc, #116]	; (8000914 <MX_GPIO_Init+0x1f8>)
 80008a0:	f000 fbac 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008a4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008a8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <MX_GPIO_Init+0x1ec>)
 80008be:	f000 fb9d 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008c2:	2320      	movs	r3, #32
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_GPIO_Init+0x1ec>)
 80008d6:	f000 fb91 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008da:	2302      	movs	r3, #2
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_GPIO_Init+0x1f0>)
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_GPIO_Init+0x1e4>)
 80008ee:	f000 fb85 	bl	8000ffc <HAL_GPIO_Init>

}
 80008f2:	bf00      	nop
 80008f4:	3730      	adds	r7, #48	; 0x30
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40021000 	.word	0x40021000
 8000904:	40020800 	.word	0x40020800
 8000908:	40020c00 	.word	0x40020c00
 800090c:	10120000 	.word	0x10120000
 8000910:	40020000 	.word	0x40020000
 8000914:	40020400 	.word	0x40020400

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000966:	2007      	movs	r0, #7
 8000968:	f000 fb06 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a19      	ldr	r2, [pc, #100]	; (80009fc <HAL_I2C_MspInit+0x84>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d12c      	bne.n	80009f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009b6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009bc:	2312      	movs	r3, #18
 80009be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c8:	2304      	movs	r3, #4
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	480c      	ldr	r0, [pc, #48]	; (8000a04 <HAL_I2C_MspInit+0x8c>)
 80009d4:	f000 fb12 	bl	8000ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e6:	6413      	str	r3, [r2, #64]	; 0x40
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	; 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40005400 	.word	0x40005400
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020400 	.word	0x40020400

08000a08 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a28      	ldr	r2, [pc, #160]	; (8000ac8 <HAL_I2S_MspInit+0xc0>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d14a      	bne.n	8000ac0 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b27      	ldr	r3, [pc, #156]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a26      	ldr	r2, [pc, #152]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b24      	ldr	r3, [pc, #144]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b20      	ldr	r3, [pc, #128]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a18      	ldr	r2, [pc, #96]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a7e:	2310      	movs	r3, #16
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a8e:	2306      	movs	r3, #6
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <HAL_I2S_MspInit+0xc8>)
 8000a9a:	f000 faaf 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a9e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab0:	2306      	movs	r3, #6
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <HAL_I2S_MspInit+0xcc>)
 8000abc:	f000 fa9e 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40003c00 	.word	0x40003c00
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	40020800 	.word	0x40020800

08000ad8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <HAL_SPI_MspInit+0x84>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d12b      	bne.n	8000b52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a17      	ldr	r2, [pc, #92]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b32:	23e0      	movs	r3, #224	; 0xe0
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b42:	2305      	movs	r3, #5
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <HAL_SPI_MspInit+0x8c>)
 8000b4e:	f000 fa55 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	3728      	adds	r7, #40	; 0x28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40013000 	.word	0x40013000
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020000 	.word	0x40020000

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 f8ca 	bl	8000d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <OTG_FS_IRQHandler+0x10>)
 8000bca:	f000 fe4f 	bl	800186c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000584 	.word	0x20000584

08000bd8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x50>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x16>
		heap_end = &end;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <_sbrk+0x50>)
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <_sbrk+0x54>)
 8000bec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <_sbrk+0x50>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <_sbrk+0x50>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	466a      	mov	r2, sp
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d907      	bls.n	8000c12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c02:	f006 fbfb 	bl	80073fc <__errno>
 8000c06:	4602      	mov	r2, r0
 8000c08:	230c      	movs	r3, #12
 8000c0a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c10:	e006      	b.n	8000c20 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <_sbrk+0x50>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a03      	ldr	r2, [pc, #12]	; (8000c28 <_sbrk+0x50>)
 8000c1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200000ac 	.word	0x200000ac
 8000c2c:	20000850 	.word	0x20000850

08000c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <SystemInit+0x28>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <SystemInit+0x28>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <SystemInit+0x28>)
 8000c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c62:	e003      	b.n	8000c6c <LoopCopyDataInit>

08000c64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c6a:	3104      	adds	r1, #4

08000c6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c74:	d3f6      	bcc.n	8000c64 <CopyDataInit>
  ldr  r2, =_sbss
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c78:	e002      	b.n	8000c80 <LoopFillZerobss>

08000c7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c7c:	f842 3b04 	str.w	r3, [r2], #4

08000c80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c84:	d3f9      	bcc.n	8000c7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c86:	f7ff ffd3 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f006 fbbd 	bl	8007408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8e:	f7ff fc1b 	bl	80004c8 <main>
  bx  lr    
 8000c92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c98:	08007638 	.word	0x08007638
  ldr  r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ca0:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000ca4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000ca8:	2000084c 	.word	0x2000084c

08000cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_Init+0x40>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_Init+0x40>)
 8000cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_Init+0x40>)
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 f94d 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f808 	bl	8000cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce4:	f7ff fe20 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023c00 	.word	0x40023c00

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_InitTick+0x54>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x58>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f965 	bl	8000fe2 <HAL_SYSTICK_Config>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00e      	b.n	8000d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d80a      	bhi.n	8000d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d30:	f000 f92d 	bl	8000f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <HAL_InitTick+0x5c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e000      	b.n	8000d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000004 	.word	0x20000004

08000d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	200001b4 	.word	0x200001b4

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200001b4 	.word	0x200001b4

08000d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d9c:	f7ff ffee 	bl	8000d7c <HAL_GetTick>
 8000da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dac:	d005      	beq.n	8000dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_Delay+0x40>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dba:	bf00      	nop
 8000dbc:	f7ff ffde 	bl	8000d7c <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d8f7      	bhi.n	8000dbc <HAL_Delay+0x28>
  {
  }
}
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db0b      	blt.n	8000e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4907      	ldr	r1, [pc, #28]	; (8000e74 <__NVIC_EnableIRQ+0x38>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f44:	d301      	bcc.n	8000f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00f      	b.n	8000f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <SysTick_Config+0x40>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f52:	210f      	movs	r1, #15
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f58:	f7ff ff8e 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <SysTick_Config+0x40>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SysTick_Config+0x40>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff29 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa0:	f7ff ff3e 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	6978      	ldr	r0, [r7, #20]
 8000fac:	f7ff ff8e 	bl	8000ecc <NVIC_EncodePriority>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff5d 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff31 	bl	8000e3c <__NVIC_EnableIRQ>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffa2 	bl	8000f34 <SysTick_Config>
 8000ff0:	4603      	mov	r3, r0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	e16b      	b.n	80012f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	429a      	cmp	r2, r3
 8001032:	f040 815a 	bne.w	80012ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d00b      	beq.n	8001056 <HAL_GPIO_Init+0x5a>
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d007      	beq.n	8001056 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800104a:	2b11      	cmp	r3, #17
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b12      	cmp	r3, #18
 8001054:	d130      	bne.n	80010b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108c:	2201      	movs	r2, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	f003 0201 	and.w	r2, r3, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0xfc>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b12      	cmp	r3, #18
 80010f6:	d123      	bne.n	8001140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	08da      	lsrs	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3208      	adds	r2, #8
 8001100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	08da      	lsrs	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3208      	adds	r2, #8
 800113a:	69b9      	ldr	r1, [r7, #24]
 800113c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0203 	and.w	r2, r3, #3
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 80b4 	beq.w	80012ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b5f      	ldr	r3, [pc, #380]	; (8001304 <HAL_GPIO_Init+0x308>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a5e      	ldr	r2, [pc, #376]	; (8001304 <HAL_GPIO_Init+0x308>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b5c      	ldr	r3, [pc, #368]	; (8001304 <HAL_GPIO_Init+0x308>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119e:	4a5a      	ldr	r2, [pc, #360]	; (8001308 <HAL_GPIO_Init+0x30c>)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a51      	ldr	r2, [pc, #324]	; (800130c <HAL_GPIO_Init+0x310>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d02b      	beq.n	8001222 <HAL_GPIO_Init+0x226>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a50      	ldr	r2, [pc, #320]	; (8001310 <HAL_GPIO_Init+0x314>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d025      	beq.n	800121e <HAL_GPIO_Init+0x222>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4f      	ldr	r2, [pc, #316]	; (8001314 <HAL_GPIO_Init+0x318>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d01f      	beq.n	800121a <HAL_GPIO_Init+0x21e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4e      	ldr	r2, [pc, #312]	; (8001318 <HAL_GPIO_Init+0x31c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d019      	beq.n	8001216 <HAL_GPIO_Init+0x21a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4d      	ldr	r2, [pc, #308]	; (800131c <HAL_GPIO_Init+0x320>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d013      	beq.n	8001212 <HAL_GPIO_Init+0x216>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4c      	ldr	r2, [pc, #304]	; (8001320 <HAL_GPIO_Init+0x324>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00d      	beq.n	800120e <HAL_GPIO_Init+0x212>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4b      	ldr	r2, [pc, #300]	; (8001324 <HAL_GPIO_Init+0x328>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x20e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4a      	ldr	r2, [pc, #296]	; (8001328 <HAL_GPIO_Init+0x32c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_GPIO_Init+0x20a>
 8001202:	2307      	movs	r3, #7
 8001204:	e00e      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001206:	2308      	movs	r3, #8
 8001208:	e00c      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800120a:	2306      	movs	r3, #6
 800120c:	e00a      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800120e:	2305      	movs	r3, #5
 8001210:	e008      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001212:	2304      	movs	r3, #4
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001216:	2303      	movs	r3, #3
 8001218:	e004      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800121a:	2302      	movs	r3, #2
 800121c:	e002      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001222:	2300      	movs	r3, #0
 8001224:	69fa      	ldr	r2, [r7, #28]
 8001226:	f002 0203 	and.w	r2, r2, #3
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	4093      	lsls	r3, r2
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001234:	4934      	ldr	r1, [pc, #208]	; (8001308 <HAL_GPIO_Init+0x30c>)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001242:	4b3a      	ldr	r3, [pc, #232]	; (800132c <HAL_GPIO_Init+0x330>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001266:	4a31      	ldr	r2, [pc, #196]	; (800132c <HAL_GPIO_Init+0x330>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800126c:	4b2f      	ldr	r3, [pc, #188]	; (800132c <HAL_GPIO_Init+0x330>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001290:	4a26      	ldr	r2, [pc, #152]	; (800132c <HAL_GPIO_Init+0x330>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001296:	4b25      	ldr	r3, [pc, #148]	; (800132c <HAL_GPIO_Init+0x330>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ba:	4a1c      	ldr	r2, [pc, #112]	; (800132c <HAL_GPIO_Init+0x330>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_GPIO_Init+0x330>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e4:	4a11      	ldr	r2, [pc, #68]	; (800132c <HAL_GPIO_Init+0x330>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3301      	adds	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	2b0f      	cmp	r3, #15
 80012f4:	f67f ae90 	bls.w	8001018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f8:	bf00      	nop
 80012fa:	3724      	adds	r7, #36	; 0x24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	40023800 	.word	0x40023800
 8001308:	40013800 	.word	0x40013800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40021000 	.word	0x40021000
 8001320:	40021400 	.word	0x40021400
 8001324:	40021800 	.word	0x40021800
 8001328:	40021c00 	.word	0x40021c00
 800132c:	40013c00 	.word	0x40013c00

08001330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
 800133c:	4613      	mov	r3, r2
 800133e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001340:	787b      	ldrb	r3, [r7, #1]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800134c:	e003      	b.n	8001356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	041a      	lsls	r2, r3, #16
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	619a      	str	r2, [r3, #24]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001362:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001364:	b08f      	sub	sp, #60	; 0x3c
 8001366:	af0a      	add	r7, sp, #40	; 0x28
 8001368:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e054      	b.n	800141e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f005 fd8a 	bl	8006ea8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2203      	movs	r2, #3
 8001398:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 f876 	bl	80044a4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	687e      	ldr	r6, [r7, #4]
 80013c0:	466d      	mov	r5, sp
 80013c2:	f106 0410 	add.w	r4, r6, #16
 80013c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80013d6:	1d33      	adds	r3, r6, #4
 80013d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013da:	6838      	ldr	r0, [r7, #0]
 80013dc:	f002 fff0 	bl	80043c0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2101      	movs	r1, #1
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 f86d 	bl	80044c6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	687e      	ldr	r6, [r7, #4]
 80013f4:	466d      	mov	r5, sp
 80013f6:	f106 0410 	add.w	r4, r6, #16
 80013fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001406:	e885 0003 	stmia.w	r5, {r0, r1}
 800140a:	1d33      	adds	r3, r6, #4
 800140c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	f003 f980 	bl	8004714 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001426 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001426:	b590      	push	{r4, r7, lr}
 8001428:	b089      	sub	sp, #36	; 0x24
 800142a:	af04      	add	r7, sp, #16
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	4608      	mov	r0, r1
 8001430:	4611      	mov	r1, r2
 8001432:	461a      	mov	r2, r3
 8001434:	4603      	mov	r3, r0
 8001436:	70fb      	strb	r3, [r7, #3]
 8001438:	460b      	mov	r3, r1
 800143a:	70bb      	strb	r3, [r7, #2]
 800143c:	4613      	mov	r3, r2
 800143e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <HAL_HCD_HC_Init+0x28>
 800144a:	2302      	movs	r3, #2
 800144c:	e07f      	b.n	800154e <HAL_HCD_HC_Init+0x128>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001456:	78fa      	ldrb	r2, [r7, #3]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	440b      	add	r3, r1
 8001464:	333d      	adds	r3, #61	; 0x3d
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800146a:	78fa      	ldrb	r2, [r7, #3]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	3338      	adds	r3, #56	; 0x38
 800147a:	787a      	ldrb	r2, [r7, #1]
 800147c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800147e:	78fa      	ldrb	r2, [r7, #3]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	440b      	add	r3, r1
 800148c:	3340      	adds	r3, #64	; 0x40
 800148e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001490:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001492:	78fa      	ldrb	r2, [r7, #3]
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	440b      	add	r3, r1
 80014a0:	3339      	adds	r3, #57	; 0x39
 80014a2:	78fa      	ldrb	r2, [r7, #3]
 80014a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014a6:	78fa      	ldrb	r2, [r7, #3]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	440b      	add	r3, r1
 80014b4:	333f      	adds	r3, #63	; 0x3f
 80014b6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014bc:	78fa      	ldrb	r2, [r7, #3]
 80014be:	78bb      	ldrb	r3, [r7, #2]
 80014c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014c4:	b2d8      	uxtb	r0, r3
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	333a      	adds	r3, #58	; 0x3a
 80014d4:	4602      	mov	r2, r0
 80014d6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80014d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da0a      	bge.n	80014f6 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80014e0:	78fa      	ldrb	r2, [r7, #3]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	440b      	add	r3, r1
 80014ee:	333b      	adds	r3, #59	; 0x3b
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
 80014f4:	e009      	b.n	800150a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80014f6:	78fa      	ldrb	r2, [r7, #3]
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	440b      	add	r3, r1
 8001504:	333b      	adds	r3, #59	; 0x3b
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800150a:	78fa      	ldrb	r2, [r7, #3]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	333c      	adds	r3, #60	; 0x3c
 800151a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800151e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	787c      	ldrb	r4, [r7, #1]
 8001526:	78ba      	ldrb	r2, [r7, #2]
 8001528:	78f9      	ldrb	r1, [r7, #3]
 800152a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800152c:	9302      	str	r3, [sp, #8]
 800152e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	4623      	mov	r3, r4
 800153c:	f003 fa6c 	bl	8004a18 <USB_HC_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bd90      	pop	{r4, r7, pc}

08001556 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	460b      	mov	r3, r1
 8001560:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_HCD_HC_Halt+0x1e>
 8001570:	2302      	movs	r3, #2
 8001572:	e00f      	b.n	8001594 <HAL_HCD_HC_Halt+0x3e>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	78fa      	ldrb	r2, [r7, #3]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f003 fca6 	bl	8004ed6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	4608      	mov	r0, r1
 80015a6:	4611      	mov	r1, r2
 80015a8:	461a      	mov	r2, r3
 80015aa:	4603      	mov	r3, r0
 80015ac:	70fb      	strb	r3, [r7, #3]
 80015ae:	460b      	mov	r3, r1
 80015b0:	70bb      	strb	r3, [r7, #2]
 80015b2:	4613      	mov	r3, r2
 80015b4:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80015b6:	78fa      	ldrb	r2, [r7, #3]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	333b      	adds	r3, #59	; 0x3b
 80015c6:	78ba      	ldrb	r2, [r7, #2]
 80015c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80015ca:	78fa      	ldrb	r2, [r7, #3]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	440b      	add	r3, r1
 80015d8:	333f      	adds	r3, #63	; 0x3f
 80015da:	787a      	ldrb	r2, [r7, #1]
 80015dc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80015de:	7c3b      	ldrb	r3, [r7, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10a      	bne.n	80015fa <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80015e4:	78fa      	ldrb	r2, [r7, #3]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	3342      	adds	r3, #66	; 0x42
 80015f4:	2203      	movs	r2, #3
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	e009      	b.n	800160e <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015fa:	78fa      	ldrb	r2, [r7, #3]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	440b      	add	r3, r1
 8001608:	3342      	adds	r3, #66	; 0x42
 800160a:	2202      	movs	r2, #2
 800160c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800160e:	787b      	ldrb	r3, [r7, #1]
 8001610:	2b03      	cmp	r3, #3
 8001612:	f200 80d6 	bhi.w	80017c2 <HAL_HCD_HC_SubmitRequest+0x226>
 8001616:	a201      	add	r2, pc, #4	; (adr r2, 800161c <HAL_HCD_HC_SubmitRequest+0x80>)
 8001618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161c:	0800162d 	.word	0x0800162d
 8001620:	080017ad 	.word	0x080017ad
 8001624:	08001699 	.word	0x08001699
 8001628:	08001723 	.word	0x08001723
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800162c:	7c3b      	ldrb	r3, [r7, #16]
 800162e:	2b01      	cmp	r3, #1
 8001630:	f040 80c9 	bne.w	80017c6 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001634:	78bb      	ldrb	r3, [r7, #2]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f040 80c5 	bne.w	80017c6 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 800163c:	8b3b      	ldrh	r3, [r7, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001642:	78fa      	ldrb	r2, [r7, #3]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	440b      	add	r3, r1
 8001650:	3351      	adds	r3, #81	; 0x51
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	440b      	add	r3, r1
 8001664:	3351      	adds	r3, #81	; 0x51
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10a      	bne.n	8001682 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800166c:	78fa      	ldrb	r2, [r7, #3]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	440b      	add	r3, r1
 800167a:	3342      	adds	r3, #66	; 0x42
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001680:	e0a1      	b.n	80017c6 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001682:	78fa      	ldrb	r2, [r7, #3]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	3342      	adds	r3, #66	; 0x42
 8001692:	2202      	movs	r2, #2
 8001694:	701a      	strb	r2, [r3, #0]
      break;
 8001696:	e096      	b.n	80017c6 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001698:	78bb      	ldrb	r3, [r7, #2]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d120      	bne.n	80016e0 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800169e:	78fa      	ldrb	r2, [r7, #3]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	440b      	add	r3, r1
 80016ac:	3351      	adds	r3, #81	; 0x51
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10a      	bne.n	80016ca <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016b4:	78fa      	ldrb	r2, [r7, #3]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	440b      	add	r3, r1
 80016c2:	3342      	adds	r3, #66	; 0x42
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80016c8:	e07e      	b.n	80017c8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016ca:	78fa      	ldrb	r2, [r7, #3]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	440b      	add	r3, r1
 80016d8:	3342      	adds	r3, #66	; 0x42
 80016da:	2202      	movs	r2, #2
 80016dc:	701a      	strb	r2, [r3, #0]
      break;
 80016de:	e073      	b.n	80017c8 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	440b      	add	r3, r1
 80016ee:	3350      	adds	r3, #80	; 0x50
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10a      	bne.n	800170c <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	3342      	adds	r3, #66	; 0x42
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
      break;
 800170a:	e05d      	b.n	80017c8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800170c:	78fa      	ldrb	r2, [r7, #3]
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	3342      	adds	r3, #66	; 0x42
 800171c:	2202      	movs	r2, #2
 800171e:	701a      	strb	r2, [r3, #0]
      break;
 8001720:	e052      	b.n	80017c8 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001722:	78bb      	ldrb	r3, [r7, #2]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d120      	bne.n	800176a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001728:	78fa      	ldrb	r2, [r7, #3]
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	3351      	adds	r3, #81	; 0x51
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10a      	bne.n	8001754 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	3342      	adds	r3, #66	; 0x42
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001752:	e039      	b.n	80017c8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001754:	78fa      	ldrb	r2, [r7, #3]
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3342      	adds	r3, #66	; 0x42
 8001764:	2202      	movs	r2, #2
 8001766:	701a      	strb	r2, [r3, #0]
      break;
 8001768:	e02e      	b.n	80017c8 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3350      	adds	r3, #80	; 0x50
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10a      	bne.n	8001796 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001780:	78fa      	ldrb	r2, [r7, #3]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	3342      	adds	r3, #66	; 0x42
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
      break;
 8001794:	e018      	b.n	80017c8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	3342      	adds	r3, #66	; 0x42
 80017a6:	2202      	movs	r2, #2
 80017a8:	701a      	strb	r2, [r3, #0]
      break;
 80017aa:	e00d      	b.n	80017c8 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	3342      	adds	r3, #66	; 0x42
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
      break;
 80017c0:	e002      	b.n	80017c8 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80017c2:	bf00      	nop
 80017c4:	e000      	b.n	80017c8 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80017c6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	3344      	adds	r3, #68	; 0x44
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	8b39      	ldrh	r1, [r7, #24]
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4403      	add	r3, r0
 80017ec:	3348      	adds	r3, #72	; 0x48
 80017ee:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	335c      	adds	r3, #92	; 0x5c
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	334c      	adds	r3, #76	; 0x4c
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001818:	78fa      	ldrb	r2, [r7, #3]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	440b      	add	r3, r1
 8001826:	3339      	adds	r3, #57	; 0x39
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	335d      	adds	r3, #93	; 0x5d
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	78fa      	ldrb	r2, [r7, #3]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	3338      	adds	r3, #56	; 0x38
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	18d1      	adds	r1, r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	f003 f9e6 	bl	8004c2c <USB_HC_StartXfer>
 8001860:	4603      	mov	r3, r0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop

0800186c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f002 ff03 	bl	800468e <USB_GetMode>
 8001888:	4603      	mov	r3, r0
 800188a:	2b01      	cmp	r3, #1
 800188c:	f040 80f1 	bne.w	8001a72 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f002 fee7 	bl	8004668 <USB_ReadInterrupts>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80e7 	beq.w	8001a70 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 fede 	bl	8004668 <USB_ReadInterrupts>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018b6:	d104      	bne.n	80018c2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 fece 	bl	8004668 <USB_ReadInterrupts>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018d6:	d104      	bne.n	80018e2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 febe 	bl	8004668 <USB_ReadInterrupts>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018f6:	d104      	bne.n	8001902 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001900:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f002 feae 	bl	8004668 <USB_ReadInterrupts>
 800190c:	4603      	mov	r3, r0
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b02      	cmp	r3, #2
 8001914:	d103      	bne.n	800191e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2202      	movs	r2, #2
 800191c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f002 fea0 	bl	8004668 <USB_ReadInterrupts>
 8001928:	4603      	mov	r3, r0
 800192a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800192e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001932:	d117      	bne.n	8001964 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001942:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001946:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f005 fb2b 	bl	8006fa4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2101      	movs	r1, #1
 8001954:	4618      	mov	r0, r3
 8001956:	f002 ff99 	bl	800488c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001962:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f002 fe7d 	bl	8004668 <USB_ReadInterrupts>
 800196e:	4603      	mov	r3, r0
 8001970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001978:	d102      	bne.n	8001980 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f001 f8c8 	bl	8002b10 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f002 fe6f 	bl	8004668 <USB_ReadInterrupts>
 800198a:	4603      	mov	r3, r0
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b08      	cmp	r3, #8
 8001992:	d106      	bne.n	80019a2 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f005 fae9 	bl	8006f6c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2208      	movs	r2, #8
 80019a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 fe5e 	bl	8004668 <USB_ReadInterrupts>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019b6:	d138      	bne.n	8001a2a <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f003 fa79 	bl	8004eb4 <USB_HC_ReadInterrupt>
 80019c2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	e025      	b.n	8001a16 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f003 030f 	and.w	r3, r3, #15
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	fa22 f303 	lsr.w	r3, r2, r3
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d018      	beq.n	8001a10 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	015a      	lsls	r2, r3, #5
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019f4:	d106      	bne.n	8001a04 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	4619      	mov	r1, r3
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f8cf 	bl	8001ba0 <HCD_HC_IN_IRQHandler>
 8001a02:	e005      	b.n	8001a10 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	4619      	mov	r1, r3
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 fc5f 	bl	80022ce <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3301      	adds	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d3d4      	bcc.n	80019ca <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 fe1a 	bl	8004668 <USB_ReadInterrupts>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b10      	cmp	r3, #16
 8001a3c:	d101      	bne.n	8001a42 <HAL_HCD_IRQHandler+0x1d6>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_HCD_IRQHandler+0x1d8>
 8001a42:	2300      	movs	r3, #0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d014      	beq.n	8001a72 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699a      	ldr	r2, [r3, #24]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0210 	bic.w	r2, r2, #16
 8001a56:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 ffad 	bl	80029b8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699a      	ldr	r2, [r3, #24]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0210 	orr.w	r2, r2, #16
 8001a6c:	619a      	str	r2, [r3, #24]
 8001a6e:	e000      	b.n	8001a72 <HAL_HCD_IRQHandler+0x206>
      return;
 8001a70:	bf00      	nop
    }
  }
}
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_HCD_Start+0x16>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e013      	b.n	8001ab6 <HAL_HCD_Start+0x3e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 fcf1 	bl	8004482 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 ff54 	bl	8004954 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_HCD_Stop+0x16>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e00d      	b.n	8001af0 <HAL_HCD_Stop+0x32>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 fb33 	bl	800514c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fefb 	bl	8004900 <USB_ResetPort>
 8001b0a:	4603      	mov	r3, r0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b20:	78fa      	ldrb	r2, [r7, #3]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	440b      	add	r3, r1
 8001b2e:	335c      	adds	r3, #92	; 0x5c
 8001b30:	781b      	ldrb	r3, [r3, #0]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	460b      	mov	r3, r1
 8001b48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b4a:	78fa      	ldrb	r2, [r7, #3]
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	440b      	add	r3, r1
 8001b58:	334c      	adds	r3, #76	; 0x4c
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 ff3d 	bl	80049f4 <USB_GetCurrentFrame>
 8001b7a:	4603      	mov	r3, r0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f002 ff18 	bl	80049c6 <USB_GetHostSpeed>
 8001b96:	4603      	mov	r3, r0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	015a      	lsls	r2, r3, #5
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d119      	bne.n	8001c04 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	015a      	lsls	r2, r3, #5
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bdc:	461a      	mov	r2, r3
 8001bde:	2304      	movs	r3, #4
 8001be0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	015a      	lsls	r2, r3, #5
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	0151      	lsls	r1, r2, #5
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	440a      	add	r2, r1
 8001bf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	60d3      	str	r3, [r2, #12]
 8001c02:	e095      	b.n	8001d30 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	015a      	lsls	r2, r3, #5
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0320 	and.w	r3, r3, #32
 8001c16:	2b20      	cmp	r3, #32
 8001c18:	d109      	bne.n	8001c2e <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	015a      	lsls	r2, r3, #5
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c26:	461a      	mov	r2, r3
 8001c28:	2320      	movs	r3, #32
 8001c2a:	6093      	str	r3, [r2, #8]
 8001c2c:	e080      	b.n	8001d30 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	015a      	lsls	r2, r3, #5
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d134      	bne.n	8001cae <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	015a      	lsls	r2, r3, #5
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	0151      	lsls	r1, r2, #5
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	440a      	add	r2, r1
 8001c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	335d      	adds	r3, #93	; 0x5d
 8001c74:	2205      	movs	r2, #5
 8001c76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	015a      	lsls	r2, r3, #5
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c84:	461a      	mov	r2, r3
 8001c86:	2310      	movs	r3, #16
 8001c88:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c96:	461a      	mov	r2, r3
 8001c98:	2308      	movs	r3, #8
 8001c9a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 f915 	bl	8004ed6 <USB_HC_Halt>
 8001cac:	e040      	b.n	8001d30 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	015a      	lsls	r2, r3, #5
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc4:	d134      	bne.n	8001d30 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	0151      	lsls	r1, r2, #5
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	440a      	add	r2, r1
 8001cdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 f8f0 	bl	8004ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d02:	461a      	mov	r2, r3
 8001d04:	2310      	movs	r3, #16
 8001d06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	440b      	add	r3, r1
 8001d16:	335d      	adds	r3, #93	; 0x5d
 8001d18:	2208      	movs	r2, #8
 8001d1a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	015a      	lsls	r2, r3, #5
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4413      	add	r3, r2
 8001d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d28:	461a      	mov	r2, r3
 8001d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d2e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d46:	d122      	bne.n	8001d8e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	015a      	lsls	r2, r3, #5
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	0151      	lsls	r1, r2, #5
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	440a      	add	r2, r1
 8001d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d62:	f043 0302 	orr.w	r3, r3, #2
 8001d66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 f8af 	bl	8004ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	015a      	lsls	r2, r3, #5
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d84:	461a      	mov	r2, r3
 8001d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d8a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001d8c:	e29b      	b.n	80022c6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	f040 80c1 	bne.w	8001f28 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d01b      	beq.n	8001de6 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	440b      	add	r3, r1
 8001dbc:	3348      	adds	r3, #72	; 0x48
 8001dbe:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	0159      	lsls	r1, r3, #5
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001dd2:	1ad1      	subs	r1, r2, r3
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4403      	add	r3, r0
 8001de2:	334c      	adds	r3, #76	; 0x4c
 8001de4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	440b      	add	r3, r1
 8001df4:	335d      	adds	r3, #93	; 0x5d
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	440b      	add	r3, r1
 8001e08:	3358      	adds	r3, #88	; 0x58
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	015a      	lsls	r2, r3, #5
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	333f      	adds	r3, #63	; 0x3f
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00a      	beq.n	8001e4c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	333f      	adds	r3, #63	; 0x3f
 8001e46:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d121      	bne.n	8001e90 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	0151      	lsls	r1, r2, #5
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	440a      	add	r2, r1
 8001e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e66:	f043 0302 	orr.w	r3, r3, #2
 8001e6a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 f82d 	bl	8004ed6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2310      	movs	r3, #16
 8001e8c:	6093      	str	r3, [r2, #8]
 8001e8e:	e034      	b.n	8001efa <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	333f      	adds	r3, #63	; 0x3f
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d129      	bne.n	8001efa <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	015a      	lsls	r2, r3, #5
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	0151      	lsls	r1, r2, #5
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	440a      	add	r2, r1
 8001ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ec0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ec4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	335c      	adds	r3, #92	; 0x5c
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	b2d8      	uxtb	r0, r3
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	440b      	add	r3, r1
 8001eec:	335c      	adds	r3, #92	; 0x5c
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4601      	mov	r1, r0
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f005 f863 	bl	8006fc0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	440b      	add	r3, r1
 8001f08:	3350      	adds	r3, #80	; 0x50
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	f083 0301 	eor.w	r3, r3, #1
 8001f10:	b2d8      	uxtb	r0, r3
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	3350      	adds	r3, #80	; 0x50
 8001f22:	4602      	mov	r2, r0
 8001f24:	701a      	strb	r2, [r3, #0]
}
 8001f26:	e1ce      	b.n	80022c6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	f040 80f1 	bne.w	8002122 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	0151      	lsls	r1, r2, #5
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	440a      	add	r2, r1
 8001f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f5a:	f023 0302 	bic.w	r3, r3, #2
 8001f5e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	440b      	add	r3, r1
 8001f6e:	335d      	adds	r3, #93	; 0x5d
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d10a      	bne.n	8001f8c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	440b      	add	r3, r1
 8001f84:	335c      	adds	r3, #92	; 0x5c
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	e0b0      	b.n	80020ee <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	440b      	add	r3, r1
 8001f9a:	335d      	adds	r3, #93	; 0x5d
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d10a      	bne.n	8001fb8 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	335c      	adds	r3, #92	; 0x5c
 8001fb2:	2205      	movs	r2, #5
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	e09a      	b.n	80020ee <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	335d      	adds	r3, #93	; 0x5d
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d00a      	beq.n	8001fe4 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	440b      	add	r3, r1
 8001fdc:	335d      	adds	r3, #93	; 0x5d
 8001fde:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d156      	bne.n	8002092 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	440b      	add	r3, r1
 8001ff2:	3358      	adds	r3, #88	; 0x58
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	1c59      	adds	r1, r3, #1
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4403      	add	r3, r0
 8002006:	3358      	adds	r3, #88	; 0x58
 8002008:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	440b      	add	r3, r1
 8002018:	3358      	adds	r3, #88	; 0x58
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d914      	bls.n	800204a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	3358      	adds	r3, #88	; 0x58
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	335c      	adds	r3, #92	; 0x5c
 8002044:	2204      	movs	r2, #4
 8002046:	701a      	strb	r2, [r3, #0]
 8002048:	e009      	b.n	800205e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	335c      	adds	r3, #92	; 0x5c
 800205a:	2202      	movs	r2, #2
 800205c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002074:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800207c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4413      	add	r3, r2
 8002086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208a:	461a      	mov	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	e02d      	b.n	80020ee <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	440b      	add	r3, r1
 80020a0:	335d      	adds	r3, #93	; 0x5d
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d122      	bne.n	80020ee <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	440b      	add	r3, r1
 80020b6:	335c      	adds	r3, #92	; 0x5c
 80020b8:	2202      	movs	r2, #2
 80020ba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020d2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020da:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e8:	461a      	mov	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fa:	461a      	mov	r2, r3
 80020fc:	2302      	movs	r3, #2
 80020fe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	b2d8      	uxtb	r0, r3
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	335c      	adds	r3, #92	; 0x5c
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	4601      	mov	r1, r0
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f004 ff50 	bl	8006fc0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002120:	e0d1      	b.n	80022c6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4413      	add	r3, r2
 800212a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002134:	2b80      	cmp	r3, #128	; 0x80
 8002136:	d13e      	bne.n	80021b6 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4413      	add	r3, r2
 8002140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	0151      	lsls	r1, r2, #5
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	440a      	add	r2, r1
 800214e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002152:	f043 0302 	orr.w	r3, r3, #2
 8002156:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	440b      	add	r3, r1
 8002166:	3358      	adds	r3, #88	; 0x58
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	1c59      	adds	r1, r3, #1
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4403      	add	r3, r0
 800217a:	3358      	adds	r3, #88	; 0x58
 800217c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	440b      	add	r3, r1
 800218c:	335d      	adds	r3, #93	; 0x5d
 800218e:	2206      	movs	r2, #6
 8002190:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f002 fe9a 	bl	8004ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ae:	461a      	mov	r2, r3
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	6093      	str	r3, [r2, #8]
}
 80021b4:	e087      	b.n	80022c6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b10      	cmp	r3, #16
 80021ca:	d17c      	bne.n	80022c6 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	333f      	adds	r3, #63	; 0x3f
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d122      	bne.n	8002228 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	440b      	add	r3, r1
 80021f0:	3358      	adds	r3, #88	; 0x58
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	0151      	lsls	r1, r2, #5
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	440a      	add	r2, r1
 800220c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f002 fe58 	bl	8004ed6 <USB_HC_Halt>
 8002226:	e045      	b.n	80022b4 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	440b      	add	r3, r1
 8002236:	333f      	adds	r3, #63	; 0x3f
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	440b      	add	r3, r1
 800224c:	333f      	adds	r3, #63	; 0x3f
 800224e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002250:	2b02      	cmp	r3, #2
 8002252:	d12f      	bne.n	80022b4 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	3358      	adds	r3, #88	; 0x58
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d121      	bne.n	80022b4 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	335d      	adds	r3, #93	; 0x5d
 8002280:	2203      	movs	r2, #3
 8002282:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4413      	add	r3, r2
 800228c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	0151      	lsls	r1, r2, #5
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	440a      	add	r2, r1
 800229a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800229e:	f043 0302 	orr.w	r3, r3, #2
 80022a2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 fe11 	bl	8004ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c0:	461a      	mov	r2, r3
 80022c2:	2310      	movs	r3, #16
 80022c4:	6093      	str	r3, [r2, #8]
}
 80022c6:	bf00      	nop
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d119      	bne.n	8002332 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4413      	add	r3, r2
 8002306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230a:	461a      	mov	r2, r3
 800230c:	2304      	movs	r3, #4
 800230e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4413      	add	r3, r2
 8002318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	0151      	lsls	r1, r2, #5
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	440a      	add	r2, r1
 8002326:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800232a:	f043 0302 	orr.w	r3, r3, #2
 800232e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002330:	e33e      	b.n	80029b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b20      	cmp	r3, #32
 8002346:	d141      	bne.n	80023cc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	461a      	mov	r2, r3
 8002356:	2320      	movs	r3, #32
 8002358:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	333d      	adds	r3, #61	; 0x3d
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	f040 831f 	bne.w	80029b0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	440b      	add	r3, r1
 8002380:	333d      	adds	r3, #61	; 0x3d
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	335c      	adds	r3, #92	; 0x5c
 8002396:	2202      	movs	r2, #2
 8002398:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	0151      	lsls	r1, r2, #5
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	440a      	add	r2, r1
 80023b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f002 fd86 	bl	8004ed6 <USB_HC_Halt>
}
 80023ca:	e2f1      	b.n	80029b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023de:	2b40      	cmp	r3, #64	; 0x40
 80023e0:	d13f      	bne.n	8002462 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	440b      	add	r3, r1
 80023f0:	335d      	adds	r3, #93	; 0x5d
 80023f2:	2204      	movs	r2, #4
 80023f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	440b      	add	r3, r1
 8002404:	333d      	adds	r3, #61	; 0x3d
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	3358      	adds	r3, #88	; 0x58
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4413      	add	r3, r2
 8002426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	0151      	lsls	r1, r2, #5
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	440a      	add	r2, r1
 8002434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f002 fd44 	bl	8004ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245a:	461a      	mov	r2, r3
 800245c:	2340      	movs	r3, #64	; 0x40
 800245e:	6093      	str	r3, [r2, #8]
}
 8002460:	e2a6      	b.n	80029b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002478:	d122      	bne.n	80024c0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	015a      	lsls	r2, r3, #5
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4413      	add	r3, r2
 8002482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	0151      	lsls	r1, r2, #5
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	440a      	add	r2, r1
 8002490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002494:	f043 0302 	orr.w	r3, r3, #2
 8002498:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f002 fd16 	bl	8004ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b6:	461a      	mov	r2, r3
 80024b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024bc:	6093      	str	r3, [r2, #8]
}
 80024be:	e277      	b.n	80029b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d135      	bne.n	8002542 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	440b      	add	r3, r1
 80024e4:	3358      	adds	r3, #88	; 0x58
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	0151      	lsls	r1, r2, #5
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	440a      	add	r2, r1
 8002500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f002 fcde 	bl	8004ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002526:	461a      	mov	r2, r3
 8002528:	2301      	movs	r3, #1
 800252a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	440b      	add	r3, r1
 800253a:	335d      	adds	r3, #93	; 0x5d
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
}
 8002540:	e236      	b.n	80029b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4413      	add	r3, r2
 800254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b08      	cmp	r3, #8
 8002556:	d12b      	bne.n	80025b0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002564:	461a      	mov	r2, r3
 8002566:	2308      	movs	r3, #8
 8002568:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	0151      	lsls	r1, r2, #5
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	440a      	add	r2, r1
 8002580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f002 fc9e 	bl	8004ed6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	440b      	add	r3, r1
 80025a8:	335d      	adds	r3, #93	; 0x5d
 80025aa:	2205      	movs	r2, #5
 80025ac:	701a      	strb	r2, [r3, #0]
}
 80025ae:	e1ff      	b.n	80029b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	d155      	bne.n	8002672 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	440b      	add	r3, r1
 80025d4:	3358      	adds	r3, #88	; 0x58
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	440b      	add	r3, r1
 80025e8:	335d      	adds	r3, #93	; 0x5d
 80025ea:	2203      	movs	r2, #3
 80025ec:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	440b      	add	r3, r1
 80025fc:	333d      	adds	r3, #61	; 0x3d
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d114      	bne.n	800262e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	440b      	add	r3, r1
 8002612:	333c      	adds	r3, #60	; 0x3c
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	333d      	adds	r3, #61	; 0x3d
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	0151      	lsls	r1, r2, #5
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	440a      	add	r2, r1
 8002644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f002 fc3c 	bl	8004ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4413      	add	r3, r2
 8002666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266a:	461a      	mov	r2, r3
 800266c:	2310      	movs	r3, #16
 800266e:	6093      	str	r3, [r2, #8]
}
 8002670:	e19e      	b.n	80029b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002684:	2b80      	cmp	r3, #128	; 0x80
 8002686:	d12b      	bne.n	80026e0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	0151      	lsls	r1, r2, #5
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	440a      	add	r2, r1
 800269e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	4611      	mov	r1, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f002 fc0f 	bl	8004ed6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	335d      	adds	r3, #93	; 0x5d
 80026c8:	2206      	movs	r2, #6
 80026ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	461a      	mov	r2, r3
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	6093      	str	r3, [r2, #8]
}
 80026de:	e167      	b.n	80029b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f6:	d135      	bne.n	8002764 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	0151      	lsls	r1, r2, #5
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	440a      	add	r2, r1
 800270e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fbd7 	bl	8004ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002734:	461a      	mov	r2, r3
 8002736:	2310      	movs	r3, #16
 8002738:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4413      	add	r3, r2
 8002742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002746:	461a      	mov	r2, r3
 8002748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800274c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	335d      	adds	r3, #93	; 0x5d
 800275e:	2208      	movs	r2, #8
 8002760:	701a      	strb	r2, [r3, #0]
}
 8002762:	e125      	b.n	80029b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b02      	cmp	r3, #2
 8002778:	f040 811a 	bne.w	80029b0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	0151      	lsls	r1, r2, #5
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	440a      	add	r2, r1
 8002792:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002796:	f023 0302 	bic.w	r3, r3, #2
 800279a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	335d      	adds	r3, #93	; 0x5d
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d137      	bne.n	8002822 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	335c      	adds	r3, #92	; 0x5c
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	440b      	add	r3, r1
 80027d4:	333f      	adds	r3, #63	; 0x3f
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d00b      	beq.n	80027f4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	333f      	adds	r3, #63	; 0x3f
 80027ec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	f040 80c5 	bne.w	800297e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	440b      	add	r3, r1
 8002802:	3351      	adds	r3, #81	; 0x51
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	f083 0301 	eor.w	r3, r3, #1
 800280a:	b2d8      	uxtb	r0, r3
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	440b      	add	r3, r1
 800281a:	3351      	adds	r3, #81	; 0x51
 800281c:	4602      	mov	r2, r0
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e0ad      	b.n	800297e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	440b      	add	r3, r1
 8002830:	335d      	adds	r3, #93	; 0x5d
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d10a      	bne.n	800284e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	440b      	add	r3, r1
 8002846:	335c      	adds	r3, #92	; 0x5c
 8002848:	2202      	movs	r2, #2
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e097      	b.n	800297e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	440b      	add	r3, r1
 800285c:	335d      	adds	r3, #93	; 0x5d
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b04      	cmp	r3, #4
 8002862:	d10a      	bne.n	800287a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	335c      	adds	r3, #92	; 0x5c
 8002874:	2202      	movs	r2, #2
 8002876:	701a      	strb	r2, [r3, #0]
 8002878:	e081      	b.n	800297e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	440b      	add	r3, r1
 8002888:	335d      	adds	r3, #93	; 0x5d
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b05      	cmp	r3, #5
 800288e:	d10a      	bne.n	80028a6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	335c      	adds	r3, #92	; 0x5c
 80028a0:	2205      	movs	r2, #5
 80028a2:	701a      	strb	r2, [r3, #0]
 80028a4:	e06b      	b.n	800297e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	335d      	adds	r3, #93	; 0x5d
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b06      	cmp	r3, #6
 80028ba:	d00a      	beq.n	80028d2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	440b      	add	r3, r1
 80028ca:	335d      	adds	r3, #93	; 0x5d
 80028cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d155      	bne.n	800297e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	3358      	adds	r3, #88	; 0x58
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	1c59      	adds	r1, r3, #1
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4403      	add	r3, r0
 80028f4:	3358      	adds	r3, #88	; 0x58
 80028f6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	3358      	adds	r3, #88	; 0x58
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d914      	bls.n	8002938 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	3358      	adds	r3, #88	; 0x58
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	440b      	add	r3, r1
 8002930:	335c      	adds	r3, #92	; 0x5c
 8002932:	2204      	movs	r2, #4
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	e009      	b.n	800294c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	335c      	adds	r3, #92	; 0x5c
 8002948:	2202      	movs	r2, #2
 800294a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002962:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800296a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	461a      	mov	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298a:	461a      	mov	r2, r3
 800298c:	2302      	movs	r3, #2
 800298e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	b2d8      	uxtb	r0, r3
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	335c      	adds	r3, #92	; 0x5c
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	4601      	mov	r1, r0
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f004 fb08 	bl	8006fc0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029b0:	bf00      	nop
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	0c5b      	lsrs	r3, r3, #17
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d003      	beq.n	80029fc <HCD_RXQLVL_IRQHandler+0x44>
 80029f4:	2b05      	cmp	r3, #5
 80029f6:	f000 8082 	beq.w	8002afe <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80029fa:	e083      	b.n	8002b04 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d07f      	beq.n	8002b02 <HCD_RXQLVL_IRQHandler+0x14a>
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	3344      	adds	r3, #68	; 0x44
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d074      	beq.n	8002b02 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	440b      	add	r3, r1
 8002a2a:	3344      	adds	r3, #68	; 0x44
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	b292      	uxth	r2, r2
 8002a32:	4619      	mov	r1, r3
 8002a34:	f001 fdef 	bl	8004616 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	3344      	adds	r3, #68	; 0x44
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	18d1      	adds	r1, r2, r3
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4403      	add	r3, r0
 8002a5c:	3344      	adds	r3, #68	; 0x44
 8002a5e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	334c      	adds	r3, #76	; 0x4c
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	18d1      	adds	r1, r2, r3
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4403      	add	r3, r0
 8002a84:	334c      	adds	r3, #76	; 0x4c
 8002a86:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <HCD_RXQLVL_IRQHandler+0x154>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d031      	beq.n	8002b02 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ab4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002abc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	3350      	adds	r3, #80	; 0x50
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	f083 0301 	eor.w	r3, r3, #1
 8002ae6:	b2d8      	uxtb	r0, r3
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	440b      	add	r3, r1
 8002af6:	3350      	adds	r3, #80	; 0x50
 8002af8:	4602      	mov	r2, r0
 8002afa:	701a      	strb	r2, [r3, #0]
      break;
 8002afc:	e001      	b.n	8002b02 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002afe:	bf00      	nop
 8002b00:	e000      	b.n	8002b04 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002b02:	bf00      	nop
  }
}
 8002b04:	bf00      	nop
 8002b06:	3728      	adds	r7, #40	; 0x28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	1ff80000 	.word	0x1ff80000

08002b10 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b3c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d113      	bne.n	8002b70 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d10a      	bne.n	8002b68 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699a      	ldr	r2, [r3, #24]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002b60:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f004 fa10 	bl	8006f88 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f043 0302 	orr.w	r3, r3, #2
 8002b6e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d147      	bne.n	8002c0a <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f043 0308 	orr.w	r3, r3, #8
 8002b80:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d129      	bne.n	8002be0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d113      	bne.n	8002bbc <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002b9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b9e:	d106      	bne.n	8002bae <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 fe70 	bl	800488c <USB_InitFSLSPClkSel>
 8002bac:	e011      	b.n	8002bd2 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f001 fe69 	bl	800488c <USB_InitFSLSPClkSel>
 8002bba:	e00a      	b.n	8002bd2 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d106      	bne.n	8002bd2 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002bd0:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f004 fa02 	bl	8006fdc <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f004 f9d5 	bl	8006f88 <HAL_HCD_Connect_Callback>
 8002bde:	e014      	b.n	8002c0a <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f004 fa09 	bl	8006ff8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002bf4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002bf8:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c08:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 0320 	and.w	r3, r3, #32
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d103      	bne.n	8002c1c <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f043 0320 	orr.w	r3, r3, #32
 8002c1a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c22:	461a      	mov	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	6013      	str	r3, [r2, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e11f      	b.n	8002e82 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fd fe8e 	bl	8000978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c94:	f001 f9de 	bl	8004054 <HAL_RCC_GetPCLK1Freq>
 8002c98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a7b      	ldr	r2, [pc, #492]	; (8002e8c <HAL_I2C_Init+0x25c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d807      	bhi.n	8002cb4 <HAL_I2C_Init+0x84>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a7a      	ldr	r2, [pc, #488]	; (8002e90 <HAL_I2C_Init+0x260>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	bf94      	ite	ls
 8002cac:	2301      	movls	r3, #1
 8002cae:	2300      	movhi	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	e006      	b.n	8002cc2 <HAL_I2C_Init+0x92>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a77      	ldr	r2, [pc, #476]	; (8002e94 <HAL_I2C_Init+0x264>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	bf94      	ite	ls
 8002cbc:	2301      	movls	r3, #1
 8002cbe:	2300      	movhi	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0db      	b.n	8002e82 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a72      	ldr	r2, [pc, #456]	; (8002e98 <HAL_I2C_Init+0x268>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0c9b      	lsrs	r3, r3, #18
 8002cd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a64      	ldr	r2, [pc, #400]	; (8002e8c <HAL_I2C_Init+0x25c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d802      	bhi.n	8002d04 <HAL_I2C_Init+0xd4>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3301      	adds	r3, #1
 8002d02:	e009      	b.n	8002d18 <HAL_I2C_Init+0xe8>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	4a63      	ldr	r2, [pc, #396]	; (8002e9c <HAL_I2C_Init+0x26c>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	3301      	adds	r3, #1
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4956      	ldr	r1, [pc, #344]	; (8002e8c <HAL_I2C_Init+0x25c>)
 8002d34:	428b      	cmp	r3, r1
 8002d36:	d80d      	bhi.n	8002d54 <HAL_I2C_Init+0x124>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e59      	subs	r1, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d46:	3301      	adds	r3, #1
 8002d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	bf38      	it	cc
 8002d50:	2304      	movcc	r3, #4
 8002d52:	e04f      	b.n	8002df4 <HAL_I2C_Init+0x1c4>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d111      	bne.n	8002d80 <HAL_I2C_Init+0x150>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e58      	subs	r0, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	440b      	add	r3, r1
 8002d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	e012      	b.n	8002da6 <HAL_I2C_Init+0x176>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1e58      	subs	r0, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6859      	ldr	r1, [r3, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	0099      	lsls	r1, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d96:	3301      	adds	r3, #1
 8002d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_I2C_Init+0x17e>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e022      	b.n	8002df4 <HAL_I2C_Init+0x1c4>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10e      	bne.n	8002dd4 <HAL_I2C_Init+0x1a4>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1e58      	subs	r0, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6859      	ldr	r1, [r3, #4]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	440b      	add	r3, r1
 8002dc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd2:	e00f      	b.n	8002df4 <HAL_I2C_Init+0x1c4>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1e58      	subs	r0, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	0099      	lsls	r1, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dea:	3301      	adds	r3, #1
 8002dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	6809      	ldr	r1, [r1, #0]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6911      	ldr	r1, [r2, #16]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68d2      	ldr	r2, [r2, #12]
 8002e2e:	4311      	orrs	r1, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	430b      	orrs	r3, r1
 8002e36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	000186a0 	.word	0x000186a0
 8002e90:	001e847f 	.word	0x001e847f
 8002e94:	003d08ff 	.word	0x003d08ff
 8002e98:	431bde83 	.word	0x431bde83
 8002e9c:	10624dd3 	.word	0x10624dd3

08002ea0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e128      	b.n	8003104 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d109      	bne.n	8002ed2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a90      	ldr	r2, [pc, #576]	; (800310c <HAL_I2S_Init+0x26c>)
 8002eca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7fd fd9b 	bl	8000a08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ee8:	f023 030f 	bic.w	r3, r3, #15
 8002eec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d060      	beq.n	8002fc0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f06:	2310      	movs	r3, #16
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	e001      	b.n	8002f10 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d802      	bhi.n	8002f1e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f1e:	2001      	movs	r0, #1
 8002f20:	f001 f98e 	bl	8004240 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f24:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2e:	d125      	bne.n	8002f7c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d010      	beq.n	8002f5a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f54:	3305      	adds	r3, #5
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	e01f      	b.n	8002f9a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f76:	3305      	adds	r3, #5
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	e00e      	b.n	8002f9a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f96:	3305      	adds	r3, #5
 8002f98:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4a5c      	ldr	r2, [pc, #368]	; (8003110 <HAL_I2S_Init+0x270>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	08db      	lsrs	r3, r3, #3
 8002fa4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	e003      	b.n	8002fc8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d902      	bls.n	8002fd4 <HAL_I2S_Init+0x134>
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	2bff      	cmp	r3, #255	; 0xff
 8002fd2:	d907      	bls.n	8002fe4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	f043 0210 	orr.w	r2, r3, #16
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e08f      	b.n	8003104 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	ea42 0103 	orr.w	r1, r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003002:	f023 030f 	bic.w	r3, r3, #15
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6851      	ldr	r1, [r2, #4]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6892      	ldr	r2, [r2, #8]
 800300e:	4311      	orrs	r1, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	68d2      	ldr	r2, [r2, #12]
 8003014:	4311      	orrs	r1, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6992      	ldr	r2, [r2, #24]
 800301a:	430a      	orrs	r2, r1
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003026:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d161      	bne.n	80030f4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a38      	ldr	r2, [pc, #224]	; (8003114 <HAL_I2S_Init+0x274>)
 8003034:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a37      	ldr	r2, [pc, #220]	; (8003118 <HAL_I2S_Init+0x278>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d101      	bne.n	8003044 <HAL_I2S_Init+0x1a4>
 8003040:	4b36      	ldr	r3, [pc, #216]	; (800311c <HAL_I2S_Init+0x27c>)
 8003042:	e001      	b.n	8003048 <HAL_I2S_Init+0x1a8>
 8003044:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	4932      	ldr	r1, [pc, #200]	; (8003118 <HAL_I2S_Init+0x278>)
 8003050:	428a      	cmp	r2, r1
 8003052:	d101      	bne.n	8003058 <HAL_I2S_Init+0x1b8>
 8003054:	4a31      	ldr	r2, [pc, #196]	; (800311c <HAL_I2S_Init+0x27c>)
 8003056:	e001      	b.n	800305c <HAL_I2S_Init+0x1bc>
 8003058:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800305c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003060:	f023 030f 	bic.w	r3, r3, #15
 8003064:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2b      	ldr	r2, [pc, #172]	; (8003118 <HAL_I2S_Init+0x278>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d101      	bne.n	8003074 <HAL_I2S_Init+0x1d4>
 8003070:	4b2a      	ldr	r3, [pc, #168]	; (800311c <HAL_I2S_Init+0x27c>)
 8003072:	e001      	b.n	8003078 <HAL_I2S_Init+0x1d8>
 8003074:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003078:	2202      	movs	r2, #2
 800307a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a25      	ldr	r2, [pc, #148]	; (8003118 <HAL_I2S_Init+0x278>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d101      	bne.n	800308a <HAL_I2S_Init+0x1ea>
 8003086:	4b25      	ldr	r3, [pc, #148]	; (800311c <HAL_I2S_Init+0x27c>)
 8003088:	e001      	b.n	800308e <HAL_I2S_Init+0x1ee>
 800308a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800309a:	d003      	beq.n	80030a4 <HAL_I2S_Init+0x204>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d103      	bne.n	80030ac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80030a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	e001      	b.n	80030b0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80030ac:	2300      	movs	r3, #0
 80030ae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	b299      	uxth	r1, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80030c6:	4303      	orrs	r3, r0
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	430b      	orrs	r3, r1
 80030cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80030ce:	4313      	orrs	r3, r2
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	897b      	ldrh	r3, [r7, #10]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030dc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <HAL_I2S_Init+0x278>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d101      	bne.n	80030ec <HAL_I2S_Init+0x24c>
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <HAL_I2S_Init+0x27c>)
 80030ea:	e001      	b.n	80030f0 <HAL_I2S_Init+0x250>
 80030ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030f0:	897a      	ldrh	r2, [r7, #10]
 80030f2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3720      	adds	r7, #32
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	08003217 	.word	0x08003217
 8003110:	cccccccd 	.word	0xcccccccd
 8003114:	0800332d 	.word	0x0800332d
 8003118:	40003800 	.word	0x40003800
 800311c:	40003400 	.word	0x40003400

08003120 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	881a      	ldrh	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	1c9a      	adds	r2, r3, #2
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10e      	bne.n	80031b0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031a0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff ffb8 	bl	8003120 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	b292      	uxth	r2, r2
 80031cc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	1c9a      	adds	r2, r3, #2
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10e      	bne.n	800320e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031fe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff ff93 	bl	8003134 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b086      	sub	sp, #24
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b04      	cmp	r3, #4
 8003230:	d13a      	bne.n	80032a8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d109      	bne.n	8003250 <I2S_IRQHandler+0x3a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003246:	2b40      	cmp	r3, #64	; 0x40
 8003248:	d102      	bne.n	8003250 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff ffb4 	bl	80031b8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d126      	bne.n	80032a8 <I2S_IRQHandler+0x92>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b20      	cmp	r3, #32
 8003266:	d11f      	bne.n	80032a8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003276:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003278:	2300      	movs	r3, #0
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	f043 0202 	orr.w	r2, r3, #2
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff ff50 	bl	8003148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d136      	bne.n	8003322 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d109      	bne.n	80032d2 <I2S_IRQHandler+0xbc>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c8:	2b80      	cmp	r3, #128	; 0x80
 80032ca:	d102      	bne.n	80032d2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ff45 	bl	800315c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d122      	bne.n	8003322 <I2S_IRQHandler+0x10c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d11b      	bne.n	8003322 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032f8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	f043 0204 	orr.w	r2, r3, #4
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff ff13 	bl	8003148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003322:	bf00      	nop
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4aa2      	ldr	r2, [pc, #648]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d101      	bne.n	800334a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003346:	4ba2      	ldr	r3, [pc, #648]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003348:	e001      	b.n	800334e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800334a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a9b      	ldr	r2, [pc, #620]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d101      	bne.n	8003368 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003364:	4b9a      	ldr	r3, [pc, #616]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003366:	e001      	b.n	800336c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003368:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003378:	d004      	beq.n	8003384 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f040 8099 	bne.w	80034b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b02      	cmp	r3, #2
 800338c:	d107      	bne.n	800339e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f925 	bl	80035e8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d107      	bne.n	80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f9c8 	bl	8003748 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b40      	cmp	r3, #64	; 0x40
 80033c0:	d13a      	bne.n	8003438 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d035      	beq.n	8003438 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a7e      	ldr	r2, [pc, #504]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d101      	bne.n	80033da <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80033d6:	4b7e      	ldr	r3, [pc, #504]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033d8:	e001      	b.n	80033de <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80033da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4979      	ldr	r1, [pc, #484]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033e6:	428b      	cmp	r3, r1
 80033e8:	d101      	bne.n	80033ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80033ea:	4b79      	ldr	r3, [pc, #484]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033ec:	e001      	b.n	80033f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80033ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033f6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003406:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	f043 0202 	orr.w	r2, r3, #2
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff fe88 	bl	8003148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b08      	cmp	r3, #8
 8003440:	f040 80be 	bne.w	80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 80b8 	beq.w	80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800345e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a59      	ldr	r2, [pc, #356]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d101      	bne.n	800346e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800346a:	4b59      	ldr	r3, [pc, #356]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800346c:	e001      	b.n	8003472 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800346e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4954      	ldr	r1, [pc, #336]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800347a:	428b      	cmp	r3, r1
 800347c:	d101      	bne.n	8003482 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800347e:	4b54      	ldr	r3, [pc, #336]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003480:	e001      	b.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003482:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003486:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800348a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800348c:	2300      	movs	r3, #0
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	f043 0204 	orr.w	r2, r3, #4
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff fe4a 	bl	8003148 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034b4:	e084      	b.n	80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d107      	bne.n	80034d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8be 	bl	800364c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d107      	bne.n	80034ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f8fd 	bl	80036e4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	d12f      	bne.n	8003554 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d02a      	beq.n	8003554 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800350c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2e      	ldr	r2, [pc, #184]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003518:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800351a:	e001      	b.n	8003520 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800351c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4929      	ldr	r1, [pc, #164]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003528:	428b      	cmp	r3, r1
 800352a:	d101      	bne.n	8003530 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800352c:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800352e:	e001      	b.n	8003534 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003530:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003534:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003538:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	f043 0202 	orr.w	r2, r3, #2
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff fdfa 	bl	8003148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b08      	cmp	r3, #8
 800355c:	d131      	bne.n	80035c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d02c      	beq.n	80035c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a17      	ldr	r2, [pc, #92]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003572:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003574:	e001      	b.n	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003576:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4912      	ldr	r1, [pc, #72]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003582:	428b      	cmp	r3, r1
 8003584:	d101      	bne.n	800358a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003586:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003588:	e001      	b.n	800358e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800358a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800358e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003592:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035a2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	f043 0204 	orr.w	r2, r3, #4
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff fdc5 	bl	8003148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035be:	e000      	b.n	80035c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035c0:	bf00      	nop
}
 80035c2:	bf00      	nop
 80035c4:	3720      	adds	r7, #32
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40003800 	.word	0x40003800
 80035d0:	40003400 	.word	0x40003400

080035d4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	1c99      	adds	r1, r3, #2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6251      	str	r1, [r2, #36]	; 0x24
 80035fa:	881a      	ldrh	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d113      	bne.n	8003642 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003628:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d106      	bne.n	8003642 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ffc9 	bl	80035d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	1c99      	adds	r1, r3, #2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6251      	str	r1, [r2, #36]	; 0x24
 800365e:	8819      	ldrh	r1, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1d      	ldr	r2, [pc, #116]	; (80036dc <I2SEx_TxISR_I2SExt+0x90>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d101      	bne.n	800366e <I2SEx_TxISR_I2SExt+0x22>
 800366a:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <I2SEx_TxISR_I2SExt+0x94>)
 800366c:	e001      	b.n	8003672 <I2SEx_TxISR_I2SExt+0x26>
 800366e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003672:	460a      	mov	r2, r1
 8003674:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d121      	bne.n	80036d2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a12      	ldr	r2, [pc, #72]	; (80036dc <I2SEx_TxISR_I2SExt+0x90>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d101      	bne.n	800369c <I2SEx_TxISR_I2SExt+0x50>
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <I2SEx_TxISR_I2SExt+0x94>)
 800369a:	e001      	b.n	80036a0 <I2SEx_TxISR_I2SExt+0x54>
 800369c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	490d      	ldr	r1, [pc, #52]	; (80036dc <I2SEx_TxISR_I2SExt+0x90>)
 80036a8:	428b      	cmp	r3, r1
 80036aa:	d101      	bne.n	80036b0 <I2SEx_TxISR_I2SExt+0x64>
 80036ac:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <I2SEx_TxISR_I2SExt+0x94>)
 80036ae:	e001      	b.n	80036b4 <I2SEx_TxISR_I2SExt+0x68>
 80036b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d106      	bne.n	80036d2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ff81 	bl	80035d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40003800 	.word	0x40003800
 80036e0:	40003400 	.word	0x40003400

080036e4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68d8      	ldr	r0, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	1c99      	adds	r1, r3, #2
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80036fc:	b282      	uxth	r2, r0
 80036fe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d113      	bne.n	8003740 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003726:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ff4a 	bl	80035d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <I2SEx_RxISR_I2SExt+0x90>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d101      	bne.n	800375e <I2SEx_RxISR_I2SExt+0x16>
 800375a:	4b20      	ldr	r3, [pc, #128]	; (80037dc <I2SEx_RxISR_I2SExt+0x94>)
 800375c:	e001      	b.n	8003762 <I2SEx_RxISR_I2SExt+0x1a>
 800375e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003762:	68d8      	ldr	r0, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	1c99      	adds	r1, r3, #2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800376e:	b282      	uxth	r2, r0
 8003770:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d121      	bne.n	80037ce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <I2SEx_RxISR_I2SExt+0x90>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d101      	bne.n	8003798 <I2SEx_RxISR_I2SExt+0x50>
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <I2SEx_RxISR_I2SExt+0x94>)
 8003796:	e001      	b.n	800379c <I2SEx_RxISR_I2SExt+0x54>
 8003798:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	490d      	ldr	r1, [pc, #52]	; (80037d8 <I2SEx_RxISR_I2SExt+0x90>)
 80037a4:	428b      	cmp	r3, r1
 80037a6:	d101      	bne.n	80037ac <I2SEx_RxISR_I2SExt+0x64>
 80037a8:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <I2SEx_RxISR_I2SExt+0x94>)
 80037aa:	e001      	b.n	80037b0 <I2SEx_RxISR_I2SExt+0x68>
 80037ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037b4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d106      	bne.n	80037ce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff ff03 	bl	80035d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40003800 	.word	0x40003800
 80037dc:	40003400 	.word	0x40003400

080037e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e25b      	b.n	8003caa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d075      	beq.n	80038ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037fe:	4ba3      	ldr	r3, [pc, #652]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b04      	cmp	r3, #4
 8003808:	d00c      	beq.n	8003824 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800380a:	4ba0      	ldr	r3, [pc, #640]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003812:	2b08      	cmp	r3, #8
 8003814:	d112      	bne.n	800383c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003816:	4b9d      	ldr	r3, [pc, #628]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003822:	d10b      	bne.n	800383c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003824:	4b99      	ldr	r3, [pc, #612]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d05b      	beq.n	80038e8 <HAL_RCC_OscConfig+0x108>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d157      	bne.n	80038e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e236      	b.n	8003caa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003844:	d106      	bne.n	8003854 <HAL_RCC_OscConfig+0x74>
 8003846:	4b91      	ldr	r3, [pc, #580]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a90      	ldr	r2, [pc, #576]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 800384c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e01d      	b.n	8003890 <HAL_RCC_OscConfig+0xb0>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800385c:	d10c      	bne.n	8003878 <HAL_RCC_OscConfig+0x98>
 800385e:	4b8b      	ldr	r3, [pc, #556]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a8a      	ldr	r2, [pc, #552]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	4b88      	ldr	r3, [pc, #544]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a87      	ldr	r2, [pc, #540]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	e00b      	b.n	8003890 <HAL_RCC_OscConfig+0xb0>
 8003878:	4b84      	ldr	r3, [pc, #528]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a83      	ldr	r2, [pc, #524]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 800387e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	4b81      	ldr	r3, [pc, #516]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a80      	ldr	r2, [pc, #512]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 800388a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800388e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d013      	beq.n	80038c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fd fa70 	bl	8000d7c <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038a0:	f7fd fa6c 	bl	8000d7c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e1fb      	b.n	8003caa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b2:	4b76      	ldr	r3, [pc, #472]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCC_OscConfig+0xc0>
 80038be:	e014      	b.n	80038ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c0:	f7fd fa5c 	bl	8000d7c <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c8:	f7fd fa58 	bl	8000d7c <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	; 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e1e7      	b.n	8003caa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038da:	4b6c      	ldr	r3, [pc, #432]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0xe8>
 80038e6:	e000      	b.n	80038ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d063      	beq.n	80039be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038f6:	4b65      	ldr	r3, [pc, #404]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00b      	beq.n	800391a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003902:	4b62      	ldr	r3, [pc, #392]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800390a:	2b08      	cmp	r3, #8
 800390c:	d11c      	bne.n	8003948 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800390e:	4b5f      	ldr	r3, [pc, #380]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d116      	bne.n	8003948 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800391a:	4b5c      	ldr	r3, [pc, #368]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_RCC_OscConfig+0x152>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d001      	beq.n	8003932 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e1bb      	b.n	8003caa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003932:	4b56      	ldr	r3, [pc, #344]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4952      	ldr	r1, [pc, #328]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003946:	e03a      	b.n	80039be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d020      	beq.n	8003992 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003950:	4b4f      	ldr	r3, [pc, #316]	; (8003a90 <HAL_RCC_OscConfig+0x2b0>)
 8003952:	2201      	movs	r2, #1
 8003954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003956:	f7fd fa11 	bl	8000d7c <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800395e:	f7fd fa0d 	bl	8000d7c <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e19c      	b.n	8003caa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003970:	4b46      	ldr	r3, [pc, #280]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397c:	4b43      	ldr	r3, [pc, #268]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4940      	ldr	r1, [pc, #256]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 800398c:	4313      	orrs	r3, r2
 800398e:	600b      	str	r3, [r1, #0]
 8003990:	e015      	b.n	80039be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003992:	4b3f      	ldr	r3, [pc, #252]	; (8003a90 <HAL_RCC_OscConfig+0x2b0>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd f9f0 	bl	8000d7c <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039a0:	f7fd f9ec 	bl	8000d7c <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e17b      	b.n	8003caa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b2:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d030      	beq.n	8003a2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d016      	beq.n	8003a00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d2:	4b30      	ldr	r3, [pc, #192]	; (8003a94 <HAL_RCC_OscConfig+0x2b4>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d8:	f7fd f9d0 	bl	8000d7c <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039e0:	f7fd f9cc 	bl	8000d7c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e15b      	b.n	8003caa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f2:	4b26      	ldr	r3, [pc, #152]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x200>
 80039fe:	e015      	b.n	8003a2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a00:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <HAL_RCC_OscConfig+0x2b4>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a06:	f7fd f9b9 	bl	8000d7c <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a0e:	f7fd f9b5 	bl	8000d7c <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e144      	b.n	8003caa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a20:	4b1a      	ldr	r3, [pc, #104]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f0      	bne.n	8003a0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80a0 	beq.w	8003b7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3e:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10f      	bne.n	8003a6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	4a0e      	ldr	r2, [pc, #56]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a58:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a66:	2301      	movs	r3, #1
 8003a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_RCC_OscConfig+0x2b8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d121      	bne.n	8003aba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a76:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <HAL_RCC_OscConfig+0x2b8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a07      	ldr	r2, [pc, #28]	; (8003a98 <HAL_RCC_OscConfig+0x2b8>)
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a82:	f7fd f97b 	bl	8000d7c <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a88:	e011      	b.n	8003aae <HAL_RCC_OscConfig+0x2ce>
 8003a8a:	bf00      	nop
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	42470000 	.word	0x42470000
 8003a94:	42470e80 	.word	0x42470e80
 8003a98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a9c:	f7fd f96e 	bl	8000d7c <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e0fd      	b.n	8003caa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aae:	4b81      	ldr	r3, [pc, #516]	; (8003cb4 <HAL_RCC_OscConfig+0x4d4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0f0      	beq.n	8003a9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d106      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x2f0>
 8003ac2:	4b7d      	ldr	r3, [pc, #500]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac6:	4a7c      	ldr	r2, [pc, #496]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ace:	e01c      	b.n	8003b0a <HAL_RCC_OscConfig+0x32a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b05      	cmp	r3, #5
 8003ad6:	d10c      	bne.n	8003af2 <HAL_RCC_OscConfig+0x312>
 8003ad8:	4b77      	ldr	r3, [pc, #476]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003adc:	4a76      	ldr	r2, [pc, #472]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003ade:	f043 0304 	orr.w	r3, r3, #4
 8003ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae4:	4b74      	ldr	r3, [pc, #464]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae8:	4a73      	ldr	r2, [pc, #460]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6713      	str	r3, [r2, #112]	; 0x70
 8003af0:	e00b      	b.n	8003b0a <HAL_RCC_OscConfig+0x32a>
 8003af2:	4b71      	ldr	r3, [pc, #452]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	4a70      	ldr	r2, [pc, #448]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	6713      	str	r3, [r2, #112]	; 0x70
 8003afe:	4b6e      	ldr	r3, [pc, #440]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	4a6d      	ldr	r2, [pc, #436]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003b04:	f023 0304 	bic.w	r3, r3, #4
 8003b08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d015      	beq.n	8003b3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b12:	f7fd f933 	bl	8000d7c <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b18:	e00a      	b.n	8003b30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b1a:	f7fd f92f 	bl	8000d7c <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e0bc      	b.n	8003caa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b30:	4b61      	ldr	r3, [pc, #388]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ee      	beq.n	8003b1a <HAL_RCC_OscConfig+0x33a>
 8003b3c:	e014      	b.n	8003b68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3e:	f7fd f91d 	bl	8000d7c <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b44:	e00a      	b.n	8003b5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b46:	f7fd f919 	bl	8000d7c <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e0a6      	b.n	8003caa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b5c:	4b56      	ldr	r3, [pc, #344]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1ee      	bne.n	8003b46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b68:	7dfb      	ldrb	r3, [r7, #23]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d105      	bne.n	8003b7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b6e:	4b52      	ldr	r3, [pc, #328]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	4a51      	ldr	r2, [pc, #324]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8092 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b84:	4b4c      	ldr	r3, [pc, #304]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 030c 	and.w	r3, r3, #12
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d05c      	beq.n	8003c4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d141      	bne.n	8003c1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b98:	4b48      	ldr	r3, [pc, #288]	; (8003cbc <HAL_RCC_OscConfig+0x4dc>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9e:	f7fd f8ed 	bl	8000d7c <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba6:	f7fd f8e9 	bl	8000d7c <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e078      	b.n	8003caa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb8:	4b3f      	ldr	r3, [pc, #252]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f0      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	019b      	lsls	r3, r3, #6
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	085b      	lsrs	r3, r3, #1
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	041b      	lsls	r3, r3, #16
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	061b      	lsls	r3, r3, #24
 8003be8:	4933      	ldr	r1, [pc, #204]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bee:	4b33      	ldr	r3, [pc, #204]	; (8003cbc <HAL_RCC_OscConfig+0x4dc>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fd f8c2 	bl	8000d7c <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bfc:	f7fd f8be 	bl	8000d7c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e04d      	b.n	8003caa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0e:	4b2a      	ldr	r3, [pc, #168]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0x41c>
 8003c1a:	e045      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1c:	4b27      	ldr	r3, [pc, #156]	; (8003cbc <HAL_RCC_OscConfig+0x4dc>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c22:	f7fd f8ab 	bl	8000d7c <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c2a:	f7fd f8a7 	bl	8000d7c <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e036      	b.n	8003caa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3c:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f0      	bne.n	8003c2a <HAL_RCC_OscConfig+0x44a>
 8003c48:	e02e      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e029      	b.n	8003caa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c56:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <HAL_RCC_OscConfig+0x4d8>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d11c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d115      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c7e:	4013      	ands	r3, r2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d10d      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d106      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e000      	b.n	8003caa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40007000 	.word	0x40007000
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	42470060 	.word	0x42470060

08003cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0cc      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cd4:	4b68      	ldr	r3, [pc, #416]	; (8003e78 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d90c      	bls.n	8003cfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce2:	4b65      	ldr	r3, [pc, #404]	; (8003e78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cea:	4b63      	ldr	r3, [pc, #396]	; (8003e78 <HAL_RCC_ClockConfig+0x1b8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0b8      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d020      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d14:	4b59      	ldr	r3, [pc, #356]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	4a58      	ldr	r2, [pc, #352]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d2c:	4b53      	ldr	r3, [pc, #332]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	4a52      	ldr	r2, [pc, #328]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d38:	4b50      	ldr	r3, [pc, #320]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	494d      	ldr	r1, [pc, #308]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d044      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5e:	4b47      	ldr	r3, [pc, #284]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d119      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e07f      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d003      	beq.n	8003d7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d107      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7e:	4b3f      	ldr	r3, [pc, #252]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e06f      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8e:	4b3b      	ldr	r3, [pc, #236]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e067      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d9e:	4b37      	ldr	r3, [pc, #220]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f023 0203 	bic.w	r2, r3, #3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	4934      	ldr	r1, [pc, #208]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db0:	f7fc ffe4 	bl	8000d7c <HAL_GetTick>
 8003db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db6:	e00a      	b.n	8003dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db8:	f7fc ffe0 	bl	8000d7c <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e04f      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dce:	4b2b      	ldr	r3, [pc, #172]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 020c 	and.w	r2, r3, #12
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d1eb      	bne.n	8003db8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de0:	4b25      	ldr	r3, [pc, #148]	; (8003e78 <HAL_RCC_ClockConfig+0x1b8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d20c      	bcs.n	8003e08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dee:	4b22      	ldr	r3, [pc, #136]	; (8003e78 <HAL_RCC_ClockConfig+0x1b8>)
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df6:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <HAL_RCC_ClockConfig+0x1b8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e032      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e14:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4916      	ldr	r1, [pc, #88]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d009      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e32:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	490e      	ldr	r1, [pc, #56]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e46:	f000 f821 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8003e4a:	4601      	mov	r1, r0
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <HAL_RCC_ClockConfig+0x1c0>)
 8003e58:	5cd3      	ldrb	r3, [r2, r3]
 8003e5a:	fa21 f303 	lsr.w	r3, r1, r3
 8003e5e:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <HAL_RCC_ClockConfig+0x1c4>)
 8003e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e62:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <HAL_RCC_ClockConfig+0x1c8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fc ff44 	bl	8000cf4 <HAL_InitTick>

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40023c00 	.word	0x40023c00
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	08007610 	.word	0x08007610
 8003e84:	20000000 	.word	0x20000000
 8003e88:	20000004 	.word	0x20000004

08003e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ea2:	4b63      	ldr	r3, [pc, #396]	; (8004030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 030c 	and.w	r3, r3, #12
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d007      	beq.n	8003ebe <HAL_RCC_GetSysClockFreq+0x32>
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d008      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x38>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f040 80b4 	bne.w	8004020 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eb8:	4b5e      	ldr	r3, [pc, #376]	; (8004034 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003eba:	60bb      	str	r3, [r7, #8]
       break;
 8003ebc:	e0b3      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ebe:	4b5e      	ldr	r3, [pc, #376]	; (8004038 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003ec0:	60bb      	str	r3, [r7, #8]
      break;
 8003ec2:	e0b0      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ec4:	4b5a      	ldr	r3, [pc, #360]	; (8004030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ecc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ece:	4b58      	ldr	r3, [pc, #352]	; (8004030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d04a      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eda:	4b55      	ldr	r3, [pc, #340]	; (8004030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	099b      	lsrs	r3, r3, #6
 8003ee0:	f04f 0400 	mov.w	r4, #0
 8003ee4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	ea03 0501 	and.w	r5, r3, r1
 8003ef0:	ea04 0602 	and.w	r6, r4, r2
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	4632      	mov	r2, r6
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	f04f 0400 	mov.w	r4, #0
 8003f00:	0154      	lsls	r4, r2, #5
 8003f02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f06:	014b      	lsls	r3, r1, #5
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	1b49      	subs	r1, r1, r5
 8003f0e:	eb62 0206 	sbc.w	r2, r2, r6
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	f04f 0400 	mov.w	r4, #0
 8003f1a:	0194      	lsls	r4, r2, #6
 8003f1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f20:	018b      	lsls	r3, r1, #6
 8003f22:	1a5b      	subs	r3, r3, r1
 8003f24:	eb64 0402 	sbc.w	r4, r4, r2
 8003f28:	f04f 0100 	mov.w	r1, #0
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	00e2      	lsls	r2, r4, #3
 8003f32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f36:	00d9      	lsls	r1, r3, #3
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4614      	mov	r4, r2
 8003f3c:	195b      	adds	r3, r3, r5
 8003f3e:	eb44 0406 	adc.w	r4, r4, r6
 8003f42:	f04f 0100 	mov.w	r1, #0
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	0262      	lsls	r2, r4, #9
 8003f4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f50:	0259      	lsls	r1, r3, #9
 8003f52:	460b      	mov	r3, r1
 8003f54:	4614      	mov	r4, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	4621      	mov	r1, r4
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f04f 0400 	mov.w	r4, #0
 8003f60:	461a      	mov	r2, r3
 8003f62:	4623      	mov	r3, r4
 8003f64:	f7fc f930 	bl	80001c8 <__aeabi_uldivmod>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	e049      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f70:	4b2f      	ldr	r3, [pc, #188]	; (8004030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	099b      	lsrs	r3, r3, #6
 8003f76:	f04f 0400 	mov.w	r4, #0
 8003f7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	ea03 0501 	and.w	r5, r3, r1
 8003f86:	ea04 0602 	and.w	r6, r4, r2
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	4632      	mov	r2, r6
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	f04f 0400 	mov.w	r4, #0
 8003f96:	0154      	lsls	r4, r2, #5
 8003f98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f9c:	014b      	lsls	r3, r1, #5
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4622      	mov	r2, r4
 8003fa2:	1b49      	subs	r1, r1, r5
 8003fa4:	eb62 0206 	sbc.w	r2, r2, r6
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	f04f 0400 	mov.w	r4, #0
 8003fb0:	0194      	lsls	r4, r2, #6
 8003fb2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fb6:	018b      	lsls	r3, r1, #6
 8003fb8:	1a5b      	subs	r3, r3, r1
 8003fba:	eb64 0402 	sbc.w	r4, r4, r2
 8003fbe:	f04f 0100 	mov.w	r1, #0
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	00e2      	lsls	r2, r4, #3
 8003fc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003fcc:	00d9      	lsls	r1, r3, #3
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4614      	mov	r4, r2
 8003fd2:	195b      	adds	r3, r3, r5
 8003fd4:	eb44 0406 	adc.w	r4, r4, r6
 8003fd8:	f04f 0100 	mov.w	r1, #0
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	02a2      	lsls	r2, r4, #10
 8003fe2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003fe6:	0299      	lsls	r1, r3, #10
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4614      	mov	r4, r2
 8003fec:	4618      	mov	r0, r3
 8003fee:	4621      	mov	r1, r4
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f04f 0400 	mov.w	r4, #0
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	4623      	mov	r3, r4
 8003ffa:	f7fc f8e5 	bl	80001c8 <__aeabi_uldivmod>
 8003ffe:	4603      	mov	r3, r0
 8004000:	460c      	mov	r4, r1
 8004002:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004004:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	0c1b      	lsrs	r3, r3, #16
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	3301      	adds	r3, #1
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	fbb2 f3f3 	udiv	r3, r2, r3
 800401c:	60bb      	str	r3, [r7, #8]
      break;
 800401e:	e002      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004020:	4b04      	ldr	r3, [pc, #16]	; (8004034 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004022:	60bb      	str	r3, [r7, #8]
      break;
 8004024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004026:	68bb      	ldr	r3, [r7, #8]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004030:	40023800 	.word	0x40023800
 8004034:	00f42400 	.word	0x00f42400
 8004038:	007a1200 	.word	0x007a1200

0800403c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004040:	4b03      	ldr	r3, [pc, #12]	; (8004050 <HAL_RCC_GetHCLKFreq+0x14>)
 8004042:	681b      	ldr	r3, [r3, #0]
}
 8004044:	4618      	mov	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	20000000 	.word	0x20000000

08004054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004058:	f7ff fff0 	bl	800403c <HAL_RCC_GetHCLKFreq>
 800405c:	4601      	mov	r1, r0
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	0a9b      	lsrs	r3, r3, #10
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	4a03      	ldr	r2, [pc, #12]	; (8004078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800406a:	5cd3      	ldrb	r3, [r2, r3]
 800406c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004070:	4618      	mov	r0, r3
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40023800 	.word	0x40023800
 8004078:	08007620 	.word	0x08007620

0800407c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d035      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040a4:	4b62      	ldr	r3, [pc, #392]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040aa:	f7fc fe67 	bl	8000d7c <HAL_GetTick>
 80040ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040b0:	e008      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040b2:	f7fc fe63 	bl	8000d7c <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e0b0      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040c4:	4b5b      	ldr	r3, [pc, #364]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1f0      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	019a      	lsls	r2, r3, #6
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	071b      	lsls	r3, r3, #28
 80040dc:	4955      	ldr	r1, [pc, #340]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040e4:	4b52      	ldr	r3, [pc, #328]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040ea:	f7fc fe47 	bl	8000d7c <HAL_GetTick>
 80040ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040f2:	f7fc fe43 	bl	8000d7c <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e090      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004104:	4b4b      	ldr	r3, [pc, #300]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8083 	beq.w	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	4b44      	ldr	r3, [pc, #272]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	4a43      	ldr	r2, [pc, #268]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412c:	6413      	str	r3, [r2, #64]	; 0x40
 800412e:	4b41      	ldr	r3, [pc, #260]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800413a:	4b3f      	ldr	r3, [pc, #252]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a3e      	ldr	r2, [pc, #248]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004144:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004146:	f7fc fe19 	bl	8000d7c <HAL_GetTick>
 800414a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800414e:	f7fc fe15 	bl	8000d7c <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e062      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004160:	4b35      	ldr	r3, [pc, #212]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800416c:	4b31      	ldr	r3, [pc, #196]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004170:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004174:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d02f      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	429a      	cmp	r2, r3
 8004188:	d028      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800418a:	4b2a      	ldr	r3, [pc, #168]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004192:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004194:	4b29      	ldr	r3, [pc, #164]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004196:	2201      	movs	r2, #1
 8004198:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800419a:	4b28      	ldr	r3, [pc, #160]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80041a0:	4a24      	ldr	r2, [pc, #144]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041a6:	4b23      	ldr	r3, [pc, #140]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d114      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80041b2:	f7fc fde3 	bl	8000d7c <HAL_GetTick>
 80041b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b8:	e00a      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ba:	f7fc fddf 	bl	8000d7c <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e02a      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d0:	4b18      	ldr	r3, [pc, #96]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0ee      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041e8:	d10d      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80041ea:	4b12      	ldr	r3, [pc, #72]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80041fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fe:	490d      	ldr	r1, [pc, #52]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004200:	4313      	orrs	r3, r2
 8004202:	608b      	str	r3, [r1, #8]
 8004204:	e005      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004206:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800420c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004210:	6093      	str	r3, [r2, #8]
 8004212:	4b08      	ldr	r3, [pc, #32]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004214:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800421e:	4905      	ldr	r1, [pc, #20]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004220:	4313      	orrs	r3, r2
 8004222:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	42470068 	.word	0x42470068
 8004234:	40023800 	.word	0x40023800
 8004238:	40007000 	.word	0x40007000
 800423c:	42470e40 	.word	0x42470e40

08004240 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d13d      	bne.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800425e:	4b22      	ldr	r3, [pc, #136]	; (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004266:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d004      	beq.n	8004278 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800426e:	2b01      	cmp	r3, #1
 8004270:	d12f      	bne.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004272:	4b1e      	ldr	r3, [pc, #120]	; (80042ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004274:	617b      	str	r3, [r7, #20]
          break;
 8004276:	e02f      	b.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004278:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004284:	d108      	bne.n	8004298 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004286:	4b18      	ldr	r3, [pc, #96]	; (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800428e:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004290:	fbb2 f3f3 	udiv	r3, r2, r3
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	e007      	b.n	80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004298:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042a0:	4a14      	ldr	r2, [pc, #80]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80042a8:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ae:	099b      	lsrs	r3, r3, #6
 80042b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	fb02 f303 	mul.w	r3, r2, r3
 80042ba:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c2:	0f1b      	lsrs	r3, r3, #28
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ce:	617b      	str	r3, [r7, #20]
          break;
 80042d0:	e002      	b.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
          break;
 80042d6:	bf00      	nop
        }
      }
      break;
 80042d8:	bf00      	nop
    }
  }
  return frequency;
 80042da:	697b      	ldr	r3, [r7, #20]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	40023800 	.word	0x40023800
 80042ec:	00bb8000 	.word	0x00bb8000
 80042f0:	007a1200 	.word	0x007a1200
 80042f4:	00f42400 	.word	0x00f42400

080042f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e056      	b.n	80043b8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d106      	bne.n	800432a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7fc fbd7 	bl	8000ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004340:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	ea42 0103 	orr.w	r1, r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	0c1b      	lsrs	r3, r3, #16
 8004388:	f003 0104 	and.w	r1, r3, #4
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69da      	ldr	r2, [r3, #28]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043c0:	b084      	sub	sp, #16
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	f107 001c 	add.w	r0, r7, #28
 80043ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d122      	bne.n	800441e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80043ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004402:	2b01      	cmp	r3, #1
 8004404:	d105      	bne.n	8004412 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f94a 	bl	80046ac <USB_CoreReset>
 8004418:	4603      	mov	r3, r0
 800441a:	73fb      	strb	r3, [r7, #15]
 800441c:	e01a      	b.n	8004454 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f93e 	bl	80046ac <USB_CoreReset>
 8004430:	4603      	mov	r3, r0
 8004432:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	639a      	str	r2, [r3, #56]	; 0x38
 8004446:	e005      	b.n	8004454 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	2b01      	cmp	r3, #1
 8004458:	d10b      	bne.n	8004472 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f043 0206 	orr.w	r2, r3, #6
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f043 0220 	orr.w	r2, r3, #32
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004472:	7bfb      	ldrb	r3, [r7, #15]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800447e:	b004      	add	sp, #16
 8004480:	4770      	bx	lr

08004482 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f043 0201 	orr.w	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f023 0201 	bic.w	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	460b      	mov	r3, r1
 80044d0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d106      	bne.n	80044f2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	60da      	str	r2, [r3, #12]
 80044f0:	e00b      	b.n	800450a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d106      	bne.n	8004506 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	60da      	str	r2, [r3, #12]
 8004504:	e001      	b.n	800450a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e003      	b.n	8004512 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800450a:	2032      	movs	r0, #50	; 0x32
 800450c:	f7fc fc42 	bl	8000d94 <HAL_Delay>

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	019b      	lsls	r3, r3, #6
 800452e:	f043 0220 	orr.w	r2, r3, #32
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3301      	adds	r3, #1
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4a09      	ldr	r2, [pc, #36]	; (8004564 <USB_FlushTxFifo+0x48>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d901      	bls.n	8004548 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e006      	b.n	8004556 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b20      	cmp	r3, #32
 8004552:	d0f0      	beq.n	8004536 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	00030d40 	.word	0x00030d40

08004568 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2210      	movs	r2, #16
 8004578:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3301      	adds	r3, #1
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <USB_FlushRxFifo+0x40>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d901      	bls.n	800458c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e006      	b.n	800459a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b10      	cmp	r3, #16
 8004596:	d0f0      	beq.n	800457a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	00030d40 	.word	0x00030d40

080045ac <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b089      	sub	sp, #36	; 0x24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	4611      	mov	r1, r2
 80045b8:	461a      	mov	r2, r3
 80045ba:	460b      	mov	r3, r1
 80045bc:	71fb      	strb	r3, [r7, #7]
 80045be:	4613      	mov	r3, r2
 80045c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80045ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d11a      	bne.n	8004608 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80045d2:	88bb      	ldrh	r3, [r7, #4]
 80045d4:	3303      	adds	r3, #3
 80045d6:	089b      	lsrs	r3, r3, #2
 80045d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80045da:	2300      	movs	r3, #0
 80045dc:	61bb      	str	r3, [r7, #24]
 80045de:	e00f      	b.n	8004600 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	031a      	lsls	r2, r3, #12
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ec:	461a      	mov	r2, r3
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	3304      	adds	r3, #4
 80045f8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	3301      	adds	r3, #1
 80045fe:	61bb      	str	r3, [r7, #24]
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	429a      	cmp	r2, r3
 8004606:	d3eb      	bcc.n	80045e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3724      	adds	r7, #36	; 0x24
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004616:	b480      	push	{r7}
 8004618:	b089      	sub	sp, #36	; 0x24
 800461a:	af00      	add	r7, sp, #0
 800461c:	60f8      	str	r0, [r7, #12]
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	4613      	mov	r3, r2
 8004622:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800462c:	88fb      	ldrh	r3, [r7, #6]
 800462e:	3303      	adds	r3, #3
 8004630:	089b      	lsrs	r3, r3, #2
 8004632:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]
 8004638:	e00b      	b.n	8004652 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	601a      	str	r2, [r3, #0]
    pDest++;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	3304      	adds	r3, #4
 800464a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	3301      	adds	r3, #1
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	429a      	cmp	r2, r3
 8004658:	d3ef      	bcc.n	800463a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800465a:	69fb      	ldr	r3, [r7, #28]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3724      	adds	r7, #36	; 0x24
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4013      	ands	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004680:	68fb      	ldr	r3, [r7, #12]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f003 0301 	and.w	r3, r3, #1
}
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3301      	adds	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4a13      	ldr	r2, [pc, #76]	; (8004710 <USB_CoreReset+0x64>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e01b      	b.n	8004702 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	daf2      	bge.n	80046b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f043 0201 	orr.w	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3301      	adds	r3, #1
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4a09      	ldr	r2, [pc, #36]	; (8004710 <USB_CoreReset+0x64>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d901      	bls.n	80046f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e006      	b.n	8004702 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d0f0      	beq.n	80046e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	00030d40 	.word	0x00030d40

08004714 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004714:	b084      	sub	sp, #16
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	f107 001c 	add.w	r0, r7, #28
 8004722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004730:	461a      	mov	r2, r3
 8004732:	2300      	movs	r3, #0
 8004734:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004762:	2b00      	cmp	r3, #0
 8004764:	d018      	beq.n	8004798 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	2b03      	cmp	r3, #3
 800476a:	d10a      	bne.n	8004782 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800477a:	f043 0304 	orr.w	r3, r3, #4
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	e014      	b.n	80047ac <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004790:	f023 0304 	bic.w	r3, r3, #4
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	e009      	b.n	80047ac <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047a6:	f023 0304 	bic.w	r3, r3, #4
 80047aa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80047ac:	2110      	movs	r1, #16
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff feb4 	bl	800451c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff fed7 	bl	8004568 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	e015      	b.n	80047ec <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047cc:	461a      	mov	r2, r3
 80047ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047d2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e0:	461a      	mov	r2, r3
 80047e2:	2300      	movs	r3, #0
 80047e4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	3301      	adds	r3, #1
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d3e5      	bcc.n	80047c0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80047f4:	2101      	movs	r1, #1
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f8ac 	bl	8004954 <USB_DriveVbus>

  HAL_Delay(200U);
 80047fc:	20c8      	movs	r0, #200	; 0xc8
 80047fe:	f7fc fac9 	bl	8000d94 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800480e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00b      	beq.n	8004834 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004822:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a14      	ldr	r2, [pc, #80]	; (8004878 <USB_HostInit+0x164>)
 8004828:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a13      	ldr	r2, [pc, #76]	; (800487c <USB_HostInit+0x168>)
 800482e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004832:	e009      	b.n	8004848 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2280      	movs	r2, #128	; 0x80
 8004838:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a10      	ldr	r2, [pc, #64]	; (8004880 <USB_HostInit+0x16c>)
 800483e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a10      	ldr	r2, [pc, #64]	; (8004884 <USB_HostInit+0x170>)
 8004844:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	2b00      	cmp	r3, #0
 800484c:	d105      	bne.n	800485a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f043 0210 	orr.w	r2, r3, #16
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <USB_HostInit+0x174>)
 8004860:	4313      	orrs	r3, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004872:	b004      	add	sp, #16
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	01000200 	.word	0x01000200
 800487c:	00e00300 	.word	0x00e00300
 8004880:	00600080 	.word	0x00600080
 8004884:	004000e0 	.word	0x004000e0
 8004888:	a3200008 	.word	0xa3200008

0800488c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048aa:	f023 0303 	bic.w	r3, r3, #3
 80048ae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	68f9      	ldr	r1, [r7, #12]
 80048c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80048c4:	4313      	orrs	r3, r2
 80048c6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d107      	bne.n	80048de <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048d4:	461a      	mov	r2, r3
 80048d6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80048da:	6053      	str	r3, [r2, #4]
 80048dc:	e009      	b.n	80048f2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80048de:	78fb      	ldrb	r3, [r7, #3]
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d106      	bne.n	80048f2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ea:	461a      	mov	r2, r3
 80048ec:	f241 7370 	movw	r3, #6000	; 0x1770
 80048f0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004920:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800492a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004930:	2064      	movs	r0, #100	; 0x64
 8004932:	f7fc fa2f 	bl	8000d94 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800493e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004942:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004944:	200a      	movs	r0, #10
 8004946:	f7fc fa25 	bl	8000d94 <HAL_Delay>

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004978:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <USB_DriveVbus+0x44>
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d106      	bne.n	8004998 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004992:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004996:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800499e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a2:	d109      	bne.n	80049b8 <USB_DriveVbus+0x64>
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80049b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049b6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	0c5b      	lsrs	r3, r3, #17
 80049e4:	f003 0303 	and.w	r3, r3, #3
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	b29b      	uxth	r3, r3
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
	...

08004a18 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	4608      	mov	r0, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	461a      	mov	r2, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	70fb      	strb	r3, [r7, #3]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	70bb      	strb	r3, [r7, #2]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a46:	461a      	mov	r2, r3
 8004a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a4c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004a4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d87e      	bhi.n	8004b54 <USB_HC_Init+0x13c>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <USB_HC_Init+0x44>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004a6d 	.word	0x08004a6d
 8004a60:	08004b17 	.word	0x08004b17
 8004a64:	08004a6d 	.word	0x08004a6d
 8004a68:	08004ad9 	.word	0x08004ad9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f240 439d 	movw	r3, #1181	; 0x49d
 8004a7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004a80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	da10      	bge.n	8004aaa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	0151      	lsls	r1, r2, #5
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	440a      	add	r2, r1
 8004a9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004aa8:	e057      	b.n	8004b5a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d051      	beq.n	8004b5a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	78fa      	ldrb	r2, [r7, #3]
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ad0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ad4:	60d3      	str	r3, [r2, #12]
      break;
 8004ad6:	e040      	b.n	8004b5a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f240 639d 	movw	r3, #1693	; 0x69d
 8004aea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004aec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	da34      	bge.n	8004b5e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	0151      	lsls	r1, r2, #5
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	440a      	add	r2, r1
 8004b0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b12:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004b14:	e023      	b.n	8004b5e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b22:	461a      	mov	r2, r3
 8004b24:	f240 2325 	movw	r3, #549	; 0x225
 8004b28:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004b2a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	da17      	bge.n	8004b62 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	78fa      	ldrb	r2, [r7, #3]
 8004b42:	0151      	lsls	r1, r2, #5
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	440a      	add	r2, r1
 8004b48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b4c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004b50:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004b52:	e006      	b.n	8004b62 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	75fb      	strb	r3, [r7, #23]
      break;
 8004b58:	e004      	b.n	8004b64 <USB_HC_Init+0x14c>
      break;
 8004b5a:	bf00      	nop
 8004b5c:	e002      	b.n	8004b64 <USB_HC_Init+0x14c>
      break;
 8004b5e:	bf00      	nop
 8004b60:	e000      	b.n	8004b64 <USB_HC_Init+0x14c>
      break;
 8004b62:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b6a:	699a      	ldr	r2, [r3, #24]
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	2101      	movs	r1, #1
 8004b74:	fa01 f303 	lsl.w	r3, r1, r3
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004b8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	da03      	bge.n	8004b9e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	e001      	b.n	8004ba2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004ba2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d103      	bne.n	8004bb2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004baa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	e001      	b.n	8004bb6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bb6:	787b      	ldrb	r3, [r7, #1]
 8004bb8:	059b      	lsls	r3, r3, #22
 8004bba:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004bbe:	78bb      	ldrb	r3, [r7, #2]
 8004bc0:	02db      	lsls	r3, r3, #11
 8004bc2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bc6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004bc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bcc:	049b      	lsls	r3, r3, #18
 8004bce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004bd2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004bd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004bda:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	0159      	lsls	r1, r3, #5
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	440b      	add	r3, r1
 8004be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bec:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bf2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004bf4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d10f      	bne.n	8004c1c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c1a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop

08004c2c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08c      	sub	sp, #48	; 0x30
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	4613      	mov	r3, r2
 8004c38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	785b      	ldrb	r3, [r3, #1]
 8004c42:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c48:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d028      	beq.n	8004ca8 <USB_HC_StartXfer+0x7c>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	791b      	ldrb	r3, [r3, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d124      	bne.n	8004ca8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10b      	bne.n	8004c7c <USB_HC_StartXfer+0x50>
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	795b      	ldrb	r3, [r3, #5]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d107      	bne.n	8004c7c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	4619      	mov	r1, r3
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fa2e 	bl	80050d4 <USB_DoPing>
      return HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e112      	b.n	8004ea2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d112      	bne.n	8004ca8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	6a3a      	ldr	r2, [r7, #32]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c9c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004ca0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d018      	beq.n	8004ce2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	8912      	ldrh	r2, [r2, #8]
 8004cb8:	4413      	add	r3, r2
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	8912      	ldrh	r2, [r2, #8]
 8004cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cc4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004cc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004cc8:	8b7b      	ldrh	r3, [r7, #26]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d90b      	bls.n	8004ce6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004cce:	8b7b      	ldrh	r3, [r7, #26]
 8004cd0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004cd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	8912      	ldrh	r2, [r2, #8]
 8004cd8:	fb02 f203 	mul.w	r2, r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	611a      	str	r2, [r3, #16]
 8004ce0:	e001      	b.n	8004ce6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	78db      	ldrb	r3, [r3, #3]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d006      	beq.n	8004cfc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004cee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	8912      	ldrh	r2, [r2, #8]
 8004cf4:	fb02 f203 	mul.w	r2, r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d06:	04d9      	lsls	r1, r3, #19
 8004d08:	4b68      	ldr	r3, [pc, #416]	; (8004eac <USB_HC_StartXfer+0x280>)
 8004d0a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d0c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	7a9b      	ldrb	r3, [r3, #10]
 8004d12:	075b      	lsls	r3, r3, #29
 8004d14:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d18:	69f9      	ldr	r1, [r7, #28]
 8004d1a:	0148      	lsls	r0, r1, #5
 8004d1c:	6a39      	ldr	r1, [r7, #32]
 8004d1e:	4401      	add	r1, r0
 8004d20:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d24:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d26:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	68d9      	ldr	r1, [r3, #12]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3e:	460a      	mov	r2, r1
 8004d40:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	bf0c      	ite	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	2300      	movne	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69fa      	ldr	r2, [r7, #28]
 8004d6a:	0151      	lsls	r1, r2, #5
 8004d6c:	6a3a      	ldr	r2, [r7, #32]
 8004d6e:	440a      	add	r2, r1
 8004d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d78:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	7e7b      	ldrb	r3, [r7, #25]
 8004d8a:	075b      	lsls	r3, r3, #29
 8004d8c:	69f9      	ldr	r1, [r7, #28]
 8004d8e:	0148      	lsls	r0, r1, #5
 8004d90:	6a39      	ldr	r1, [r7, #32]
 8004d92:	4401      	add	r1, r0
 8004d94:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a41      	ldr	r2, [pc, #260]	; (8004eb0 <USB_HC_StartXfer+0x284>)
 8004dac:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dae:	4b40      	ldr	r3, [pc, #256]	; (8004eb0 <USB_HC_StartXfer+0x284>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004db6:	4a3e      	ldr	r2, [pc, #248]	; (8004eb0 <USB_HC_StartXfer+0x284>)
 8004db8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	78db      	ldrb	r3, [r3, #3]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d006      	beq.n	8004dd0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004dc2:	4b3b      	ldr	r3, [pc, #236]	; (8004eb0 <USB_HC_StartXfer+0x284>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dca:	4a39      	ldr	r2, [pc, #228]	; (8004eb0 <USB_HC_StartXfer+0x284>)
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e005      	b.n	8004ddc <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004dd0:	4b37      	ldr	r3, [pc, #220]	; (8004eb0 <USB_HC_StartXfer+0x284>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dd8:	4a35      	ldr	r2, [pc, #212]	; (8004eb0 <USB_HC_StartXfer+0x284>)
 8004dda:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ddc:	4b34      	ldr	r3, [pc, #208]	; (8004eb0 <USB_HC_StartXfer+0x284>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004de4:	4a32      	ldr	r2, [pc, #200]	; (8004eb0 <USB_HC_StartXfer+0x284>)
 8004de6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df4:	461a      	mov	r2, r3
 8004df6:	4b2e      	ldr	r3, [pc, #184]	; (8004eb0 <USB_HC_StartXfer+0x284>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d14e      	bne.n	8004ea0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	78db      	ldrb	r3, [r3, #3]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d14a      	bne.n	8004ea0 <USB_HC_StartXfer+0x274>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d046      	beq.n	8004ea0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	79db      	ldrb	r3, [r3, #7]
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d830      	bhi.n	8004e7c <USB_HC_StartXfer+0x250>
 8004e1a:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <USB_HC_StartXfer+0x1f4>)
 8004e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e20:	08004e31 	.word	0x08004e31
 8004e24:	08004e55 	.word	0x08004e55
 8004e28:	08004e31 	.word	0x08004e31
 8004e2c:	08004e55 	.word	0x08004e55
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	3303      	adds	r3, #3
 8004e36:	089b      	lsrs	r3, r3, #2
 8004e38:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004e3a:	8afa      	ldrh	r2, [r7, #22]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d91c      	bls.n	8004e80 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	f043 0220 	orr.w	r2, r3, #32
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	619a      	str	r2, [r3, #24]
          }
          break;
 8004e52:	e015      	b.n	8004e80 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	3303      	adds	r3, #3
 8004e5a:	089b      	lsrs	r3, r3, #2
 8004e5c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004e5e:	8afa      	ldrh	r2, [r7, #22]
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d90a      	bls.n	8004e84 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	619a      	str	r2, [r3, #24]
          }
          break;
 8004e7a:	e003      	b.n	8004e84 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004e7c:	bf00      	nop
 8004e7e:	e002      	b.n	8004e86 <USB_HC_StartXfer+0x25a>
          break;
 8004e80:	bf00      	nop
 8004e82:	e000      	b.n	8004e86 <USB_HC_StartXfer+0x25a>
          break;
 8004e84:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	68d9      	ldr	r1, [r3, #12]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	785a      	ldrb	r2, [r3, #1]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	b298      	uxth	r0, r3
 8004e94:	2300      	movs	r3, #0
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	4603      	mov	r3, r0
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f7ff fb86 	bl	80045ac <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3728      	adds	r7, #40	; 0x28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	1ff80000 	.word	0x1ff80000
 8004eb0:	200000b0 	.word	0x200000b0

08004eb4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	b29b      	uxth	r3, r3
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b087      	sub	sp, #28
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	0c9b      	lsrs	r3, r3, #18
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <USB_HC_Halt+0x3a>
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d16c      	bne.n	8004fea <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f2e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d143      	bne.n	8004fc4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f5a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	0151      	lsls	r1, r2, #5
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	440a      	add	r2, r1
 8004f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f7a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	0151      	lsls	r1, r2, #5
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	440a      	add	r2, r1
 8004f92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f9a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fa8:	d81d      	bhi.n	8004fe6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fc0:	d0ec      	beq.n	8004f9c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004fc2:	e080      	b.n	80050c6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fe2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004fe4:	e06f      	b.n	80050c6 <USB_HC_Halt+0x1f0>
          break;
 8004fe6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004fe8:	e06d      	b.n	80050c6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	0151      	lsls	r1, r2, #5
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	440a      	add	r2, r1
 8005000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005008:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d143      	bne.n	80050a2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	440a      	add	r2, r1
 8005030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005038:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	4413      	add	r3, r2
 8005042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	0151      	lsls	r1, r2, #5
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	440a      	add	r2, r1
 8005050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005054:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005058:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	4413      	add	r3, r2
 8005062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	440a      	add	r2, r1
 8005070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005074:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005078:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	3301      	adds	r3, #1
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005086:	d81d      	bhi.n	80050c4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4413      	add	r3, r2
 8005090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800509a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800509e:	d0ec      	beq.n	800507a <USB_HC_Halt+0x1a4>
 80050a0:	e011      	b.n	80050c6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	e000      	b.n	80050c6 <USB_HC_Halt+0x1f0>
          break;
 80050c4:	bf00      	nop
    }
  }

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	371c      	adds	r7, #28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80050e8:	2301      	movs	r3, #1
 80050ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	04da      	lsls	r2, r3, #19
 80050f0:	4b15      	ldr	r3, [pc, #84]	; (8005148 <USB_DoPing+0x74>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	0151      	lsls	r1, r2, #5
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	440a      	add	r2, r1
 80050fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005100:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005104:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	4413      	add	r3, r2
 800510e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800511c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005124:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	4413      	add	r3, r2
 800512e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005132:	461a      	mov	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	1ff80000 	.word	0x1ff80000

0800514c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff f9a1 	bl	80044a4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005162:	2110      	movs	r1, #16
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff f9d9 	bl	800451c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff f9fc 	bl	8004568 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005170:	2300      	movs	r3, #0
 8005172:	613b      	str	r3, [r7, #16]
 8005174:	e01f      	b.n	80051b6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4413      	add	r3, r2
 800517e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800518c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005194:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800519c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051aa:	461a      	mov	r2, r3
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	3301      	adds	r3, #1
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2b0f      	cmp	r3, #15
 80051ba:	d9dc      	bls.n	8005176 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80051bc:	2300      	movs	r3, #0
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	e034      	b.n	800522c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051e8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f6:	461a      	mov	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	3301      	adds	r3, #1
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005208:	d80c      	bhi.n	8005224 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800521c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005220:	d0ec      	beq.n	80051fc <USB_StopHost+0xb0>
 8005222:	e000      	b.n	8005226 <USB_StopHost+0xda>
        break;
 8005224:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	3301      	adds	r3, #1
 800522a:	613b      	str	r3, [r7, #16]
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b0f      	cmp	r3, #15
 8005230:	d9c7      	bls.n	80051c2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005238:	461a      	mov	r2, r3
 800523a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800523e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005246:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff f91a 	bl	8004482 <USB_EnableGlobalInt>

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005258:	b590      	push	{r4, r7, lr}
 800525a:	b089      	sub	sp, #36	; 0x24
 800525c:	af04      	add	r7, sp, #16
 800525e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005260:	2302      	movs	r3, #2
 8005262:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005264:	2301      	movs	r3, #1
 8005266:	2202      	movs	r2, #2
 8005268:	2102      	movs	r1, #2
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fc3a 	bl	8005ae4 <USBH_FindInterface>
 8005270:	4603      	mov	r3, r0
 8005272:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005274:	7bbb      	ldrb	r3, [r7, #14]
 8005276:	2bff      	cmp	r3, #255	; 0xff
 8005278:	f000 812a 	beq.w	80054d0 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800527c:	7bbb      	ldrb	r3, [r7, #14]
 800527e:	4619      	mov	r1, r3
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fc13 	bl	8005aac <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800528c:	2050      	movs	r0, #80	; 0x50
 800528e:	f002 f8df 	bl	8007450 <malloc>
 8005292:	4603      	mov	r3, r0
 8005294:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80052a0:	7bbb      	ldrb	r3, [r7, #14]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	211a      	movs	r1, #26
 80052a6:	fb01 f303 	mul.w	r3, r1, r3
 80052aa:	4413      	add	r3, r2
 80052ac:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	b25b      	sxtb	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	da15      	bge.n	80052e4 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80052b8:	7bbb      	ldrb	r3, [r7, #14]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	211a      	movs	r1, #26
 80052be:	fb01 f303 	mul.w	r3, r1, r3
 80052c2:	4413      	add	r3, r2
 80052c4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80052c8:	781a      	ldrb	r2, [r3, #0]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80052ce:	7bbb      	ldrb	r3, [r7, #14]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	211a      	movs	r1, #26
 80052d4:	fb01 f303 	mul.w	r3, r1, r3
 80052d8:	4413      	add	r3, r2
 80052da:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80052de:	881a      	ldrh	r2, [r3, #0]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	785b      	ldrb	r3, [r3, #1]
 80052e8:	4619      	mov	r1, r3
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f001 fd21 	bl	8006d32 <USBH_AllocPipe>
 80052f0:	4603      	mov	r3, r0
 80052f2:	461a      	mov	r2, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	7819      	ldrb	r1, [r3, #0]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	7858      	ldrb	r0, [r3, #1]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	8952      	ldrh	r2, [r2, #10]
 8005310:	9202      	str	r2, [sp, #8]
 8005312:	2203      	movs	r2, #3
 8005314:	9201      	str	r2, [sp, #4]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	4623      	mov	r3, r4
 800531a:	4602      	mov	r2, r0
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f001 fcd9 	bl	8006cd4 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2200      	movs	r2, #0
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f001 ffe0 	bl	80072f0 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005330:	2300      	movs	r3, #0
 8005332:	2200      	movs	r2, #0
 8005334:	210a      	movs	r1, #10
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fbd4 	bl	8005ae4 <USBH_FindInterface>
 800533c:	4603      	mov	r3, r0
 800533e:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005340:	7bbb      	ldrb	r3, [r7, #14]
 8005342:	2bff      	cmp	r3, #255	; 0xff
 8005344:	f000 80c4 	beq.w	80054d0 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005348:	7bbb      	ldrb	r3, [r7, #14]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	211a      	movs	r1, #26
 800534e:	fb01 f303 	mul.w	r3, r1, r3
 8005352:	4413      	add	r3, r2
 8005354:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	b25b      	sxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	da16      	bge.n	800538e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005360:	7bbb      	ldrb	r3, [r7, #14]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	211a      	movs	r1, #26
 8005366:	fb01 f303 	mul.w	r3, r1, r3
 800536a:	4413      	add	r3, r2
 800536c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005370:	781a      	ldrb	r2, [r3, #0]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005376:	7bbb      	ldrb	r3, [r7, #14]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	211a      	movs	r1, #26
 800537c:	fb01 f303 	mul.w	r3, r1, r3
 8005380:	4413      	add	r3, r2
 8005382:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005386:	881a      	ldrh	r2, [r3, #0]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	835a      	strh	r2, [r3, #26]
 800538c:	e015      	b.n	80053ba <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800538e:	7bbb      	ldrb	r3, [r7, #14]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	211a      	movs	r1, #26
 8005394:	fb01 f303 	mul.w	r3, r1, r3
 8005398:	4413      	add	r3, r2
 800539a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800539e:	781a      	ldrb	r2, [r3, #0]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80053a4:	7bbb      	ldrb	r3, [r7, #14]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	211a      	movs	r1, #26
 80053aa:	fb01 f303 	mul.w	r3, r1, r3
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80053b4:	881a      	ldrh	r2, [r3, #0]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80053ba:	7bbb      	ldrb	r3, [r7, #14]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	211a      	movs	r1, #26
 80053c0:	fb01 f303 	mul.w	r3, r1, r3
 80053c4:	4413      	add	r3, r2
 80053c6:	f203 3352 	addw	r3, r3, #850	; 0x352
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	b25b      	sxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	da16      	bge.n	8005400 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80053d2:	7bbb      	ldrb	r3, [r7, #14]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	211a      	movs	r1, #26
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	4413      	add	r3, r2
 80053de:	f203 3352 	addw	r3, r3, #850	; 0x352
 80053e2:	781a      	ldrb	r2, [r3, #0]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80053e8:	7bbb      	ldrb	r3, [r7, #14]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	211a      	movs	r1, #26
 80053ee:	fb01 f303 	mul.w	r3, r1, r3
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80053f8:	881a      	ldrh	r2, [r3, #0]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	835a      	strh	r2, [r3, #26]
 80053fe:	e015      	b.n	800542c <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005400:	7bbb      	ldrb	r3, [r7, #14]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	211a      	movs	r1, #26
 8005406:	fb01 f303 	mul.w	r3, r1, r3
 800540a:	4413      	add	r3, r2
 800540c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005410:	781a      	ldrb	r2, [r3, #0]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005416:	7bbb      	ldrb	r3, [r7, #14]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	211a      	movs	r1, #26
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	4413      	add	r3, r2
 8005422:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005426:	881a      	ldrh	r2, [r3, #0]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	7b9b      	ldrb	r3, [r3, #14]
 8005430:	4619      	mov	r1, r3
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f001 fc7d 	bl	8006d32 <USBH_AllocPipe>
 8005438:	4603      	mov	r3, r0
 800543a:	461a      	mov	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	7bdb      	ldrb	r3, [r3, #15]
 8005444:	4619      	mov	r1, r3
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f001 fc73 	bl	8006d32 <USBH_AllocPipe>
 800544c:	4603      	mov	r3, r0
 800544e:	461a      	mov	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	7b59      	ldrb	r1, [r3, #13]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	7b98      	ldrb	r0, [r3, #14]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	8b12      	ldrh	r2, [r2, #24]
 800546c:	9202      	str	r2, [sp, #8]
 800546e:	2202      	movs	r2, #2
 8005470:	9201      	str	r2, [sp, #4]
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	4623      	mov	r3, r4
 8005476:	4602      	mov	r2, r0
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f001 fc2b 	bl	8006cd4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	7b19      	ldrb	r1, [r3, #12]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	7bd8      	ldrb	r0, [r3, #15]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	8b52      	ldrh	r2, [r2, #26]
 8005496:	9202      	str	r2, [sp, #8]
 8005498:	2202      	movs	r2, #2
 800549a:	9201      	str	r2, [sp, #4]
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	4623      	mov	r3, r4
 80054a0:	4602      	mov	r2, r0
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f001 fc16 	bl	8006cd4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	7b5b      	ldrb	r3, [r3, #13]
 80054b4:	2200      	movs	r2, #0
 80054b6:	4619      	mov	r1, r3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f001 ff19 	bl	80072f0 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	7b1b      	ldrb	r3, [r3, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	4619      	mov	r1, r3
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f001 ff12 	bl	80072f0 <USBH_LL_SetToggle>
      status = USBH_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd90      	pop	{r4, r7, pc}

080054da <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00e      	beq.n	8005512 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	4619      	mov	r1, r3
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f001 fc09 	bl	8006d12 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	4619      	mov	r1, r3
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f001 fc31 	bl	8006d6e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	7b1b      	ldrb	r3, [r3, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00e      	beq.n	8005538 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	7b1b      	ldrb	r3, [r3, #12]
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f001 fbf6 	bl	8006d12 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	7b1b      	ldrb	r3, [r3, #12]
 800552a:	4619      	mov	r1, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f001 fc1e 	bl	8006d6e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	7b5b      	ldrb	r3, [r3, #13]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00e      	beq.n	800555e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	7b5b      	ldrb	r3, [r3, #13]
 8005544:	4619      	mov	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f001 fbe3 	bl	8006d12 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	7b5b      	ldrb	r3, [r3, #13]
 8005550:	4619      	mov	r1, r3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f001 fc0b 	bl	8006d6e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00b      	beq.n	8005582 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	4618      	mov	r0, r3
 8005574:	f001 ff74 	bl	8007460 <free>
    phost->pActiveClass->pData = 0U;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800557e:	2200      	movs	r2, #0
 8005580:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005594:	2302      	movs	r3, #2
 8005596:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	3340      	adds	r3, #64	; 0x40
 80055a6:	4619      	mov	r1, r3
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f8b2 	bl	8005712 <GetLineCoding>
 80055ae:	4603      	mov	r3, r0
 80055b0:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d105      	bne.n	80055c4 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80055be:	2102      	movs	r1, #2
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	4798      	blx	r3
  }
  return status;
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80055d8:	2301      	movs	r3, #1
 80055da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d877      	bhi.n	80056e4 <USBH_CDC_Process+0x114>
 80055f4:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <USBH_CDC_Process+0x2c>)
 80055f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fa:	bf00      	nop
 80055fc:	08005611 	.word	0x08005611
 8005600:	08005617 	.word	0x08005617
 8005604:	08005647 	.word	0x08005647
 8005608:	080056bb 	.word	0x080056bb
 800560c:	080056c9 	.word	0x080056c9
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	73fb      	strb	r3, [r7, #15]
    break;
 8005614:	e06d      	b.n	80056f2 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561a:	4619      	mov	r1, r3
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f897 	bl	8005750 <SetLineCoding>
 8005622:	4603      	mov	r3, r0
 8005624:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005626:	7bbb      	ldrb	r3, [r7, #14]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d104      	bne.n	8005636 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005634:	e058      	b.n	80056e8 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8005636:	7bbb      	ldrb	r3, [r7, #14]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d055      	beq.n	80056e8 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2204      	movs	r2, #4
 8005640:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005644:	e050      	b.n	80056e8 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	3340      	adds	r3, #64	; 0x40
 800564a:	4619      	mov	r1, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f860 	bl	8005712 <GetLineCoding>
 8005652:	4603      	mov	r3, r0
 8005654:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005656:	7bbb      	ldrb	r3, [r7, #14]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d126      	bne.n	80056aa <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800566e:	791b      	ldrb	r3, [r3, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	d13b      	bne.n	80056ec <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005680:	429a      	cmp	r2, r3
 8005682:	d133      	bne.n	80056ec <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800568e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005690:	429a      	cmp	r2, r3
 8005692:	d12b      	bne.n	80056ec <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800569c:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800569e:	429a      	cmp	r2, r3
 80056a0:	d124      	bne.n	80056ec <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f95a 	bl	800595c <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80056a8:	e020      	b.n	80056ec <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80056aa:	7bbb      	ldrb	r3, [r7, #14]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d01d      	beq.n	80056ec <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2204      	movs	r2, #4
 80056b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80056b8:	e018      	b.n	80056ec <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f867 	bl	800578e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f8dc 	bl	800587e <CDC_ProcessReception>
    break;
 80056c6:	e014      	b.n	80056f2 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 80056c8:	2100      	movs	r1, #0
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fece 	bl	800646c <USBH_ClrFeature>
 80056d0:	4603      	mov	r3, r0
 80056d2:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80056d4:	7bbb      	ldrb	r3, [r7, #14]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10a      	bne.n	80056f0 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80056e2:	e005      	b.n	80056f0 <USBH_CDC_Process+0x120>

  default:
    break;
 80056e4:	bf00      	nop
 80056e6:	e004      	b.n	80056f2 <USBH_CDC_Process+0x122>
    break;
 80056e8:	bf00      	nop
 80056ea:	e002      	b.n	80056f2 <USBH_CDC_Process+0x122>
    break;
 80056ec:	bf00      	nop
 80056ee:	e000      	b.n	80056f2 <USBH_CDC_Process+0x122>
    break;
 80056f0:	bf00      	nop

  }

  return status;
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	22a1      	movs	r2, #161	; 0xa1
 8005720:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2221      	movs	r2, #33	; 0x21
 8005726:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2207      	movs	r2, #7
 8005738:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2207      	movs	r2, #7
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 f873 	bl	800682c <USBH_CtlReq>
 8005746:	4603      	mov	r3, r0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2221      	movs	r2, #33	; 0x21
 800575e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2207      	movs	r2, #7
 8005776:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2207      	movs	r2, #7
 800577c:	4619      	mov	r1, r3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f001 f854 	bl	800682c <USBH_CtlReq>
 8005784:	4603      	mov	r3, r0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b086      	sub	sp, #24
 8005792:	af02      	add	r7, sp, #8
 8005794:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d002      	beq.n	80057b4 <CDC_ProcessTransmission+0x26>
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d025      	beq.n	80057fe <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80057b2:	e060      	b.n	8005876 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	8b12      	ldrh	r2, [r2, #24]
 80057bc:	4293      	cmp	r3, r2
 80057be:	d90c      	bls.n	80057da <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	69d9      	ldr	r1, [r3, #28]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8b1a      	ldrh	r2, [r3, #24]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	7b58      	ldrb	r0, [r3, #13]
 80057cc:	2301      	movs	r3, #1
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	4603      	mov	r3, r0
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f001 fa3b 	bl	8006c4e <USBH_BulkSendData>
 80057d8:	e00c      	b.n	80057f4 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	7b58      	ldrb	r0, [r3, #13]
 80057e8:	2301      	movs	r3, #1
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	4603      	mov	r3, r0
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f001 fa2d 	bl	8006c4e <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80057fc:	e03b      	b.n	8005876 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	7b5b      	ldrb	r3, [r3, #13]
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f001 fd49 	bl	800729c <USBH_LL_GetURBState>
 800580a:	4603      	mov	r3, r0
 800580c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800580e:	7afb      	ldrb	r3, [r7, #11]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d128      	bne.n	8005866 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	8b12      	ldrh	r2, [r2, #24]
 800581c:	4293      	cmp	r3, r2
 800581e:	d90e      	bls.n	800583e <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	8b12      	ldrh	r2, [r2, #24]
 8005828:	1a9a      	subs	r2, r3, r2
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	8b12      	ldrh	r2, [r2, #24]
 8005836:	441a      	add	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	61da      	str	r2, [r3, #28]
 800583c:	e002      	b.n	8005844 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	2b00      	cmp	r3, #0
 800584a:	d004      	beq.n	8005856 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005854:	e00e      	b.n	8005874 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f868 	bl	8005934 <USBH_CDC_TransmitCallback>
    break;
 8005864:	e006      	b.n	8005874 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005866:	7afb      	ldrb	r3, [r7, #11]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d103      	bne.n	8005874 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005874:	bf00      	nop
  }
}
 8005876:	bf00      	nop
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b086      	sub	sp, #24
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005890:	2300      	movs	r3, #0
 8005892:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800589a:	2b03      	cmp	r3, #3
 800589c:	d002      	beq.n	80058a4 <CDC_ProcessReception+0x26>
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d00e      	beq.n	80058c0 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80058a2:	e043      	b.n	800592c <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	6a19      	ldr	r1, [r3, #32]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	8b5a      	ldrh	r2, [r3, #26]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	7b1b      	ldrb	r3, [r3, #12]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f001 f9f1 	bl	8006c98 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2204      	movs	r2, #4
 80058ba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80058be:	e035      	b.n	800592c <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	7b1b      	ldrb	r3, [r3, #12]
 80058c4:	4619      	mov	r1, r3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f001 fce8 	bl	800729c <USBH_LL_GetURBState>
 80058cc:	4603      	mov	r3, r0
 80058ce:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80058d0:	7cfb      	ldrb	r3, [r7, #19]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d129      	bne.n	800592a <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	7b1b      	ldrb	r3, [r3, #12]
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f001 fc4b 	bl	8007178 <USBH_LL_GetLastXferSize>
 80058e2:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d016      	beq.n	800591c <CDC_ProcessReception+0x9e>
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	8b5b      	ldrh	r3, [r3, #26]
 80058f2:	461a      	mov	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d910      	bls.n	800591c <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1ad2      	subs	r2, r2, r3
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	6a1a      	ldr	r2, [r3, #32]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	441a      	add	r2, r3
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2203      	movs	r2, #3
 8005916:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800591a:	e006      	b.n	800592a <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f80f 	bl	8005948 <USBH_CDC_ReceiveCallback>
    break;
 800592a:	bf00      	nop
  }
}
 800592c:	bf00      	nop
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]

}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]

}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]

}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	4613      	mov	r3, r2
 800597c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005984:	2302      	movs	r3, #2
 8005986:	e019      	b.n	80059bc <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	79fa      	ldrb	r2, [r7, #7]
 800598c:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 f80f 	bl	80059c4 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f001 fb2d 	bl	8007014 <USBH_LL_Init>

  return USBH_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80059d0:	e008      	b.n	80059e4 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	32e0      	adds	r2, #224	; 0xe0
 80059d8:	2100      	movs	r1, #0
 80059da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3301      	adds	r3, #1
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b0e      	cmp	r3, #14
 80059e8:	d9f3      	bls.n	80059d2 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	e009      	b.n	8005a04 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3301      	adds	r3, #1
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a0a:	d3f1      	bcc.n	80059f0 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2240      	movs	r2, #64	; 0x40
 8005a30:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d017      	beq.n	8005a9a <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10f      	bne.n	8005a94 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a7a:	1c59      	adds	r1, r3, #1
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	33dc      	adds	r3, #220	; 0xdc
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	73fb      	strb	r3, [r7, #15]
 8005a92:	e004      	b.n	8005a9e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005a94:	2302      	movs	r3, #2
 8005a96:	73fb      	strb	r3, [r7, #15]
 8005a98:	e001      	b.n	8005a9e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005ac2:	78fa      	ldrb	r2, [r7, #3]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d204      	bcs.n	8005ad2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	78fa      	ldrb	r2, [r7, #3]
 8005acc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005ad0:	e001      	b.n	8005ad6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	4608      	mov	r0, r1
 8005aee:	4611      	mov	r1, r2
 8005af0:	461a      	mov	r2, r3
 8005af2:	4603      	mov	r3, r0
 8005af4:	70fb      	strb	r3, [r7, #3]
 8005af6:	460b      	mov	r3, r1
 8005af8:	70bb      	strb	r3, [r7, #2]
 8005afa:	4613      	mov	r3, r2
 8005afc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005b0c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005b0e:	e025      	b.n	8005b5c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	221a      	movs	r2, #26
 8005b14:	fb02 f303 	mul.w	r3, r2, r3
 8005b18:	3308      	adds	r3, #8
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	3302      	adds	r3, #2
 8005b20:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	795b      	ldrb	r3, [r3, #5]
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d002      	beq.n	8005b32 <USBH_FindInterface+0x4e>
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	2bff      	cmp	r3, #255	; 0xff
 8005b30:	d111      	bne.n	8005b56 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005b36:	78ba      	ldrb	r2, [r7, #2]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d002      	beq.n	8005b42 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005b3c:	78bb      	ldrb	r3, [r7, #2]
 8005b3e:	2bff      	cmp	r3, #255	; 0xff
 8005b40:	d109      	bne.n	8005b56 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005b46:	787a      	ldrb	r2, [r7, #1]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d002      	beq.n	8005b52 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005b4c:	787b      	ldrb	r3, [r7, #1]
 8005b4e:	2bff      	cmp	r3, #255	; 0xff
 8005b50:	d101      	bne.n	8005b56 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005b52:	7dfb      	ldrb	r3, [r7, #23]
 8005b54:	e006      	b.n	8005b64 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005b56:	7dfb      	ldrb	r3, [r7, #23]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005b5c:	7dfb      	ldrb	r3, [r7, #23]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d9d6      	bls.n	8005b10 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005b62:	23ff      	movs	r3, #255	; 0xff
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	371c      	adds	r7, #28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f001 fa87 	bl	800708c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005b7e:	2101      	movs	r1, #1
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f001 fb9e 	bl	80072c2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b088      	sub	sp, #32
 8005b94:	af04      	add	r7, sp, #16
 8005b96:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005b98:	2302      	movs	r3, #2
 8005b9a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 faec 	bl	800617e <USBH_IsPortEnabled>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10c      	bne.n	8005bc6 <USBH_Process+0x36>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d007      	beq.n	8005bc6 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d002      	beq.n	8005bc6 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2203      	movs	r2, #3
 8005bc4:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b0b      	cmp	r3, #11
 8005bce:	f200 814c 	bhi.w	8005e6a <USBH_Process+0x2da>
 8005bd2:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <USBH_Process+0x48>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005c09 	.word	0x08005c09
 8005bdc:	08005c2b 	.word	0x08005c2b
 8005be0:	08005c3f 	.word	0x08005c3f
 8005be4:	08005e45 	.word	0x08005e45
 8005be8:	08005e6b 	.word	0x08005e6b
 8005bec:	08005ccd 	.word	0x08005ccd
 8005bf0:	08005dfb 	.word	0x08005dfb
 8005bf4:	08005cfd 	.word	0x08005cfd
 8005bf8:	08005d1d 	.word	0x08005d1d
 8005bfc:	08005d3d 	.word	0x08005d3d
 8005c00:	08005d6b 	.word	0x08005d6b
 8005c04:	08005e2d 	.word	0x08005e2d
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 812c 	beq.w	8005e6e <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8005c1c:	20c8      	movs	r0, #200	; 0xc8
 8005c1e:	f001 fb9a 	bl	8007356 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f001 fa8d 	bl	8007142 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005c28:	e121      	b.n	8005e6e <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	f040 811e 	bne.w	8005e72 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005c3c:	e119      	b.n	8005e72 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8005c3e:	2064      	movs	r0, #100	; 0x64
 8005c40:	f001 fb89 	bl	8007356 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f001 fa57 	bl	80070f8 <USBH_LL_GetSpeed>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2205      	movs	r2, #5
 8005c58:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 f868 	bl	8006d32 <USBH_AllocPipe>
 8005c62:	4603      	mov	r3, r0
 8005c64:	461a      	mov	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8005c6a:	2180      	movs	r1, #128	; 0x80
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f001 f860 	bl	8006d32 <USBH_AllocPipe>
 8005c72:	4603      	mov	r3, r0
 8005c74:	461a      	mov	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	7919      	ldrb	r1, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005c8e:	b292      	uxth	r2, r2
 8005c90:	9202      	str	r2, [sp, #8]
 8005c92:	2200      	movs	r2, #0
 8005c94:	9201      	str	r2, [sp, #4]
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2280      	movs	r2, #128	; 0x80
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f001 f819 	bl	8006cd4 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	7959      	ldrb	r1, [r3, #5]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005cb6:	b292      	uxth	r2, r2
 8005cb8:	9202      	str	r2, [sp, #8]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	9201      	str	r2, [sp, #4]
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f001 f805 	bl	8006cd4 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005cca:	e0e3      	b.n	8005e94 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f8e7 	bl	8005ea0 <USBH_HandleEnum>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f040 80ce 	bne.w	8005e76 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d103      	bne.n	8005cf4 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2208      	movs	r2, #8
 8005cf0:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8005cf2:	e0c0      	b.n	8005e76 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2207      	movs	r2, #7
 8005cf8:	701a      	strb	r2, [r3, #0]
    break;
 8005cfa:	e0bc      	b.n	8005e76 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 80b9 	beq.w	8005e7a <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005d0e:	2101      	movs	r1, #1
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2208      	movs	r2, #8
 8005d18:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005d1a:	e0ae      	b.n	8005e7a <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	4619      	mov	r1, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fb59 	bl	80063de <USBH_SetCfg>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f040 80a5 	bne.w	8005e7e <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2209      	movs	r2, #9
 8005d38:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005d3a:	e0a0      	b.n	8005e7e <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8005d42:	f003 0320 	and.w	r3, r3, #32
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00b      	beq.n	8005d62 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fb69 	bl	8006424 <USBH_SetFeature>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f040 8094 	bne.w	8005e82 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	220a      	movs	r2, #10
 8005d5e:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005d60:	e08f      	b.n	8005e82 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	220a      	movs	r2, #10
 8005d66:	701a      	strb	r2, [r3, #0]
    break;
 8005d68:	e08b      	b.n	8005e82 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 8088 	beq.w	8005e86 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005d7e:	2300      	movs	r3, #0
 8005d80:	73fb      	strb	r3, [r7, #15]
 8005d82:	e017      	b.n	8005db4 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	33dc      	adds	r3, #220	; 0xdc
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	791a      	ldrb	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d108      	bne.n	8005dae <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	33dc      	adds	r3, #220	; 0xdc
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	3301      	adds	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0e4      	beq.n	8005d84 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d016      	beq.n	8005df2 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	4798      	blx	r3
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2206      	movs	r2, #6
 8005dda:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005de2:	2103      	movs	r1, #3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005de8:	e04d      	b.n	8005e86 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	220d      	movs	r2, #13
 8005dee:	701a      	strb	r2, [r3, #0]
    break;
 8005df0:	e049      	b.n	8005e86 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	220d      	movs	r2, #13
 8005df6:	701a      	strb	r2, [r3, #0]
    break;
 8005df8:	e045      	b.n	8005e86 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00f      	beq.n	8005e24 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	4798      	blx	r3
 8005e10:	4603      	mov	r3, r0
 8005e12:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8005e14:	7bbb      	ldrb	r3, [r7, #14]
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d136      	bne.n	8005e8a <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	220b      	movs	r2, #11
 8005e20:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8005e22:	e032      	b.n	8005e8a <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	220d      	movs	r2, #13
 8005e28:	701a      	strb	r2, [r3, #0]
    break;
 8005e2a:	e02e      	b.n	8005e8a <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d02b      	beq.n	8005e8e <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	4798      	blx	r3
    }
    break;
 8005e42:	e024      	b.n	8005e8e <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7ff fdbd 	bl	80059c4 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01e      	beq.n	8005e92 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8005e68:	e013      	b.n	8005e92 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8005e6a:	bf00      	nop
 8005e6c:	e012      	b.n	8005e94 <USBH_Process+0x304>
    break;
 8005e6e:	bf00      	nop
 8005e70:	e010      	b.n	8005e94 <USBH_Process+0x304>
    break;
 8005e72:	bf00      	nop
 8005e74:	e00e      	b.n	8005e94 <USBH_Process+0x304>
    break;
 8005e76:	bf00      	nop
 8005e78:	e00c      	b.n	8005e94 <USBH_Process+0x304>
    break;
 8005e7a:	bf00      	nop
 8005e7c:	e00a      	b.n	8005e94 <USBH_Process+0x304>
    break;
 8005e7e:	bf00      	nop
 8005e80:	e008      	b.n	8005e94 <USBH_Process+0x304>
    break;
 8005e82:	bf00      	nop
 8005e84:	e006      	b.n	8005e94 <USBH_Process+0x304>
    break;
 8005e86:	bf00      	nop
 8005e88:	e004      	b.n	8005e94 <USBH_Process+0x304>
    break;
 8005e8a:	bf00      	nop
 8005e8c:	e002      	b.n	8005e94 <USBH_Process+0x304>
    break;
 8005e8e:	bf00      	nop
 8005e90:	e000      	b.n	8005e94 <USBH_Process+0x304>
    break;
 8005e92:	bf00      	nop
  }
 return USBH_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop

08005ea0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af04      	add	r7, sp, #16
 8005ea6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	785b      	ldrb	r3, [r3, #1]
 8005eb0:	2b07      	cmp	r3, #7
 8005eb2:	f200 80f8 	bhi.w	80060a6 <USBH_HandleEnum+0x206>
 8005eb6:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <USBH_HandleEnum+0x1c>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005edd 	.word	0x08005edd
 8005ec0:	08005f4f 	.word	0x08005f4f
 8005ec4:	08005f67 	.word	0x08005f67
 8005ec8:	08005fdd 	.word	0x08005fdd
 8005ecc:	08005ff3 	.word	0x08005ff3
 8005ed0:	0800600f 	.word	0x0800600f
 8005ed4:	08006043 	.word	0x08006043
 8005ed8:	08006077 	.word	0x08006077
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8005edc:	2108      	movs	r1, #8
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f9ad 	bl	800623e <USBH_Get_DevDesc>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f040 80df 	bne.w	80060aa <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	7919      	ldrb	r1, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005f10:	b292      	uxth	r2, r2
 8005f12:	9202      	str	r2, [sp, #8]
 8005f14:	2200      	movs	r2, #0
 8005f16:	9201      	str	r2, [sp, #4]
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2280      	movs	r2, #128	; 0x80
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fed8 	bl	8006cd4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	7959      	ldrb	r1, [r3, #5]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005f38:	b292      	uxth	r2, r2
 8005f3a:	9202      	str	r2, [sp, #8]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	9201      	str	r2, [sp, #4]
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	4603      	mov	r3, r0
 8005f44:	2200      	movs	r2, #0
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fec4 	bl	8006cd4 <USBH_OpenPipe>

    }
    break;
 8005f4c:	e0ad      	b.n	80060aa <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8005f4e:	2112      	movs	r1, #18
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f974 	bl	800623e <USBH_Get_DevDesc>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f040 80a8 	bne.w	80060ae <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2202      	movs	r2, #2
 8005f62:	705a      	strb	r2, [r3, #1]

    }
    break;
 8005f64:	e0a3      	b.n	80060ae <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8005f66:	2101      	movs	r1, #1
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fa14 	bl	8006396 <USBH_SetAddress>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f040 809e 	bne.w	80060b2 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8005f76:	2002      	movs	r0, #2
 8005f78:	f001 f9ed 	bl	8007356 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2203      	movs	r2, #3
 8005f88:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	7919      	ldrb	r1, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005f9e:	b292      	uxth	r2, r2
 8005fa0:	9202      	str	r2, [sp, #8]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	9201      	str	r2, [sp, #4]
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2280      	movs	r2, #128	; 0x80
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fe91 	bl	8006cd4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	7959      	ldrb	r1, [r3, #5]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005fc6:	b292      	uxth	r2, r2
 8005fc8:	9202      	str	r2, [sp, #8]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	9201      	str	r2, [sp, #4]
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fe7d 	bl	8006cd4 <USBH_OpenPipe>
    }
    break;
 8005fda:	e06a      	b.n	80060b2 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8005fdc:	2109      	movs	r1, #9
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f955 	bl	800628e <USBH_Get_CfgDesc>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d165      	bne.n	80060b6 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2204      	movs	r2, #4
 8005fee:	705a      	strb	r2, [r3, #1]
    }
    break;
 8005ff0:	e061      	b.n	80060b6 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f947 	bl	800628e <USBH_Get_CfgDesc>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d159      	bne.n	80060ba <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2205      	movs	r2, #5
 800600a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800600c:	e055      	b.n	80060ba <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006014:	2b00      	cmp	r3, #0
 8006016:	d010      	beq.n	800603a <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006024:	23ff      	movs	r3, #255	; 0xff
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f955 	bl	80062d6 <USBH_Get_StringDesc>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d145      	bne.n	80060be <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2206      	movs	r2, #6
 8006036:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006038:	e041      	b.n	80060be <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2206      	movs	r2, #6
 800603e:	705a      	strb	r2, [r3, #1]
    break;
 8006040:	e03d      	b.n	80060be <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006048:	2b00      	cmp	r3, #0
 800604a:	d010      	beq.n	800606e <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006058:	23ff      	movs	r3, #255	; 0xff
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f93b 	bl	80062d6 <USBH_Get_StringDesc>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d12d      	bne.n	80060c2 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2207      	movs	r2, #7
 800606a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800606c:	e029      	b.n	80060c2 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2207      	movs	r2, #7
 8006072:	705a      	strb	r2, [r3, #1]
    break;
 8006074:	e025      	b.n	80060c2 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00f      	beq.n	80060a0 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800608c:	23ff      	movs	r3, #255	; 0xff
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f921 	bl	80062d6 <USBH_Get_StringDesc>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d115      	bne.n	80060c6 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800609e:	e012      	b.n	80060c6 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	73fb      	strb	r3, [r7, #15]
    break;
 80060a4:	e00f      	b.n	80060c6 <USBH_HandleEnum+0x226>

  default:
    break;
 80060a6:	bf00      	nop
 80060a8:	e00e      	b.n	80060c8 <USBH_HandleEnum+0x228>
    break;
 80060aa:	bf00      	nop
 80060ac:	e00c      	b.n	80060c8 <USBH_HandleEnum+0x228>
    break;
 80060ae:	bf00      	nop
 80060b0:	e00a      	b.n	80060c8 <USBH_HandleEnum+0x228>
    break;
 80060b2:	bf00      	nop
 80060b4:	e008      	b.n	80060c8 <USBH_HandleEnum+0x228>
    break;
 80060b6:	bf00      	nop
 80060b8:	e006      	b.n	80060c8 <USBH_HandleEnum+0x228>
    break;
 80060ba:	bf00      	nop
 80060bc:	e004      	b.n	80060c8 <USBH_HandleEnum+0x228>
    break;
 80060be:	bf00      	nop
 80060c0:	e002      	b.n	80060c8 <USBH_HandleEnum+0x228>
    break;
 80060c2:	bf00      	nop
 80060c4:	e000      	b.n	80060c8 <USBH_HandleEnum+0x228>
    break;
 80060c6:	bf00      	nop
  }
  return Status;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop

080060d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b082      	sub	sp, #8
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f804 	bl	8006116 <USBH_HandleSof>
}
 800610e:	bf00      	nop
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b082      	sub	sp, #8
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b0b      	cmp	r3, #11
 8006126:	d10a      	bne.n	800613e <USBH_HandleSof+0x28>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800612e:	2b00      	cmp	r3, #0
 8006130:	d005      	beq.n	800613e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	4798      	blx	r3
  }
}
 800613e:	bf00      	nop
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006156:	bf00      	nop
}
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006172:	bf00      	nop
}
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10f      	bne.n	80061ca <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00e      	beq.n	80061da <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80061c2:	2104      	movs	r1, #4
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	4798      	blx	r3
 80061c8:	e007      	b.n	80061da <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d102      	bne.n	80061da <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 ff68 	bl	80070c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	791b      	ldrb	r3, [r3, #4]
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fdb8 	bl	8006d6e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	795b      	ldrb	r3, [r3, #5]
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fdb2 	bl	8006d6e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006222:	2105      	movs	r1, #5
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 ff2f 	bl	800708c <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2203      	movs	r2, #3
 8006232:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b086      	sub	sp, #24
 8006242:	af02      	add	r7, sp, #8
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	460b      	mov	r3, r1
 8006248:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	b29b      	uxth	r3, r3
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	4613      	mov	r3, r2
 8006258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800625c:	2100      	movs	r1, #0
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f864 	bl	800632c <USBH_GetDescriptor>
 8006264:	4603      	mov	r3, r0
 8006266:	73fb      	strb	r3, [r7, #15]
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f203 3022 	addw	r0, r3, #802	; 0x322
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800627a:	78fa      	ldrb	r2, [r7, #3]
 800627c:	b292      	uxth	r2, r2
 800627e:	4619      	mov	r1, r3
 8006280:	f000 f918 	bl	80064b4 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800628e:	b580      	push	{r7, lr}
 8006290:	b086      	sub	sp, #24
 8006292:	af02      	add	r7, sp, #8
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	460b      	mov	r3, r1
 8006298:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	331c      	adds	r3, #28
 800629e:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80062a0:	887b      	ldrh	r3, [r7, #2]
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062aa:	2100      	movs	r1, #0
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f83d 	bl	800632c <USBH_GetDescriptor>
 80062b2:	4603      	mov	r3, r0
 80062b4:	72fb      	strb	r3, [r7, #11]
 80062b6:	7afb      	ldrb	r3, [r7, #11]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d107      	bne.n	80062cc <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80062c2:	887a      	ldrh	r2, [r7, #2]
 80062c4:	68f9      	ldr	r1, [r7, #12]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 f964 	bl	8006594 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80062cc:	7afb      	ldrb	r3, [r7, #11]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b088      	sub	sp, #32
 80062da:	af02      	add	r7, sp, #8
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	461a      	mov	r2, r3
 80062e2:	460b      	mov	r3, r1
 80062e4:	72fb      	strb	r3, [r7, #11]
 80062e6:	4613      	mov	r3, r2
 80062e8:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80062ea:	7afb      	ldrb	r3, [r7, #11]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80062f2:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80062fa:	893b      	ldrh	r3, [r7, #8]
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	460b      	mov	r3, r1
 8006300:	2100      	movs	r1, #0
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f812 	bl	800632c <USBH_GetDescriptor>
 8006308:	4603      	mov	r3, r0
 800630a:	75fb      	strb	r3, [r7, #23]
 800630c:	7dfb      	ldrb	r3, [r7, #23]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d107      	bne.n	8006322 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006318:	893a      	ldrh	r2, [r7, #8]
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fa37 	bl	8006790 <USBH_ParseStringDesc>
  }
  return status;
 8006322:	7dfb      	ldrb	r3, [r7, #23]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	607b      	str	r3, [r7, #4]
 8006336:	460b      	mov	r3, r1
 8006338:	72fb      	strb	r3, [r7, #11]
 800633a:	4613      	mov	r3, r2
 800633c:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	789b      	ldrb	r3, [r3, #2]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d11c      	bne.n	8006380 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006346:	7afb      	ldrb	r3, [r7, #11]
 8006348:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800634c:	b2da      	uxtb	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2206      	movs	r2, #6
 8006356:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	893a      	ldrh	r2, [r7, #8]
 800635c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800635e:	893b      	ldrh	r3, [r7, #8]
 8006360:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006368:	d104      	bne.n	8006374 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f240 4209 	movw	r2, #1033	; 0x409
 8006370:	829a      	strh	r2, [r3, #20]
 8006372:	e002      	b.n	800637a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8b3a      	ldrh	r2, [r7, #24]
 800637e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8006380:	8b3b      	ldrh	r3, [r7, #24]
 8006382:	461a      	mov	r2, r3
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 fa50 	bl	800682c <USBH_CtlReq>
 800638c:	4603      	mov	r3, r0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b082      	sub	sp, #8
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	460b      	mov	r3, r1
 80063a0:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	789b      	ldrb	r3, [r3, #2]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d10f      	bne.n	80063ca <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2205      	movs	r2, #5
 80063b4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80063ca:	2200      	movs	r2, #0
 80063cc:	2100      	movs	r1, #0
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fa2c 	bl	800682c <USBH_CtlReq>
 80063d4:	4603      	mov	r3, r0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b082      	sub	sp, #8
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	460b      	mov	r3, r1
 80063e8:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	789b      	ldrb	r3, [r3, #2]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d10e      	bne.n	8006410 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2209      	movs	r2, #9
 80063fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	887a      	ldrh	r2, [r7, #2]
 8006402:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006410:	2200      	movs	r2, #0
 8006412:	2100      	movs	r1, #0
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fa09 	bl	800682c <USBH_CtlReq>
 800641a:	4603      	mov	r3, r0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	789b      	ldrb	r3, [r3, #2]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d10f      	bne.n	8006458 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2203      	movs	r2, #3
 8006442:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	b29a      	uxth	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006458:	2200      	movs	r2, #0
 800645a:	2100      	movs	r1, #0
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f9e5 	bl	800682c <USBH_CtlReq>
 8006462:	4603      	mov	r3, r0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	460b      	mov	r3, r1
 8006476:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	789b      	ldrb	r3, [r3, #2]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d10f      	bne.n	80064a0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006492:	78fb      	ldrb	r3, [r7, #3]
 8006494:	b29a      	uxth	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80064a0:	2200      	movs	r2, #0
 80064a2:	2100      	movs	r1, #0
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f9c1 	bl	800682c <USBH_CtlReq>
 80064aa:	4603      	mov	r3, r0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	4613      	mov	r3, r2
 80064c0:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	781a      	ldrb	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	785a      	ldrb	r2, [r3, #1]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	3302      	adds	r3, #2
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	3303      	adds	r3, #3
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	021b      	lsls	r3, r3, #8
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	4313      	orrs	r3, r2
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	791a      	ldrb	r2, [r3, #4]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	795a      	ldrb	r2, [r3, #5]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	799a      	ldrb	r2, [r3, #6]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	79da      	ldrb	r2, [r3, #7]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800650e:	88fb      	ldrh	r3, [r7, #6]
 8006510:	2b08      	cmp	r3, #8
 8006512:	d939      	bls.n	8006588 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	3308      	adds	r3, #8
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	b29a      	uxth	r2, r3
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	3309      	adds	r3, #9
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	021b      	lsls	r3, r3, #8
 8006526:	b29b      	uxth	r3, r3
 8006528:	4313      	orrs	r3, r2
 800652a:	b29a      	uxth	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	330a      	adds	r3, #10
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	b29a      	uxth	r2, r3
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	330b      	adds	r3, #11
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	b29b      	uxth	r3, r3
 8006540:	021b      	lsls	r3, r3, #8
 8006542:	b29b      	uxth	r3, r3
 8006544:	4313      	orrs	r3, r2
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	330c      	adds	r3, #12
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	b29a      	uxth	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	330d      	adds	r3, #13
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	b29b      	uxth	r3, r3
 800655c:	021b      	lsls	r3, r3, #8
 800655e:	b29b      	uxth	r3, r3
 8006560:	4313      	orrs	r3, r2
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	7b9a      	ldrb	r2, [r3, #14]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	7bda      	ldrb	r2, [r3, #15]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	7c1a      	ldrb	r2, [r3, #16]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	7c5a      	ldrb	r2, [r3, #17]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	745a      	strb	r2, [r3, #17]
  }
}
 8006588:	bf00      	nop
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08a      	sub	sp, #40	; 0x28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	4613      	mov	r3, r2
 80065a0:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	785a      	ldrb	r2, [r3, #1]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	3302      	adds	r3, #2
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	3303      	adds	r3, #3
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	021b      	lsls	r3, r3, #8
 80065d8:	b29b      	uxth	r3, r3
 80065da:	4313      	orrs	r3, r2
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	791a      	ldrb	r2, [r3, #4]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	795a      	ldrb	r2, [r3, #5]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	799a      	ldrb	r2, [r3, #6]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	79da      	ldrb	r2, [r3, #7]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	7a1a      	ldrb	r2, [r3, #8]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800660a:	88fb      	ldrh	r3, [r7, #6]
 800660c:	2b09      	cmp	r3, #9
 800660e:	d95f      	bls.n	80066d0 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006610:	2309      	movs	r3, #9
 8006612:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006614:	2300      	movs	r3, #0
 8006616:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006618:	e051      	b.n	80066be <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800661a:	f107 0316 	add.w	r3, r7, #22
 800661e:	4619      	mov	r1, r3
 8006620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006622:	f000 f8e8 	bl	80067f6 <USBH_GetNextDesc>
 8006626:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	785b      	ldrb	r3, [r3, #1]
 800662c:	2b04      	cmp	r3, #4
 800662e:	d146      	bne.n	80066be <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006634:	221a      	movs	r2, #26
 8006636:	fb02 f303 	mul.w	r3, r2, r3
 800663a:	3308      	adds	r3, #8
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	3302      	adds	r3, #2
 8006642:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8006644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006646:	69f8      	ldr	r0, [r7, #28]
 8006648:	f000 f846 	bl	80066d8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006652:	2300      	movs	r3, #0
 8006654:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006656:	e022      	b.n	800669e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8006658:	f107 0316 	add.w	r3, r7, #22
 800665c:	4619      	mov	r1, r3
 800665e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006660:	f000 f8c9 	bl	80067f6 <USBH_GetNextDesc>
 8006664:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	785b      	ldrb	r3, [r3, #1]
 800666a:	2b05      	cmp	r3, #5
 800666c:	d117      	bne.n	800669e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800666e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006672:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006676:	3201      	adds	r2, #1
 8006678:	00d2      	lsls	r2, r2, #3
 800667a:	211a      	movs	r1, #26
 800667c:	fb01 f303 	mul.w	r3, r1, r3
 8006680:	4413      	add	r3, r2
 8006682:	3308      	adds	r3, #8
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	3304      	adds	r3, #4
 800668a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800668c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800668e:	69b8      	ldr	r0, [r7, #24]
 8006690:	f000 f851 	bl	8006736 <USBH_ParseEPDesc>
            ep_ix++;
 8006694:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006698:	3301      	adds	r3, #1
 800669a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	791b      	ldrb	r3, [r3, #4]
 80066a2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d204      	bcs.n	80066b4 <USBH_ParseCfgDesc+0x120>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	885a      	ldrh	r2, [r3, #2]
 80066ae:	8afb      	ldrh	r3, [r7, #22]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d8d1      	bhi.n	8006658 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80066b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066b8:	3301      	adds	r3, #1
 80066ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80066be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d804      	bhi.n	80066d0 <USBH_ParseCfgDesc+0x13c>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	885a      	ldrh	r2, [r3, #2]
 80066ca:	8afb      	ldrh	r3, [r7, #22]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d8a4      	bhi.n	800661a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80066d0:	bf00      	nop
 80066d2:	3728      	adds	r7, #40	; 0x28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781a      	ldrb	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	785a      	ldrb	r2, [r3, #1]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	789a      	ldrb	r2, [r3, #2]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	78da      	ldrb	r2, [r3, #3]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	791a      	ldrb	r2, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	795a      	ldrb	r2, [r3, #5]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	799a      	ldrb	r2, [r3, #6]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	79da      	ldrb	r2, [r3, #7]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	7a1a      	ldrb	r2, [r3, #8]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	721a      	strb	r2, [r3, #8]
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781a      	ldrb	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	785a      	ldrb	r2, [r3, #1]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	789a      	ldrb	r2, [r3, #2]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	78da      	ldrb	r2, [r3, #3]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	3304      	adds	r3, #4
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	b29a      	uxth	r2, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	3305      	adds	r3, #5
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	b29b      	uxth	r3, r3
 8006770:	021b      	lsls	r3, r3, #8
 8006772:	b29b      	uxth	r3, r3
 8006774:	4313      	orrs	r3, r2
 8006776:	b29a      	uxth	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	799a      	ldrb	r2, [r3, #6]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	719a      	strb	r2, [r3, #6]
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	4613      	mov	r3, r2
 800679c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3301      	adds	r3, #1
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d120      	bne.n	80067ea <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	1e9a      	subs	r2, r3, #2
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	4293      	cmp	r3, r2
 80067b2:	bf28      	it	cs
 80067b4:	4613      	movcs	r3, r2
 80067b6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	3302      	adds	r3, #2
 80067bc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80067be:	2300      	movs	r3, #0
 80067c0:	82fb      	strh	r3, [r7, #22]
 80067c2:	e00b      	b.n	80067dc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80067c4:	8afb      	ldrh	r3, [r7, #22]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4413      	add	r3, r2
 80067ca:	781a      	ldrb	r2, [r3, #0]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	701a      	strb	r2, [r3, #0]
      pdest++;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	3301      	adds	r3, #1
 80067d4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80067d6:	8afb      	ldrh	r3, [r7, #22]
 80067d8:	3302      	adds	r3, #2
 80067da:	82fb      	strh	r3, [r7, #22]
 80067dc:	8afa      	ldrh	r2, [r7, #22]
 80067de:	8abb      	ldrh	r3, [r7, #20]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d3ef      	bcc.n	80067c4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2200      	movs	r2, #0
 80067e8:	701a      	strb	r2, [r3, #0]
  }
}
 80067ea:	bf00      	nop
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b085      	sub	sp, #20
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	881a      	ldrh	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	b29b      	uxth	r3, r3
 800680a:	4413      	add	r3, r2
 800680c:	b29a      	uxth	r2, r3
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4413      	add	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800681e:	68fb      	ldr	r3, [r7, #12]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	4613      	mov	r3, r2
 8006838:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800683a:	2301      	movs	r3, #1
 800683c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	789b      	ldrb	r3, [r3, #2]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d002      	beq.n	800684c <USBH_CtlReq+0x20>
 8006846:	2b02      	cmp	r3, #2
 8006848:	d00f      	beq.n	800686a <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 800684a:	e034      	b.n	80068b6 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	88fa      	ldrh	r2, [r7, #6]
 8006856:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2201      	movs	r2, #1
 800685c:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2202      	movs	r2, #2
 8006862:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006864:	2301      	movs	r3, #1
 8006866:	75fb      	strb	r3, [r7, #23]
    break;
 8006868:	e025      	b.n	80068b6 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 f828 	bl	80068c0 <USBH_HandleControl>
 8006870:	4603      	mov	r3, r0
 8006872:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006874:	7dfb      	ldrb	r3, [r7, #23]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d108      	bne.n	800688c <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	75fb      	strb	r3, [r7, #23]
    break;
 800688a:	e013      	b.n	80068b4 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 800688c:	7dfb      	ldrb	r3, [r7, #23]
 800688e:	2b03      	cmp	r3, #3
 8006890:	d108      	bne.n	80068a4 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800689e:	2303      	movs	r3, #3
 80068a0:	75fb      	strb	r3, [r7, #23]
    break;
 80068a2:	e007      	b.n	80068b4 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d104      	bne.n	80068b4 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80068b0:	2302      	movs	r3, #2
 80068b2:	75fb      	strb	r3, [r7, #23]
    break;
 80068b4:	bf00      	nop
  }
  return status;
 80068b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af02      	add	r7, sp, #8
 80068c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80068c8:	2301      	movs	r3, #1
 80068ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068cc:	2300      	movs	r3, #0
 80068ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	7e1b      	ldrb	r3, [r3, #24]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	2b0a      	cmp	r3, #10
 80068d8:	f200 814c 	bhi.w	8006b74 <USBH_HandleControl+0x2b4>
 80068dc:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <USBH_HandleControl+0x24>)
 80068de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	08006911 	.word	0x08006911
 80068e8:	0800692b 	.word	0x0800692b
 80068ec:	08006995 	.word	0x08006995
 80068f0:	080069bb 	.word	0x080069bb
 80068f4:	080069f3 	.word	0x080069f3
 80068f8:	08006a1f 	.word	0x08006a1f
 80068fc:	08006a71 	.word	0x08006a71
 8006900:	08006a93 	.word	0x08006a93
 8006904:	08006acf 	.word	0x08006acf
 8006908:	08006af7 	.word	0x08006af7
 800690c:	08006b35 	.word	0x08006b35
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f103 0110 	add.w	r1, r3, #16
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	795b      	ldrb	r3, [r3, #5]
 800691a:	461a      	mov	r2, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f939 	bl	8006b94 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2202      	movs	r2, #2
 8006926:	761a      	strb	r2, [r3, #24]
    break;
 8006928:	e12f      	b.n	8006b8a <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	795b      	ldrb	r3, [r3, #5]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fcb3 	bl	800729c <USBH_LL_GetURBState>
 8006936:	4603      	mov	r3, r0
 8006938:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800693a:	7bbb      	ldrb	r3, [r7, #14]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d11e      	bne.n	800697e <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	7c1b      	ldrb	r3, [r3, #16]
 8006944:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006948:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	8adb      	ldrh	r3, [r3, #22]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006952:	7b7b      	ldrb	r3, [r7, #13]
 8006954:	2b80      	cmp	r3, #128	; 0x80
 8006956:	d103      	bne.n	8006960 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2203      	movs	r2, #3
 800695c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800695e:	e10b      	b.n	8006b78 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2205      	movs	r2, #5
 8006964:	761a      	strb	r2, [r3, #24]
    break;
 8006966:	e107      	b.n	8006b78 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8006968:	7b7b      	ldrb	r3, [r7, #13]
 800696a:	2b80      	cmp	r3, #128	; 0x80
 800696c:	d103      	bne.n	8006976 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2209      	movs	r2, #9
 8006972:	761a      	strb	r2, [r3, #24]
    break;
 8006974:	e100      	b.n	8006b78 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2207      	movs	r2, #7
 800697a:	761a      	strb	r2, [r3, #24]
    break;
 800697c:	e0fc      	b.n	8006b78 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	2b04      	cmp	r3, #4
 8006982:	d003      	beq.n	800698c <USBH_HandleControl+0xcc>
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	2b02      	cmp	r3, #2
 8006988:	f040 80f6 	bne.w	8006b78 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	220b      	movs	r2, #11
 8006990:	761a      	strb	r2, [r3, #24]
    break;
 8006992:	e0f1      	b.n	8006b78 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800699a:	b29a      	uxth	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6899      	ldr	r1, [r3, #8]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	899a      	ldrh	r2, [r3, #12]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	791b      	ldrb	r3, [r3, #4]
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f930 	bl	8006c12 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2204      	movs	r2, #4
 80069b6:	761a      	strb	r2, [r3, #24]
    break;
 80069b8:	e0e7      	b.n	8006b8a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	791b      	ldrb	r3, [r3, #4]
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fc6b 	bl	800729c <USBH_LL_GetURBState>
 80069c6:	4603      	mov	r3, r0
 80069c8:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80069ca:	7bbb      	ldrb	r3, [r7, #14]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d102      	bne.n	80069d6 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2209      	movs	r2, #9
 80069d4:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80069d6:	7bbb      	ldrb	r3, [r7, #14]
 80069d8:	2b05      	cmp	r3, #5
 80069da:	d102      	bne.n	80069e2 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 80069dc:	2303      	movs	r3, #3
 80069de:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80069e0:	e0cc      	b.n	8006b7c <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 80069e2:	7bbb      	ldrb	r3, [r7, #14]
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	f040 80c9 	bne.w	8006b7c <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	220b      	movs	r2, #11
 80069ee:	761a      	strb	r2, [r3, #24]
    break;
 80069f0:	e0c4      	b.n	8006b7c <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6899      	ldr	r1, [r3, #8]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	899a      	ldrh	r2, [r3, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	7958      	ldrb	r0, [r3, #5]
 80069fe:	2301      	movs	r3, #1
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	4603      	mov	r3, r0
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f8df 	bl	8006bc8 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2206      	movs	r2, #6
 8006a1a:	761a      	strb	r2, [r3, #24]
    break;
 8006a1c:	e0b5      	b.n	8006b8a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	795b      	ldrb	r3, [r3, #5]
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fc39 	bl	800729c <USBH_LL_GetURBState>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d103      	bne.n	8006a3c <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2207      	movs	r2, #7
 8006a38:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006a3a:	e0a1      	b.n	8006b80 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8006a3c:	7bbb      	ldrb	r3, [r7, #14]
 8006a3e:	2b05      	cmp	r3, #5
 8006a40:	d105      	bne.n	8006a4e <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	220c      	movs	r2, #12
 8006a46:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006a4c:	e098      	b.n	8006b80 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d103      	bne.n	8006a5c <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2205      	movs	r2, #5
 8006a58:	761a      	strb	r2, [r3, #24]
    break;
 8006a5a:	e091      	b.n	8006b80 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8006a5c:	7bbb      	ldrb	r3, [r7, #14]
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	f040 808e 	bne.w	8006b80 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	220b      	movs	r2, #11
 8006a68:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	73fb      	strb	r3, [r7, #15]
    break;
 8006a6e:	e087      	b.n	8006b80 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	791b      	ldrb	r3, [r3, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	2100      	movs	r1, #0
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f8ca 	bl	8006c12 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2208      	movs	r2, #8
 8006a8e:	761a      	strb	r2, [r3, #24]

    break;
 8006a90:	e07b      	b.n	8006b8a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	791b      	ldrb	r3, [r3, #4]
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fbff 	bl	800729c <USBH_LL_GetURBState>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006aa2:	7bbb      	ldrb	r3, [r7, #14]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d105      	bne.n	8006ab4 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	220d      	movs	r2, #13
 8006aac:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006ab2:	e067      	b.n	8006b84 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d103      	bne.n	8006ac2 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	220b      	movs	r2, #11
 8006abe:	761a      	strb	r2, [r3, #24]
    break;
 8006ac0:	e060      	b.n	8006b84 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8006ac2:	7bbb      	ldrb	r3, [r7, #14]
 8006ac4:	2b05      	cmp	r3, #5
 8006ac6:	d15d      	bne.n	8006b84 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	73fb      	strb	r3, [r7, #15]
    break;
 8006acc:	e05a      	b.n	8006b84 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	795a      	ldrb	r2, [r3, #5]
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2100      	movs	r1, #0
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f873 	bl	8006bc8 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	220a      	movs	r2, #10
 8006af2:	761a      	strb	r2, [r3, #24]
    break;
 8006af4:	e049      	b.n	8006b8a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	795b      	ldrb	r3, [r3, #5]
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fbcd 	bl	800729c <USBH_LL_GetURBState>
 8006b02:	4603      	mov	r3, r0
 8006b04:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006b06:	7bbb      	ldrb	r3, [r7, #14]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d105      	bne.n	8006b18 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	220d      	movs	r2, #13
 8006b14:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8006b16:	e037      	b.n	8006b88 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d103      	bne.n	8006b26 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2209      	movs	r2, #9
 8006b22:	761a      	strb	r2, [r3, #24]
    break;
 8006b24:	e030      	b.n	8006b88 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8006b26:	7bbb      	ldrb	r3, [r7, #14]
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	d12d      	bne.n	8006b88 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	220b      	movs	r2, #11
 8006b30:	761a      	strb	r2, [r3, #24]
    break;
 8006b32:	e029      	b.n	8006b88 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	7e5b      	ldrb	r3, [r3, #25]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	765a      	strb	r2, [r3, #25]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	7e5b      	ldrb	r3, [r3, #25]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d809      	bhi.n	8006b5c <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 faba 	bl	80070c2 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006b5a:	e016      	b.n	8006b8a <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b62:	2106      	movs	r1, #6
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006b6e:	2302      	movs	r3, #2
 8006b70:	73fb      	strb	r3, [r7, #15]
    break;
 8006b72:	e00a      	b.n	8006b8a <USBH_HandleControl+0x2ca>

  default:
    break;
 8006b74:	bf00      	nop
 8006b76:	e008      	b.n	8006b8a <USBH_HandleControl+0x2ca>
    break;
 8006b78:	bf00      	nop
 8006b7a:	e006      	b.n	8006b8a <USBH_HandleControl+0x2ca>
    break;
 8006b7c:	bf00      	nop
 8006b7e:	e004      	b.n	8006b8a <USBH_HandleControl+0x2ca>
    break;
 8006b80:	bf00      	nop
 8006b82:	e002      	b.n	8006b8a <USBH_HandleControl+0x2ca>
    break;
 8006b84:	bf00      	nop
 8006b86:	e000      	b.n	8006b8a <USBH_HandleControl+0x2ca>
    break;
 8006b88:	bf00      	nop
  }
  return status;
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af04      	add	r7, sp, #16
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006ba2:	79f9      	ldrb	r1, [r7, #7]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	9303      	str	r3, [sp, #12]
 8006ba8:	2308      	movs	r3, #8
 8006baa:	9302      	str	r3, [sp, #8]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 fb3e 	bl	800723a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af04      	add	r7, sp, #16
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	80fb      	strh	r3, [r7, #6]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006bec:	7979      	ldrb	r1, [r7, #5]
 8006bee:	7e3b      	ldrb	r3, [r7, #24]
 8006bf0:	9303      	str	r3, [sp, #12]
 8006bf2:	88fb      	ldrh	r3, [r7, #6]
 8006bf4:	9302      	str	r3, [sp, #8]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	2200      	movs	r2, #0
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 fb19 	bl	800723a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b088      	sub	sp, #32
 8006c16:	af04      	add	r7, sp, #16
 8006c18:	60f8      	str	r0, [r7, #12]
 8006c1a:	60b9      	str	r1, [r7, #8]
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	461a      	mov	r2, r3
 8006c20:	460b      	mov	r3, r1
 8006c22:	80fb      	strh	r3, [r7, #6]
 8006c24:	4613      	mov	r3, r2
 8006c26:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006c28:	7979      	ldrb	r1, [r7, #5]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	9303      	str	r3, [sp, #12]
 8006c2e:	88fb      	ldrh	r3, [r7, #6]
 8006c30:	9302      	str	r3, [sp, #8]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	2301      	movs	r3, #1
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 fafb 	bl	800723a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006c44:	2300      	movs	r3, #0

}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b088      	sub	sp, #32
 8006c52:	af04      	add	r7, sp, #16
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	4611      	mov	r1, r2
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	80fb      	strh	r3, [r7, #6]
 8006c60:	4613      	mov	r3, r2
 8006c62:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006c72:	7979      	ldrb	r1, [r7, #5]
 8006c74:	7e3b      	ldrb	r3, [r7, #24]
 8006c76:	9303      	str	r3, [sp, #12]
 8006c78:	88fb      	ldrh	r3, [r7, #6]
 8006c7a:	9302      	str	r3, [sp, #8]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	2301      	movs	r3, #1
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	2302      	movs	r3, #2
 8006c86:	2200      	movs	r2, #0
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 fad6 	bl	800723a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af04      	add	r7, sp, #16
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	80fb      	strh	r3, [r7, #6]
 8006caa:	4613      	mov	r3, r2
 8006cac:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006cae:	7979      	ldrb	r1, [r7, #5]
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	9303      	str	r3, [sp, #12]
 8006cb4:	88fb      	ldrh	r3, [r7, #6]
 8006cb6:	9302      	str	r3, [sp, #8]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	9301      	str	r3, [sp, #4]
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f000 fab8 	bl	800723a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af04      	add	r7, sp, #16
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	4608      	mov	r0, r1
 8006cde:	4611      	mov	r1, r2
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	70fb      	strb	r3, [r7, #3]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	70bb      	strb	r3, [r7, #2]
 8006cea:	4613      	mov	r3, r2
 8006cec:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8006cee:	7878      	ldrb	r0, [r7, #1]
 8006cf0:	78ba      	ldrb	r2, [r7, #2]
 8006cf2:	78f9      	ldrb	r1, [r7, #3]
 8006cf4:	8b3b      	ldrh	r3, [r7, #24]
 8006cf6:	9302      	str	r3, [sp, #8]
 8006cf8:	7d3b      	ldrb	r3, [r7, #20]
 8006cfa:	9301      	str	r3, [sp, #4]
 8006cfc:	7c3b      	ldrb	r3, [r7, #16]
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	4603      	mov	r3, r0
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fa4b 	bl	800719e <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8006d08:	2300      	movs	r3, #0

}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b082      	sub	sp, #8
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa6a 	bl	80071fc <USBH_LL_ClosePipe>

  return USBH_OK;
 8006d28:	2300      	movs	r3, #0

}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f831 	bl	8006da6 <USBH_GetFreePipe>
 8006d44:	4603      	mov	r3, r0
 8006d46:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006d48:	89fb      	ldrh	r3, [r7, #14]
 8006d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d007      	beq.n	8006d62 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8006d52:	78fb      	ldrb	r3, [r7, #3]
 8006d54:	89fa      	ldrh	r2, [r7, #14]
 8006d56:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	32e0      	adds	r2, #224	; 0xe0
 8006d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8006d62:	89fb      	ldrh	r3, [r7, #14]
 8006d64:	b2db      	uxtb	r3, r3
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b083      	sub	sp, #12
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	460b      	mov	r3, r1
 8006d78:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8006d7a:	78fb      	ldrb	r3, [r7, #3]
 8006d7c:	2b0a      	cmp	r3, #10
 8006d7e:	d80b      	bhi.n	8006d98 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8006d80:	78fa      	ldrb	r2, [r7, #3]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	32e0      	adds	r2, #224	; 0xe0
 8006d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8a:	78fa      	ldrb	r2, [r7, #3]
 8006d8c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	32e0      	adds	r2, #224	; 0xe0
 8006d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b085      	sub	sp, #20
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]
 8006db6:	e00e      	b.n	8006dd6 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006db8:	7bfa      	ldrb	r2, [r7, #15]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	32e0      	adds	r2, #224	; 0xe0
 8006dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d102      	bne.n	8006dd0 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	e007      	b.n	8006de0 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	73fb      	strb	r3, [r7, #15]
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	2b0a      	cmp	r3, #10
 8006dda:	d9ed      	bls.n	8006db8 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8006ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006df0:	2201      	movs	r2, #1
 8006df2:	490e      	ldr	r1, [pc, #56]	; (8006e2c <MX_USB_HOST_Init+0x40>)
 8006df4:	480e      	ldr	r0, [pc, #56]	; (8006e30 <MX_USB_HOST_Init+0x44>)
 8006df6:	f7fe fdbb 	bl	8005970 <USBH_Init>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006e00:	f7f9 fd8a 	bl	8000918 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006e04:	490b      	ldr	r1, [pc, #44]	; (8006e34 <MX_USB_HOST_Init+0x48>)
 8006e06:	480a      	ldr	r0, [pc, #40]	; (8006e30 <MX_USB_HOST_Init+0x44>)
 8006e08:	f7fe fe25 	bl	8005a56 <USBH_RegisterClass>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006e12:	f7f9 fd81 	bl	8000918 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006e16:	4806      	ldr	r0, [pc, #24]	; (8006e30 <MX_USB_HOST_Init+0x44>)
 8006e18:	f7fe feaa 	bl	8005b70 <USBH_Start>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006e22:	f7f9 fd79 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006e26:	bf00      	nop
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	08006e4d 	.word	0x08006e4d
 8006e30:	200001b8 	.word	0x200001b8
 8006e34:	2000000c 	.word	0x2000000c

08006e38 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006e3c:	4802      	ldr	r0, [pc, #8]	; (8006e48 <MX_USB_HOST_Process+0x10>)
 8006e3e:	f7fe fea7 	bl	8005b90 <USBH_Process>
}
 8006e42:	bf00      	nop
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	200001b8 	.word	0x200001b8

08006e4c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006e58:	78fb      	ldrb	r3, [r7, #3]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	d819      	bhi.n	8006e94 <USBH_UserProcess+0x48>
 8006e60:	a201      	add	r2, pc, #4	; (adr r2, 8006e68 <USBH_UserProcess+0x1c>)
 8006e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e66:	bf00      	nop
 8006e68:	08006e95 	.word	0x08006e95
 8006e6c:	08006e85 	.word	0x08006e85
 8006e70:	08006e95 	.word	0x08006e95
 8006e74:	08006e8d 	.word	0x08006e8d
 8006e78:	08006e7d 	.word	0x08006e7d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006e7c:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <USBH_UserProcess+0x58>)
 8006e7e:	2203      	movs	r2, #3
 8006e80:	701a      	strb	r2, [r3, #0]
  break;
 8006e82:	e008      	b.n	8006e96 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006e84:	4b07      	ldr	r3, [pc, #28]	; (8006ea4 <USBH_UserProcess+0x58>)
 8006e86:	2202      	movs	r2, #2
 8006e88:	701a      	strb	r2, [r3, #0]
  break;
 8006e8a:	e004      	b.n	8006e96 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006e8c:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <USBH_UserProcess+0x58>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	701a      	strb	r2, [r3, #0]
  break;
 8006e92:	e000      	b.n	8006e96 <USBH_UserProcess+0x4a>

  default:
  break;
 8006e94:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006e96:	bf00      	nop
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	200000b4 	.word	0x200000b4

08006ea8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08a      	sub	sp, #40	; 0x28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eb0:	f107 0314 	add.w	r3, r7, #20
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	605a      	str	r2, [r3, #4]
 8006eba:	609a      	str	r2, [r3, #8]
 8006ebc:	60da      	str	r2, [r3, #12]
 8006ebe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ec8:	d147      	bne.n	8006f5a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006eca:	2300      	movs	r3, #0
 8006ecc:	613b      	str	r3, [r7, #16]
 8006ece:	4b25      	ldr	r3, [pc, #148]	; (8006f64 <HAL_HCD_MspInit+0xbc>)
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed2:	4a24      	ldr	r2, [pc, #144]	; (8006f64 <HAL_HCD_MspInit+0xbc>)
 8006ed4:	f043 0301 	orr.w	r3, r3, #1
 8006ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8006eda:	4b22      	ldr	r3, [pc, #136]	; (8006f64 <HAL_HCD_MspInit+0xbc>)
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	613b      	str	r3, [r7, #16]
 8006ee4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006eec:	2300      	movs	r3, #0
 8006eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006ef4:	f107 0314 	add.w	r3, r7, #20
 8006ef8:	4619      	mov	r1, r3
 8006efa:	481b      	ldr	r0, [pc, #108]	; (8006f68 <HAL_HCD_MspInit+0xc0>)
 8006efc:	f7fa f87e 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006f00:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f06:	2302      	movs	r3, #2
 8006f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f12:	230a      	movs	r3, #10
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f16:	f107 0314 	add.w	r3, r7, #20
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4812      	ldr	r0, [pc, #72]	; (8006f68 <HAL_HCD_MspInit+0xc0>)
 8006f1e:	f7fa f86d 	bl	8000ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f22:	4b10      	ldr	r3, [pc, #64]	; (8006f64 <HAL_HCD_MspInit+0xbc>)
 8006f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f26:	4a0f      	ldr	r2, [pc, #60]	; (8006f64 <HAL_HCD_MspInit+0xbc>)
 8006f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f2c:	6353      	str	r3, [r2, #52]	; 0x34
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	4b0c      	ldr	r3, [pc, #48]	; (8006f64 <HAL_HCD_MspInit+0xbc>)
 8006f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f36:	4a0b      	ldr	r2, [pc, #44]	; (8006f64 <HAL_HCD_MspInit+0xbc>)
 8006f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8006f3e:	4b09      	ldr	r3, [pc, #36]	; (8006f64 <HAL_HCD_MspInit+0xbc>)
 8006f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	2043      	movs	r0, #67	; 0x43
 8006f50:	f7fa f81d 	bl	8000f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006f54:	2043      	movs	r0, #67	; 0x43
 8006f56:	f7fa f836 	bl	8000fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f5a:	bf00      	nop
 8006f5c:	3728      	adds	r7, #40	; 0x28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	40023800 	.word	0x40023800
 8006f68:	40020000 	.word	0x40020000

08006f6c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff f8b9 	bl	80060f2 <USBH_LL_IncTimer>
}
 8006f80:	bf00      	nop
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7ff f8fe 	bl	8006198 <USBH_LL_Connect>
}
 8006f9c:	bf00      	nop
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7ff f916 	bl	80061e4 <USBH_LL_Disconnect>
}
 8006fb8:	bf00      	nop
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	70fb      	strb	r3, [r7, #3]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff f8ab 	bl	8006146 <USBH_LL_PortEnabled>
} 
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff f8ab 	bl	8006162 <USBH_LL_PortDisabled>
} 
 800700c:	bf00      	nop
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007022:	2b01      	cmp	r3, #1
 8007024:	d12a      	bne.n	800707c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007026:	4a18      	ldr	r2, [pc, #96]	; (8007088 <USBH_LL_Init+0x74>)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a15      	ldr	r2, [pc, #84]	; (8007088 <USBH_LL_Init+0x74>)
 8007032:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007036:	4b14      	ldr	r3, [pc, #80]	; (8007088 <USBH_LL_Init+0x74>)
 8007038:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800703c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800703e:	4b12      	ldr	r3, [pc, #72]	; (8007088 <USBH_LL_Init+0x74>)
 8007040:	2208      	movs	r2, #8
 8007042:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007044:	4b10      	ldr	r3, [pc, #64]	; (8007088 <USBH_LL_Init+0x74>)
 8007046:	2201      	movs	r2, #1
 8007048:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800704a:	4b0f      	ldr	r3, [pc, #60]	; (8007088 <USBH_LL_Init+0x74>)
 800704c:	2200      	movs	r2, #0
 800704e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007050:	4b0d      	ldr	r3, [pc, #52]	; (8007088 <USBH_LL_Init+0x74>)
 8007052:	2202      	movs	r2, #2
 8007054:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007056:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <USBH_LL_Init+0x74>)
 8007058:	2200      	movs	r2, #0
 800705a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800705c:	480a      	ldr	r0, [pc, #40]	; (8007088 <USBH_LL_Init+0x74>)
 800705e:	f7fa f980 	bl	8001362 <HAL_HCD_Init>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007068:	f7f9 fc56 	bl	8000918 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800706c:	4806      	ldr	r0, [pc, #24]	; (8007088 <USBH_LL_Init+0x74>)
 800706e:	f7fa fd7b 	bl	8001b68 <HAL_HCD_GetCurrentFrame>
 8007072:	4603      	mov	r3, r0
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7ff f82c 	bl	80060d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20000584 	.word	0x20000584

0800708c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fa fce8 	bl	8001a78 <HAL_HCD_Start>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 f95c 	bl	800736c <USBH_Get_USB_Status>
 80070b4:	4603      	mov	r3, r0
 80070b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fa fcf0 	bl	8001abe <HAL_HCD_Stop>
 80070de:	4603      	mov	r3, r0
 80070e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 f941 	bl	800736c <USBH_Get_USB_Status>
 80070ea:	4603      	mov	r3, r0
 80070ec:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007100:	2301      	movs	r3, #1
 8007102:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800710a:	4618      	mov	r0, r3
 800710c:	f7fa fd3a 	bl	8001b84 <HAL_HCD_GetCurrentSpeed>
 8007110:	4603      	mov	r3, r0
 8007112:	2b01      	cmp	r3, #1
 8007114:	d007      	beq.n	8007126 <USBH_LL_GetSpeed+0x2e>
 8007116:	2b01      	cmp	r3, #1
 8007118:	d302      	bcc.n	8007120 <USBH_LL_GetSpeed+0x28>
 800711a:	2b02      	cmp	r3, #2
 800711c:	d006      	beq.n	800712c <USBH_LL_GetSpeed+0x34>
 800711e:	e008      	b.n	8007132 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007120:	2300      	movs	r3, #0
 8007122:	73fb      	strb	r3, [r7, #15]
    break;
 8007124:	e008      	b.n	8007138 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007126:	2301      	movs	r3, #1
 8007128:	73fb      	strb	r3, [r7, #15]
    break;
 800712a:	e005      	b.n	8007138 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800712c:	2302      	movs	r3, #2
 800712e:	73fb      	strb	r3, [r7, #15]
    break;
 8007130:	e002      	b.n	8007138 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007132:	2301      	movs	r3, #1
 8007134:	73fb      	strb	r3, [r7, #15]
    break;
 8007136:	bf00      	nop
  }
  return  speed;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007158:	4618      	mov	r0, r3
 800715a:	f7fa fccd 	bl	8001af8 <HAL_HCD_ResetPort>
 800715e:	4603      	mov	r3, r0
 8007160:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	4618      	mov	r0, r3
 8007166:	f000 f901 	bl	800736c <USBH_Get_USB_Status>
 800716a:	4603      	mov	r3, r0
 800716c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800716e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800718a:	78fa      	ldrb	r2, [r7, #3]
 800718c:	4611      	mov	r1, r2
 800718e:	4618      	mov	r0, r3
 8007190:	f7fa fcd5 	bl	8001b3e <HAL_HCD_HC_GetXferCount>
 8007194:	4603      	mov	r3, r0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800719e:	b590      	push	{r4, r7, lr}
 80071a0:	b089      	sub	sp, #36	; 0x24
 80071a2:	af04      	add	r7, sp, #16
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	4608      	mov	r0, r1
 80071a8:	4611      	mov	r1, r2
 80071aa:	461a      	mov	r2, r3
 80071ac:	4603      	mov	r3, r0
 80071ae:	70fb      	strb	r3, [r7, #3]
 80071b0:	460b      	mov	r3, r1
 80071b2:	70bb      	strb	r3, [r7, #2]
 80071b4:	4613      	mov	r3, r2
 80071b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80071c6:	787c      	ldrb	r4, [r7, #1]
 80071c8:	78ba      	ldrb	r2, [r7, #2]
 80071ca:	78f9      	ldrb	r1, [r7, #3]
 80071cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80071ce:	9302      	str	r3, [sp, #8]
 80071d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80071d4:	9301      	str	r3, [sp, #4]
 80071d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	4623      	mov	r3, r4
 80071de:	f7fa f922 	bl	8001426 <HAL_HCD_HC_Init>
 80071e2:	4603      	mov	r3, r0
 80071e4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 f8bf 	bl	800736c <USBH_Get_USB_Status>
 80071ee:	4603      	mov	r3, r0
 80071f0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80071f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd90      	pop	{r4, r7, pc}

080071fc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	460b      	mov	r3, r1
 8007206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007208:	2300      	movs	r3, #0
 800720a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007216:	78fa      	ldrb	r2, [r7, #3]
 8007218:	4611      	mov	r1, r2
 800721a:	4618      	mov	r0, r3
 800721c:	f7fa f99b 	bl	8001556 <HAL_HCD_HC_Halt>
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	4618      	mov	r0, r3
 8007228:	f000 f8a0 	bl	800736c <USBH_Get_USB_Status>
 800722c:	4603      	mov	r3, r0
 800722e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007230:	7bbb      	ldrb	r3, [r7, #14]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800723a:	b590      	push	{r4, r7, lr}
 800723c:	b089      	sub	sp, #36	; 0x24
 800723e:	af04      	add	r7, sp, #16
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	4608      	mov	r0, r1
 8007244:	4611      	mov	r1, r2
 8007246:	461a      	mov	r2, r3
 8007248:	4603      	mov	r3, r0
 800724a:	70fb      	strb	r3, [r7, #3]
 800724c:	460b      	mov	r3, r1
 800724e:	70bb      	strb	r3, [r7, #2]
 8007250:	4613      	mov	r3, r2
 8007252:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007258:	2300      	movs	r3, #0
 800725a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007262:	787c      	ldrb	r4, [r7, #1]
 8007264:	78ba      	ldrb	r2, [r7, #2]
 8007266:	78f9      	ldrb	r1, [r7, #3]
 8007268:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800726c:	9303      	str	r3, [sp, #12]
 800726e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007270:	9302      	str	r3, [sp, #8]
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	9301      	str	r3, [sp, #4]
 8007276:	f897 3020 	ldrb.w	r3, [r7, #32]
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	4623      	mov	r3, r4
 800727e:	f7fa f98d 	bl	800159c <HAL_HCD_HC_SubmitRequest>
 8007282:	4603      	mov	r3, r0
 8007284:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	4618      	mov	r0, r3
 800728a:	f000 f86f 	bl	800736c <USBH_Get_USB_Status>
 800728e:	4603      	mov	r3, r0
 8007290:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007292:	7bbb      	ldrb	r3, [r7, #14]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	bd90      	pop	{r4, r7, pc}

0800729c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	460b      	mov	r3, r1
 80072a6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072ae:	78fa      	ldrb	r2, [r7, #3]
 80072b0:	4611      	mov	r1, r2
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fa fc2e 	bl	8001b14 <HAL_HCD_HC_GetURBState>
 80072b8:	4603      	mov	r3, r0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b082      	sub	sp, #8
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	460b      	mov	r3, r1
 80072cc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d103      	bne.n	80072e0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80072d8:	78fb      	ldrb	r3, [r7, #3]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 f872 	bl	80073c4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80072e0:	20c8      	movs	r0, #200	; 0xc8
 80072e2:	f7f9 fd57 	bl	8000d94 <HAL_Delay>
  return USBH_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	70fb      	strb	r3, [r7, #3]
 80072fc:	4613      	mov	r3, r2
 80072fe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007306:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007308:	78fa      	ldrb	r2, [r7, #3]
 800730a:	68f9      	ldr	r1, [r7, #12]
 800730c:	4613      	mov	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	440b      	add	r3, r1
 8007316:	333b      	adds	r3, #59	; 0x3b
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800731e:	78fa      	ldrb	r2, [r7, #3]
 8007320:	68f9      	ldr	r1, [r7, #12]
 8007322:	4613      	mov	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	440b      	add	r3, r1
 800732c:	3350      	adds	r3, #80	; 0x50
 800732e:	78ba      	ldrb	r2, [r7, #2]
 8007330:	701a      	strb	r2, [r3, #0]
 8007332:	e009      	b.n	8007348 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007334:	78fa      	ldrb	r2, [r7, #3]
 8007336:	68f9      	ldr	r1, [r7, #12]
 8007338:	4613      	mov	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	440b      	add	r3, r1
 8007342:	3351      	adds	r3, #81	; 0x51
 8007344:	78ba      	ldrb	r2, [r7, #2]
 8007346:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b082      	sub	sp, #8
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7f9 fd18 	bl	8000d94 <HAL_Delay>
}
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	4603      	mov	r3, r0
 8007374:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800737a:	79fb      	ldrb	r3, [r7, #7]
 800737c:	2b03      	cmp	r3, #3
 800737e:	d817      	bhi.n	80073b0 <USBH_Get_USB_Status+0x44>
 8007380:	a201      	add	r2, pc, #4	; (adr r2, 8007388 <USBH_Get_USB_Status+0x1c>)
 8007382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007386:	bf00      	nop
 8007388:	08007399 	.word	0x08007399
 800738c:	0800739f 	.word	0x0800739f
 8007390:	080073a5 	.word	0x080073a5
 8007394:	080073ab 	.word	0x080073ab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	73fb      	strb	r3, [r7, #15]
    break;
 800739c:	e00b      	b.n	80073b6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800739e:	2302      	movs	r3, #2
 80073a0:	73fb      	strb	r3, [r7, #15]
    break;
 80073a2:	e008      	b.n	80073b6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80073a4:	2301      	movs	r3, #1
 80073a6:	73fb      	strb	r3, [r7, #15]
    break;
 80073a8:	e005      	b.n	80073b6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80073aa:	2302      	movs	r3, #2
 80073ac:	73fb      	strb	r3, [r7, #15]
    break;
 80073ae:	e002      	b.n	80073b6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80073b0:	2302      	movs	r3, #2
 80073b2:	73fb      	strb	r3, [r7, #15]
    break;
 80073b4:	bf00      	nop
  }
  return usb_status;
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80073ce:	79fb      	ldrb	r3, [r7, #7]
 80073d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80073d2:	79fb      	ldrb	r3, [r7, #7]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d102      	bne.n	80073de <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80073d8:	2301      	movs	r3, #1
 80073da:	73fb      	strb	r3, [r7, #15]
 80073dc:	e001      	b.n	80073e2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80073de:	2300      	movs	r3, #0
 80073e0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
 80073e4:	461a      	mov	r2, r3
 80073e6:	2101      	movs	r1, #1
 80073e8:	4803      	ldr	r0, [pc, #12]	; (80073f8 <MX_DriverVbusFS+0x34>)
 80073ea:	f7f9 ffa1 	bl	8001330 <HAL_GPIO_WritePin>
}
 80073ee:	bf00      	nop
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	40020800 	.word	0x40020800

080073fc <__errno>:
 80073fc:	4b01      	ldr	r3, [pc, #4]	; (8007404 <__errno+0x8>)
 80073fe:	6818      	ldr	r0, [r3, #0]
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	2000002c 	.word	0x2000002c

08007408 <__libc_init_array>:
 8007408:	b570      	push	{r4, r5, r6, lr}
 800740a:	4e0d      	ldr	r6, [pc, #52]	; (8007440 <__libc_init_array+0x38>)
 800740c:	4c0d      	ldr	r4, [pc, #52]	; (8007444 <__libc_init_array+0x3c>)
 800740e:	1ba4      	subs	r4, r4, r6
 8007410:	10a4      	asrs	r4, r4, #2
 8007412:	2500      	movs	r5, #0
 8007414:	42a5      	cmp	r5, r4
 8007416:	d109      	bne.n	800742c <__libc_init_array+0x24>
 8007418:	4e0b      	ldr	r6, [pc, #44]	; (8007448 <__libc_init_array+0x40>)
 800741a:	4c0c      	ldr	r4, [pc, #48]	; (800744c <__libc_init_array+0x44>)
 800741c:	f000 f8ea 	bl	80075f4 <_init>
 8007420:	1ba4      	subs	r4, r4, r6
 8007422:	10a4      	asrs	r4, r4, #2
 8007424:	2500      	movs	r5, #0
 8007426:	42a5      	cmp	r5, r4
 8007428:	d105      	bne.n	8007436 <__libc_init_array+0x2e>
 800742a:	bd70      	pop	{r4, r5, r6, pc}
 800742c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007430:	4798      	blx	r3
 8007432:	3501      	adds	r5, #1
 8007434:	e7ee      	b.n	8007414 <__libc_init_array+0xc>
 8007436:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800743a:	4798      	blx	r3
 800743c:	3501      	adds	r5, #1
 800743e:	e7f2      	b.n	8007426 <__libc_init_array+0x1e>
 8007440:	08007630 	.word	0x08007630
 8007444:	08007630 	.word	0x08007630
 8007448:	08007630 	.word	0x08007630
 800744c:	08007634 	.word	0x08007634

08007450 <malloc>:
 8007450:	4b02      	ldr	r3, [pc, #8]	; (800745c <malloc+0xc>)
 8007452:	4601      	mov	r1, r0
 8007454:	6818      	ldr	r0, [r3, #0]
 8007456:	f000 b861 	b.w	800751c <_malloc_r>
 800745a:	bf00      	nop
 800745c:	2000002c 	.word	0x2000002c

08007460 <free>:
 8007460:	4b02      	ldr	r3, [pc, #8]	; (800746c <free+0xc>)
 8007462:	4601      	mov	r1, r0
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	f000 b80b 	b.w	8007480 <_free_r>
 800746a:	bf00      	nop
 800746c:	2000002c 	.word	0x2000002c

08007470 <memset>:
 8007470:	4402      	add	r2, r0
 8007472:	4603      	mov	r3, r0
 8007474:	4293      	cmp	r3, r2
 8007476:	d100      	bne.n	800747a <memset+0xa>
 8007478:	4770      	bx	lr
 800747a:	f803 1b01 	strb.w	r1, [r3], #1
 800747e:	e7f9      	b.n	8007474 <memset+0x4>

08007480 <_free_r>:
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	4605      	mov	r5, r0
 8007484:	2900      	cmp	r1, #0
 8007486:	d045      	beq.n	8007514 <_free_r+0x94>
 8007488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800748c:	1f0c      	subs	r4, r1, #4
 800748e:	2b00      	cmp	r3, #0
 8007490:	bfb8      	it	lt
 8007492:	18e4      	addlt	r4, r4, r3
 8007494:	f000 f8ac 	bl	80075f0 <__malloc_lock>
 8007498:	4a1f      	ldr	r2, [pc, #124]	; (8007518 <_free_r+0x98>)
 800749a:	6813      	ldr	r3, [r2, #0]
 800749c:	4610      	mov	r0, r2
 800749e:	b933      	cbnz	r3, 80074ae <_free_r+0x2e>
 80074a0:	6063      	str	r3, [r4, #4]
 80074a2:	6014      	str	r4, [r2, #0]
 80074a4:	4628      	mov	r0, r5
 80074a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074aa:	f000 b8a2 	b.w	80075f2 <__malloc_unlock>
 80074ae:	42a3      	cmp	r3, r4
 80074b0:	d90c      	bls.n	80074cc <_free_r+0x4c>
 80074b2:	6821      	ldr	r1, [r4, #0]
 80074b4:	1862      	adds	r2, r4, r1
 80074b6:	4293      	cmp	r3, r2
 80074b8:	bf04      	itt	eq
 80074ba:	681a      	ldreq	r2, [r3, #0]
 80074bc:	685b      	ldreq	r3, [r3, #4]
 80074be:	6063      	str	r3, [r4, #4]
 80074c0:	bf04      	itt	eq
 80074c2:	1852      	addeq	r2, r2, r1
 80074c4:	6022      	streq	r2, [r4, #0]
 80074c6:	6004      	str	r4, [r0, #0]
 80074c8:	e7ec      	b.n	80074a4 <_free_r+0x24>
 80074ca:	4613      	mov	r3, r2
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	b10a      	cbz	r2, 80074d4 <_free_r+0x54>
 80074d0:	42a2      	cmp	r2, r4
 80074d2:	d9fa      	bls.n	80074ca <_free_r+0x4a>
 80074d4:	6819      	ldr	r1, [r3, #0]
 80074d6:	1858      	adds	r0, r3, r1
 80074d8:	42a0      	cmp	r0, r4
 80074da:	d10b      	bne.n	80074f4 <_free_r+0x74>
 80074dc:	6820      	ldr	r0, [r4, #0]
 80074de:	4401      	add	r1, r0
 80074e0:	1858      	adds	r0, r3, r1
 80074e2:	4282      	cmp	r2, r0
 80074e4:	6019      	str	r1, [r3, #0]
 80074e6:	d1dd      	bne.n	80074a4 <_free_r+0x24>
 80074e8:	6810      	ldr	r0, [r2, #0]
 80074ea:	6852      	ldr	r2, [r2, #4]
 80074ec:	605a      	str	r2, [r3, #4]
 80074ee:	4401      	add	r1, r0
 80074f0:	6019      	str	r1, [r3, #0]
 80074f2:	e7d7      	b.n	80074a4 <_free_r+0x24>
 80074f4:	d902      	bls.n	80074fc <_free_r+0x7c>
 80074f6:	230c      	movs	r3, #12
 80074f8:	602b      	str	r3, [r5, #0]
 80074fa:	e7d3      	b.n	80074a4 <_free_r+0x24>
 80074fc:	6820      	ldr	r0, [r4, #0]
 80074fe:	1821      	adds	r1, r4, r0
 8007500:	428a      	cmp	r2, r1
 8007502:	bf04      	itt	eq
 8007504:	6811      	ldreq	r1, [r2, #0]
 8007506:	6852      	ldreq	r2, [r2, #4]
 8007508:	6062      	str	r2, [r4, #4]
 800750a:	bf04      	itt	eq
 800750c:	1809      	addeq	r1, r1, r0
 800750e:	6021      	streq	r1, [r4, #0]
 8007510:	605c      	str	r4, [r3, #4]
 8007512:	e7c7      	b.n	80074a4 <_free_r+0x24>
 8007514:	bd38      	pop	{r3, r4, r5, pc}
 8007516:	bf00      	nop
 8007518:	200000b8 	.word	0x200000b8

0800751c <_malloc_r>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	1ccd      	adds	r5, r1, #3
 8007520:	f025 0503 	bic.w	r5, r5, #3
 8007524:	3508      	adds	r5, #8
 8007526:	2d0c      	cmp	r5, #12
 8007528:	bf38      	it	cc
 800752a:	250c      	movcc	r5, #12
 800752c:	2d00      	cmp	r5, #0
 800752e:	4606      	mov	r6, r0
 8007530:	db01      	blt.n	8007536 <_malloc_r+0x1a>
 8007532:	42a9      	cmp	r1, r5
 8007534:	d903      	bls.n	800753e <_malloc_r+0x22>
 8007536:	230c      	movs	r3, #12
 8007538:	6033      	str	r3, [r6, #0]
 800753a:	2000      	movs	r0, #0
 800753c:	bd70      	pop	{r4, r5, r6, pc}
 800753e:	f000 f857 	bl	80075f0 <__malloc_lock>
 8007542:	4a21      	ldr	r2, [pc, #132]	; (80075c8 <_malloc_r+0xac>)
 8007544:	6814      	ldr	r4, [r2, #0]
 8007546:	4621      	mov	r1, r4
 8007548:	b991      	cbnz	r1, 8007570 <_malloc_r+0x54>
 800754a:	4c20      	ldr	r4, [pc, #128]	; (80075cc <_malloc_r+0xb0>)
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	b91b      	cbnz	r3, 8007558 <_malloc_r+0x3c>
 8007550:	4630      	mov	r0, r6
 8007552:	f000 f83d 	bl	80075d0 <_sbrk_r>
 8007556:	6020      	str	r0, [r4, #0]
 8007558:	4629      	mov	r1, r5
 800755a:	4630      	mov	r0, r6
 800755c:	f000 f838 	bl	80075d0 <_sbrk_r>
 8007560:	1c43      	adds	r3, r0, #1
 8007562:	d124      	bne.n	80075ae <_malloc_r+0x92>
 8007564:	230c      	movs	r3, #12
 8007566:	6033      	str	r3, [r6, #0]
 8007568:	4630      	mov	r0, r6
 800756a:	f000 f842 	bl	80075f2 <__malloc_unlock>
 800756e:	e7e4      	b.n	800753a <_malloc_r+0x1e>
 8007570:	680b      	ldr	r3, [r1, #0]
 8007572:	1b5b      	subs	r3, r3, r5
 8007574:	d418      	bmi.n	80075a8 <_malloc_r+0x8c>
 8007576:	2b0b      	cmp	r3, #11
 8007578:	d90f      	bls.n	800759a <_malloc_r+0x7e>
 800757a:	600b      	str	r3, [r1, #0]
 800757c:	50cd      	str	r5, [r1, r3]
 800757e:	18cc      	adds	r4, r1, r3
 8007580:	4630      	mov	r0, r6
 8007582:	f000 f836 	bl	80075f2 <__malloc_unlock>
 8007586:	f104 000b 	add.w	r0, r4, #11
 800758a:	1d23      	adds	r3, r4, #4
 800758c:	f020 0007 	bic.w	r0, r0, #7
 8007590:	1ac3      	subs	r3, r0, r3
 8007592:	d0d3      	beq.n	800753c <_malloc_r+0x20>
 8007594:	425a      	negs	r2, r3
 8007596:	50e2      	str	r2, [r4, r3]
 8007598:	e7d0      	b.n	800753c <_malloc_r+0x20>
 800759a:	428c      	cmp	r4, r1
 800759c:	684b      	ldr	r3, [r1, #4]
 800759e:	bf16      	itet	ne
 80075a0:	6063      	strne	r3, [r4, #4]
 80075a2:	6013      	streq	r3, [r2, #0]
 80075a4:	460c      	movne	r4, r1
 80075a6:	e7eb      	b.n	8007580 <_malloc_r+0x64>
 80075a8:	460c      	mov	r4, r1
 80075aa:	6849      	ldr	r1, [r1, #4]
 80075ac:	e7cc      	b.n	8007548 <_malloc_r+0x2c>
 80075ae:	1cc4      	adds	r4, r0, #3
 80075b0:	f024 0403 	bic.w	r4, r4, #3
 80075b4:	42a0      	cmp	r0, r4
 80075b6:	d005      	beq.n	80075c4 <_malloc_r+0xa8>
 80075b8:	1a21      	subs	r1, r4, r0
 80075ba:	4630      	mov	r0, r6
 80075bc:	f000 f808 	bl	80075d0 <_sbrk_r>
 80075c0:	3001      	adds	r0, #1
 80075c2:	d0cf      	beq.n	8007564 <_malloc_r+0x48>
 80075c4:	6025      	str	r5, [r4, #0]
 80075c6:	e7db      	b.n	8007580 <_malloc_r+0x64>
 80075c8:	200000b8 	.word	0x200000b8
 80075cc:	200000bc 	.word	0x200000bc

080075d0 <_sbrk_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4c06      	ldr	r4, [pc, #24]	; (80075ec <_sbrk_r+0x1c>)
 80075d4:	2300      	movs	r3, #0
 80075d6:	4605      	mov	r5, r0
 80075d8:	4608      	mov	r0, r1
 80075da:	6023      	str	r3, [r4, #0]
 80075dc:	f7f9 fafc 	bl	8000bd8 <_sbrk>
 80075e0:	1c43      	adds	r3, r0, #1
 80075e2:	d102      	bne.n	80075ea <_sbrk_r+0x1a>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	b103      	cbz	r3, 80075ea <_sbrk_r+0x1a>
 80075e8:	602b      	str	r3, [r5, #0]
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
 80075ec:	20000848 	.word	0x20000848

080075f0 <__malloc_lock>:
 80075f0:	4770      	bx	lr

080075f2 <__malloc_unlock>:
 80075f2:	4770      	bx	lr

080075f4 <_init>:
 80075f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f6:	bf00      	nop
 80075f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075fa:	bc08      	pop	{r3}
 80075fc:	469e      	mov	lr, r3
 80075fe:	4770      	bx	lr

08007600 <_fini>:
 8007600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007602:	bf00      	nop
 8007604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007606:	bc08      	pop	{r3}
 8007608:	469e      	mov	lr, r3
 800760a:	4770      	bx	lr
