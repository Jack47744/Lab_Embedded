
test-try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008024  08008024  00018024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008040  08008040  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008040  08008040  00018040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008048  08008048  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008048  08008048  00018048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800804c  0800804c  0001804c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000090  080080e0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  080080e0  0002088c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a0c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037ba  00000000  00000000  00039acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e0  00000000  00000000  0003d288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001168  00000000  00000000  0003e568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023de9  00000000  00000000  0003f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001260c  00000000  00000000  000634b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cca62  00000000  00000000  00075ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142527  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005024  00000000  00000000  001425a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800800c 	.word	0x0800800c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800800c 	.word	0x0800800c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fce9 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f895 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f9d3 	bl	8000880 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004da:	f000 f913 	bl	8000704 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004de:	f000 f93f 	bl	8000760 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e2:	f000 f96d 	bl	80007c0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e6:	f007 f98d 	bl	8007804 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f99f 	bl	800082c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int state = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f2:	f007 f9ad 	bl	8007850 <MX_USB_HOST_Process>
    if(state == 0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==1){
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d117      	bne.n	800052c <main+0x64>
 80004fc:	2101      	movs	r1, #1
 80004fe:	483e      	ldr	r0, [pc, #248]	; (80005f8 <main+0x130>)
 8000500:	f001 f810 	bl	8001524 <HAL_GPIO_ReadPin>
 8000504:	4603      	mov	r3, r0
 8000506:	2b01      	cmp	r3, #1
 8000508:	d110      	bne.n	800052c <main+0x64>
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800050a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800050e:	483b      	ldr	r0, [pc, #236]	; (80005fc <main+0x134>)
 8000510:	f001 f839 	bl	8001586 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000514:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000518:	4838      	ldr	r0, [pc, #224]	; (80005fc <main+0x134>)
 800051a:	f001 f834 	bl	8001586 <HAL_GPIO_TogglePin>
    	state = 1;
 800051e:	2301      	movs	r3, #1
 8000520:	607b      	str	r3, [r7, #4]
    	HAL_Delay(500);
 8000522:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000526:	f000 fd2f 	bl	8000f88 <HAL_Delay>
 800052a:	e063      	b.n	80005f4 <main+0x12c>
    }
    else if(state == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==0){
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d10d      	bne.n	800054e <main+0x86>
 8000532:	2101      	movs	r1, #1
 8000534:	4830      	ldr	r0, [pc, #192]	; (80005f8 <main+0x130>)
 8000536:	f000 fff5 	bl	8001524 <HAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d106      	bne.n	800054e <main+0x86>
    	state = 2;
 8000540:	2302      	movs	r3, #2
 8000542:	607b      	str	r3, [r7, #4]
    	HAL_Delay(500);
 8000544:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000548:	f000 fd1e 	bl	8000f88 <HAL_Delay>
 800054c:	e052      	b.n	80005f4 <main+0x12c>
    }
    else if(state == 2 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==1){
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b02      	cmp	r3, #2
 8000552:	d111      	bne.n	8000578 <main+0xb0>
 8000554:	2101      	movs	r1, #1
 8000556:	4828      	ldr	r0, [pc, #160]	; (80005f8 <main+0x130>)
 8000558:	f000 ffe4 	bl	8001524 <HAL_GPIO_ReadPin>
 800055c:	4603      	mov	r3, r0
 800055e:	2b01      	cmp	r3, #1
 8000560:	d10a      	bne.n	8000578 <main+0xb0>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000562:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000566:	4825      	ldr	r0, [pc, #148]	; (80005fc <main+0x134>)
 8000568:	f001 f80d 	bl	8001586 <HAL_GPIO_TogglePin>
        	state = 3;
 800056c:	2303      	movs	r3, #3
 800056e:	607b      	str	r3, [r7, #4]
        	HAL_Delay(50);
 8000570:	2032      	movs	r0, #50	; 0x32
 8000572:	f000 fd09 	bl	8000f88 <HAL_Delay>
 8000576:	e03d      	b.n	80005f4 <main+0x12c>
    }
    else if(state == 3 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==0){
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2b03      	cmp	r3, #3
 800057c:	d10c      	bne.n	8000598 <main+0xd0>
 800057e:	2101      	movs	r1, #1
 8000580:	481d      	ldr	r0, [pc, #116]	; (80005f8 <main+0x130>)
 8000582:	f000 ffcf 	bl	8001524 <HAL_GPIO_ReadPin>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d105      	bne.n	8000598 <main+0xd0>
        	state = 4;
 800058c:	2304      	movs	r3, #4
 800058e:	607b      	str	r3, [r7, #4]
        	HAL_Delay(50);
 8000590:	2032      	movs	r0, #50	; 0x32
 8000592:	f000 fcf9 	bl	8000f88 <HAL_Delay>
 8000596:	e02d      	b.n	80005f4 <main+0x12c>
    }
    else if(state == 4 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==1){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b04      	cmp	r3, #4
 800059c:	d11b      	bne.n	80005d6 <main+0x10e>
 800059e:	2101      	movs	r1, #1
 80005a0:	4815      	ldr	r0, [pc, #84]	; (80005f8 <main+0x130>)
 80005a2:	f000 ffbf 	bl	8001524 <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d114      	bne.n	80005d6 <main+0x10e>
            	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80005ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b0:	4812      	ldr	r0, [pc, #72]	; (80005fc <main+0x134>)
 80005b2:	f000 ffe8 	bl	8001586 <HAL_GPIO_TogglePin>
            	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ba:	4810      	ldr	r0, [pc, #64]	; (80005fc <main+0x134>)
 80005bc:	f000 ffe3 	bl	8001586 <HAL_GPIO_TogglePin>
            	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <main+0x134>)
 80005c6:	f000 ffde 	bl	8001586 <HAL_GPIO_TogglePin>
            	state = 5;
 80005ca:	2305      	movs	r3, #5
 80005cc:	607b      	str	r3, [r7, #4]
            	HAL_Delay(50);
 80005ce:	2032      	movs	r0, #50	; 0x32
 80005d0:	f000 fcda 	bl	8000f88 <HAL_Delay>
 80005d4:	e00e      	b.n	80005f4 <main+0x12c>
    }
    else if(state == 5 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==0){
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d18a      	bne.n	80004f2 <main+0x2a>
 80005dc:	2101      	movs	r1, #1
 80005de:	4806      	ldr	r0, [pc, #24]	; (80005f8 <main+0x130>)
 80005e0:	f000 ffa0 	bl	8001524 <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d183      	bne.n	80004f2 <main+0x2a>
            	state = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
            	HAL_Delay(50);
 80005ee:	2032      	movs	r0, #50	; 0x32
 80005f0:	f000 fcca 	bl	8000f88 <HAL_Delay>
    MX_USB_HOST_Process();
 80005f4:	e77d      	b.n	80004f2 <main+0x2a>
 80005f6:	bf00      	nop
 80005f8:	40020000 	.word	0x40020000
 80005fc:	40020c00 	.word	0x40020c00

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b098      	sub	sp, #96	; 0x60
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f007 fc3a 	bl	8007e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b31      	ldr	r3, [pc, #196]	; (80006fc <SystemClock_Config+0xfc>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	4a30      	ldr	r2, [pc, #192]	; (80006fc <SystemClock_Config+0xfc>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	6413      	str	r3, [r2, #64]	; 0x40
 8000642:	4b2e      	ldr	r3, [pc, #184]	; (80006fc <SystemClock_Config+0xfc>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <SystemClock_Config+0x100>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a2a      	ldr	r2, [pc, #168]	; (8000700 <SystemClock_Config+0x100>)
 8000658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065c:	6013      	str	r3, [r2, #0]
 800065e:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0x100>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066a:	2301      	movs	r3, #1
 800066c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000672:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000678:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067e:	2308      	movs	r3, #8
 8000680:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000682:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000686:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068c:	2307      	movs	r3, #7
 800068e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000694:	4618      	mov	r0, r3
 8000696:	f003 f9d1 	bl	8003a3c <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006a0:	f000 f9ec 	bl	8000a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	2105      	movs	r1, #5
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fc2a 	bl	8003f1c <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ce:	f000 f9d5 	bl	8000a7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006d2:	2301      	movs	r3, #1
 80006d4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006d6:	23c0      	movs	r3, #192	; 0xc0
 80006d8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 fe0c 	bl	8004300 <HAL_RCCEx_PeriphCLKConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006ee:	f000 f9c5 	bl	8000a7c <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3760      	adds	r7, #96	; 0x60
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_I2C1_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <MX_I2C1_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_I2C1_Init+0x50>)
 8000710:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_I2C1_Init+0x58>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_I2C1_Init+0x50>)
 8000722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000726:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_I2C1_Init+0x50>)
 8000742:	f002 fba3 	bl	8002e8c <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800074c:	f000 f996 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000c0 	.word	0x200000c0
 8000758:	40005400 	.word	0x40005400
 800075c:	000186a0 	.word	0x000186a0

08000760 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_I2S3_Init+0x54>)
 8000766:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <MX_I2S3_Init+0x58>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_I2S3_Init+0x54>)
 800076c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000770:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_I2S3_Init+0x54>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000778:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_I2S3_Init+0x54>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_I2S3_Init+0x54>)
 8000780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000784:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_I2S3_Init+0x54>)
 8000788:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <MX_I2S3_Init+0x5c>)
 800078a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_I2S3_Init+0x54>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_I2S3_Init+0x54>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_I2S3_Init+0x54>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_I2S3_Init+0x54>)
 80007a0:	f002 fcac 	bl	80030fc <HAL_I2S_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007aa:	f000 f967 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200001ac 	.word	0x200001ac
 80007b8:	40003c00 	.word	0x40003c00
 80007bc:	00017700 	.word	0x00017700

080007c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_SPI1_Init+0x64>)
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <MX_SPI1_Init+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_SPI1_Init+0x64>)
 80007cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_SPI1_Init+0x64>)
 80007ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_SPI1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_SPI1_Init+0x64>)
 800080c:	220a      	movs	r2, #10
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_SPI1_Init+0x64>)
 8000812:	f003 feb3 	bl	800457c <HAL_SPI_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800081c:	f000 f92e 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000114 	.word	0x20000114
 8000828:	40013000 	.word	0x40013000

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <MX_USART2_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000864:	f003 feee 	bl	8004644 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086e:	f000 f905 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000016c 	.word	0x2000016c
 800087c:	40004400 	.word	0x40004400

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	; 0x30
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
 800089a:	4b71      	ldr	r3, [pc, #452]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a70      	ldr	r2, [pc, #448]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 80008a0:	f043 0310 	orr.w	r3, r3, #16
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b6e      	ldr	r3, [pc, #440]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0310 	and.w	r3, r3, #16
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	4b6a      	ldr	r3, [pc, #424]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a69      	ldr	r2, [pc, #420]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b67      	ldr	r3, [pc, #412]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b63      	ldr	r3, [pc, #396]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a62      	ldr	r2, [pc, #392]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b60      	ldr	r3, [pc, #384]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b5c      	ldr	r3, [pc, #368]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a5b      	ldr	r2, [pc, #364]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b59      	ldr	r3, [pc, #356]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b55      	ldr	r3, [pc, #340]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a54      	ldr	r2, [pc, #336]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b52      	ldr	r3, [pc, #328]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b4e      	ldr	r3, [pc, #312]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a4d      	ldr	r2, [pc, #308]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b4b      	ldr	r3, [pc, #300]	; (8000a60 <MX_GPIO_Init+0x1e0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2108      	movs	r1, #8
 8000942:	4848      	ldr	r0, [pc, #288]	; (8000a64 <MX_GPIO_Init+0x1e4>)
 8000944:	f000 fe06 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2101      	movs	r1, #1
 800094c:	4846      	ldr	r0, [pc, #280]	; (8000a68 <MX_GPIO_Init+0x1e8>)
 800094e:	f000 fe01 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000952:	2200      	movs	r2, #0
 8000954:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000958:	4844      	ldr	r0, [pc, #272]	; (8000a6c <MX_GPIO_Init+0x1ec>)
 800095a:	f000 fdfb 	bl	8001554 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800095e:	2308      	movs	r3, #8
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	483b      	ldr	r0, [pc, #236]	; (8000a64 <MX_GPIO_Init+0x1e4>)
 8000976:	f000 fc3b 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800097a:	2301      	movs	r3, #1
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4835      	ldr	r0, [pc, #212]	; (8000a68 <MX_GPIO_Init+0x1e8>)
 8000992:	f000 fc2d 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000996:	2308      	movs	r3, #8
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a6:	2305      	movs	r3, #5
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	482d      	ldr	r0, [pc, #180]	; (8000a68 <MX_GPIO_Init+0x1e8>)
 80009b2:	f000 fc1d 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ba:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	482a      	ldr	r0, [pc, #168]	; (8000a74 <MX_GPIO_Init+0x1f4>)
 80009ca:	f000 fc11 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009ce:	2304      	movs	r3, #4
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4825      	ldr	r0, [pc, #148]	; (8000a78 <MX_GPIO_Init+0x1f8>)
 80009e2:	f000 fc05 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f8:	2305      	movs	r3, #5
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	481d      	ldr	r0, [pc, #116]	; (8000a78 <MX_GPIO_Init+0x1f8>)
 8000a04:	f000 fbf4 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000a08:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a0c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4812      	ldr	r0, [pc, #72]	; (8000a6c <MX_GPIO_Init+0x1ec>)
 8000a22:	f000 fbe5 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a26:	2320      	movs	r3, #32
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <MX_GPIO_Init+0x1ec>)
 8000a3a:	f000 fbd9 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_GPIO_Init+0x1e4>)
 8000a52:	f000 fbcd 	bl	80011f0 <HAL_GPIO_Init>

}
 8000a56:	bf00      	nop
 8000a58:	3730      	adds	r7, #48	; 0x30
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020c00 	.word	0x40020c00
 8000a70:	10120000 	.word	0x10120000
 8000a74:	40020000 	.word	0x40020000
 8000a78:	40020400 	.word	0x40020400

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	6413      	str	r3, [r2, #64]	; 0x40
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aca:	2007      	movs	r0, #7
 8000acc:	f000 fb4e 	bl	800116c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <HAL_I2C_MspInit+0x84>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12c      	bne.n	8000b58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b1a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b20:	2312      	movs	r3, #18
 8000b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	480c      	ldr	r0, [pc, #48]	; (8000b68 <HAL_I2C_MspInit+0x8c>)
 8000b38:	f000 fb5a 	bl	80011f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	; 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40005400 	.word	0x40005400
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400

08000b6c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a28      	ldr	r2, [pc, #160]	; (8000c2c <HAL_I2S_MspInit+0xc0>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d14a      	bne.n	8000c24 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <HAL_I2S_MspInit+0xc4>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a26      	ldr	r2, [pc, #152]	; (8000c30 <HAL_I2S_MspInit+0xc4>)
 8000b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <HAL_I2S_MspInit+0xc4>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <HAL_I2S_MspInit+0xc4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a1f      	ldr	r2, [pc, #124]	; (8000c30 <HAL_I2S_MspInit+0xc4>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <HAL_I2S_MspInit+0xc4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_I2S_MspInit+0xc4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a18      	ldr	r2, [pc, #96]	; (8000c30 <HAL_I2S_MspInit+0xc4>)
 8000bd0:	f043 0304 	orr.w	r3, r3, #4
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <HAL_I2S_MspInit+0xc4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000be2:	2310      	movs	r3, #16
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bf2:	2306      	movs	r3, #6
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <HAL_I2S_MspInit+0xc8>)
 8000bfe:	f000 faf7 	bl	80011f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c02:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c14:	2306      	movs	r3, #6
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <HAL_I2S_MspInit+0xcc>)
 8000c20:	f000 fae6 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40003c00 	.word	0x40003c00
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40020800 	.word	0x40020800

08000c3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <HAL_SPI_MspInit+0x84>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d12b      	bne.n	8000cb6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c96:	23e0      	movs	r3, #224	; 0xe0
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <HAL_SPI_MspInit+0x8c>)
 8000cb2:	f000 fa9d 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40013000 	.word	0x40013000
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020000 	.word	0x40020000

08000ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <HAL_UART_MspInit+0x84>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d12b      	bne.n	8000d46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d26:	230c      	movs	r3, #12
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d36:	2307      	movs	r3, #7
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <HAL_UART_MspInit+0x8c>)
 8000d42:	f000 fa55 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d46:	bf00      	nop
 8000d48:	3728      	adds	r7, #40	; 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40004400 	.word	0x40004400
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020000 	.word	0x40020000

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <MemManage_Handler+0x4>

08000d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db0:	f000 f8ca 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <OTG_FS_IRQHandler+0x10>)
 8000dbe:	f000 fe83 	bl	8001ac8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200005c4 	.word	0x200005c4

08000dcc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <_sbrk+0x50>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x16>
		heap_end = &end;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <_sbrk+0x50>)
 8000dde:	4a10      	ldr	r2, [pc, #64]	; (8000e20 <_sbrk+0x54>)
 8000de0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <_sbrk+0x50>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <_sbrk+0x50>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4413      	add	r3, r2
 8000df0:	466a      	mov	r2, sp
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d907      	bls.n	8000e06 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000df6:	f007 f80d 	bl	8007e14 <__errno>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	230c      	movs	r3, #12
 8000dfe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e04:	e006      	b.n	8000e14 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <_sbrk+0x50>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a03      	ldr	r2, [pc, #12]	; (8000e1c <_sbrk+0x50>)
 8000e10:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200000ac 	.word	0x200000ac
 8000e20:	20000890 	.word	0x20000890

08000e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <SystemInit+0x28>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <SystemInit+0x28>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <SystemInit+0x28>)
 8000e3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e56:	e003      	b.n	8000e60 <LoopCopyDataInit>

08000e58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e5e:	3104      	adds	r1, #4

08000e60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e68:	d3f6      	bcc.n	8000e58 <CopyDataInit>
  ldr  r2, =_sbss
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e6c:	e002      	b.n	8000e74 <LoopFillZerobss>

08000e6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e70:	f842 3b04 	str.w	r3, [r2], #4

08000e74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e78:	d3f9      	bcc.n	8000e6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e7a:	f7ff ffd3 	bl	8000e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f006 ffcf 	bl	8007e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e82:	f7ff fb21 	bl	80004c8 <main>
  bx  lr    
 8000e86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e8c:	08008050 	.word	0x08008050
  ldr  r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e94:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000e98:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000e9c:	2000088c 	.word	0x2000088c

08000ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HAL_Init+0x40>)
 8000eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_Init+0x40>)
 8000eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_Init+0x40>)
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 f94d 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 f808 	bl	8000ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed8:	f7ff fdd8 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023c00 	.word	0x40023c00

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x54>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x58>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f965 	bl	80011d6 <HAL_SYSTICK_Config>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00e      	b.n	8000f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d80a      	bhi.n	8000f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f24:	f000 f92d 	bl	8001182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_InitTick+0x5c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000004 	.word	0x20000004

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	200001f4 	.word	0x200001f4

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	200001f4 	.word	0x200001f4

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff ffee 	bl	8000f70 <HAL_GetTick>
 8000f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_Delay+0x40>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fae:	bf00      	nop
 8000fb0:	f7ff ffde 	bl	8000f70 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000008 	.word	0x20000008

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800114c:	f7ff ff8e 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff29 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff3e 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff8e 	bl	80010c0 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5d 	bl	800106c <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff31 	bl	8001030 <__NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffa2 	bl	8001128 <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	; 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
 800120a:	e16b      	b.n	80014e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800120c:	2201      	movs	r2, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	429a      	cmp	r2, r3
 8001226:	f040 815a 	bne.w	80014de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d00b      	beq.n	800124a <HAL_GPIO_Init+0x5a>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800123e:	2b11      	cmp	r3, #17
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b12      	cmp	r3, #18
 8001248:	d130      	bne.n	80012ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 0201 	and.w	r2, r3, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0xfc>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b12      	cmp	r3, #18
 80012ea:	d123      	bne.n	8001334 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	08da      	lsrs	r2, r3, #3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3208      	adds	r2, #8
 80012f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	220f      	movs	r2, #15
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	08da      	lsrs	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3208      	adds	r2, #8
 800132e:	69b9      	ldr	r1, [r7, #24]
 8001330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0203 	and.w	r2, r3, #3
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 80b4 	beq.w	80014de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b5f      	ldr	r3, [pc, #380]	; (80014f8 <HAL_GPIO_Init+0x308>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a5e      	ldr	r2, [pc, #376]	; (80014f8 <HAL_GPIO_Init+0x308>)
 8001380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b5c      	ldr	r3, [pc, #368]	; (80014f8 <HAL_GPIO_Init+0x308>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001392:	4a5a      	ldr	r2, [pc, #360]	; (80014fc <HAL_GPIO_Init+0x30c>)
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	089b      	lsrs	r3, r3, #2
 8001398:	3302      	adds	r3, #2
 800139a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	220f      	movs	r2, #15
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a51      	ldr	r2, [pc, #324]	; (8001500 <HAL_GPIO_Init+0x310>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d02b      	beq.n	8001416 <HAL_GPIO_Init+0x226>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a50      	ldr	r2, [pc, #320]	; (8001504 <HAL_GPIO_Init+0x314>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d025      	beq.n	8001412 <HAL_GPIO_Init+0x222>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4f      	ldr	r2, [pc, #316]	; (8001508 <HAL_GPIO_Init+0x318>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d01f      	beq.n	800140e <HAL_GPIO_Init+0x21e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4e      	ldr	r2, [pc, #312]	; (800150c <HAL_GPIO_Init+0x31c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d019      	beq.n	800140a <HAL_GPIO_Init+0x21a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4d      	ldr	r2, [pc, #308]	; (8001510 <HAL_GPIO_Init+0x320>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d013      	beq.n	8001406 <HAL_GPIO_Init+0x216>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4c      	ldr	r2, [pc, #304]	; (8001514 <HAL_GPIO_Init+0x324>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d00d      	beq.n	8001402 <HAL_GPIO_Init+0x212>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4b      	ldr	r2, [pc, #300]	; (8001518 <HAL_GPIO_Init+0x328>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d007      	beq.n	80013fe <HAL_GPIO_Init+0x20e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4a      	ldr	r2, [pc, #296]	; (800151c <HAL_GPIO_Init+0x32c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_GPIO_Init+0x20a>
 80013f6:	2307      	movs	r3, #7
 80013f8:	e00e      	b.n	8001418 <HAL_GPIO_Init+0x228>
 80013fa:	2308      	movs	r3, #8
 80013fc:	e00c      	b.n	8001418 <HAL_GPIO_Init+0x228>
 80013fe:	2306      	movs	r3, #6
 8001400:	e00a      	b.n	8001418 <HAL_GPIO_Init+0x228>
 8001402:	2305      	movs	r3, #5
 8001404:	e008      	b.n	8001418 <HAL_GPIO_Init+0x228>
 8001406:	2304      	movs	r3, #4
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x228>
 800140a:	2303      	movs	r3, #3
 800140c:	e004      	b.n	8001418 <HAL_GPIO_Init+0x228>
 800140e:	2302      	movs	r3, #2
 8001410:	e002      	b.n	8001418 <HAL_GPIO_Init+0x228>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_GPIO_Init+0x228>
 8001416:	2300      	movs	r3, #0
 8001418:	69fa      	ldr	r2, [r7, #28]
 800141a:	f002 0203 	and.w	r2, r2, #3
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	4093      	lsls	r3, r2
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001428:	4934      	ldr	r1, [pc, #208]	; (80014fc <HAL_GPIO_Init+0x30c>)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3302      	adds	r3, #2
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001436:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <HAL_GPIO_Init+0x330>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800145a:	4a31      	ldr	r2, [pc, #196]	; (8001520 <HAL_GPIO_Init+0x330>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001460:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <HAL_GPIO_Init+0x330>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001484:	4a26      	ldr	r2, [pc, #152]	; (8001520 <HAL_GPIO_Init+0x330>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148a:	4b25      	ldr	r3, [pc, #148]	; (8001520 <HAL_GPIO_Init+0x330>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ae:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <HAL_GPIO_Init+0x330>)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <HAL_GPIO_Init+0x330>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d8:	4a11      	ldr	r2, [pc, #68]	; (8001520 <HAL_GPIO_Init+0x330>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3301      	adds	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	2b0f      	cmp	r3, #15
 80014e8:	f67f ae90 	bls.w	800120c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014ec:	bf00      	nop
 80014ee:	3724      	adds	r7, #36	; 0x24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40013800 	.word	0x40013800
 8001500:	40020000 	.word	0x40020000
 8001504:	40020400 	.word	0x40020400
 8001508:	40020800 	.word	0x40020800
 800150c:	40020c00 	.word	0x40020c00
 8001510:	40021000 	.word	0x40021000
 8001514:	40021400 	.word	0x40021400
 8001518:	40021800 	.word	0x40021800
 800151c:	40021c00 	.word	0x40021c00
 8001520:	40013c00 	.word	0x40013c00

08001524 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	887b      	ldrh	r3, [r7, #2]
 8001536:	4013      	ands	r3, r2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800153c:	2301      	movs	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	e001      	b.n	8001546 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
 8001560:	4613      	mov	r3, r2
 8001562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001570:	e003      	b.n	800157a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001572:	887b      	ldrh	r3, [r7, #2]
 8001574:	041a      	lsls	r2, r3, #16
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	619a      	str	r2, [r3, #24]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	460b      	mov	r3, r1
 8001590:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	401a      	ands	r2, r3
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	429a      	cmp	r2, r3
 800159e:	d104      	bne.n	80015aa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	041a      	lsls	r2, r3, #16
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80015a8:	e002      	b.n	80015b0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	619a      	str	r2, [r3, #24]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015be:	b08f      	sub	sp, #60	; 0x3c
 80015c0:	af0a      	add	r7, sp, #40	; 0x28
 80015c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e054      	b.n	8001678 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d106      	bne.n	80015ee <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f006 f969 	bl	80078c0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2203      	movs	r2, #3
 80015f2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d102      	bne.n	8001608 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f003 fc55 	bl	8004ebc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	687e      	ldr	r6, [r7, #4]
 800161a:	466d      	mov	r5, sp
 800161c:	f106 0410 	add.w	r4, r6, #16
 8001620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001628:	e894 0003 	ldmia.w	r4, {r0, r1}
 800162c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001630:	1d33      	adds	r3, r6, #4
 8001632:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001634:	6838      	ldr	r0, [r7, #0]
 8001636:	f003 fbcf 	bl	8004dd8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2101      	movs	r1, #1
 8001640:	4618      	mov	r0, r3
 8001642:	f003 fc4c 	bl	8004ede <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	687e      	ldr	r6, [r7, #4]
 800164e:	466d      	mov	r5, sp
 8001650:	f106 0410 	add.w	r4, r6, #16
 8001654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001660:	e885 0003 	stmia.w	r5, {r0, r1}
 8001664:	1d33      	adds	r3, r6, #4
 8001666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001668:	6838      	ldr	r0, [r7, #0]
 800166a:	f003 fd5f 	bl	800512c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001680 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af04      	add	r7, sp, #16
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	4608      	mov	r0, r1
 800168a:	4611      	mov	r1, r2
 800168c:	461a      	mov	r2, r3
 800168e:	4603      	mov	r3, r0
 8001690:	70fb      	strb	r3, [r7, #3]
 8001692:	460b      	mov	r3, r1
 8001694:	70bb      	strb	r3, [r7, #2]
 8001696:	4613      	mov	r3, r2
 8001698:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_HCD_HC_Init+0x28>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e07f      	b.n	80017a8 <HAL_HCD_HC_Init+0x128>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80016b0:	78fa      	ldrb	r2, [r7, #3]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	440b      	add	r3, r1
 80016be:	333d      	adds	r3, #61	; 0x3d
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016c4:	78fa      	ldrb	r2, [r7, #3]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	440b      	add	r3, r1
 80016d2:	3338      	adds	r3, #56	; 0x38
 80016d4:	787a      	ldrb	r2, [r7, #1]
 80016d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016d8:	78fa      	ldrb	r2, [r7, #3]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	440b      	add	r3, r1
 80016e6:	3340      	adds	r3, #64	; 0x40
 80016e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016ea:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016ec:	78fa      	ldrb	r2, [r7, #3]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	440b      	add	r3, r1
 80016fa:	3339      	adds	r3, #57	; 0x39
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001700:	78fa      	ldrb	r2, [r7, #3]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	333f      	adds	r3, #63	; 0x3f
 8001710:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001714:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001716:	78fa      	ldrb	r2, [r7, #3]
 8001718:	78bb      	ldrb	r3, [r7, #2]
 800171a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800171e:	b2d8      	uxtb	r0, r3
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	440b      	add	r3, r1
 800172c:	333a      	adds	r3, #58	; 0x3a
 800172e:	4602      	mov	r2, r0
 8001730:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001732:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001736:	2b00      	cmp	r3, #0
 8001738:	da0a      	bge.n	8001750 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800173a:	78fa      	ldrb	r2, [r7, #3]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	333b      	adds	r3, #59	; 0x3b
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
 800174e:	e009      	b.n	8001764 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001750:	78fa      	ldrb	r2, [r7, #3]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	333b      	adds	r3, #59	; 0x3b
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001764:	78fa      	ldrb	r2, [r7, #3]
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	440b      	add	r3, r1
 8001772:	333c      	adds	r3, #60	; 0x3c
 8001774:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001778:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	787c      	ldrb	r4, [r7, #1]
 8001780:	78ba      	ldrb	r2, [r7, #2]
 8001782:	78f9      	ldrb	r1, [r7, #3]
 8001784:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	4623      	mov	r3, r4
 8001796:	f003 fe4b 	bl	8005430 <USB_HC_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd90      	pop	{r4, r7, pc}

080017b0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_HCD_HC_Halt+0x1e>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e00f      	b.n	80017ee <HAL_HCD_HC_Halt+0x3e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	78fa      	ldrb	r2, [r7, #3]
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f004 f885 	bl	80058ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	4608      	mov	r0, r1
 8001802:	4611      	mov	r1, r2
 8001804:	461a      	mov	r2, r3
 8001806:	4603      	mov	r3, r0
 8001808:	70fb      	strb	r3, [r7, #3]
 800180a:	460b      	mov	r3, r1
 800180c:	70bb      	strb	r3, [r7, #2]
 800180e:	4613      	mov	r3, r2
 8001810:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001812:	78fa      	ldrb	r2, [r7, #3]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	333b      	adds	r3, #59	; 0x3b
 8001822:	78ba      	ldrb	r2, [r7, #2]
 8001824:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001826:	78fa      	ldrb	r2, [r7, #3]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	333f      	adds	r3, #63	; 0x3f
 8001836:	787a      	ldrb	r2, [r7, #1]
 8001838:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800183a:	7c3b      	ldrb	r3, [r7, #16]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10a      	bne.n	8001856 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	3342      	adds	r3, #66	; 0x42
 8001850:	2203      	movs	r2, #3
 8001852:	701a      	strb	r2, [r3, #0]
 8001854:	e009      	b.n	800186a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	3342      	adds	r3, #66	; 0x42
 8001866:	2202      	movs	r2, #2
 8001868:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800186a:	787b      	ldrb	r3, [r7, #1]
 800186c:	2b03      	cmp	r3, #3
 800186e:	f200 80d6 	bhi.w	8001a1e <HAL_HCD_HC_SubmitRequest+0x226>
 8001872:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001878:	08001889 	.word	0x08001889
 800187c:	08001a09 	.word	0x08001a09
 8001880:	080018f5 	.word	0x080018f5
 8001884:	0800197f 	.word	0x0800197f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001888:	7c3b      	ldrb	r3, [r7, #16]
 800188a:	2b01      	cmp	r3, #1
 800188c:	f040 80c9 	bne.w	8001a22 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001890:	78bb      	ldrb	r3, [r7, #2]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f040 80c5 	bne.w	8001a22 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001898:	8b3b      	ldrh	r3, [r7, #24]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	440b      	add	r3, r1
 80018ac:	3351      	adds	r3, #81	; 0x51
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	3351      	adds	r3, #81	; 0x51
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10a      	bne.n	80018de <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	440b      	add	r3, r1
 80018d6:	3342      	adds	r3, #66	; 0x42
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018dc:	e0a1      	b.n	8001a22 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018de:	78fa      	ldrb	r2, [r7, #3]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	3342      	adds	r3, #66	; 0x42
 80018ee:	2202      	movs	r2, #2
 80018f0:	701a      	strb	r2, [r3, #0]
      break;
 80018f2:	e096      	b.n	8001a22 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018f4:	78bb      	ldrb	r3, [r7, #2]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d120      	bne.n	800193c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018fa:	78fa      	ldrb	r2, [r7, #3]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	440b      	add	r3, r1
 8001908:	3351      	adds	r3, #81	; 0x51
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10a      	bne.n	8001926 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	3342      	adds	r3, #66	; 0x42
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001924:	e07e      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001926:	78fa      	ldrb	r2, [r7, #3]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	3342      	adds	r3, #66	; 0x42
 8001936:	2202      	movs	r2, #2
 8001938:	701a      	strb	r2, [r3, #0]
      break;
 800193a:	e073      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	3350      	adds	r3, #80	; 0x50
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10a      	bne.n	8001968 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	3342      	adds	r3, #66	; 0x42
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
      break;
 8001966:	e05d      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	3342      	adds	r3, #66	; 0x42
 8001978:	2202      	movs	r2, #2
 800197a:	701a      	strb	r2, [r3, #0]
      break;
 800197c:	e052      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800197e:	78bb      	ldrb	r3, [r7, #2]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d120      	bne.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001984:	78fa      	ldrb	r2, [r7, #3]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	440b      	add	r3, r1
 8001992:	3351      	adds	r3, #81	; 0x51
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10a      	bne.n	80019b0 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	440b      	add	r3, r1
 80019a8:	3342      	adds	r3, #66	; 0x42
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019ae:	e039      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	440b      	add	r3, r1
 80019be:	3342      	adds	r3, #66	; 0x42
 80019c0:	2202      	movs	r2, #2
 80019c2:	701a      	strb	r2, [r3, #0]
      break;
 80019c4:	e02e      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019c6:	78fa      	ldrb	r2, [r7, #3]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	440b      	add	r3, r1
 80019d4:	3350      	adds	r3, #80	; 0x50
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10a      	bne.n	80019f2 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019dc:	78fa      	ldrb	r2, [r7, #3]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	3342      	adds	r3, #66	; 0x42
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
      break;
 80019f0:	e018      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019f2:	78fa      	ldrb	r2, [r7, #3]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	440b      	add	r3, r1
 8001a00:	3342      	adds	r3, #66	; 0x42
 8001a02:	2202      	movs	r2, #2
 8001a04:	701a      	strb	r2, [r3, #0]
      break;
 8001a06:	e00d      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	440b      	add	r3, r1
 8001a16:	3342      	adds	r3, #66	; 0x42
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
      break;
 8001a1c:	e002      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001a1e:	bf00      	nop
 8001a20:	e000      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001a22:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	3344      	adds	r3, #68	; 0x44
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a38:	78fa      	ldrb	r2, [r7, #3]
 8001a3a:	8b39      	ldrh	r1, [r7, #24]
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4403      	add	r3, r0
 8001a48:	3348      	adds	r3, #72	; 0x48
 8001a4a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a4c:	78fa      	ldrb	r2, [r7, #3]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	440b      	add	r3, r1
 8001a5a:	335c      	adds	r3, #92	; 0x5c
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	334c      	adds	r3, #76	; 0x4c
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	440b      	add	r3, r1
 8001a82:	3339      	adds	r3, #57	; 0x39
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	335d      	adds	r3, #93	; 0x5d
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	3338      	adds	r3, #56	; 0x38
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	18d1      	adds	r1, r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f003 fdc4 	bl	8005644 <USB_HC_StartXfer>
 8001abc:	4603      	mov	r3, r0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop

08001ac8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 fae1 	bl	80050a6 <USB_GetMode>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	f040 80f1 	bne.w	8001cce <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f003 fac5 	bl	8005080 <USB_ReadInterrupts>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 80e7 	beq.w	8001ccc <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f003 fabc 	bl	8005080 <USB_ReadInterrupts>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b12:	d104      	bne.n	8001b1e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 faac 	bl	8005080 <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b32:	d104      	bne.n	8001b3e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 fa9c 	bl	8005080 <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b52:	d104      	bne.n	8001b5e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 fa8c 	bl	8005080 <USB_ReadInterrupts>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d103      	bne.n	8001b7a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2202      	movs	r2, #2
 8001b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 fa7e 	bl	8005080 <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b8e:	d117      	bne.n	8001bc0 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001b9e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001ba2:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f005 ff09 	bl	80079bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2101      	movs	r1, #1
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f003 fb77 	bl	80052a4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 fa5b 	bl	8005080 <USB_ReadInterrupts>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd4:	d102      	bne.n	8001bdc <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f001 f8c8 	bl	8002d6c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 fa4d 	bl	8005080 <USB_ReadInterrupts>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d106      	bne.n	8001bfe <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f005 fec7 	bl	8007984 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2208      	movs	r2, #8
 8001bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 fa3c 	bl	8005080 <USB_ReadInterrupts>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c12:	d138      	bne.n	8001c86 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f003 fe57 	bl	80058cc <USB_HC_ReadInterrupt>
 8001c1e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	e025      	b.n	8001c72 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d018      	beq.n	8001c6c <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c50:	d106      	bne.n	8001c60 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	4619      	mov	r1, r3
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f8cf 	bl	8001dfc <HCD_HC_IN_IRQHandler>
 8001c5e:	e005      	b.n	8001c6c <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	4619      	mov	r1, r3
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 fc5f 	bl	800252a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d3d4      	bcc.n	8001c26 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 f9f8 	bl	8005080 <USB_ReadInterrupts>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b10      	cmp	r3, #16
 8001c98:	d101      	bne.n	8001c9e <HAL_HCD_IRQHandler+0x1d6>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_HCD_IRQHandler+0x1d8>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d014      	beq.n	8001cce <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699a      	ldr	r2, [r3, #24]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0210 	bic.w	r2, r2, #16
 8001cb2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 ffad 	bl	8002c14 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	699a      	ldr	r2, [r3, #24]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0210 	orr.w	r2, r2, #16
 8001cc8:	619a      	str	r2, [r3, #24]
 8001cca:	e000      	b.n	8001cce <HAL_HCD_IRQHandler+0x206>
      return;
 8001ccc:	bf00      	nop
    }
  }
}
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_HCD_Start+0x16>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e013      	b.n	8001d12 <HAL_HCD_Start+0x3e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 f8cf 	bl	8004e9a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2101      	movs	r1, #1
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 fb32 	bl	800536c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_HCD_Stop+0x16>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e00d      	b.n	8001d4c <HAL_HCD_Stop+0x32>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 ff11 	bl	8005b64 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 fad9 	bl	8005318 <USB_ResetPort>
 8001d66:	4603      	mov	r3, r0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d7c:	78fa      	ldrb	r2, [r7, #3]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	440b      	add	r3, r1
 8001d8a:	335c      	adds	r3, #92	; 0x5c
 8001d8c:	781b      	ldrb	r3, [r3, #0]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001da6:	78fa      	ldrb	r2, [r7, #3]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	334c      	adds	r3, #76	; 0x4c
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 fb1b 	bl	800540c <USB_GetCurrentFrame>
 8001dd6:	4603      	mov	r3, r0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 faf6 	bl	80053de <USB_GetHostSpeed>
 8001df2:	4603      	mov	r3, r0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d119      	bne.n	8001e60 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	015a      	lsls	r2, r3, #5
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e38:	461a      	mov	r2, r3
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	015a      	lsls	r2, r3, #5
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	0151      	lsls	r1, r2, #5
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	440a      	add	r2, r1
 8001e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	60d3      	str	r3, [r2, #12]
 8001e5e:	e095      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 0320 	and.w	r3, r3, #32
 8001e72:	2b20      	cmp	r3, #32
 8001e74:	d109      	bne.n	8001e8a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	015a      	lsls	r2, r3, #5
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e82:	461a      	mov	r2, r3
 8001e84:	2320      	movs	r3, #32
 8001e86:	6093      	str	r3, [r2, #8]
 8001e88:	e080      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	015a      	lsls	r2, r3, #5
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d134      	bne.n	8001f0a <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	0151      	lsls	r1, r2, #5
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	440a      	add	r2, r1
 8001eb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eba:	f043 0302 	orr.w	r3, r3, #2
 8001ebe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	440b      	add	r3, r1
 8001ece:	335d      	adds	r3, #93	; 0x5d
 8001ed0:	2205      	movs	r2, #5
 8001ed2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2310      	movs	r3, #16
 8001ee4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f003 fcf3 	bl	80058ee <USB_HC_Halt>
 8001f08:	e040      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f20:	d134      	bne.n	8001f8c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	0151      	lsls	r1, r2, #5
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	440a      	add	r2, r1
 8001f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 fcce 	bl	80058ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2310      	movs	r3, #16
 8001f62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	335d      	adds	r3, #93	; 0x5d
 8001f74:	2208      	movs	r2, #8
 8001f76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f84:	461a      	mov	r2, r3
 8001f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f8a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa2:	d122      	bne.n	8001fea <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	0151      	lsls	r1, r2, #5
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	440a      	add	r2, r1
 8001fba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fbe:	f043 0302 	orr.w	r3, r3, #2
 8001fc2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 fc8d 	bl	80058ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001fe8:	e29b      	b.n	8002522 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	f040 80c1 	bne.w	8002184 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d01b      	beq.n	8002042 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	440b      	add	r3, r1
 8002018:	3348      	adds	r3, #72	; 0x48
 800201a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	0159      	lsls	r1, r3, #5
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	440b      	add	r3, r1
 8002024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800202e:	1ad1      	subs	r1, r2, r3
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4403      	add	r3, r0
 800203e:	334c      	adds	r3, #76	; 0x4c
 8002040:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	440b      	add	r3, r1
 8002050:	335d      	adds	r3, #93	; 0x5d
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	440b      	add	r3, r1
 8002064:	3358      	adds	r3, #88	; 0x58
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4413      	add	r3, r2
 8002072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002076:	461a      	mov	r2, r3
 8002078:	2301      	movs	r3, #1
 800207a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	333f      	adds	r3, #63	; 0x3f
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	440b      	add	r3, r1
 80020a0:	333f      	adds	r3, #63	; 0x3f
 80020a2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d121      	bne.n	80020ec <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	0151      	lsls	r1, r2, #5
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	440a      	add	r2, r1
 80020be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f003 fc0b 	bl	80058ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e4:	461a      	mov	r2, r3
 80020e6:	2310      	movs	r3, #16
 80020e8:	6093      	str	r3, [r2, #8]
 80020ea:	e034      	b.n	8002156 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	333f      	adds	r3, #63	; 0x3f
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d129      	bne.n	8002156 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4413      	add	r3, r2
 800210a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	0151      	lsls	r1, r2, #5
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	440a      	add	r2, r1
 8002118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800211c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002120:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	335c      	adds	r3, #92	; 0x5c
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	b2d8      	uxtb	r0, r3
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	440b      	add	r3, r1
 8002148:	335c      	adds	r3, #92	; 0x5c
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4601      	mov	r1, r0
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f005 fc41 	bl	80079d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	440b      	add	r3, r1
 8002164:	3350      	adds	r3, #80	; 0x50
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	f083 0301 	eor.w	r3, r3, #1
 800216c:	b2d8      	uxtb	r0, r3
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	3350      	adds	r3, #80	; 0x50
 800217e:	4602      	mov	r2, r0
 8002180:	701a      	strb	r2, [r3, #0]
}
 8002182:	e1ce      	b.n	8002522 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4413      	add	r3, r2
 800218c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b02      	cmp	r3, #2
 8002198:	f040 80f1 	bne.w	800237e <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	0151      	lsls	r1, r2, #5
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	440a      	add	r2, r1
 80021b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021b6:	f023 0302 	bic.w	r3, r3, #2
 80021ba:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	335d      	adds	r3, #93	; 0x5d
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d10a      	bne.n	80021e8 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	440b      	add	r3, r1
 80021e0:	335c      	adds	r3, #92	; 0x5c
 80021e2:	2201      	movs	r2, #1
 80021e4:	701a      	strb	r2, [r3, #0]
 80021e6:	e0b0      	b.n	800234a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	440b      	add	r3, r1
 80021f6:	335d      	adds	r3, #93	; 0x5d
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b05      	cmp	r3, #5
 80021fc:	d10a      	bne.n	8002214 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	440b      	add	r3, r1
 800220c:	335c      	adds	r3, #92	; 0x5c
 800220e:	2205      	movs	r2, #5
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	e09a      	b.n	800234a <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	440b      	add	r3, r1
 8002222:	335d      	adds	r3, #93	; 0x5d
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b06      	cmp	r3, #6
 8002228:	d00a      	beq.n	8002240 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	440b      	add	r3, r1
 8002238:	335d      	adds	r3, #93	; 0x5d
 800223a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800223c:	2b08      	cmp	r3, #8
 800223e:	d156      	bne.n	80022ee <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	3358      	adds	r3, #88	; 0x58
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	1c59      	adds	r1, r3, #1
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4403      	add	r3, r0
 8002262:	3358      	adds	r3, #88	; 0x58
 8002264:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	440b      	add	r3, r1
 8002274:	3358      	adds	r3, #88	; 0x58
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d914      	bls.n	80022a6 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	3358      	adds	r3, #88	; 0x58
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	440b      	add	r3, r1
 800229e:	335c      	adds	r3, #92	; 0x5c
 80022a0:	2204      	movs	r2, #4
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	e009      	b.n	80022ba <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	440b      	add	r3, r1
 80022b4:	335c      	adds	r3, #92	; 0x5c
 80022b6:	2202      	movs	r2, #2
 80022b8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022d0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022d8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e6:	461a      	mov	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	e02d      	b.n	800234a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	335d      	adds	r3, #93	; 0x5d
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d122      	bne.n	800234a <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	440b      	add	r3, r1
 8002312:	335c      	adds	r3, #92	; 0x5c
 8002314:	2202      	movs	r2, #2
 8002316:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800232e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002336:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	461a      	mov	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4413      	add	r3, r2
 8002352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002356:	461a      	mov	r2, r3
 8002358:	2302      	movs	r3, #2
 800235a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	b2d8      	uxtb	r0, r3
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	335c      	adds	r3, #92	; 0x5c
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	4601      	mov	r1, r0
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f005 fb2e 	bl	80079d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800237c:	e0d1      	b.n	8002522 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4413      	add	r3, r2
 8002386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002390:	2b80      	cmp	r3, #128	; 0x80
 8002392:	d13e      	bne.n	8002412 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	0151      	lsls	r1, r2, #5
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	440a      	add	r2, r1
 80023aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ae:	f043 0302 	orr.w	r3, r3, #2
 80023b2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	440b      	add	r3, r1
 80023c2:	3358      	adds	r3, #88	; 0x58
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	1c59      	adds	r1, r3, #1
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4403      	add	r3, r0
 80023d6:	3358      	adds	r3, #88	; 0x58
 80023d8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	440b      	add	r3, r1
 80023e8:	335d      	adds	r3, #93	; 0x5d
 80023ea:	2206      	movs	r2, #6
 80023ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f003 fa78 	bl	80058ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	461a      	mov	r2, r3
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	6093      	str	r3, [r2, #8]
}
 8002410:	e087      	b.n	8002522 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4413      	add	r3, r2
 800241a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b10      	cmp	r3, #16
 8002426:	d17c      	bne.n	8002522 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	440b      	add	r3, r1
 8002436:	333f      	adds	r3, #63	; 0x3f
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b03      	cmp	r3, #3
 800243c:	d122      	bne.n	8002484 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	440b      	add	r3, r1
 800244c:	3358      	adds	r3, #88	; 0x58
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	0151      	lsls	r1, r2, #5
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	440a      	add	r2, r1
 8002468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f003 fa36 	bl	80058ee <USB_HC_Halt>
 8002482:	e045      	b.n	8002510 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	440b      	add	r3, r1
 8002492:	333f      	adds	r3, #63	; 0x3f
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	440b      	add	r3, r1
 80024a8:	333f      	adds	r3, #63	; 0x3f
 80024aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d12f      	bne.n	8002510 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	440b      	add	r3, r1
 80024be:	3358      	adds	r3, #88	; 0x58
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d121      	bne.n	8002510 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	440b      	add	r3, r1
 80024da:	335d      	adds	r3, #93	; 0x5d
 80024dc:	2203      	movs	r2, #3
 80024de:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	0151      	lsls	r1, r2, #5
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	440a      	add	r2, r1
 80024f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024fa:	f043 0302 	orr.w	r3, r3, #2
 80024fe:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f003 f9ef 	bl	80058ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251c:	461a      	mov	r2, r3
 800251e:	2310      	movs	r3, #16
 8002520:	6093      	str	r3, [r2, #8]
}
 8002522:	bf00      	nop
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4413      	add	r3, r2
 800254c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b04      	cmp	r3, #4
 8002558:	d119      	bne.n	800258e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002566:	461a      	mov	r2, r3
 8002568:	2304      	movs	r3, #4
 800256a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	0151      	lsls	r1, r2, #5
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	440a      	add	r2, r1
 8002582:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002586:	f043 0302 	orr.w	r3, r3, #2
 800258a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800258c:	e33e      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4413      	add	r3, r2
 8002596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d141      	bne.n	8002628 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b0:	461a      	mov	r2, r3
 80025b2:	2320      	movs	r3, #32
 80025b4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	333d      	adds	r3, #61	; 0x3d
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	f040 831f 	bne.w	8002c0c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	440b      	add	r3, r1
 80025dc:	333d      	adds	r3, #61	; 0x3d
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	440b      	add	r3, r1
 80025f0:	335c      	adds	r3, #92	; 0x5c
 80025f2:	2202      	movs	r2, #2
 80025f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	0151      	lsls	r1, r2, #5
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	440a      	add	r2, r1
 800260c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f003 f964 	bl	80058ee <USB_HC_Halt>
}
 8002626:	e2f1      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b40      	cmp	r3, #64	; 0x40
 800263c:	d13f      	bne.n	80026be <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	440b      	add	r3, r1
 800264c:	335d      	adds	r3, #93	; 0x5d
 800264e:	2204      	movs	r2, #4
 8002650:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	440b      	add	r3, r1
 8002660:	333d      	adds	r3, #61	; 0x3d
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	440b      	add	r3, r1
 8002674:	3358      	adds	r3, #88	; 0x58
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	0151      	lsls	r1, r2, #5
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	440a      	add	r2, r1
 8002690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002694:	f043 0302 	orr.w	r3, r3, #2
 8002698:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f003 f922 	bl	80058ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b6:	461a      	mov	r2, r3
 80026b8:	2340      	movs	r3, #64	; 0x40
 80026ba:	6093      	str	r3, [r2, #8]
}
 80026bc:	e2a6      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026d4:	d122      	bne.n	800271c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	0151      	lsls	r1, r2, #5
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	440a      	add	r2, r1
 80026ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f003 f8f4 	bl	80058ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002712:	461a      	mov	r2, r3
 8002714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002718:	6093      	str	r3, [r2, #8]
}
 800271a:	e277      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d135      	bne.n	800279e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	440b      	add	r3, r1
 8002740:	3358      	adds	r3, #88	; 0x58
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	0151      	lsls	r1, r2, #5
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	440a      	add	r2, r1
 800275c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f003 f8bc 	bl	80058ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002782:	461a      	mov	r2, r3
 8002784:	2301      	movs	r3, #1
 8002786:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	440b      	add	r3, r1
 8002796:	335d      	adds	r3, #93	; 0x5d
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
}
 800279c:	e236      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d12b      	bne.n	800280c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	461a      	mov	r2, r3
 80027c2:	2308      	movs	r3, #8
 80027c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	0151      	lsls	r1, r2, #5
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	440a      	add	r2, r1
 80027dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f003 f87c 	bl	80058ee <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	440b      	add	r3, r1
 8002804:	335d      	adds	r3, #93	; 0x5d
 8002806:	2205      	movs	r2, #5
 8002808:	701a      	strb	r2, [r3, #0]
}
 800280a:	e1ff      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b10      	cmp	r3, #16
 8002820:	d155      	bne.n	80028ce <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	440b      	add	r3, r1
 8002830:	3358      	adds	r3, #88	; 0x58
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	440b      	add	r3, r1
 8002844:	335d      	adds	r3, #93	; 0x5d
 8002846:	2203      	movs	r2, #3
 8002848:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	440b      	add	r3, r1
 8002858:	333d      	adds	r3, #61	; 0x3d
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d114      	bne.n	800288a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	440b      	add	r3, r1
 800286e:	333c      	adds	r3, #60	; 0x3c
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	440b      	add	r3, r1
 8002884:	333d      	adds	r3, #61	; 0x3d
 8002886:	2201      	movs	r2, #1
 8002888:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	0151      	lsls	r1, r2, #5
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	440a      	add	r2, r1
 80028a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 f81a 	bl	80058ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c6:	461a      	mov	r2, r3
 80028c8:	2310      	movs	r3, #16
 80028ca:	6093      	str	r3, [r2, #8]
}
 80028cc:	e19e      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e0:	2b80      	cmp	r3, #128	; 0x80
 80028e2:	d12b      	bne.n	800293c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	0151      	lsls	r1, r2, #5
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	440a      	add	r2, r1
 80028fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028fe:	f043 0302 	orr.w	r3, r3, #2
 8002902:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f002 ffed 	bl	80058ee <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	440b      	add	r3, r1
 8002922:	335d      	adds	r3, #93	; 0x5d
 8002924:	2206      	movs	r2, #6
 8002926:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	015a      	lsls	r2, r3, #5
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4413      	add	r3, r2
 8002930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002934:	461a      	mov	r2, r3
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	6093      	str	r3, [r2, #8]
}
 800293a:	e167      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002952:	d135      	bne.n	80029c0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	0151      	lsls	r1, r2, #5
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	440a      	add	r2, r1
 800296a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800296e:	f043 0302 	orr.w	r3, r3, #2
 8002972:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f002 ffb5 	bl	80058ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4413      	add	r3, r2
 800298c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002990:	461a      	mov	r2, r3
 8002992:	2310      	movs	r3, #16
 8002994:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a2:	461a      	mov	r2, r3
 80029a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	440b      	add	r3, r1
 80029b8:	335d      	adds	r3, #93	; 0x5d
 80029ba:	2208      	movs	r2, #8
 80029bc:	701a      	strb	r2, [r3, #0]
}
 80029be:	e125      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	f040 811a 	bne.w	8002c0c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	0151      	lsls	r1, r2, #5
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	440a      	add	r2, r1
 80029ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029f2:	f023 0302 	bic.w	r3, r3, #2
 80029f6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	440b      	add	r3, r1
 8002a06:	335d      	adds	r3, #93	; 0x5d
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d137      	bne.n	8002a7e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	440b      	add	r3, r1
 8002a1c:	335c      	adds	r3, #92	; 0x5c
 8002a1e:	2201      	movs	r2, #1
 8002a20:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	440b      	add	r3, r1
 8002a30:	333f      	adds	r3, #63	; 0x3f
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d00b      	beq.n	8002a50 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	333f      	adds	r3, #63	; 0x3f
 8002a48:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	f040 80c5 	bne.w	8002bda <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3351      	adds	r3, #81	; 0x51
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	f083 0301 	eor.w	r3, r3, #1
 8002a66:	b2d8      	uxtb	r0, r3
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	440b      	add	r3, r1
 8002a76:	3351      	adds	r3, #81	; 0x51
 8002a78:	4602      	mov	r2, r0
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	e0ad      	b.n	8002bda <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	335d      	adds	r3, #93	; 0x5d
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d10a      	bne.n	8002aaa <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	335c      	adds	r3, #92	; 0x5c
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	701a      	strb	r2, [r3, #0]
 8002aa8:	e097      	b.n	8002bda <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	335d      	adds	r3, #93	; 0x5d
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d10a      	bne.n	8002ad6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	335c      	adds	r3, #92	; 0x5c
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	e081      	b.n	8002bda <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	335d      	adds	r3, #93	; 0x5d
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d10a      	bne.n	8002b02 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	335c      	adds	r3, #92	; 0x5c
 8002afc:	2205      	movs	r2, #5
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	e06b      	b.n	8002bda <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	440b      	add	r3, r1
 8002b10:	335d      	adds	r3, #93	; 0x5d
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b06      	cmp	r3, #6
 8002b16:	d00a      	beq.n	8002b2e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	440b      	add	r3, r1
 8002b26:	335d      	adds	r3, #93	; 0x5d
 8002b28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d155      	bne.n	8002bda <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3358      	adds	r3, #88	; 0x58
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	1c59      	adds	r1, r3, #1
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4403      	add	r3, r0
 8002b50:	3358      	adds	r3, #88	; 0x58
 8002b52:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	440b      	add	r3, r1
 8002b62:	3358      	adds	r3, #88	; 0x58
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d914      	bls.n	8002b94 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	3358      	adds	r3, #88	; 0x58
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	335c      	adds	r3, #92	; 0x5c
 8002b8e:	2204      	movs	r2, #4
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e009      	b.n	8002ba8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	335c      	adds	r3, #92	; 0x5c
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bbe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bc6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be6:	461a      	mov	r2, r3
 8002be8:	2302      	movs	r3, #2
 8002bea:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	b2d8      	uxtb	r0, r3
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	440b      	add	r3, r1
 8002bfe:	335c      	adds	r3, #92	; 0x5c
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	4601      	mov	r1, r0
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f004 fee6 	bl	80079d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c0c:	bf00      	nop
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	0c5b      	lsrs	r3, r3, #17
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c48:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d003      	beq.n	8002c58 <HCD_RXQLVL_IRQHandler+0x44>
 8002c50:	2b05      	cmp	r3, #5
 8002c52:	f000 8082 	beq.w	8002d5a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c56:	e083      	b.n	8002d60 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d07f      	beq.n	8002d5e <HCD_RXQLVL_IRQHandler+0x14a>
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	440b      	add	r3, r1
 8002c6c:	3344      	adds	r3, #68	; 0x44
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d074      	beq.n	8002d5e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	440b      	add	r3, r1
 8002c86:	3344      	adds	r3, #68	; 0x44
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	b292      	uxth	r2, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f002 f9cd 	bl	800502e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	440b      	add	r3, r1
 8002ca2:	3344      	adds	r3, #68	; 0x44
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	18d1      	adds	r1, r2, r3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4403      	add	r3, r0
 8002cb8:	3344      	adds	r3, #68	; 0x44
 8002cba:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	440b      	add	r3, r1
 8002cca:	334c      	adds	r3, #76	; 0x4c
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	18d1      	adds	r1, r2, r3
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4403      	add	r3, r0
 8002ce0:	334c      	adds	r3, #76	; 0x4c
 8002ce2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HCD_RXQLVL_IRQHandler+0x154>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d031      	beq.n	8002d5e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d10:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d18:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	440b      	add	r3, r1
 8002d3a:	3350      	adds	r3, #80	; 0x50
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	f083 0301 	eor.w	r3, r3, #1
 8002d42:	b2d8      	uxtb	r0, r3
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	3350      	adds	r3, #80	; 0x50
 8002d54:	4602      	mov	r2, r0
 8002d56:	701a      	strb	r2, [r3, #0]
      break;
 8002d58:	e001      	b.n	8002d5e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002d5a:	bf00      	nop
 8002d5c:	e000      	b.n	8002d60 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002d5e:	bf00      	nop
  }
}
 8002d60:	bf00      	nop
 8002d62:	3728      	adds	r7, #40	; 0x28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	1ff80000 	.word	0x1ff80000

08002d6c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d98:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d113      	bne.n	8002dcc <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d10a      	bne.n	8002dc4 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002dbc:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f004 fdee 	bl	80079a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f043 0302 	orr.w	r3, r3, #2
 8002dca:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d147      	bne.n	8002e66 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f043 0308 	orr.w	r3, r3, #8
 8002ddc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d129      	bne.n	8002e3c <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d113      	bne.n	8002e18 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002df6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dfa:	d106      	bne.n	8002e0a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2102      	movs	r1, #2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f002 fa4e 	bl	80052a4 <USB_InitFSLSPClkSel>
 8002e08:	e011      	b.n	8002e2e <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2101      	movs	r1, #1
 8002e10:	4618      	mov	r0, r3
 8002e12:	f002 fa47 	bl	80052a4 <USB_InitFSLSPClkSel>
 8002e16:	e00a      	b.n	8002e2e <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d106      	bne.n	8002e2e <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e26:	461a      	mov	r2, r3
 8002e28:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e2c:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f004 fde0 	bl	80079f4 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f004 fdb3 	bl	80079a0 <HAL_HCD_Connect_Callback>
 8002e3a:	e014      	b.n	8002e66 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f004 fde7 	bl	8007a10 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002e50:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e54:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699a      	ldr	r2, [r3, #24]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002e64:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f003 0320 	and.w	r3, r3, #32
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d103      	bne.n	8002e78 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f043 0320 	orr.w	r3, r3, #32
 8002e76:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	6013      	str	r3, [r2, #0]
}
 8002e84:	bf00      	nop
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e11f      	b.n	80030de <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fd fe12 	bl	8000adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2224      	movs	r2, #36	; 0x24
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ede:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ef0:	f001 f9de 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 8002ef4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4a7b      	ldr	r2, [pc, #492]	; (80030e8 <HAL_I2C_Init+0x25c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d807      	bhi.n	8002f10 <HAL_I2C_Init+0x84>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a7a      	ldr	r2, [pc, #488]	; (80030ec <HAL_I2C_Init+0x260>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	bf94      	ite	ls
 8002f08:	2301      	movls	r3, #1
 8002f0a:	2300      	movhi	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	e006      	b.n	8002f1e <HAL_I2C_Init+0x92>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4a77      	ldr	r2, [pc, #476]	; (80030f0 <HAL_I2C_Init+0x264>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	bf94      	ite	ls
 8002f18:	2301      	movls	r3, #1
 8002f1a:	2300      	movhi	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e0db      	b.n	80030de <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4a72      	ldr	r2, [pc, #456]	; (80030f4 <HAL_I2C_Init+0x268>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0c9b      	lsrs	r3, r3, #18
 8002f30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4a64      	ldr	r2, [pc, #400]	; (80030e8 <HAL_I2C_Init+0x25c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d802      	bhi.n	8002f60 <HAL_I2C_Init+0xd4>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	e009      	b.n	8002f74 <HAL_I2C_Init+0xe8>
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f66:	fb02 f303 	mul.w	r3, r2, r3
 8002f6a:	4a63      	ldr	r2, [pc, #396]	; (80030f8 <HAL_I2C_Init+0x26c>)
 8002f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f70:	099b      	lsrs	r3, r3, #6
 8002f72:	3301      	adds	r3, #1
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4956      	ldr	r1, [pc, #344]	; (80030e8 <HAL_I2C_Init+0x25c>)
 8002f90:	428b      	cmp	r3, r1
 8002f92:	d80d      	bhi.n	8002fb0 <HAL_I2C_Init+0x124>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1e59      	subs	r1, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	bf38      	it	cc
 8002fac:	2304      	movcc	r3, #4
 8002fae:	e04f      	b.n	8003050 <HAL_I2C_Init+0x1c4>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d111      	bne.n	8002fdc <HAL_I2C_Init+0x150>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e58      	subs	r0, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	440b      	add	r3, r1
 8002fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fca:	3301      	adds	r3, #1
 8002fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e012      	b.n	8003002 <HAL_I2C_Init+0x176>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	1e58      	subs	r0, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	0099      	lsls	r1, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2301      	moveq	r3, #1
 8002ffe:	2300      	movne	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_I2C_Init+0x17e>
 8003006:	2301      	movs	r3, #1
 8003008:	e022      	b.n	8003050 <HAL_I2C_Init+0x1c4>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10e      	bne.n	8003030 <HAL_I2C_Init+0x1a4>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1e58      	subs	r0, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6859      	ldr	r1, [r3, #4]
 800301a:	460b      	mov	r3, r1
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	440b      	add	r3, r1
 8003020:	fbb0 f3f3 	udiv	r3, r0, r3
 8003024:	3301      	adds	r3, #1
 8003026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800302e:	e00f      	b.n	8003050 <HAL_I2C_Init+0x1c4>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1e58      	subs	r0, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	0099      	lsls	r1, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	fbb0 f3f3 	udiv	r3, r0, r3
 8003046:	3301      	adds	r3, #1
 8003048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	6809      	ldr	r1, [r1, #0]
 8003054:	4313      	orrs	r3, r2
 8003056:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69da      	ldr	r2, [r3, #28]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800307e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6911      	ldr	r1, [r2, #16]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68d2      	ldr	r2, [r2, #12]
 800308a:	4311      	orrs	r1, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	430b      	orrs	r3, r1
 8003092:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	000186a0 	.word	0x000186a0
 80030ec:	001e847f 	.word	0x001e847f
 80030f0:	003d08ff 	.word	0x003d08ff
 80030f4:	431bde83 	.word	0x431bde83
 80030f8:	10624dd3 	.word	0x10624dd3

080030fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e128      	b.n	8003360 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a90      	ldr	r2, [pc, #576]	; (8003368 <HAL_I2S_Init+0x26c>)
 8003126:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7fd fd1f 	bl	8000b6c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2202      	movs	r2, #2
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003144:	f023 030f 	bic.w	r3, r3, #15
 8003148:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2202      	movs	r2, #2
 8003150:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d060      	beq.n	800321c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d102      	bne.n	8003168 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003162:	2310      	movs	r3, #16
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	e001      	b.n	800316c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003168:	2320      	movs	r3, #32
 800316a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b20      	cmp	r3, #32
 8003172:	d802      	bhi.n	800317a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800317a:	2001      	movs	r0, #1
 800317c:	f001 f9a2 	bl	80044c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003180:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800318a:	d125      	bne.n	80031d8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d010      	beq.n	80031b6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	fbb2 f2f3 	udiv	r2, r2, r3
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	461a      	mov	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	3305      	adds	r3, #5
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	e01f      	b.n	80031f6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	461a      	mov	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d2:	3305      	adds	r3, #5
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	e00e      	b.n	80031f6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	461a      	mov	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f2:	3305      	adds	r3, #5
 80031f4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4a5c      	ldr	r2, [pc, #368]	; (800336c <HAL_I2S_Init+0x270>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	08db      	lsrs	r3, r3, #3
 8003200:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	e003      	b.n	8003224 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800321c:	2302      	movs	r3, #2
 800321e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d902      	bls.n	8003230 <HAL_I2S_Init+0x134>
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	2bff      	cmp	r3, #255	; 0xff
 800322e:	d907      	bls.n	8003240 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003234:	f043 0210 	orr.w	r2, r3, #16
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e08f      	b.n	8003360 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	ea42 0103 	orr.w	r1, r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	430a      	orrs	r2, r1
 8003252:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800325e:	f023 030f 	bic.w	r3, r3, #15
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6851      	ldr	r1, [r2, #4]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6892      	ldr	r2, [r2, #8]
 800326a:	4311      	orrs	r1, r2
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	68d2      	ldr	r2, [r2, #12]
 8003270:	4311      	orrs	r1, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6992      	ldr	r2, [r2, #24]
 8003276:	430a      	orrs	r2, r1
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003282:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d161      	bne.n	8003350 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a38      	ldr	r2, [pc, #224]	; (8003370 <HAL_I2S_Init+0x274>)
 8003290:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a37      	ldr	r2, [pc, #220]	; (8003374 <HAL_I2S_Init+0x278>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d101      	bne.n	80032a0 <HAL_I2S_Init+0x1a4>
 800329c:	4b36      	ldr	r3, [pc, #216]	; (8003378 <HAL_I2S_Init+0x27c>)
 800329e:	e001      	b.n	80032a4 <HAL_I2S_Init+0x1a8>
 80032a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	4932      	ldr	r1, [pc, #200]	; (8003374 <HAL_I2S_Init+0x278>)
 80032ac:	428a      	cmp	r2, r1
 80032ae:	d101      	bne.n	80032b4 <HAL_I2S_Init+0x1b8>
 80032b0:	4a31      	ldr	r2, [pc, #196]	; (8003378 <HAL_I2S_Init+0x27c>)
 80032b2:	e001      	b.n	80032b8 <HAL_I2S_Init+0x1bc>
 80032b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80032b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032bc:	f023 030f 	bic.w	r3, r3, #15
 80032c0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a2b      	ldr	r2, [pc, #172]	; (8003374 <HAL_I2S_Init+0x278>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_I2S_Init+0x1d4>
 80032cc:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <HAL_I2S_Init+0x27c>)
 80032ce:	e001      	b.n	80032d4 <HAL_I2S_Init+0x1d8>
 80032d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032d4:	2202      	movs	r2, #2
 80032d6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a25      	ldr	r2, [pc, #148]	; (8003374 <HAL_I2S_Init+0x278>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d101      	bne.n	80032e6 <HAL_I2S_Init+0x1ea>
 80032e2:	4b25      	ldr	r3, [pc, #148]	; (8003378 <HAL_I2S_Init+0x27c>)
 80032e4:	e001      	b.n	80032ea <HAL_I2S_Init+0x1ee>
 80032e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f6:	d003      	beq.n	8003300 <HAL_I2S_Init+0x204>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d103      	bne.n	8003308 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	e001      	b.n	800330c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	b299      	uxth	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003322:	4303      	orrs	r3, r0
 8003324:	b29b      	uxth	r3, r3
 8003326:	430b      	orrs	r3, r1
 8003328:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800332a:	4313      	orrs	r3, r2
 800332c:	b29a      	uxth	r2, r3
 800332e:	897b      	ldrh	r3, [r7, #10]
 8003330:	4313      	orrs	r3, r2
 8003332:	b29b      	uxth	r3, r3
 8003334:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003338:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a0d      	ldr	r2, [pc, #52]	; (8003374 <HAL_I2S_Init+0x278>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d101      	bne.n	8003348 <HAL_I2S_Init+0x24c>
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <HAL_I2S_Init+0x27c>)
 8003346:	e001      	b.n	800334c <HAL_I2S_Init+0x250>
 8003348:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800334c:	897a      	ldrh	r2, [r7, #10]
 800334e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3720      	adds	r7, #32
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	08003473 	.word	0x08003473
 800336c:	cccccccd 	.word	0xcccccccd
 8003370:	08003589 	.word	0x08003589
 8003374:	40003800 	.word	0x40003800
 8003378:	40003400 	.word	0x40003400

0800337c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	881a      	ldrh	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	1c9a      	adds	r2, r3, #2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10e      	bne.n	800340c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff ffb8 	bl	800337c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	b292      	uxth	r2, r2
 8003428:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	1c9a      	adds	r2, r3, #2
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10e      	bne.n	800346a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800345a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ff93 	bl	8003390 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b086      	sub	sp, #24
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b04      	cmp	r3, #4
 800348c:	d13a      	bne.n	8003504 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d109      	bne.n	80034ac <I2S_IRQHandler+0x3a>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	2b40      	cmp	r3, #64	; 0x40
 80034a4:	d102      	bne.n	80034ac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ffb4 	bl	8003414 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b2:	2b40      	cmp	r3, #64	; 0x40
 80034b4:	d126      	bne.n	8003504 <I2S_IRQHandler+0x92>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d11f      	bne.n	8003504 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034d4:	2300      	movs	r3, #0
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	f043 0202 	orr.w	r2, r3, #2
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ff50 	bl	80033a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b03      	cmp	r3, #3
 800350e:	d136      	bne.n	800357e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b02      	cmp	r3, #2
 8003518:	d109      	bne.n	800352e <I2S_IRQHandler+0xbc>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003524:	2b80      	cmp	r3, #128	; 0x80
 8003526:	d102      	bne.n	800352e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7ff ff45 	bl	80033b8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b08      	cmp	r3, #8
 8003536:	d122      	bne.n	800357e <I2S_IRQHandler+0x10c>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b20      	cmp	r3, #32
 8003544:	d11b      	bne.n	800357e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003554:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	f043 0204 	orr.w	r2, r3, #4
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ff13 	bl	80033a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800357e:	bf00      	nop
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4aa2      	ldr	r2, [pc, #648]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035a2:	4ba2      	ldr	r3, [pc, #648]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035a4:	e001      	b.n	80035aa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a9b      	ldr	r2, [pc, #620]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d101      	bne.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035c0:	4b9a      	ldr	r3, [pc, #616]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035c2:	e001      	b.n	80035c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d4:	d004      	beq.n	80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f040 8099 	bne.w	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d107      	bne.n	80035fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f925 	bl	8003844 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b01      	cmp	r3, #1
 8003602:	d107      	bne.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f9c8 	bl	80039a4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d13a      	bne.n	8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d035      	beq.n	8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a7e      	ldr	r2, [pc, #504]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d101      	bne.n	8003636 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003632:	4b7e      	ldr	r3, [pc, #504]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003634:	e001      	b.n	800363a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003636:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4979      	ldr	r1, [pc, #484]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003642:	428b      	cmp	r3, r1
 8003644:	d101      	bne.n	800364a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003646:	4b79      	ldr	r3, [pc, #484]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003648:	e001      	b.n	800364e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800364a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800364e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003652:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003662:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	f043 0202 	orr.w	r2, r3, #2
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff fe88 	bl	80033a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b08      	cmp	r3, #8
 800369c:	f040 80be 	bne.w	800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80b8 	beq.w	800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a59      	ldr	r2, [pc, #356]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d101      	bne.n	80036ca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036c6:	4b59      	ldr	r3, [pc, #356]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036c8:	e001      	b.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4954      	ldr	r1, [pc, #336]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036d6:	428b      	cmp	r3, r1
 80036d8:	d101      	bne.n	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036da:	4b54      	ldr	r3, [pc, #336]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036dc:	e001      	b.n	80036e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036e6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036e8:	2300      	movs	r3, #0
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	f043 0204 	orr.w	r2, r3, #4
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff fe4a 	bl	80033a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003710:	e084      	b.n	800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b02      	cmp	r3, #2
 800371a:	d107      	bne.n	800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f8be 	bl	80038a8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b01      	cmp	r3, #1
 8003734:	d107      	bne.n	8003746 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f8fd 	bl	8003940 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d12f      	bne.n	80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d02a      	beq.n	80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003768:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a2e      	ldr	r2, [pc, #184]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d101      	bne.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003774:	4b2d      	ldr	r3, [pc, #180]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003776:	e001      	b.n	800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003778:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4929      	ldr	r1, [pc, #164]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003784:	428b      	cmp	r3, r1
 8003786:	d101      	bne.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003788:	4b28      	ldr	r3, [pc, #160]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800378a:	e001      	b.n	8003790 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800378c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003790:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003794:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	f043 0202 	orr.w	r2, r3, #2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff fdfa 	bl	80033a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d131      	bne.n	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d02c      	beq.n	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a17      	ldr	r2, [pc, #92]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d101      	bne.n	80037d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037ce:	4b17      	ldr	r3, [pc, #92]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037d0:	e001      	b.n	80037d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4912      	ldr	r1, [pc, #72]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037de:	428b      	cmp	r3, r1
 80037e0:	d101      	bne.n	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037e4:	e001      	b.n	80037ea <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80037e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037fe:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380c:	f043 0204 	orr.w	r2, r3, #4
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff fdc5 	bl	80033a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800381a:	e000      	b.n	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800381c:	bf00      	nop
}
 800381e:	bf00      	nop
 8003820:	3720      	adds	r7, #32
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40003800 	.word	0x40003800
 800382c:	40003400 	.word	0x40003400

08003830 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	1c99      	adds	r1, r3, #2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6251      	str	r1, [r2, #36]	; 0x24
 8003856:	881a      	ldrh	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d113      	bne.n	800389e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003884:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800388a:	b29b      	uxth	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d106      	bne.n	800389e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ffc9 	bl	8003830 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	1c99      	adds	r1, r3, #2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6251      	str	r1, [r2, #36]	; 0x24
 80038ba:	8819      	ldrh	r1, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1d      	ldr	r2, [pc, #116]	; (8003938 <I2SEx_TxISR_I2SExt+0x90>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d101      	bne.n	80038ca <I2SEx_TxISR_I2SExt+0x22>
 80038c6:	4b1d      	ldr	r3, [pc, #116]	; (800393c <I2SEx_TxISR_I2SExt+0x94>)
 80038c8:	e001      	b.n	80038ce <I2SEx_TxISR_I2SExt+0x26>
 80038ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ce:	460a      	mov	r2, r1
 80038d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d121      	bne.n	800392e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a12      	ldr	r2, [pc, #72]	; (8003938 <I2SEx_TxISR_I2SExt+0x90>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d101      	bne.n	80038f8 <I2SEx_TxISR_I2SExt+0x50>
 80038f4:	4b11      	ldr	r3, [pc, #68]	; (800393c <I2SEx_TxISR_I2SExt+0x94>)
 80038f6:	e001      	b.n	80038fc <I2SEx_TxISR_I2SExt+0x54>
 80038f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	490d      	ldr	r1, [pc, #52]	; (8003938 <I2SEx_TxISR_I2SExt+0x90>)
 8003904:	428b      	cmp	r3, r1
 8003906:	d101      	bne.n	800390c <I2SEx_TxISR_I2SExt+0x64>
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <I2SEx_TxISR_I2SExt+0x94>)
 800390a:	e001      	b.n	8003910 <I2SEx_TxISR_I2SExt+0x68>
 800390c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003910:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003914:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d106      	bne.n	800392e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff81 	bl	8003830 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40003800 	.word	0x40003800
 800393c:	40003400 	.word	0x40003400

08003940 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68d8      	ldr	r0, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	1c99      	adds	r1, r3, #2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003958:	b282      	uxth	r2, r0
 800395a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d113      	bne.n	800399c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003982:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff ff4a 	bl	8003830 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a20      	ldr	r2, [pc, #128]	; (8003a34 <I2SEx_RxISR_I2SExt+0x90>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <I2SEx_RxISR_I2SExt+0x16>
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <I2SEx_RxISR_I2SExt+0x94>)
 80039b8:	e001      	b.n	80039be <I2SEx_RxISR_I2SExt+0x1a>
 80039ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039be:	68d8      	ldr	r0, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	1c99      	adds	r1, r3, #2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039ca:	b282      	uxth	r2, r0
 80039cc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d121      	bne.n	8003a2a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a12      	ldr	r2, [pc, #72]	; (8003a34 <I2SEx_RxISR_I2SExt+0x90>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d101      	bne.n	80039f4 <I2SEx_RxISR_I2SExt+0x50>
 80039f0:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <I2SEx_RxISR_I2SExt+0x94>)
 80039f2:	e001      	b.n	80039f8 <I2SEx_RxISR_I2SExt+0x54>
 80039f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	490d      	ldr	r1, [pc, #52]	; (8003a34 <I2SEx_RxISR_I2SExt+0x90>)
 8003a00:	428b      	cmp	r3, r1
 8003a02:	d101      	bne.n	8003a08 <I2SEx_RxISR_I2SExt+0x64>
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <I2SEx_RxISR_I2SExt+0x94>)
 8003a06:	e001      	b.n	8003a0c <I2SEx_RxISR_I2SExt+0x68>
 8003a08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a10:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d106      	bne.n	8003a2a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ff03 	bl	8003830 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40003800 	.word	0x40003800
 8003a38:	40003400 	.word	0x40003400

08003a3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e25b      	b.n	8003f06 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d075      	beq.n	8003b46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a5a:	4ba3      	ldr	r3, [pc, #652]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d00c      	beq.n	8003a80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a66:	4ba0      	ldr	r3, [pc, #640]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d112      	bne.n	8003a98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a72:	4b9d      	ldr	r3, [pc, #628]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a7e:	d10b      	bne.n	8003a98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a80:	4b99      	ldr	r3, [pc, #612]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d05b      	beq.n	8003b44 <HAL_RCC_OscConfig+0x108>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d157      	bne.n	8003b44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e236      	b.n	8003f06 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa0:	d106      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x74>
 8003aa2:	4b91      	ldr	r3, [pc, #580]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a90      	ldr	r2, [pc, #576]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e01d      	b.n	8003aec <HAL_RCC_OscConfig+0xb0>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x98>
 8003aba:	4b8b      	ldr	r3, [pc, #556]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a8a      	ldr	r2, [pc, #552]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	4b88      	ldr	r3, [pc, #544]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a87      	ldr	r2, [pc, #540]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	e00b      	b.n	8003aec <HAL_RCC_OscConfig+0xb0>
 8003ad4:	4b84      	ldr	r3, [pc, #528]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a83      	ldr	r2, [pc, #524]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4b81      	ldr	r3, [pc, #516]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a80      	ldr	r2, [pc, #512]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d013      	beq.n	8003b1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7fd fa3c 	bl	8000f70 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003afc:	f7fd fa38 	bl	8000f70 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b64      	cmp	r3, #100	; 0x64
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e1fb      	b.n	8003f06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b76      	ldr	r3, [pc, #472]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0xc0>
 8003b1a:	e014      	b.n	8003b46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fd fa28 	bl	8000f70 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b24:	f7fd fa24 	bl	8000f70 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	; 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e1e7      	b.n	8003f06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b36:	4b6c      	ldr	r3, [pc, #432]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0xe8>
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d063      	beq.n	8003c1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b52:	4b65      	ldr	r3, [pc, #404]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b5e:	4b62      	ldr	r3, [pc, #392]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d11c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b6a:	4b5f      	ldr	r3, [pc, #380]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d116      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	4b5c      	ldr	r3, [pc, #368]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_RCC_OscConfig+0x152>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d001      	beq.n	8003b8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e1bb      	b.n	8003f06 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8e:	4b56      	ldr	r3, [pc, #344]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4952      	ldr	r1, [pc, #328]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba2:	e03a      	b.n	8003c1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bac:	4b4f      	ldr	r3, [pc, #316]	; (8003cec <HAL_RCC_OscConfig+0x2b0>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7fd f9dd 	bl	8000f70 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bba:	f7fd f9d9 	bl	8000f70 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e19c      	b.n	8003f06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bcc:	4b46      	ldr	r3, [pc, #280]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd8:	4b43      	ldr	r3, [pc, #268]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4940      	ldr	r1, [pc, #256]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]
 8003bec:	e015      	b.n	8003c1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bee:	4b3f      	ldr	r3, [pc, #252]	; (8003cec <HAL_RCC_OscConfig+0x2b0>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fd f9bc 	bl	8000f70 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bfc:	f7fd f9b8 	bl	8000f70 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e17b      	b.n	8003f06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0e:	4b36      	ldr	r3, [pc, #216]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d030      	beq.n	8003c88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d016      	beq.n	8003c5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c2e:	4b30      	ldr	r3, [pc, #192]	; (8003cf0 <HAL_RCC_OscConfig+0x2b4>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7fd f99c 	bl	8000f70 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c3c:	f7fd f998 	bl	8000f70 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e15b      	b.n	8003f06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4e:	4b26      	ldr	r3, [pc, #152]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x200>
 8003c5a:	e015      	b.n	8003c88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c5c:	4b24      	ldr	r3, [pc, #144]	; (8003cf0 <HAL_RCC_OscConfig+0x2b4>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c62:	f7fd f985 	bl	8000f70 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c6a:	f7fd f981 	bl	8000f70 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e144      	b.n	8003f06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1f0      	bne.n	8003c6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80a0 	beq.w	8003dd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c96:	2300      	movs	r3, #0
 8003c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9a:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10f      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	4a0e      	ldr	r2, [pc, #56]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_RCC_OscConfig+0x2b8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d121      	bne.n	8003d16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd2:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <HAL_RCC_OscConfig+0x2b8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a07      	ldr	r2, [pc, #28]	; (8003cf4 <HAL_RCC_OscConfig+0x2b8>)
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cde:	f7fd f947 	bl	8000f70 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce4:	e011      	b.n	8003d0a <HAL_RCC_OscConfig+0x2ce>
 8003ce6:	bf00      	nop
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	42470000 	.word	0x42470000
 8003cf0:	42470e80 	.word	0x42470e80
 8003cf4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf8:	f7fd f93a 	bl	8000f70 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e0fd      	b.n	8003f06 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0a:	4b81      	ldr	r3, [pc, #516]	; (8003f10 <HAL_RCC_OscConfig+0x4d4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d106      	bne.n	8003d2c <HAL_RCC_OscConfig+0x2f0>
 8003d1e:	4b7d      	ldr	r3, [pc, #500]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	4a7c      	ldr	r2, [pc, #496]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2a:	e01c      	b.n	8003d66 <HAL_RCC_OscConfig+0x32a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	d10c      	bne.n	8003d4e <HAL_RCC_OscConfig+0x312>
 8003d34:	4b77      	ldr	r3, [pc, #476]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	4a76      	ldr	r2, [pc, #472]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003d3a:	f043 0304 	orr.w	r3, r3, #4
 8003d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d40:	4b74      	ldr	r3, [pc, #464]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d44:	4a73      	ldr	r2, [pc, #460]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4c:	e00b      	b.n	8003d66 <HAL_RCC_OscConfig+0x32a>
 8003d4e:	4b71      	ldr	r3, [pc, #452]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	4a70      	ldr	r2, [pc, #448]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5a:	4b6e      	ldr	r3, [pc, #440]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	4a6d      	ldr	r2, [pc, #436]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003d60:	f023 0304 	bic.w	r3, r3, #4
 8003d64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d015      	beq.n	8003d9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6e:	f7fd f8ff 	bl	8000f70 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d76:	f7fd f8fb 	bl	8000f70 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e0bc      	b.n	8003f06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8c:	4b61      	ldr	r3, [pc, #388]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ee      	beq.n	8003d76 <HAL_RCC_OscConfig+0x33a>
 8003d98:	e014      	b.n	8003dc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9a:	f7fd f8e9 	bl	8000f70 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da0:	e00a      	b.n	8003db8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da2:	f7fd f8e5 	bl	8000f70 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e0a6      	b.n	8003f06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db8:	4b56      	ldr	r3, [pc, #344]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1ee      	bne.n	8003da2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d105      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dca:	4b52      	ldr	r3, [pc, #328]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	4a51      	ldr	r2, [pc, #324]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8092 	beq.w	8003f04 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003de0:	4b4c      	ldr	r3, [pc, #304]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 030c 	and.w	r3, r3, #12
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d05c      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d141      	bne.n	8003e78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df4:	4b48      	ldr	r3, [pc, #288]	; (8003f18 <HAL_RCC_OscConfig+0x4dc>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfa:	f7fd f8b9 	bl	8000f70 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e02:	f7fd f8b5 	bl	8000f70 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e078      	b.n	8003f06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e14:	4b3f      	ldr	r3, [pc, #252]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f0      	bne.n	8003e02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	019b      	lsls	r3, r3, #6
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	041b      	lsls	r3, r3, #16
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e42:	061b      	lsls	r3, r3, #24
 8003e44:	4933      	ldr	r1, [pc, #204]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e4a:	4b33      	ldr	r3, [pc, #204]	; (8003f18 <HAL_RCC_OscConfig+0x4dc>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7fd f88e 	bl	8000f70 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e58:	f7fd f88a 	bl	8000f70 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e04d      	b.n	8003f06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6a:	4b2a      	ldr	r3, [pc, #168]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0x41c>
 8003e76:	e045      	b.n	8003f04 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e78:	4b27      	ldr	r3, [pc, #156]	; (8003f18 <HAL_RCC_OscConfig+0x4dc>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7e:	f7fd f877 	bl	8000f70 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e86:	f7fd f873 	bl	8000f70 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e036      	b.n	8003f06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e98:	4b1e      	ldr	r3, [pc, #120]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f0      	bne.n	8003e86 <HAL_RCC_OscConfig+0x44a>
 8003ea4:	e02e      	b.n	8003f04 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e029      	b.n	8003f06 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003eb2:	4b18      	ldr	r3, [pc, #96]	; (8003f14 <HAL_RCC_OscConfig+0x4d8>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d11c      	bne.n	8003f00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d115      	bne.n	8003f00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003eda:	4013      	ands	r3, r2
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d10d      	bne.n	8003f00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d106      	bne.n	8003f00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40007000 	.word	0x40007000
 8003f14:	40023800 	.word	0x40023800
 8003f18:	42470060 	.word	0x42470060

08003f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0cc      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f30:	4b68      	ldr	r3, [pc, #416]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d90c      	bls.n	8003f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3e:	4b65      	ldr	r3, [pc, #404]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f46:	4b63      	ldr	r3, [pc, #396]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0b8      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d020      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f70:	4b59      	ldr	r3, [pc, #356]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a58      	ldr	r2, [pc, #352]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f88:	4b53      	ldr	r3, [pc, #332]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4a52      	ldr	r2, [pc, #328]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f94:	4b50      	ldr	r3, [pc, #320]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	494d      	ldr	r1, [pc, #308]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d044      	beq.n	800403c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	4b47      	ldr	r3, [pc, #284]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d119      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e07f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d003      	beq.n	8003fda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d107      	bne.n	8003fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fda:	4b3f      	ldr	r3, [pc, #252]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e06f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fea:	4b3b      	ldr	r3, [pc, #236]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e067      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ffa:	4b37      	ldr	r3, [pc, #220]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f023 0203 	bic.w	r2, r3, #3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4934      	ldr	r1, [pc, #208]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	4313      	orrs	r3, r2
 800400a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800400c:	f7fc ffb0 	bl	8000f70 <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004012:	e00a      	b.n	800402a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004014:	f7fc ffac 	bl	8000f70 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e04f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 020c 	and.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	429a      	cmp	r2, r3
 800403a:	d1eb      	bne.n	8004014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800403c:	4b25      	ldr	r3, [pc, #148]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d20c      	bcs.n	8004064 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b22      	ldr	r3, [pc, #136]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e032      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004070:	4b19      	ldr	r3, [pc, #100]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4916      	ldr	r1, [pc, #88]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	490e      	ldr	r1, [pc, #56]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040a2:	f000 f821 	bl	80040e8 <HAL_RCC_GetSysClockFreq>
 80040a6:	4601      	mov	r1, r0
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 80040b4:	5cd3      	ldrb	r3, [r2, r3]
 80040b6:	fa21 f303 	lsr.w	r3, r1, r3
 80040ba:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040be:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <HAL_RCC_ClockConfig+0x1c8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fc ff10 	bl	8000ee8 <HAL_InitTick>

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40023c00 	.word	0x40023c00
 80040d8:	40023800 	.word	0x40023800
 80040dc:	08008028 	.word	0x08008028
 80040e0:	20000000 	.word	0x20000000
 80040e4:	20000004 	.word	0x20000004

080040e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	2300      	movs	r3, #0
 80040f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040fe:	4b63      	ldr	r3, [pc, #396]	; (800428c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	2b04      	cmp	r3, #4
 8004108:	d007      	beq.n	800411a <HAL_RCC_GetSysClockFreq+0x32>
 800410a:	2b08      	cmp	r3, #8
 800410c:	d008      	beq.n	8004120 <HAL_RCC_GetSysClockFreq+0x38>
 800410e:	2b00      	cmp	r3, #0
 8004110:	f040 80b4 	bne.w	800427c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004114:	4b5e      	ldr	r3, [pc, #376]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004116:	60bb      	str	r3, [r7, #8]
       break;
 8004118:	e0b3      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800411a:	4b5e      	ldr	r3, [pc, #376]	; (8004294 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800411c:	60bb      	str	r3, [r7, #8]
      break;
 800411e:	e0b0      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004120:	4b5a      	ldr	r3, [pc, #360]	; (800428c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004128:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800412a:	4b58      	ldr	r3, [pc, #352]	; (800428c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d04a      	beq.n	80041cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004136:	4b55      	ldr	r3, [pc, #340]	; (800428c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	099b      	lsrs	r3, r3, #6
 800413c:	f04f 0400 	mov.w	r4, #0
 8004140:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	ea03 0501 	and.w	r5, r3, r1
 800414c:	ea04 0602 	and.w	r6, r4, r2
 8004150:	4629      	mov	r1, r5
 8004152:	4632      	mov	r2, r6
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	f04f 0400 	mov.w	r4, #0
 800415c:	0154      	lsls	r4, r2, #5
 800415e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004162:	014b      	lsls	r3, r1, #5
 8004164:	4619      	mov	r1, r3
 8004166:	4622      	mov	r2, r4
 8004168:	1b49      	subs	r1, r1, r5
 800416a:	eb62 0206 	sbc.w	r2, r2, r6
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	f04f 0400 	mov.w	r4, #0
 8004176:	0194      	lsls	r4, r2, #6
 8004178:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800417c:	018b      	lsls	r3, r1, #6
 800417e:	1a5b      	subs	r3, r3, r1
 8004180:	eb64 0402 	sbc.w	r4, r4, r2
 8004184:	f04f 0100 	mov.w	r1, #0
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	00e2      	lsls	r2, r4, #3
 800418e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004192:	00d9      	lsls	r1, r3, #3
 8004194:	460b      	mov	r3, r1
 8004196:	4614      	mov	r4, r2
 8004198:	195b      	adds	r3, r3, r5
 800419a:	eb44 0406 	adc.w	r4, r4, r6
 800419e:	f04f 0100 	mov.w	r1, #0
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	0262      	lsls	r2, r4, #9
 80041a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80041ac:	0259      	lsls	r1, r3, #9
 80041ae:	460b      	mov	r3, r1
 80041b0:	4614      	mov	r4, r2
 80041b2:	4618      	mov	r0, r3
 80041b4:	4621      	mov	r1, r4
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f04f 0400 	mov.w	r4, #0
 80041bc:	461a      	mov	r2, r3
 80041be:	4623      	mov	r3, r4
 80041c0:	f7fc f802 	bl	80001c8 <__aeabi_uldivmod>
 80041c4:	4603      	mov	r3, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	e049      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041cc:	4b2f      	ldr	r3, [pc, #188]	; (800428c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	099b      	lsrs	r3, r3, #6
 80041d2:	f04f 0400 	mov.w	r4, #0
 80041d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	ea03 0501 	and.w	r5, r3, r1
 80041e2:	ea04 0602 	and.w	r6, r4, r2
 80041e6:	4629      	mov	r1, r5
 80041e8:	4632      	mov	r2, r6
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	f04f 0400 	mov.w	r4, #0
 80041f2:	0154      	lsls	r4, r2, #5
 80041f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041f8:	014b      	lsls	r3, r1, #5
 80041fa:	4619      	mov	r1, r3
 80041fc:	4622      	mov	r2, r4
 80041fe:	1b49      	subs	r1, r1, r5
 8004200:	eb62 0206 	sbc.w	r2, r2, r6
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	f04f 0400 	mov.w	r4, #0
 800420c:	0194      	lsls	r4, r2, #6
 800420e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004212:	018b      	lsls	r3, r1, #6
 8004214:	1a5b      	subs	r3, r3, r1
 8004216:	eb64 0402 	sbc.w	r4, r4, r2
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	00e2      	lsls	r2, r4, #3
 8004224:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004228:	00d9      	lsls	r1, r3, #3
 800422a:	460b      	mov	r3, r1
 800422c:	4614      	mov	r4, r2
 800422e:	195b      	adds	r3, r3, r5
 8004230:	eb44 0406 	adc.w	r4, r4, r6
 8004234:	f04f 0100 	mov.w	r1, #0
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	02a2      	lsls	r2, r4, #10
 800423e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004242:	0299      	lsls	r1, r3, #10
 8004244:	460b      	mov	r3, r1
 8004246:	4614      	mov	r4, r2
 8004248:	4618      	mov	r0, r3
 800424a:	4621      	mov	r1, r4
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f04f 0400 	mov.w	r4, #0
 8004252:	461a      	mov	r2, r3
 8004254:	4623      	mov	r3, r4
 8004256:	f7fb ffb7 	bl	80001c8 <__aeabi_uldivmod>
 800425a:	4603      	mov	r3, r0
 800425c:	460c      	mov	r4, r1
 800425e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	3301      	adds	r3, #1
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	60bb      	str	r3, [r7, #8]
      break;
 800427a:	e002      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800427c:	4b04      	ldr	r3, [pc, #16]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800427e:	60bb      	str	r3, [r7, #8]
      break;
 8004280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004282:	68bb      	ldr	r3, [r7, #8]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800428c:	40023800 	.word	0x40023800
 8004290:	00f42400 	.word	0x00f42400
 8004294:	007a1200 	.word	0x007a1200

08004298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800429c:	4b03      	ldr	r3, [pc, #12]	; (80042ac <HAL_RCC_GetHCLKFreq+0x14>)
 800429e:	681b      	ldr	r3, [r3, #0]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20000000 	.word	0x20000000

080042b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042b4:	f7ff fff0 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 80042b8:	4601      	mov	r1, r0
 80042ba:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	0a9b      	lsrs	r3, r3, #10
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	4a03      	ldr	r2, [pc, #12]	; (80042d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042c6:	5cd3      	ldrb	r3, [r2, r3]
 80042c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40023800 	.word	0x40023800
 80042d4:	08008038 	.word	0x08008038

080042d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042dc:	f7ff ffdc 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 80042e0:	4601      	mov	r1, r0
 80042e2:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	0b5b      	lsrs	r3, r3, #13
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	4a03      	ldr	r2, [pc, #12]	; (80042fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ee:	5cd3      	ldrb	r3, [r2, r3]
 80042f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40023800 	.word	0x40023800
 80042fc:	08008038 	.word	0x08008038

08004300 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d105      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004324:	2b00      	cmp	r3, #0
 8004326:	d035      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004328:	4b62      	ldr	r3, [pc, #392]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800432e:	f7fc fe1f 	bl	8000f70 <HAL_GetTick>
 8004332:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004334:	e008      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004336:	f7fc fe1b 	bl	8000f70 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e0b0      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004348:	4b5b      	ldr	r3, [pc, #364]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f0      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	019a      	lsls	r2, r3, #6
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	071b      	lsls	r3, r3, #28
 8004360:	4955      	ldr	r1, [pc, #340]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004368:	4b52      	ldr	r3, [pc, #328]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800436a:	2201      	movs	r2, #1
 800436c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800436e:	f7fc fdff 	bl	8000f70 <HAL_GetTick>
 8004372:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004374:	e008      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004376:	f7fc fdfb 	bl	8000f70 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e090      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004388:	4b4b      	ldr	r3, [pc, #300]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0f0      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8083 	beq.w	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	4b44      	ldr	r3, [pc, #272]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	4a43      	ldr	r2, [pc, #268]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b0:	6413      	str	r3, [r2, #64]	; 0x40
 80043b2:	4b41      	ldr	r3, [pc, #260]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043be:	4b3f      	ldr	r3, [pc, #252]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a3e      	ldr	r2, [pc, #248]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043ca:	f7fc fdd1 	bl	8000f70 <HAL_GetTick>
 80043ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043d2:	f7fc fdcd 	bl	8000f70 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e062      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043e4:	4b35      	ldr	r3, [pc, #212]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043f0:	4b31      	ldr	r3, [pc, #196]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d02f      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	429a      	cmp	r2, r3
 800440c:	d028      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800440e:	4b2a      	ldr	r3, [pc, #168]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004416:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004418:	4b29      	ldr	r3, [pc, #164]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800441a:	2201      	movs	r2, #1
 800441c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800441e:	4b28      	ldr	r3, [pc, #160]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004424:	4a24      	ldr	r2, [pc, #144]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800442a:	4b23      	ldr	r3, [pc, #140]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800442c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b01      	cmp	r3, #1
 8004434:	d114      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004436:	f7fc fd9b 	bl	8000f70 <HAL_GetTick>
 800443a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443c:	e00a      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800443e:	f7fc fd97 	bl	8000f70 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	f241 3288 	movw	r2, #5000	; 0x1388
 800444c:	4293      	cmp	r3, r2
 800444e:	d901      	bls.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e02a      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004454:	4b18      	ldr	r3, [pc, #96]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0ee      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004468:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800446c:	d10d      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800446e:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800447e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004482:	490d      	ldr	r1, [pc, #52]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004484:	4313      	orrs	r3, r2
 8004486:	608b      	str	r3, [r1, #8]
 8004488:	e005      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800448a:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	4a0a      	ldr	r2, [pc, #40]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004490:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004494:	6093      	str	r3, [r2, #8]
 8004496:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004498:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a2:	4905      	ldr	r1, [pc, #20]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	42470068 	.word	0x42470068
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40007000 	.word	0x40007000
 80044c0:	42470e40 	.word	0x42470e40

080044c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d13d      	bne.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044e2:	4b22      	ldr	r3, [pc, #136]	; (800456c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ea:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d004      	beq.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d12f      	bne.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044f6:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044f8:	617b      	str	r3, [r7, #20]
          break;
 80044fa:	e02f      	b.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044fc:	4b1b      	ldr	r3, [pc, #108]	; (800456c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004508:	d108      	bne.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800450a:	4b18      	ldr	r3, [pc, #96]	; (800456c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004512:	4a18      	ldr	r2, [pc, #96]	; (8004574 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	e007      	b.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800451c:	4b13      	ldr	r3, [pc, #76]	; (800456c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004524:	4a14      	ldr	r2, [pc, #80]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004526:	fbb2 f3f3 	udiv	r3, r2, r3
 800452a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800452e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004532:	099b      	lsrs	r3, r3, #6
 8004534:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004546:	0f1b      	lsrs	r3, r3, #28
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004552:	617b      	str	r3, [r7, #20]
          break;
 8004554:	e002      	b.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
          break;
 800455a:	bf00      	nop
        }
      }
      break;
 800455c:	bf00      	nop
    }
  }
  return frequency;
 800455e:	697b      	ldr	r3, [r7, #20]
}
 8004560:	4618      	mov	r0, r3
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	40023800 	.word	0x40023800
 8004570:	00bb8000 	.word	0x00bb8000
 8004574:	007a1200 	.word	0x007a1200
 8004578:	00f42400 	.word	0x00f42400

0800457c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e056      	b.n	800463c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d106      	bne.n	80045ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7fc fb47 	bl	8000c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2202      	movs	r2, #2
 80045b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	ea42 0103 	orr.w	r1, r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	0c1b      	lsrs	r3, r3, #16
 800460c:	f003 0104 	and.w	r1, r3, #4
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	69da      	ldr	r2, [r3, #28]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800462a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e03f      	b.n	80046d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d106      	bne.n	8004670 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fc fb2e 	bl	8000ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2224      	movs	r2, #36	; 0x24
 8004674:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004686:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f829 	bl	80046e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800469c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004722:	f023 030c 	bic.w	r3, r3, #12
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	68f9      	ldr	r1, [r7, #12]
 800472c:	430b      	orrs	r3, r1
 800472e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800474e:	f040 818b 	bne.w	8004a68 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4ac1      	ldr	r2, [pc, #772]	; (8004a5c <UART_SetConfig+0x37c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d005      	beq.n	8004768 <UART_SetConfig+0x88>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4abf      	ldr	r2, [pc, #764]	; (8004a60 <UART_SetConfig+0x380>)
 8004762:	4293      	cmp	r3, r2
 8004764:	f040 80bd 	bne.w	80048e2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004768:	f7ff fdb6 	bl	80042d8 <HAL_RCC_GetPCLK2Freq>
 800476c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	461d      	mov	r5, r3
 8004772:	f04f 0600 	mov.w	r6, #0
 8004776:	46a8      	mov	r8, r5
 8004778:	46b1      	mov	r9, r6
 800477a:	eb18 0308 	adds.w	r3, r8, r8
 800477e:	eb49 0409 	adc.w	r4, r9, r9
 8004782:	4698      	mov	r8, r3
 8004784:	46a1      	mov	r9, r4
 8004786:	eb18 0805 	adds.w	r8, r8, r5
 800478a:	eb49 0906 	adc.w	r9, r9, r6
 800478e:	f04f 0100 	mov.w	r1, #0
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800479a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800479e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047a2:	4688      	mov	r8, r1
 80047a4:	4691      	mov	r9, r2
 80047a6:	eb18 0005 	adds.w	r0, r8, r5
 80047aa:	eb49 0106 	adc.w	r1, r9, r6
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	461d      	mov	r5, r3
 80047b4:	f04f 0600 	mov.w	r6, #0
 80047b8:	196b      	adds	r3, r5, r5
 80047ba:	eb46 0406 	adc.w	r4, r6, r6
 80047be:	461a      	mov	r2, r3
 80047c0:	4623      	mov	r3, r4
 80047c2:	f7fb fd01 	bl	80001c8 <__aeabi_uldivmod>
 80047c6:	4603      	mov	r3, r0
 80047c8:	460c      	mov	r4, r1
 80047ca:	461a      	mov	r2, r3
 80047cc:	4ba5      	ldr	r3, [pc, #660]	; (8004a64 <UART_SetConfig+0x384>)
 80047ce:	fba3 2302 	umull	r2, r3, r3, r2
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	461d      	mov	r5, r3
 80047dc:	f04f 0600 	mov.w	r6, #0
 80047e0:	46a9      	mov	r9, r5
 80047e2:	46b2      	mov	sl, r6
 80047e4:	eb19 0309 	adds.w	r3, r9, r9
 80047e8:	eb4a 040a 	adc.w	r4, sl, sl
 80047ec:	4699      	mov	r9, r3
 80047ee:	46a2      	mov	sl, r4
 80047f0:	eb19 0905 	adds.w	r9, r9, r5
 80047f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80047f8:	f04f 0100 	mov.w	r1, #0
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004804:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004808:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800480c:	4689      	mov	r9, r1
 800480e:	4692      	mov	sl, r2
 8004810:	eb19 0005 	adds.w	r0, r9, r5
 8004814:	eb4a 0106 	adc.w	r1, sl, r6
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	461d      	mov	r5, r3
 800481e:	f04f 0600 	mov.w	r6, #0
 8004822:	196b      	adds	r3, r5, r5
 8004824:	eb46 0406 	adc.w	r4, r6, r6
 8004828:	461a      	mov	r2, r3
 800482a:	4623      	mov	r3, r4
 800482c:	f7fb fccc 	bl	80001c8 <__aeabi_uldivmod>
 8004830:	4603      	mov	r3, r0
 8004832:	460c      	mov	r4, r1
 8004834:	461a      	mov	r2, r3
 8004836:	4b8b      	ldr	r3, [pc, #556]	; (8004a64 <UART_SetConfig+0x384>)
 8004838:	fba3 1302 	umull	r1, r3, r3, r2
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	2164      	movs	r1, #100	; 0x64
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	3332      	adds	r3, #50	; 0x32
 800484a:	4a86      	ldr	r2, [pc, #536]	; (8004a64 <UART_SetConfig+0x384>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004858:	4498      	add	r8, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	461d      	mov	r5, r3
 800485e:	f04f 0600 	mov.w	r6, #0
 8004862:	46a9      	mov	r9, r5
 8004864:	46b2      	mov	sl, r6
 8004866:	eb19 0309 	adds.w	r3, r9, r9
 800486a:	eb4a 040a 	adc.w	r4, sl, sl
 800486e:	4699      	mov	r9, r3
 8004870:	46a2      	mov	sl, r4
 8004872:	eb19 0905 	adds.w	r9, r9, r5
 8004876:	eb4a 0a06 	adc.w	sl, sl, r6
 800487a:	f04f 0100 	mov.w	r1, #0
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004886:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800488a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800488e:	4689      	mov	r9, r1
 8004890:	4692      	mov	sl, r2
 8004892:	eb19 0005 	adds.w	r0, r9, r5
 8004896:	eb4a 0106 	adc.w	r1, sl, r6
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	461d      	mov	r5, r3
 80048a0:	f04f 0600 	mov.w	r6, #0
 80048a4:	196b      	adds	r3, r5, r5
 80048a6:	eb46 0406 	adc.w	r4, r6, r6
 80048aa:	461a      	mov	r2, r3
 80048ac:	4623      	mov	r3, r4
 80048ae:	f7fb fc8b 	bl	80001c8 <__aeabi_uldivmod>
 80048b2:	4603      	mov	r3, r0
 80048b4:	460c      	mov	r4, r1
 80048b6:	461a      	mov	r2, r3
 80048b8:	4b6a      	ldr	r3, [pc, #424]	; (8004a64 <UART_SetConfig+0x384>)
 80048ba:	fba3 1302 	umull	r1, r3, r3, r2
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	2164      	movs	r1, #100	; 0x64
 80048c2:	fb01 f303 	mul.w	r3, r1, r3
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	3332      	adds	r3, #50	; 0x32
 80048cc:	4a65      	ldr	r2, [pc, #404]	; (8004a64 <UART_SetConfig+0x384>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	f003 0207 	and.w	r2, r3, #7
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4442      	add	r2, r8
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	e26f      	b.n	8004dc2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048e2:	f7ff fce5 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 80048e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	461d      	mov	r5, r3
 80048ec:	f04f 0600 	mov.w	r6, #0
 80048f0:	46a8      	mov	r8, r5
 80048f2:	46b1      	mov	r9, r6
 80048f4:	eb18 0308 	adds.w	r3, r8, r8
 80048f8:	eb49 0409 	adc.w	r4, r9, r9
 80048fc:	4698      	mov	r8, r3
 80048fe:	46a1      	mov	r9, r4
 8004900:	eb18 0805 	adds.w	r8, r8, r5
 8004904:	eb49 0906 	adc.w	r9, r9, r6
 8004908:	f04f 0100 	mov.w	r1, #0
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004914:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004918:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800491c:	4688      	mov	r8, r1
 800491e:	4691      	mov	r9, r2
 8004920:	eb18 0005 	adds.w	r0, r8, r5
 8004924:	eb49 0106 	adc.w	r1, r9, r6
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	461d      	mov	r5, r3
 800492e:	f04f 0600 	mov.w	r6, #0
 8004932:	196b      	adds	r3, r5, r5
 8004934:	eb46 0406 	adc.w	r4, r6, r6
 8004938:	461a      	mov	r2, r3
 800493a:	4623      	mov	r3, r4
 800493c:	f7fb fc44 	bl	80001c8 <__aeabi_uldivmod>
 8004940:	4603      	mov	r3, r0
 8004942:	460c      	mov	r4, r1
 8004944:	461a      	mov	r2, r3
 8004946:	4b47      	ldr	r3, [pc, #284]	; (8004a64 <UART_SetConfig+0x384>)
 8004948:	fba3 2302 	umull	r2, r3, r3, r2
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	461d      	mov	r5, r3
 8004956:	f04f 0600 	mov.w	r6, #0
 800495a:	46a9      	mov	r9, r5
 800495c:	46b2      	mov	sl, r6
 800495e:	eb19 0309 	adds.w	r3, r9, r9
 8004962:	eb4a 040a 	adc.w	r4, sl, sl
 8004966:	4699      	mov	r9, r3
 8004968:	46a2      	mov	sl, r4
 800496a:	eb19 0905 	adds.w	r9, r9, r5
 800496e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004972:	f04f 0100 	mov.w	r1, #0
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800497e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004982:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004986:	4689      	mov	r9, r1
 8004988:	4692      	mov	sl, r2
 800498a:	eb19 0005 	adds.w	r0, r9, r5
 800498e:	eb4a 0106 	adc.w	r1, sl, r6
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	461d      	mov	r5, r3
 8004998:	f04f 0600 	mov.w	r6, #0
 800499c:	196b      	adds	r3, r5, r5
 800499e:	eb46 0406 	adc.w	r4, r6, r6
 80049a2:	461a      	mov	r2, r3
 80049a4:	4623      	mov	r3, r4
 80049a6:	f7fb fc0f 	bl	80001c8 <__aeabi_uldivmod>
 80049aa:	4603      	mov	r3, r0
 80049ac:	460c      	mov	r4, r1
 80049ae:	461a      	mov	r2, r3
 80049b0:	4b2c      	ldr	r3, [pc, #176]	; (8004a64 <UART_SetConfig+0x384>)
 80049b2:	fba3 1302 	umull	r1, r3, r3, r2
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	2164      	movs	r1, #100	; 0x64
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	3332      	adds	r3, #50	; 0x32
 80049c4:	4a27      	ldr	r2, [pc, #156]	; (8004a64 <UART_SetConfig+0x384>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049d2:	4498      	add	r8, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	461d      	mov	r5, r3
 80049d8:	f04f 0600 	mov.w	r6, #0
 80049dc:	46a9      	mov	r9, r5
 80049de:	46b2      	mov	sl, r6
 80049e0:	eb19 0309 	adds.w	r3, r9, r9
 80049e4:	eb4a 040a 	adc.w	r4, sl, sl
 80049e8:	4699      	mov	r9, r3
 80049ea:	46a2      	mov	sl, r4
 80049ec:	eb19 0905 	adds.w	r9, r9, r5
 80049f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80049f4:	f04f 0100 	mov.w	r1, #0
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a08:	4689      	mov	r9, r1
 8004a0a:	4692      	mov	sl, r2
 8004a0c:	eb19 0005 	adds.w	r0, r9, r5
 8004a10:	eb4a 0106 	adc.w	r1, sl, r6
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	461d      	mov	r5, r3
 8004a1a:	f04f 0600 	mov.w	r6, #0
 8004a1e:	196b      	adds	r3, r5, r5
 8004a20:	eb46 0406 	adc.w	r4, r6, r6
 8004a24:	461a      	mov	r2, r3
 8004a26:	4623      	mov	r3, r4
 8004a28:	f7fb fbce 	bl	80001c8 <__aeabi_uldivmod>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	460c      	mov	r4, r1
 8004a30:	461a      	mov	r2, r3
 8004a32:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <UART_SetConfig+0x384>)
 8004a34:	fba3 1302 	umull	r1, r3, r3, r2
 8004a38:	095b      	lsrs	r3, r3, #5
 8004a3a:	2164      	movs	r1, #100	; 0x64
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	3332      	adds	r3, #50	; 0x32
 8004a46:	4a07      	ldr	r2, [pc, #28]	; (8004a64 <UART_SetConfig+0x384>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	f003 0207 	and.w	r2, r3, #7
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4442      	add	r2, r8
 8004a58:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a5a:	e1b2      	b.n	8004dc2 <UART_SetConfig+0x6e2>
 8004a5c:	40011000 	.word	0x40011000
 8004a60:	40011400 	.word	0x40011400
 8004a64:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4ad7      	ldr	r2, [pc, #860]	; (8004dcc <UART_SetConfig+0x6ec>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d005      	beq.n	8004a7e <UART_SetConfig+0x39e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4ad6      	ldr	r2, [pc, #856]	; (8004dd0 <UART_SetConfig+0x6f0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	f040 80d1 	bne.w	8004c20 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a7e:	f7ff fc2b 	bl	80042d8 <HAL_RCC_GetPCLK2Freq>
 8004a82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	469a      	mov	sl, r3
 8004a88:	f04f 0b00 	mov.w	fp, #0
 8004a8c:	46d0      	mov	r8, sl
 8004a8e:	46d9      	mov	r9, fp
 8004a90:	eb18 0308 	adds.w	r3, r8, r8
 8004a94:	eb49 0409 	adc.w	r4, r9, r9
 8004a98:	4698      	mov	r8, r3
 8004a9a:	46a1      	mov	r9, r4
 8004a9c:	eb18 080a 	adds.w	r8, r8, sl
 8004aa0:	eb49 090b 	adc.w	r9, r9, fp
 8004aa4:	f04f 0100 	mov.w	r1, #0
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ab0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ab4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ab8:	4688      	mov	r8, r1
 8004aba:	4691      	mov	r9, r2
 8004abc:	eb1a 0508 	adds.w	r5, sl, r8
 8004ac0:	eb4b 0609 	adc.w	r6, fp, r9
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	f04f 0400 	mov.w	r4, #0
 8004ad6:	0094      	lsls	r4, r2, #2
 8004ad8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004adc:	008b      	lsls	r3, r1, #2
 8004ade:	461a      	mov	r2, r3
 8004ae0:	4623      	mov	r3, r4
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	4631      	mov	r1, r6
 8004ae6:	f7fb fb6f 	bl	80001c8 <__aeabi_uldivmod>
 8004aea:	4603      	mov	r3, r0
 8004aec:	460c      	mov	r4, r1
 8004aee:	461a      	mov	r2, r3
 8004af0:	4bb8      	ldr	r3, [pc, #736]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004af2:	fba3 2302 	umull	r2, r3, r3, r2
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	469b      	mov	fp, r3
 8004b00:	f04f 0c00 	mov.w	ip, #0
 8004b04:	46d9      	mov	r9, fp
 8004b06:	46e2      	mov	sl, ip
 8004b08:	eb19 0309 	adds.w	r3, r9, r9
 8004b0c:	eb4a 040a 	adc.w	r4, sl, sl
 8004b10:	4699      	mov	r9, r3
 8004b12:	46a2      	mov	sl, r4
 8004b14:	eb19 090b 	adds.w	r9, r9, fp
 8004b18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b1c:	f04f 0100 	mov.w	r1, #0
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b30:	4689      	mov	r9, r1
 8004b32:	4692      	mov	sl, r2
 8004b34:	eb1b 0509 	adds.w	r5, fp, r9
 8004b38:	eb4c 060a 	adc.w	r6, ip, sl
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4619      	mov	r1, r3
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	f04f 0400 	mov.w	r4, #0
 8004b4e:	0094      	lsls	r4, r2, #2
 8004b50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b54:	008b      	lsls	r3, r1, #2
 8004b56:	461a      	mov	r2, r3
 8004b58:	4623      	mov	r3, r4
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	4631      	mov	r1, r6
 8004b5e:	f7fb fb33 	bl	80001c8 <__aeabi_uldivmod>
 8004b62:	4603      	mov	r3, r0
 8004b64:	460c      	mov	r4, r1
 8004b66:	461a      	mov	r2, r3
 8004b68:	4b9a      	ldr	r3, [pc, #616]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	2164      	movs	r1, #100	; 0x64
 8004b72:	fb01 f303 	mul.w	r3, r1, r3
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	3332      	adds	r3, #50	; 0x32
 8004b7c:	4a95      	ldr	r2, [pc, #596]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b88:	4498      	add	r8, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	469b      	mov	fp, r3
 8004b8e:	f04f 0c00 	mov.w	ip, #0
 8004b92:	46d9      	mov	r9, fp
 8004b94:	46e2      	mov	sl, ip
 8004b96:	eb19 0309 	adds.w	r3, r9, r9
 8004b9a:	eb4a 040a 	adc.w	r4, sl, sl
 8004b9e:	4699      	mov	r9, r3
 8004ba0:	46a2      	mov	sl, r4
 8004ba2:	eb19 090b 	adds.w	r9, r9, fp
 8004ba6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004baa:	f04f 0100 	mov.w	r1, #0
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bbe:	4689      	mov	r9, r1
 8004bc0:	4692      	mov	sl, r2
 8004bc2:	eb1b 0509 	adds.w	r5, fp, r9
 8004bc6:	eb4c 060a 	adc.w	r6, ip, sl
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	4619      	mov	r1, r3
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	f04f 0400 	mov.w	r4, #0
 8004bdc:	0094      	lsls	r4, r2, #2
 8004bde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004be2:	008b      	lsls	r3, r1, #2
 8004be4:	461a      	mov	r2, r3
 8004be6:	4623      	mov	r3, r4
 8004be8:	4628      	mov	r0, r5
 8004bea:	4631      	mov	r1, r6
 8004bec:	f7fb faec 	bl	80001c8 <__aeabi_uldivmod>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4b77      	ldr	r3, [pc, #476]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bfc:	095b      	lsrs	r3, r3, #5
 8004bfe:	2164      	movs	r1, #100	; 0x64
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	3332      	adds	r3, #50	; 0x32
 8004c0a:	4a72      	ldr	r2, [pc, #456]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	f003 020f 	and.w	r2, r3, #15
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4442      	add	r2, r8
 8004c1c:	609a      	str	r2, [r3, #8]
 8004c1e:	e0d0      	b.n	8004dc2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c20:	f7ff fb46 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 8004c24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	469a      	mov	sl, r3
 8004c2a:	f04f 0b00 	mov.w	fp, #0
 8004c2e:	46d0      	mov	r8, sl
 8004c30:	46d9      	mov	r9, fp
 8004c32:	eb18 0308 	adds.w	r3, r8, r8
 8004c36:	eb49 0409 	adc.w	r4, r9, r9
 8004c3a:	4698      	mov	r8, r3
 8004c3c:	46a1      	mov	r9, r4
 8004c3e:	eb18 080a 	adds.w	r8, r8, sl
 8004c42:	eb49 090b 	adc.w	r9, r9, fp
 8004c46:	f04f 0100 	mov.w	r1, #0
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c5a:	4688      	mov	r8, r1
 8004c5c:	4691      	mov	r9, r2
 8004c5e:	eb1a 0508 	adds.w	r5, sl, r8
 8004c62:	eb4b 0609 	adc.w	r6, fp, r9
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	f04f 0400 	mov.w	r4, #0
 8004c78:	0094      	lsls	r4, r2, #2
 8004c7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c7e:	008b      	lsls	r3, r1, #2
 8004c80:	461a      	mov	r2, r3
 8004c82:	4623      	mov	r3, r4
 8004c84:	4628      	mov	r0, r5
 8004c86:	4631      	mov	r1, r6
 8004c88:	f7fb fa9e 	bl	80001c8 <__aeabi_uldivmod>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	460c      	mov	r4, r1
 8004c90:	461a      	mov	r2, r3
 8004c92:	4b50      	ldr	r3, [pc, #320]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004c94:	fba3 2302 	umull	r2, r3, r3, r2
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	469b      	mov	fp, r3
 8004ca2:	f04f 0c00 	mov.w	ip, #0
 8004ca6:	46d9      	mov	r9, fp
 8004ca8:	46e2      	mov	sl, ip
 8004caa:	eb19 0309 	adds.w	r3, r9, r9
 8004cae:	eb4a 040a 	adc.w	r4, sl, sl
 8004cb2:	4699      	mov	r9, r3
 8004cb4:	46a2      	mov	sl, r4
 8004cb6:	eb19 090b 	adds.w	r9, r9, fp
 8004cba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cbe:	f04f 0100 	mov.w	r1, #0
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cd2:	4689      	mov	r9, r1
 8004cd4:	4692      	mov	sl, r2
 8004cd6:	eb1b 0509 	adds.w	r5, fp, r9
 8004cda:	eb4c 060a 	adc.w	r6, ip, sl
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	f04f 0400 	mov.w	r4, #0
 8004cf0:	0094      	lsls	r4, r2, #2
 8004cf2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cf6:	008b      	lsls	r3, r1, #2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4623      	mov	r3, r4
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	4631      	mov	r1, r6
 8004d00:	f7fb fa62 	bl	80001c8 <__aeabi_uldivmod>
 8004d04:	4603      	mov	r3, r0
 8004d06:	460c      	mov	r4, r1
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4b32      	ldr	r3, [pc, #200]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	2164      	movs	r1, #100	; 0x64
 8004d14:	fb01 f303 	mul.w	r3, r1, r3
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	3332      	adds	r3, #50	; 0x32
 8004d1e:	4a2d      	ldr	r2, [pc, #180]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004d20:	fba2 2303 	umull	r2, r3, r2, r3
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d2a:	4498      	add	r8, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	469b      	mov	fp, r3
 8004d30:	f04f 0c00 	mov.w	ip, #0
 8004d34:	46d9      	mov	r9, fp
 8004d36:	46e2      	mov	sl, ip
 8004d38:	eb19 0309 	adds.w	r3, r9, r9
 8004d3c:	eb4a 040a 	adc.w	r4, sl, sl
 8004d40:	4699      	mov	r9, r3
 8004d42:	46a2      	mov	sl, r4
 8004d44:	eb19 090b 	adds.w	r9, r9, fp
 8004d48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d4c:	f04f 0100 	mov.w	r1, #0
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d60:	4689      	mov	r9, r1
 8004d62:	4692      	mov	sl, r2
 8004d64:	eb1b 0509 	adds.w	r5, fp, r9
 8004d68:	eb4c 060a 	adc.w	r6, ip, sl
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	4619      	mov	r1, r3
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	f04f 0400 	mov.w	r4, #0
 8004d7e:	0094      	lsls	r4, r2, #2
 8004d80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d84:	008b      	lsls	r3, r1, #2
 8004d86:	461a      	mov	r2, r3
 8004d88:	4623      	mov	r3, r4
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	4631      	mov	r1, r6
 8004d8e:	f7fb fa1b 	bl	80001c8 <__aeabi_uldivmod>
 8004d92:	4603      	mov	r3, r0
 8004d94:	460c      	mov	r4, r1
 8004d96:	461a      	mov	r2, r3
 8004d98:	4b0e      	ldr	r3, [pc, #56]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004d9a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	2164      	movs	r1, #100	; 0x64
 8004da2:	fb01 f303 	mul.w	r3, r1, r3
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	3332      	adds	r3, #50	; 0x32
 8004dac:	4a09      	ldr	r2, [pc, #36]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	f003 020f 	and.w	r2, r3, #15
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4442      	add	r2, r8
 8004dbe:	609a      	str	r2, [r3, #8]
}
 8004dc0:	e7ff      	b.n	8004dc2 <UART_SetConfig+0x6e2>
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dcc:	40011000 	.word	0x40011000
 8004dd0:	40011400 	.word	0x40011400
 8004dd4:	51eb851f 	.word	0x51eb851f

08004dd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dd8:	b084      	sub	sp, #16
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	f107 001c 	add.w	r0, r7, #28
 8004de6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d122      	bne.n	8004e36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d105      	bne.n	8004e2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f94a 	bl	80050c4 <USB_CoreReset>
 8004e30:	4603      	mov	r3, r0
 8004e32:	73fb      	strb	r3, [r7, #15]
 8004e34:	e01a      	b.n	8004e6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f93e 	bl	80050c4 <USB_CoreReset>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8004e5e:	e005      	b.n	8004e6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d10b      	bne.n	8004e8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f043 0206 	orr.w	r2, r3, #6
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f043 0220 	orr.w	r2, r3, #32
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e96:	b004      	add	sp, #16
 8004e98:	4770      	bx	lr

08004e9a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f043 0201 	orr.w	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f023 0201 	bic.w	r2, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ef6:	78fb      	ldrb	r3, [r7, #3]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d106      	bne.n	8004f0a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60da      	str	r2, [r3, #12]
 8004f08:	e00b      	b.n	8004f22 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d106      	bne.n	8004f1e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	60da      	str	r2, [r3, #12]
 8004f1c:	e001      	b.n	8004f22 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e003      	b.n	8004f2a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004f22:	2032      	movs	r0, #50	; 0x32
 8004f24:	f7fc f830 	bl	8000f88 <HAL_Delay>

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	019b      	lsls	r3, r3, #6
 8004f46:	f043 0220 	orr.w	r2, r3, #32
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3301      	adds	r3, #1
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <USB_FlushTxFifo+0x48>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d901      	bls.n	8004f60 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e006      	b.n	8004f6e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d0f0      	beq.n	8004f4e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	00030d40 	.word	0x00030d40

08004f80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2210      	movs	r2, #16
 8004f90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3301      	adds	r3, #1
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4a09      	ldr	r2, [pc, #36]	; (8004fc0 <USB_FlushRxFifo+0x40>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d901      	bls.n	8004fa4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e006      	b.n	8004fb2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d0f0      	beq.n	8004f92 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	00030d40 	.word	0x00030d40

08004fc4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b089      	sub	sp, #36	; 0x24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	4611      	mov	r1, r2
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	71fb      	strb	r3, [r7, #7]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004fe2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d11a      	bne.n	8005020 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004fea:	88bb      	ldrh	r3, [r7, #4]
 8004fec:	3303      	adds	r3, #3
 8004fee:	089b      	lsrs	r3, r3, #2
 8004ff0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	e00f      	b.n	8005018 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	031a      	lsls	r2, r3, #12
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005004:	461a      	mov	r2, r3
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	3304      	adds	r3, #4
 8005010:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	3301      	adds	r3, #1
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	429a      	cmp	r2, r3
 800501e:	d3eb      	bcc.n	8004ff8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3724      	adds	r7, #36	; 0x24
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800502e:	b480      	push	{r7}
 8005030:	b089      	sub	sp, #36	; 0x24
 8005032:	af00      	add	r7, sp, #0
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	4613      	mov	r3, r2
 800503a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005044:	88fb      	ldrh	r3, [r7, #6]
 8005046:	3303      	adds	r3, #3
 8005048:	089b      	lsrs	r3, r3, #2
 800504a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800504c:	2300      	movs	r3, #0
 800504e:	61bb      	str	r3, [r7, #24]
 8005050:	e00b      	b.n	800506a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	601a      	str	r2, [r3, #0]
    pDest++;
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	3304      	adds	r3, #4
 8005062:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	3301      	adds	r3, #1
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	429a      	cmp	r2, r3
 8005070:	d3ef      	bcc.n	8005052 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005072:	69fb      	ldr	r3, [r7, #28]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3724      	adds	r7, #36	; 0x24
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4013      	ands	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005098:	68fb      	ldr	r3, [r7, #12]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f003 0301 	and.w	r3, r3, #1
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	3301      	adds	r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4a13      	ldr	r2, [pc, #76]	; (8005128 <USB_CoreReset+0x64>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e01b      	b.n	800511a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	daf2      	bge.n	80050d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f043 0201 	orr.w	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	3301      	adds	r3, #1
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4a09      	ldr	r2, [pc, #36]	; (8005128 <USB_CoreReset+0x64>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d901      	bls.n	800510c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e006      	b.n	800511a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b01      	cmp	r3, #1
 8005116:	d0f0      	beq.n	80050fa <USB_CoreReset+0x36>

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	00030d40 	.word	0x00030d40

0800512c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800512c:	b084      	sub	sp, #16
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	f107 001c 	add.w	r0, r7, #28
 800513a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005148:	461a      	mov	r2, r3
 800514a:	2300      	movs	r3, #0
 800514c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517a:	2b00      	cmp	r3, #0
 800517c:	d018      	beq.n	80051b0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	2b03      	cmp	r3, #3
 8005182:	d10a      	bne.n	800519a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005192:	f043 0304 	orr.w	r3, r3, #4
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	e014      	b.n	80051c4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051a8:	f023 0304 	bic.w	r3, r3, #4
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e009      	b.n	80051c4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051be:	f023 0304 	bic.w	r3, r3, #4
 80051c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80051c4:	2110      	movs	r1, #16
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff feb4 	bl	8004f34 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff fed7 	bl	8004f80 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	e015      	b.n	8005204 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e4:	461a      	mov	r2, r3
 80051e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051ea:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f8:	461a      	mov	r2, r3
 80051fa:	2300      	movs	r3, #0
 80051fc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3301      	adds	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	429a      	cmp	r2, r3
 800520a:	d3e5      	bcc.n	80051d8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800520c:	2101      	movs	r1, #1
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f8ac 	bl	800536c <USB_DriveVbus>

  HAL_Delay(200U);
 8005214:	20c8      	movs	r0, #200	; 0xc8
 8005216:	f7fb feb7 	bl	8000f88 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005226:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00b      	beq.n	800524c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800523a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a14      	ldr	r2, [pc, #80]	; (8005290 <USB_HostInit+0x164>)
 8005240:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a13      	ldr	r2, [pc, #76]	; (8005294 <USB_HostInit+0x168>)
 8005246:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800524a:	e009      	b.n	8005260 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2280      	movs	r2, #128	; 0x80
 8005250:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a10      	ldr	r2, [pc, #64]	; (8005298 <USB_HostInit+0x16c>)
 8005256:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a10      	ldr	r2, [pc, #64]	; (800529c <USB_HostInit+0x170>)
 800525c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	2b00      	cmp	r3, #0
 8005264:	d105      	bne.n	8005272 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f043 0210 	orr.w	r2, r3, #16
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <USB_HostInit+0x174>)
 8005278:	4313      	orrs	r3, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800528a:	b004      	add	sp, #16
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	01000200 	.word	0x01000200
 8005294:	00e00300 	.word	0x00e00300
 8005298:	00600080 	.word	0x00600080
 800529c:	004000e0 	.word	0x004000e0
 80052a0:	a3200008 	.word	0xa3200008

080052a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052c2:	f023 0303 	bic.w	r3, r3, #3
 80052c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	68f9      	ldr	r1, [r7, #12]
 80052d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052dc:	4313      	orrs	r3, r2
 80052de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d107      	bne.n	80052f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ec:	461a      	mov	r2, r3
 80052ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80052f2:	6053      	str	r3, [r2, #4]
 80052f4:	e009      	b.n	800530a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80052f6:	78fb      	ldrb	r3, [r7, #3]
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d106      	bne.n	800530a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005302:	461a      	mov	r2, r3
 8005304:	f241 7370 	movw	r3, #6000	; 0x1770
 8005308:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005338:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005346:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005348:	2064      	movs	r0, #100	; 0x64
 800534a:	f7fb fe1d 	bl	8000f88 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800535a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800535c:	200a      	movs	r0, #10
 800535e:	f7fb fe13 	bl	8000f88 <HAL_Delay>

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005390:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <USB_DriveVbus+0x44>
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d106      	bne.n	80053b0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053ae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ba:	d109      	bne.n	80053d0 <USB_DriveVbus+0x64>
 80053bc:	78fb      	ldrb	r3, [r7, #3]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053ce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	0c5b      	lsrs	r3, r3, #17
 80053fc:	f003 0303 	and.w	r3, r3, #3
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	b29b      	uxth	r3, r3
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
	...

08005430 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	4608      	mov	r0, r1
 800543a:	4611      	mov	r1, r2
 800543c:	461a      	mov	r2, r3
 800543e:	4603      	mov	r3, r0
 8005440:	70fb      	strb	r3, [r7, #3]
 8005442:	460b      	mov	r3, r1
 8005444:	70bb      	strb	r3, [r7, #2]
 8005446:	4613      	mov	r3, r2
 8005448:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4413      	add	r3, r2
 800545a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545e:	461a      	mov	r2, r3
 8005460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005464:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005466:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800546a:	2b03      	cmp	r3, #3
 800546c:	d87e      	bhi.n	800556c <USB_HC_Init+0x13c>
 800546e:	a201      	add	r2, pc, #4	; (adr r2, 8005474 <USB_HC_Init+0x44>)
 8005470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005474:	08005485 	.word	0x08005485
 8005478:	0800552f 	.word	0x0800552f
 800547c:	08005485 	.word	0x08005485
 8005480:	080054f1 	.word	0x080054f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4413      	add	r3, r2
 800548c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005490:	461a      	mov	r2, r3
 8005492:	f240 439d 	movw	r3, #1181	; 0x49d
 8005496:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005498:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800549c:	2b00      	cmp	r3, #0
 800549e:	da10      	bge.n	80054c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	78fa      	ldrb	r2, [r7, #3]
 80054b0:	0151      	lsls	r1, r2, #5
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	440a      	add	r2, r1
 80054b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054be:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80054c0:	e057      	b.n	8005572 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d051      	beq.n	8005572 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	0151      	lsls	r1, r2, #5
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	440a      	add	r2, r1
 80054e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80054ec:	60d3      	str	r3, [r2, #12]
      break;
 80054ee:	e040      	b.n	8005572 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fc:	461a      	mov	r2, r3
 80054fe:	f240 639d 	movw	r3, #1693	; 0x69d
 8005502:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005504:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005508:	2b00      	cmp	r3, #0
 800550a:	da34      	bge.n	8005576 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4413      	add	r3, r2
 8005514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	78fa      	ldrb	r2, [r7, #3]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	440a      	add	r2, r1
 8005522:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800552c:	e023      	b.n	8005576 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	4413      	add	r3, r2
 8005536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553a:	461a      	mov	r2, r3
 800553c:	f240 2325 	movw	r3, #549	; 0x225
 8005540:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005542:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005546:	2b00      	cmp	r3, #0
 8005548:	da17      	bge.n	800557a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	4413      	add	r3, r2
 8005552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	78fa      	ldrb	r2, [r7, #3]
 800555a:	0151      	lsls	r1, r2, #5
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	440a      	add	r2, r1
 8005560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005564:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005568:	60d3      	str	r3, [r2, #12]
      }
      break;
 800556a:	e006      	b.n	800557a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	75fb      	strb	r3, [r7, #23]
      break;
 8005570:	e004      	b.n	800557c <USB_HC_Init+0x14c>
      break;
 8005572:	bf00      	nop
 8005574:	e002      	b.n	800557c <USB_HC_Init+0x14c>
      break;
 8005576:	bf00      	nop
 8005578:	e000      	b.n	800557c <USB_HC_Init+0x14c>
      break;
 800557a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005582:	699a      	ldr	r2, [r3, #24]
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	2101      	movs	r1, #1
 800558c:	fa01 f303 	lsl.w	r3, r1, r3
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005596:	4313      	orrs	r3, r2
 8005598:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80055a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	da03      	bge.n	80055b6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80055ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	e001      	b.n	80055ba <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80055ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d103      	bne.n	80055ca <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80055c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	e001      	b.n	80055ce <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055ce:	787b      	ldrb	r3, [r7, #1]
 80055d0:	059b      	lsls	r3, r3, #22
 80055d2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055d6:	78bb      	ldrb	r3, [r7, #2]
 80055d8:	02db      	lsls	r3, r3, #11
 80055da:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055de:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80055e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055e4:	049b      	lsls	r3, r3, #18
 80055e6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055ea:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80055f2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	0159      	lsls	r1, r3, #5
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	440b      	add	r3, r1
 8005600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005604:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800560a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800560c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005610:	2b03      	cmp	r3, #3
 8005612:	d10f      	bne.n	8005634 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4413      	add	r3, r2
 800561c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	78fa      	ldrb	r2, [r7, #3]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	440a      	add	r2, r1
 800562a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800562e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005632:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005634:	7dfb      	ldrb	r3, [r7, #23]
}
 8005636:	4618      	mov	r0, r3
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop

08005644 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08c      	sub	sp, #48	; 0x30
 8005648:	af02      	add	r7, sp, #8
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	4613      	mov	r3, r2
 8005650:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	785b      	ldrb	r3, [r3, #1]
 800565a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800565c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005660:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566a:	2b00      	cmp	r3, #0
 800566c:	d028      	beq.n	80056c0 <USB_HC_StartXfer+0x7c>
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	791b      	ldrb	r3, [r3, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d124      	bne.n	80056c0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10b      	bne.n	8005694 <USB_HC_StartXfer+0x50>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	795b      	ldrb	r3, [r3, #5]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d107      	bne.n	8005694 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	4619      	mov	r1, r3
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fa2e 	bl	8005aec <USB_DoPing>
      return HAL_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	e112      	b.n	80058ba <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d112      	bne.n	80056c0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	0151      	lsls	r1, r2, #5
 80056ac:	6a3a      	ldr	r2, [r7, #32]
 80056ae:	440a      	add	r2, r1
 80056b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056b4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80056b8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2200      	movs	r2, #0
 80056be:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d018      	beq.n	80056fa <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	8912      	ldrh	r2, [r2, #8]
 80056d0:	4413      	add	r3, r2
 80056d2:	3b01      	subs	r3, #1
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	8912      	ldrh	r2, [r2, #8]
 80056d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80056dc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80056de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80056e0:	8b7b      	ldrh	r3, [r7, #26]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d90b      	bls.n	80056fe <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80056e6:	8b7b      	ldrh	r3, [r7, #26]
 80056e8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80056ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	8912      	ldrh	r2, [r2, #8]
 80056f0:	fb02 f203 	mul.w	r2, r2, r3
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	611a      	str	r2, [r3, #16]
 80056f8:	e001      	b.n	80056fe <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80056fa:	2301      	movs	r3, #1
 80056fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	78db      	ldrb	r3, [r3, #3]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d006      	beq.n	8005714 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005706:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	8912      	ldrh	r2, [r2, #8]
 800570c:	fb02 f203 	mul.w	r2, r2, r3
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800571c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800571e:	04d9      	lsls	r1, r3, #19
 8005720:	4b68      	ldr	r3, [pc, #416]	; (80058c4 <USB_HC_StartXfer+0x280>)
 8005722:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005724:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	7a9b      	ldrb	r3, [r3, #10]
 800572a:	075b      	lsls	r3, r3, #29
 800572c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005730:	69f9      	ldr	r1, [r7, #28]
 8005732:	0148      	lsls	r0, r1, #5
 8005734:	6a39      	ldr	r1, [r7, #32]
 8005736:	4401      	add	r1, r0
 8005738:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800573c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800573e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d009      	beq.n	800575a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	68d9      	ldr	r1, [r3, #12]
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	4413      	add	r3, r2
 8005752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005756:	460a      	mov	r2, r1
 8005758:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	bf0c      	ite	eq
 800576a:	2301      	moveq	r3, #1
 800576c:	2300      	movne	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	4413      	add	r3, r2
 800577a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	0151      	lsls	r1, r2, #5
 8005784:	6a3a      	ldr	r2, [r7, #32]
 8005786:	440a      	add	r2, r1
 8005788:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800578c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005790:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	4413      	add	r3, r2
 800579a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	7e7b      	ldrb	r3, [r7, #25]
 80057a2:	075b      	lsls	r3, r3, #29
 80057a4:	69f9      	ldr	r1, [r7, #28]
 80057a6:	0148      	lsls	r0, r1, #5
 80057a8:	6a39      	ldr	r1, [r7, #32]
 80057aa:	4401      	add	r1, r0
 80057ac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80057b0:	4313      	orrs	r3, r2
 80057b2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a41      	ldr	r2, [pc, #260]	; (80058c8 <USB_HC_StartXfer+0x284>)
 80057c4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057c6:	4b40      	ldr	r3, [pc, #256]	; (80058c8 <USB_HC_StartXfer+0x284>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057ce:	4a3e      	ldr	r2, [pc, #248]	; (80058c8 <USB_HC_StartXfer+0x284>)
 80057d0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	78db      	ldrb	r3, [r3, #3]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d006      	beq.n	80057e8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80057da:	4b3b      	ldr	r3, [pc, #236]	; (80058c8 <USB_HC_StartXfer+0x284>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e2:	4a39      	ldr	r2, [pc, #228]	; (80058c8 <USB_HC_StartXfer+0x284>)
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	e005      	b.n	80057f4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80057e8:	4b37      	ldr	r3, [pc, #220]	; (80058c8 <USB_HC_StartXfer+0x284>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057f0:	4a35      	ldr	r2, [pc, #212]	; (80058c8 <USB_HC_StartXfer+0x284>)
 80057f2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057f4:	4b34      	ldr	r3, [pc, #208]	; (80058c8 <USB_HC_StartXfer+0x284>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057fc:	4a32      	ldr	r2, [pc, #200]	; (80058c8 <USB_HC_StartXfer+0x284>)
 80057fe:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	4413      	add	r3, r2
 8005808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580c:	461a      	mov	r2, r3
 800580e:	4b2e      	ldr	r3, [pc, #184]	; (80058c8 <USB_HC_StartXfer+0x284>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d14e      	bne.n	80058b8 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	78db      	ldrb	r3, [r3, #3]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d14a      	bne.n	80058b8 <USB_HC_StartXfer+0x274>
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d046      	beq.n	80058b8 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	79db      	ldrb	r3, [r3, #7]
 800582e:	2b03      	cmp	r3, #3
 8005830:	d830      	bhi.n	8005894 <USB_HC_StartXfer+0x250>
 8005832:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <USB_HC_StartXfer+0x1f4>)
 8005834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005838:	08005849 	.word	0x08005849
 800583c:	0800586d 	.word	0x0800586d
 8005840:	08005849 	.word	0x08005849
 8005844:	0800586d 	.word	0x0800586d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	3303      	adds	r3, #3
 800584e:	089b      	lsrs	r3, r3, #2
 8005850:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005852:	8afa      	ldrh	r2, [r7, #22]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	b29b      	uxth	r3, r3
 800585a:	429a      	cmp	r2, r3
 800585c:	d91c      	bls.n	8005898 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	f043 0220 	orr.w	r2, r3, #32
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	619a      	str	r2, [r3, #24]
          }
          break;
 800586a:	e015      	b.n	8005898 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	3303      	adds	r3, #3
 8005872:	089b      	lsrs	r3, r3, #2
 8005874:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005876:	8afa      	ldrh	r2, [r7, #22]
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	b29b      	uxth	r3, r3
 8005882:	429a      	cmp	r2, r3
 8005884:	d90a      	bls.n	800589c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	619a      	str	r2, [r3, #24]
          }
          break;
 8005892:	e003      	b.n	800589c <USB_HC_StartXfer+0x258>

        default:
          break;
 8005894:	bf00      	nop
 8005896:	e002      	b.n	800589e <USB_HC_StartXfer+0x25a>
          break;
 8005898:	bf00      	nop
 800589a:	e000      	b.n	800589e <USB_HC_StartXfer+0x25a>
          break;
 800589c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	68d9      	ldr	r1, [r3, #12]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	785a      	ldrb	r2, [r3, #1]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	b298      	uxth	r0, r3
 80058ac:	2300      	movs	r3, #0
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	4603      	mov	r3, r0
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f7ff fb86 	bl	8004fc4 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3728      	adds	r7, #40	; 0x28
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	1ff80000 	.word	0x1ff80000
 80058c8:	200000b0 	.word	0x200000b0

080058cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	b29b      	uxth	r3, r3
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b087      	sub	sp, #28
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	460b      	mov	r3, r1
 80058f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80058fe:	78fb      	ldrb	r3, [r7, #3]
 8005900:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4413      	add	r3, r2
 800590e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	0c9b      	lsrs	r3, r3, #18
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <USB_HC_Halt+0x3a>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d16c      	bne.n	8005a02 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	4413      	add	r3, r2
 8005930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	440a      	add	r2, r1
 800593e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005942:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005946:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d143      	bne.n	80059dc <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	4413      	add	r3, r2
 800595c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	440a      	add	r2, r1
 800596a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800596e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005972:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	4413      	add	r3, r2
 800597c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	440a      	add	r2, r1
 800598a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800598e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005992:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4413      	add	r3, r2
 800599c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	0151      	lsls	r1, r2, #5
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	440a      	add	r2, r1
 80059aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059b2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	3301      	adds	r3, #1
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059c0:	d81d      	bhi.n	80059fe <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059d8:	d0ec      	beq.n	80059b4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80059da:	e080      	b.n	8005ade <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059fa:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80059fc:	e06f      	b.n	8005ade <USB_HC_Halt+0x1f0>
          break;
 80059fe:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a00:	e06d      	b.n	8005ade <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	0151      	lsls	r1, r2, #5
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	440a      	add	r2, r1
 8005a18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a20:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d143      	bne.n	8005aba <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	0151      	lsls	r1, r2, #5
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	440a      	add	r2, r1
 8005a48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a50:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a70:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a90:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	3301      	adds	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a9e:	d81d      	bhi.n	8005adc <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ab6:	d0ec      	beq.n	8005a92 <USB_HC_Halt+0x1a4>
 8005ab8:	e011      	b.n	8005ade <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	0151      	lsls	r1, r2, #5
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	440a      	add	r2, r1
 8005ad0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ad4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	e000      	b.n	8005ade <USB_HC_Halt+0x1f0>
          break;
 8005adc:	bf00      	nop
    }
  }

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005b00:	2301      	movs	r3, #1
 8005b02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	04da      	lsls	r2, r3, #19
 8005b08:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <USB_DoPing+0x74>)
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b1c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b34:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b3c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	1ff80000 	.word	0x1ff80000

08005b64 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff f9a1 	bl	8004ebc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005b7a:	2110      	movs	r1, #16
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff f9d9 	bl	8004f34 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff f9fc 	bl	8004f80 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	e01f      	b.n	8005bce <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ba4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bb4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b0f      	cmp	r3, #15
 8005bd2:	d9dc      	bls.n	8005b8e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	613b      	str	r3, [r7, #16]
 8005bd8:	e034      	b.n	8005c44 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bf0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bf8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c00:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0e:	461a      	mov	r2, r3
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	3301      	adds	r3, #1
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c20:	d80c      	bhi.n	8005c3c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c38:	d0ec      	beq.n	8005c14 <USB_StopHost+0xb0>
 8005c3a:	e000      	b.n	8005c3e <USB_StopHost+0xda>
        break;
 8005c3c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	3301      	adds	r3, #1
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	2b0f      	cmp	r3, #15
 8005c48:	d9c7      	bls.n	8005bda <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c50:	461a      	mov	r2, r3
 8005c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c56:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c5e:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff f91a 	bl	8004e9a <USB_EnableGlobalInt>

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005c70:	b590      	push	{r4, r7, lr}
 8005c72:	b089      	sub	sp, #36	; 0x24
 8005c74:	af04      	add	r7, sp, #16
 8005c76:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	2202      	movs	r2, #2
 8005c80:	2102      	movs	r1, #2
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fc3a 	bl	80064fc <USBH_FindInterface>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005c8c:	7bbb      	ldrb	r3, [r7, #14]
 8005c8e:	2bff      	cmp	r3, #255	; 0xff
 8005c90:	f000 812a 	beq.w	8005ee8 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005c94:	7bbb      	ldrb	r3, [r7, #14]
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fc13 	bl	80064c4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005ca4:	2050      	movs	r0, #80	; 0x50
 8005ca6:	f002 f8df 	bl	8007e68 <malloc>
 8005caa:	4603      	mov	r3, r0
 8005cac:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	211a      	movs	r1, #26
 8005cbe:	fb01 f303 	mul.w	r3, r1, r3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	b25b      	sxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	da15      	bge.n	8005cfc <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005cd0:	7bbb      	ldrb	r3, [r7, #14]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	211a      	movs	r1, #26
 8005cd6:	fb01 f303 	mul.w	r3, r1, r3
 8005cda:	4413      	add	r3, r2
 8005cdc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005ce0:	781a      	ldrb	r2, [r3, #0]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ce6:	7bbb      	ldrb	r3, [r7, #14]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	211a      	movs	r1, #26
 8005cec:	fb01 f303 	mul.w	r3, r1, r3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005cf6:	881a      	ldrh	r2, [r3, #0]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	785b      	ldrb	r3, [r3, #1]
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f001 fd21 	bl	800774a <USBH_AllocPipe>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	7819      	ldrb	r1, [r3, #0]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	7858      	ldrb	r0, [r3, #1]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	8952      	ldrh	r2, [r2, #10]
 8005d28:	9202      	str	r2, [sp, #8]
 8005d2a:	2203      	movs	r2, #3
 8005d2c:	9201      	str	r2, [sp, #4]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	4623      	mov	r3, r4
 8005d32:	4602      	mov	r2, r0
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f001 fcd9 	bl	80076ec <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	4619      	mov	r1, r3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f001 ffe0 	bl	8007d08 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005d48:	2300      	movs	r3, #0
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	210a      	movs	r1, #10
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fbd4 	bl	80064fc <USBH_FindInterface>
 8005d54:	4603      	mov	r3, r0
 8005d56:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005d58:	7bbb      	ldrb	r3, [r7, #14]
 8005d5a:	2bff      	cmp	r3, #255	; 0xff
 8005d5c:	f000 80c4 	beq.w	8005ee8 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005d60:	7bbb      	ldrb	r3, [r7, #14]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	211a      	movs	r1, #26
 8005d66:	fb01 f303 	mul.w	r3, r1, r3
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	b25b      	sxtb	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	da16      	bge.n	8005da6 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d78:	7bbb      	ldrb	r3, [r7, #14]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	211a      	movs	r1, #26
 8005d7e:	fb01 f303 	mul.w	r3, r1, r3
 8005d82:	4413      	add	r3, r2
 8005d84:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005d88:	781a      	ldrb	r2, [r3, #0]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d8e:	7bbb      	ldrb	r3, [r7, #14]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	211a      	movs	r1, #26
 8005d94:	fb01 f303 	mul.w	r3, r1, r3
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005d9e:	881a      	ldrh	r2, [r3, #0]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	835a      	strh	r2, [r3, #26]
 8005da4:	e015      	b.n	8005dd2 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005da6:	7bbb      	ldrb	r3, [r7, #14]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	211a      	movs	r1, #26
 8005dac:	fb01 f303 	mul.w	r3, r1, r3
 8005db0:	4413      	add	r3, r2
 8005db2:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005db6:	781a      	ldrb	r2, [r3, #0]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005dbc:	7bbb      	ldrb	r3, [r7, #14]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	211a      	movs	r1, #26
 8005dc2:	fb01 f303 	mul.w	r3, r1, r3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005dcc:	881a      	ldrh	r2, [r3, #0]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005dd2:	7bbb      	ldrb	r3, [r7, #14]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	211a      	movs	r1, #26
 8005dd8:	fb01 f303 	mul.w	r3, r1, r3
 8005ddc:	4413      	add	r3, r2
 8005dde:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	b25b      	sxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	da16      	bge.n	8005e18 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005dea:	7bbb      	ldrb	r3, [r7, #14]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	211a      	movs	r1, #26
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	4413      	add	r3, r2
 8005df6:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005dfa:	781a      	ldrb	r2, [r3, #0]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	211a      	movs	r1, #26
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005e10:	881a      	ldrh	r2, [r3, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	835a      	strh	r2, [r3, #26]
 8005e16:	e015      	b.n	8005e44 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e18:	7bbb      	ldrb	r3, [r7, #14]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	211a      	movs	r1, #26
 8005e1e:	fb01 f303 	mul.w	r3, r1, r3
 8005e22:	4413      	add	r3, r2
 8005e24:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005e28:	781a      	ldrb	r2, [r3, #0]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e2e:	7bbb      	ldrb	r3, [r7, #14]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	211a      	movs	r1, #26
 8005e34:	fb01 f303 	mul.w	r3, r1, r3
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005e3e:	881a      	ldrh	r2, [r3, #0]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	7b9b      	ldrb	r3, [r3, #14]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f001 fc7d 	bl	800774a <USBH_AllocPipe>
 8005e50:	4603      	mov	r3, r0
 8005e52:	461a      	mov	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	7bdb      	ldrb	r3, [r3, #15]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f001 fc73 	bl	800774a <USBH_AllocPipe>
 8005e64:	4603      	mov	r3, r0
 8005e66:	461a      	mov	r2, r3
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	7b59      	ldrb	r1, [r3, #13]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	7b98      	ldrb	r0, [r3, #14]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	8b12      	ldrh	r2, [r2, #24]
 8005e84:	9202      	str	r2, [sp, #8]
 8005e86:	2202      	movs	r2, #2
 8005e88:	9201      	str	r2, [sp, #4]
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	4623      	mov	r3, r4
 8005e8e:	4602      	mov	r2, r0
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f001 fc2b 	bl	80076ec <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	7b19      	ldrb	r1, [r3, #12]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	7bd8      	ldrb	r0, [r3, #15]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	8b52      	ldrh	r2, [r2, #26]
 8005eae:	9202      	str	r2, [sp, #8]
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	9201      	str	r2, [sp, #4]
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	4623      	mov	r3, r4
 8005eb8:	4602      	mov	r2, r0
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f001 fc16 	bl	80076ec <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	7b5b      	ldrb	r3, [r3, #13]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f001 ff19 	bl	8007d08 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	7b1b      	ldrb	r3, [r3, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	4619      	mov	r1, r3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f001 ff12 	bl	8007d08 <USBH_LL_SetToggle>
      status = USBH_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd90      	pop	{r4, r7, pc}

08005ef2 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00e      	beq.n	8005f2a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f001 fc09 	bl	800772a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 fc31 	bl	8007786 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	7b1b      	ldrb	r3, [r3, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00e      	beq.n	8005f50 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	7b1b      	ldrb	r3, [r3, #12]
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 fbf6 	bl	800772a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	7b1b      	ldrb	r3, [r3, #12]
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 fc1e 	bl	8007786 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	7b5b      	ldrb	r3, [r3, #13]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00e      	beq.n	8005f76 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	7b5b      	ldrb	r3, [r3, #13]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f001 fbe3 	bl	800772a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	7b5b      	ldrb	r3, [r3, #13]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f001 fc0b 	bl	8007786 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f001 ff74 	bl	8007e78 <free>
    phost->pActiveClass->pData = 0U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f96:	2200      	movs	r2, #0
 8005f98:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005fac:	2302      	movs	r3, #2
 8005fae:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	3340      	adds	r3, #64	; 0x40
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f8b2 	bl	800612a <GetLineCoding>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d105      	bne.n	8005fdc <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005fd6:	2102      	movs	r1, #2
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	4798      	blx	r3
  }
  return status;
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006008:	2b04      	cmp	r3, #4
 800600a:	d877      	bhi.n	80060fc <USBH_CDC_Process+0x114>
 800600c:	a201      	add	r2, pc, #4	; (adr r2, 8006014 <USBH_CDC_Process+0x2c>)
 800600e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006012:	bf00      	nop
 8006014:	08006029 	.word	0x08006029
 8006018:	0800602f 	.word	0x0800602f
 800601c:	0800605f 	.word	0x0800605f
 8006020:	080060d3 	.word	0x080060d3
 8006024:	080060e1 	.word	0x080060e1
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006028:	2300      	movs	r3, #0
 800602a:	73fb      	strb	r3, [r7, #15]
    break;
 800602c:	e06d      	b.n	800610a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f897 	bl	8006168 <SetLineCoding>
 800603a:	4603      	mov	r3, r0
 800603c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800603e:	7bbb      	ldrb	r3, [r7, #14]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d104      	bne.n	800604e <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800604c:	e058      	b.n	8006100 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800604e:	7bbb      	ldrb	r3, [r7, #14]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d055      	beq.n	8006100 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2204      	movs	r2, #4
 8006058:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800605c:	e050      	b.n	8006100 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	3340      	adds	r3, #64	; 0x40
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f860 	bl	800612a <GetLineCoding>
 800606a:	4603      	mov	r3, r0
 800606c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800606e:	7bbb      	ldrb	r3, [r7, #14]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d126      	bne.n	80060c2 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006086:	791b      	ldrb	r3, [r3, #4]
 8006088:	429a      	cmp	r2, r3
 800608a:	d13b      	bne.n	8006104 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006096:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006098:	429a      	cmp	r2, r3
 800609a:	d133      	bne.n	8006104 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a6:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d12b      	bne.n	8006104 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b4:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d124      	bne.n	8006104 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f95a 	bl	8006374 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80060c0:	e020      	b.n	8006104 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80060c2:	7bbb      	ldrb	r3, [r7, #14]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d01d      	beq.n	8006104 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2204      	movs	r2, #4
 80060cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80060d0:	e018      	b.n	8006104 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f867 	bl	80061a6 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f8dc 	bl	8006296 <CDC_ProcessReception>
    break;
 80060de:	e014      	b.n	800610a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 80060e0:	2100      	movs	r1, #0
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fece 	bl	8006e84 <USBH_ClrFeature>
 80060e8:	4603      	mov	r3, r0
 80060ea:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80060ec:	7bbb      	ldrb	r3, [r7, #14]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80060fa:	e005      	b.n	8006108 <USBH_CDC_Process+0x120>

  default:
    break;
 80060fc:	bf00      	nop
 80060fe:	e004      	b.n	800610a <USBH_CDC_Process+0x122>
    break;
 8006100:	bf00      	nop
 8006102:	e002      	b.n	800610a <USBH_CDC_Process+0x122>
    break;
 8006104:	bf00      	nop
 8006106:	e000      	b.n	800610a <USBH_CDC_Process+0x122>
    break;
 8006108:	bf00      	nop

  }

  return status;
 800610a:	7bfb      	ldrb	r3, [r7, #15]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	22a1      	movs	r2, #161	; 0xa1
 8006138:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2221      	movs	r2, #33	; 0x21
 800613e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2207      	movs	r2, #7
 8006150:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2207      	movs	r2, #7
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 f873 	bl	8007244 <USBH_CtlReq>
 800615e:	4603      	mov	r3, r0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2221      	movs	r2, #33	; 0x21
 8006176:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2207      	movs	r2, #7
 800618e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2207      	movs	r2, #7
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f001 f854 	bl	8007244 <USBH_CtlReq>
 800619c:	4603      	mov	r3, r0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b086      	sub	sp, #24
 80061aa:	af02      	add	r7, sp, #8
 80061ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80061b8:	2300      	movs	r3, #0
 80061ba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d002      	beq.n	80061cc <CDC_ProcessTransmission+0x26>
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d025      	beq.n	8006216 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80061ca:	e060      	b.n	800628e <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	8b12      	ldrh	r2, [r2, #24]
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d90c      	bls.n	80061f2 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	69d9      	ldr	r1, [r3, #28]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8b1a      	ldrh	r2, [r3, #24]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	7b58      	ldrb	r0, [r3, #13]
 80061e4:	2301      	movs	r3, #1
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	4603      	mov	r3, r0
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f001 fa3b 	bl	8007666 <USBH_BulkSendData>
 80061f0:	e00c      	b.n	800620c <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	7b58      	ldrb	r0, [r3, #13]
 8006200:	2301      	movs	r3, #1
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	4603      	mov	r3, r0
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 fa2d 	bl	8007666 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006214:	e03b      	b.n	800628e <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	7b5b      	ldrb	r3, [r3, #13]
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 fd49 	bl	8007cb4 <USBH_LL_GetURBState>
 8006222:	4603      	mov	r3, r0
 8006224:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006226:	7afb      	ldrb	r3, [r7, #11]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d128      	bne.n	800627e <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	8b12      	ldrh	r2, [r2, #24]
 8006234:	4293      	cmp	r3, r2
 8006236:	d90e      	bls.n	8006256 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	8b12      	ldrh	r2, [r2, #24]
 8006240:	1a9a      	subs	r2, r3, r2
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	8b12      	ldrh	r2, [r2, #24]
 800624e:	441a      	add	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	61da      	str	r2, [r3, #28]
 8006254:	e002      	b.n	800625c <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800626c:	e00e      	b.n	800628c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f868 	bl	800634c <USBH_CDC_TransmitCallback>
    break;
 800627c:	e006      	b.n	800628c <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 800627e:	7afb      	ldrb	r3, [r7, #11]
 8006280:	2b02      	cmp	r3, #2
 8006282:	d103      	bne.n	800628c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800628c:	bf00      	nop
  }
}
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b086      	sub	sp, #24
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80062a8:	2300      	movs	r3, #0
 80062aa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d002      	beq.n	80062bc <CDC_ProcessReception+0x26>
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	d00e      	beq.n	80062d8 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80062ba:	e043      	b.n	8006344 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	6a19      	ldr	r1, [r3, #32]
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	8b5a      	ldrh	r2, [r3, #26]
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	7b1b      	ldrb	r3, [r3, #12]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f001 f9f1 	bl	80076b0 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2204      	movs	r2, #4
 80062d2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80062d6:	e035      	b.n	8006344 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	7b1b      	ldrb	r3, [r3, #12]
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f001 fce8 	bl	8007cb4 <USBH_LL_GetURBState>
 80062e4:	4603      	mov	r3, r0
 80062e6:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80062e8:	7cfb      	ldrb	r3, [r7, #19]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d129      	bne.n	8006342 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	7b1b      	ldrb	r3, [r3, #12]
 80062f2:	4619      	mov	r1, r3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 fc4b 	bl	8007b90 <USBH_LL_GetLastXferSize>
 80062fa:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	429a      	cmp	r2, r3
 8006304:	d016      	beq.n	8006334 <CDC_ProcessReception+0x9e>
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	8b5b      	ldrh	r3, [r3, #26]
 800630a:	461a      	mov	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4293      	cmp	r3, r2
 8006310:	d910      	bls.n	8006334 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	1ad2      	subs	r2, r2, r3
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	6a1a      	ldr	r2, [r3, #32]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	441a      	add	r2, r3
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2203      	movs	r2, #3
 800632e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006332:	e006      	b.n	8006342 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f80f 	bl	8006360 <USBH_CDC_ReceiveCallback>
    break;
 8006342:	bf00      	nop
  }
}
 8006344:	bf00      	nop
 8006346:	3718      	adds	r7, #24
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]

}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]

}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]

}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	4613      	mov	r3, r2
 8006394:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800639c:	2302      	movs	r3, #2
 800639e:	e019      	b.n	80063d4 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	79fa      	ldrb	r2, [r7, #7]
 80063a4:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 f80f 	bl	80063dc <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f001 fb2d 	bl	8007a2c <USBH_LL_Init>

  return USBH_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80063e8:	e008      	b.n	80063fc <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	32e0      	adds	r2, #224	; 0xe0
 80063f0:	2100      	movs	r1, #0
 80063f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3301      	adds	r3, #1
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b0e      	cmp	r3, #14
 8006400:	d9f3      	bls.n	80063ea <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	e009      	b.n	800641c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4413      	add	r3, r2
 800640e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006412:	2200      	movs	r2, #0
 8006414:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3301      	adds	r3, #1
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006422:	d3f1      	bcc.n	8006408 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2240      	movs	r2, #64	; 0x40
 8006448:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800646e:	b480      	push	{r7}
 8006470:	b085      	sub	sp, #20
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d017      	beq.n	80064b2 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10f      	bne.n	80064ac <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006492:	1c59      	adds	r1, r3, #1
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	33dc      	adds	r3, #220	; 0xdc
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]
 80064aa:	e004      	b.n	80064b6 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80064ac:	2302      	movs	r3, #2
 80064ae:	73fb      	strb	r3, [r7, #15]
 80064b0:	e001      	b.n	80064b6 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80064b2:	2302      	movs	r3, #2
 80064b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80064da:	78fa      	ldrb	r2, [r7, #3]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d204      	bcs.n	80064ea <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	78fa      	ldrb	r2, [r7, #3]
 80064e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80064e8:	e001      	b.n	80064ee <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80064ea:	2302      	movs	r3, #2
 80064ec:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	4608      	mov	r0, r1
 8006506:	4611      	mov	r1, r2
 8006508:	461a      	mov	r2, r3
 800650a:	4603      	mov	r3, r0
 800650c:	70fb      	strb	r3, [r7, #3]
 800650e:	460b      	mov	r3, r1
 8006510:	70bb      	strb	r3, [r7, #2]
 8006512:	4613      	mov	r3, r2
 8006514:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800651a:	2300      	movs	r3, #0
 800651c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006524:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006526:	e025      	b.n	8006574 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006528:	7dfb      	ldrb	r3, [r7, #23]
 800652a:	221a      	movs	r2, #26
 800652c:	fb02 f303 	mul.w	r3, r2, r3
 8006530:	3308      	adds	r3, #8
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4413      	add	r3, r2
 8006536:	3302      	adds	r3, #2
 8006538:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	795b      	ldrb	r3, [r3, #5]
 800653e:	78fa      	ldrb	r2, [r7, #3]
 8006540:	429a      	cmp	r2, r3
 8006542:	d002      	beq.n	800654a <USBH_FindInterface+0x4e>
 8006544:	78fb      	ldrb	r3, [r7, #3]
 8006546:	2bff      	cmp	r3, #255	; 0xff
 8006548:	d111      	bne.n	800656e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800654e:	78ba      	ldrb	r2, [r7, #2]
 8006550:	429a      	cmp	r2, r3
 8006552:	d002      	beq.n	800655a <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006554:	78bb      	ldrb	r3, [r7, #2]
 8006556:	2bff      	cmp	r3, #255	; 0xff
 8006558:	d109      	bne.n	800656e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800655e:	787a      	ldrb	r2, [r7, #1]
 8006560:	429a      	cmp	r2, r3
 8006562:	d002      	beq.n	800656a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006564:	787b      	ldrb	r3, [r7, #1]
 8006566:	2bff      	cmp	r3, #255	; 0xff
 8006568:	d101      	bne.n	800656e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800656a:	7dfb      	ldrb	r3, [r7, #23]
 800656c:	e006      	b.n	800657c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800656e:	7dfb      	ldrb	r3, [r7, #23]
 8006570:	3301      	adds	r3, #1
 8006572:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006574:	7dfb      	ldrb	r3, [r7, #23]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d9d6      	bls.n	8006528 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800657a:	23ff      	movs	r3, #255	; 0xff
}
 800657c:	4618      	mov	r0, r3
 800657e:	371c      	adds	r7, #28
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 fa87 	bl	8007aa4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8006596:	2101      	movs	r1, #1
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f001 fb9e 	bl	8007cda <USBH_LL_DriverVBUS>

  return USBH_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af04      	add	r7, sp, #16
 80065ae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80065b0:	2302      	movs	r3, #2
 80065b2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 faec 	bl	8006b96 <USBH_IsPortEnabled>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10c      	bne.n	80065de <USBH_Process+0x36>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d007      	beq.n	80065de <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d002      	beq.n	80065de <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2203      	movs	r2, #3
 80065dc:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b0b      	cmp	r3, #11
 80065e6:	f200 814c 	bhi.w	8006882 <USBH_Process+0x2da>
 80065ea:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <USBH_Process+0x48>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	08006621 	.word	0x08006621
 80065f4:	08006643 	.word	0x08006643
 80065f8:	08006657 	.word	0x08006657
 80065fc:	0800685d 	.word	0x0800685d
 8006600:	08006883 	.word	0x08006883
 8006604:	080066e5 	.word	0x080066e5
 8006608:	08006813 	.word	0x08006813
 800660c:	08006715 	.word	0x08006715
 8006610:	08006735 	.word	0x08006735
 8006614:	08006755 	.word	0x08006755
 8006618:	08006783 	.word	0x08006783
 800661c:	08006845 	.word	0x08006845
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 812c 	beq.w	8006886 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006634:	20c8      	movs	r0, #200	; 0xc8
 8006636:	f001 fb9a 	bl	8007d6e <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fa8d 	bl	8007b5a <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006640:	e121      	b.n	8006886 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006648:	2b01      	cmp	r3, #1
 800664a:	f040 811e 	bne.w	800688a <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2202      	movs	r2, #2
 8006652:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006654:	e119      	b.n	800688a <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006656:	2064      	movs	r0, #100	; 0x64
 8006658:	f001 fb89 	bl	8007d6e <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f001 fa57 	bl	8007b10 <USBH_LL_GetSpeed>
 8006662:	4603      	mov	r3, r0
 8006664:	461a      	mov	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2205      	movs	r2, #5
 8006670:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8006672:	2100      	movs	r1, #0
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 f868 	bl	800774a <USBH_AllocPipe>
 800667a:	4603      	mov	r3, r0
 800667c:	461a      	mov	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8006682:	2180      	movs	r1, #128	; 0x80
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f001 f860 	bl	800774a <USBH_AllocPipe>
 800668a:	4603      	mov	r3, r0
 800668c:	461a      	mov	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	7919      	ldrb	r1, [r3, #4]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80066a6:	b292      	uxth	r2, r2
 80066a8:	9202      	str	r2, [sp, #8]
 80066aa:	2200      	movs	r2, #0
 80066ac:	9201      	str	r2, [sp, #4]
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	4603      	mov	r3, r0
 80066b2:	2280      	movs	r2, #128	; 0x80
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f001 f819 	bl	80076ec <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	7959      	ldrb	r1, [r3, #5]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80066ce:	b292      	uxth	r2, r2
 80066d0:	9202      	str	r2, [sp, #8]
 80066d2:	2200      	movs	r2, #0
 80066d4:	9201      	str	r2, [sp, #4]
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	4603      	mov	r3, r0
 80066da:	2200      	movs	r2, #0
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f001 f805 	bl	80076ec <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80066e2:	e0e3      	b.n	80068ac <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f8e7 	bl	80068b8 <USBH_HandleEnum>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f040 80ce 	bne.w	800688e <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006700:	2b01      	cmp	r3, #1
 8006702:	d103      	bne.n	800670c <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2208      	movs	r2, #8
 8006708:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800670a:	e0c0      	b.n	800688e <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2207      	movs	r2, #7
 8006710:	701a      	strb	r2, [r3, #0]
    break;
 8006712:	e0bc      	b.n	800688e <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 80b9 	beq.w	8006892 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006726:	2101      	movs	r1, #1
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2208      	movs	r2, #8
 8006730:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006732:	e0ae      	b.n	8006892 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800673a:	b29b      	uxth	r3, r3
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fb59 	bl	8006df6 <USBH_SetCfg>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	f040 80a5 	bne.w	8006896 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2209      	movs	r2, #9
 8006750:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006752:	e0a0      	b.n	8006896 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00b      	beq.n	800677a <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006762:	2101      	movs	r1, #1
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fb69 	bl	8006e3c <USBH_SetFeature>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	f040 8094 	bne.w	800689a <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	220a      	movs	r2, #10
 8006776:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006778:	e08f      	b.n	800689a <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	220a      	movs	r2, #10
 800677e:	701a      	strb	r2, [r3, #0]
    break;
 8006780:	e08b      	b.n	800689a <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 8088 	beq.w	800689e <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006796:	2300      	movs	r3, #0
 8006798:	73fb      	strb	r3, [r7, #15]
 800679a:	e017      	b.n	80067cc <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	33dc      	adds	r3, #220	; 0xdc
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	791a      	ldrb	r2, [r3, #4]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d108      	bne.n	80067c6 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	33dc      	adds	r3, #220	; 0xdc
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	3301      	adds	r3, #1
 80067ca:	73fb      	strb	r3, [r7, #15]
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0e4      	beq.n	800679c <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d016      	beq.n	800680a <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	4798      	blx	r3
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2206      	movs	r2, #6
 80067f2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80067fa:	2103      	movs	r1, #3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006800:	e04d      	b.n	800689e <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	220d      	movs	r2, #13
 8006806:	701a      	strb	r2, [r3, #0]
    break;
 8006808:	e049      	b.n	800689e <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	220d      	movs	r2, #13
 800680e:	701a      	strb	r2, [r3, #0]
    break;
 8006810:	e045      	b.n	800689e <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00f      	beq.n	800683c <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	4798      	blx	r3
 8006828:	4603      	mov	r3, r0
 800682a:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800682c:	7bbb      	ldrb	r3, [r7, #14]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d136      	bne.n	80068a2 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	220b      	movs	r2, #11
 8006838:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800683a:	e032      	b.n	80068a2 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	220d      	movs	r2, #13
 8006840:	701a      	strb	r2, [r3, #0]
    break;
 8006842:	e02e      	b.n	80068a2 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800684a:	2b00      	cmp	r3, #0
 800684c:	d02b      	beq.n	80068a6 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	4798      	blx	r3
    }
    break;
 800685a:	e024      	b.n	80068a6 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff fdbd 	bl	80063dc <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01e      	beq.n	80068aa <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8006880:	e013      	b.n	80068aa <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8006882:	bf00      	nop
 8006884:	e012      	b.n	80068ac <USBH_Process+0x304>
    break;
 8006886:	bf00      	nop
 8006888:	e010      	b.n	80068ac <USBH_Process+0x304>
    break;
 800688a:	bf00      	nop
 800688c:	e00e      	b.n	80068ac <USBH_Process+0x304>
    break;
 800688e:	bf00      	nop
 8006890:	e00c      	b.n	80068ac <USBH_Process+0x304>
    break;
 8006892:	bf00      	nop
 8006894:	e00a      	b.n	80068ac <USBH_Process+0x304>
    break;
 8006896:	bf00      	nop
 8006898:	e008      	b.n	80068ac <USBH_Process+0x304>
    break;
 800689a:	bf00      	nop
 800689c:	e006      	b.n	80068ac <USBH_Process+0x304>
    break;
 800689e:	bf00      	nop
 80068a0:	e004      	b.n	80068ac <USBH_Process+0x304>
    break;
 80068a2:	bf00      	nop
 80068a4:	e002      	b.n	80068ac <USBH_Process+0x304>
    break;
 80068a6:	bf00      	nop
 80068a8:	e000      	b.n	80068ac <USBH_Process+0x304>
    break;
 80068aa:	bf00      	nop
  }
 return USBH_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop

080068b8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af04      	add	r7, sp, #16
 80068be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80068c0:	2301      	movs	r3, #1
 80068c2:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	785b      	ldrb	r3, [r3, #1]
 80068c8:	2b07      	cmp	r3, #7
 80068ca:	f200 80f8 	bhi.w	8006abe <USBH_HandleEnum+0x206>
 80068ce:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <USBH_HandleEnum+0x1c>)
 80068d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d4:	080068f5 	.word	0x080068f5
 80068d8:	08006967 	.word	0x08006967
 80068dc:	0800697f 	.word	0x0800697f
 80068e0:	080069f5 	.word	0x080069f5
 80068e4:	08006a0b 	.word	0x08006a0b
 80068e8:	08006a27 	.word	0x08006a27
 80068ec:	08006a5b 	.word	0x08006a5b
 80068f0:	08006a8f 	.word	0x08006a8f
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80068f4:	2108      	movs	r1, #8
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f9ad 	bl	8006c56 <USBH_Get_DevDesc>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f040 80df 	bne.w	8006ac2 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	7919      	ldrb	r1, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006928:	b292      	uxth	r2, r2
 800692a:	9202      	str	r2, [sp, #8]
 800692c:	2200      	movs	r2, #0
 800692e:	9201      	str	r2, [sp, #4]
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	4603      	mov	r3, r0
 8006934:	2280      	movs	r2, #128	; 0x80
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fed8 	bl	80076ec <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	7959      	ldrb	r1, [r3, #5]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006950:	b292      	uxth	r2, r2
 8006952:	9202      	str	r2, [sp, #8]
 8006954:	2200      	movs	r2, #0
 8006956:	9201      	str	r2, [sp, #4]
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	4603      	mov	r3, r0
 800695c:	2200      	movs	r2, #0
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fec4 	bl	80076ec <USBH_OpenPipe>

    }
    break;
 8006964:	e0ad      	b.n	8006ac2 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8006966:	2112      	movs	r1, #18
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f974 	bl	8006c56 <USBH_Get_DevDesc>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	f040 80a8 	bne.w	8006ac6 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2202      	movs	r2, #2
 800697a:	705a      	strb	r2, [r3, #1]

    }
    break;
 800697c:	e0a3      	b.n	8006ac6 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800697e:	2101      	movs	r1, #1
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fa14 	bl	8006dae <USBH_SetAddress>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	f040 809e 	bne.w	8006aca <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 800698e:	2002      	movs	r0, #2
 8006990:	f001 f9ed 	bl	8007d6e <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2203      	movs	r2, #3
 80069a0:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	7919      	ldrb	r1, [r3, #4]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80069b6:	b292      	uxth	r2, r2
 80069b8:	9202      	str	r2, [sp, #8]
 80069ba:	2200      	movs	r2, #0
 80069bc:	9201      	str	r2, [sp, #4]
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	4603      	mov	r3, r0
 80069c2:	2280      	movs	r2, #128	; 0x80
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fe91 	bl	80076ec <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	7959      	ldrb	r1, [r3, #5]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80069de:	b292      	uxth	r2, r2
 80069e0:	9202      	str	r2, [sp, #8]
 80069e2:	2200      	movs	r2, #0
 80069e4:	9201      	str	r2, [sp, #4]
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	4603      	mov	r3, r0
 80069ea:	2200      	movs	r2, #0
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fe7d 	bl	80076ec <USBH_OpenPipe>
    }
    break;
 80069f2:	e06a      	b.n	8006aca <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80069f4:	2109      	movs	r1, #9
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f955 	bl	8006ca6 <USBH_Get_CfgDesc>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d165      	bne.n	8006ace <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2204      	movs	r2, #4
 8006a06:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006a08:	e061      	b.n	8006ace <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f947 	bl	8006ca6 <USBH_Get_CfgDesc>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d159      	bne.n	8006ad2 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2205      	movs	r2, #5
 8006a22:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006a24:	e055      	b.n	8006ad2 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d010      	beq.n	8006a52 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006a3c:	23ff      	movs	r3, #255	; 0xff
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f955 	bl	8006cee <USBH_Get_StringDesc>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d145      	bne.n	8006ad6 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2206      	movs	r2, #6
 8006a4e:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006a50:	e041      	b.n	8006ad6 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2206      	movs	r2, #6
 8006a56:	705a      	strb	r2, [r3, #1]
    break;
 8006a58:	e03d      	b.n	8006ad6 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d010      	beq.n	8006a86 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006a70:	23ff      	movs	r3, #255	; 0xff
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f93b 	bl	8006cee <USBH_Get_StringDesc>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d12d      	bne.n	8006ada <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2207      	movs	r2, #7
 8006a82:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006a84:	e029      	b.n	8006ada <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2207      	movs	r2, #7
 8006a8a:	705a      	strb	r2, [r3, #1]
    break;
 8006a8c:	e025      	b.n	8006ada <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00f      	beq.n	8006ab8 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006aa4:	23ff      	movs	r3, #255	; 0xff
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f921 	bl	8006cee <USBH_Get_StringDesc>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d115      	bne.n	8006ade <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006ab6:	e012      	b.n	8006ade <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	73fb      	strb	r3, [r7, #15]
    break;
 8006abc:	e00f      	b.n	8006ade <USBH_HandleEnum+0x226>

  default:
    break;
 8006abe:	bf00      	nop
 8006ac0:	e00e      	b.n	8006ae0 <USBH_HandleEnum+0x228>
    break;
 8006ac2:	bf00      	nop
 8006ac4:	e00c      	b.n	8006ae0 <USBH_HandleEnum+0x228>
    break;
 8006ac6:	bf00      	nop
 8006ac8:	e00a      	b.n	8006ae0 <USBH_HandleEnum+0x228>
    break;
 8006aca:	bf00      	nop
 8006acc:	e008      	b.n	8006ae0 <USBH_HandleEnum+0x228>
    break;
 8006ace:	bf00      	nop
 8006ad0:	e006      	b.n	8006ae0 <USBH_HandleEnum+0x228>
    break;
 8006ad2:	bf00      	nop
 8006ad4:	e004      	b.n	8006ae0 <USBH_HandleEnum+0x228>
    break;
 8006ad6:	bf00      	nop
 8006ad8:	e002      	b.n	8006ae0 <USBH_HandleEnum+0x228>
    break;
 8006ada:	bf00      	nop
 8006adc:	e000      	b.n	8006ae0 <USBH_HandleEnum+0x228>
    break;
 8006ade:	bf00      	nop
  }
  return Status;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop

08006aec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b082      	sub	sp, #8
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f804 	bl	8006b2e <USBH_HandleSof>
}
 8006b26:	bf00      	nop
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b082      	sub	sp, #8
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b0b      	cmp	r3, #11
 8006b3e:	d10a      	bne.n	8006b56 <USBH_HandleSof+0x28>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	4798      	blx	r3
  }
}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006b6e:	bf00      	nop
}
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006b8a:	bf00      	nop
}
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10f      	bne.n	8006be2 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00e      	beq.n	8006bf2 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006bda:	2104      	movs	r1, #4
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	4798      	blx	r3
 8006be0:	e007      	b.n	8006bf2 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d102      	bne.n	8006bf2 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 ff68 	bl	8007ada <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	791b      	ldrb	r3, [r3, #4]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fdb8 	bl	8007786 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	795b      	ldrb	r3, [r3, #5]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fdb2 	bl	8007786 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d005      	beq.n	8006c40 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c3a:	2105      	movs	r1, #5
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 ff2f 	bl	8007aa4 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2203      	movs	r2, #3
 8006c4a:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b086      	sub	sp, #24
 8006c5a:	af02      	add	r7, sp, #8
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c74:	2100      	movs	r1, #0
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f864 	bl	8006d44 <USBH_GetDescriptor>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	73fb      	strb	r3, [r7, #15]
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10a      	bne.n	8006c9c <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f203 3022 	addw	r0, r3, #802	; 0x322
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c92:	78fa      	ldrb	r2, [r7, #3]
 8006c94:	b292      	uxth	r2, r2
 8006c96:	4619      	mov	r1, r3
 8006c98:	f000 f918 	bl	8006ecc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b086      	sub	sp, #24
 8006caa:	af02      	add	r7, sp, #8
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	331c      	adds	r3, #28
 8006cb6:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8006cb8:	887b      	ldrh	r3, [r7, #2]
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f83d 	bl	8006d44 <USBH_GetDescriptor>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	72fb      	strb	r3, [r7, #11]
 8006cce:	7afb      	ldrb	r3, [r7, #11]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d107      	bne.n	8006ce4 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006cda:	887a      	ldrh	r2, [r7, #2]
 8006cdc:	68f9      	ldr	r1, [r7, #12]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 f964 	bl	8006fac <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8006ce4:	7afb      	ldrb	r3, [r7, #11]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b088      	sub	sp, #32
 8006cf2:	af02      	add	r7, sp, #8
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	72fb      	strb	r3, [r7, #11]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8006d02:	7afb      	ldrb	r3, [r7, #11]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006d0a:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006d12:	893b      	ldrh	r3, [r7, #8]
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	460b      	mov	r3, r1
 8006d18:	2100      	movs	r1, #0
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 f812 	bl	8006d44 <USBH_GetDescriptor>
 8006d20:	4603      	mov	r3, r0
 8006d22:	75fb      	strb	r3, [r7, #23]
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d107      	bne.n	8006d3a <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d30:	893a      	ldrh	r2, [r7, #8]
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fa37 	bl	80071a8 <USBH_ParseStringDesc>
  }
  return status;
 8006d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	607b      	str	r3, [r7, #4]
 8006d4e:	460b      	mov	r3, r1
 8006d50:	72fb      	strb	r3, [r7, #11]
 8006d52:	4613      	mov	r3, r2
 8006d54:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	789b      	ldrb	r3, [r3, #2]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d11c      	bne.n	8006d98 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006d5e:	7afb      	ldrb	r3, [r7, #11]
 8006d60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2206      	movs	r2, #6
 8006d6e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	893a      	ldrh	r2, [r7, #8]
 8006d74:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006d76:	893b      	ldrh	r3, [r7, #8]
 8006d78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006d7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d80:	d104      	bne.n	8006d8c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f240 4209 	movw	r2, #1033	; 0x409
 8006d88:	829a      	strh	r2, [r3, #20]
 8006d8a:	e002      	b.n	8006d92 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8b3a      	ldrh	r2, [r7, #24]
 8006d96:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8006d98:	8b3b      	ldrh	r3, [r7, #24]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 fa50 	bl	8007244 <USBH_CtlReq>
 8006da4:	4603      	mov	r3, r0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	460b      	mov	r3, r1
 8006db8:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	789b      	ldrb	r3, [r3, #2]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d10f      	bne.n	8006de2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2205      	movs	r2, #5
 8006dcc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006dce:	78fb      	ldrb	r3, [r7, #3]
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006de2:	2200      	movs	r2, #0
 8006de4:	2100      	movs	r1, #0
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fa2c 	bl	8007244 <USBH_CtlReq>
 8006dec:	4603      	mov	r3, r0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b082      	sub	sp, #8
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	460b      	mov	r3, r1
 8006e00:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	789b      	ldrb	r3, [r3, #2]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d10e      	bne.n	8006e28 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2209      	movs	r2, #9
 8006e14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	887a      	ldrh	r2, [r7, #2]
 8006e1a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fa09 	bl	8007244 <USBH_CtlReq>
 8006e32:	4603      	mov	r3, r0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	789b      	ldrb	r3, [r3, #2]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d10f      	bne.n	8006e70 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2203      	movs	r2, #3
 8006e5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006e70:	2200      	movs	r2, #0
 8006e72:	2100      	movs	r1, #0
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f9e5 	bl	8007244 <USBH_CtlReq>
 8006e7a:	4603      	mov	r3, r0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	789b      	ldrb	r3, [r3, #2]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d10f      	bne.n	8006eb8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006eaa:	78fb      	ldrb	r3, [r7, #3]
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2100      	movs	r1, #0
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f9c1 	bl	8007244 <USBH_CtlReq>
 8006ec2:	4603      	mov	r3, r0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	781a      	ldrb	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	785a      	ldrb	r2, [r3, #1]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	3302      	adds	r3, #2
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	3303      	adds	r3, #3
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	021b      	lsls	r3, r3, #8
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	4313      	orrs	r3, r2
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	791a      	ldrb	r2, [r3, #4]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	795a      	ldrb	r2, [r3, #5]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	799a      	ldrb	r2, [r3, #6]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	79da      	ldrb	r2, [r3, #7]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006f26:	88fb      	ldrh	r3, [r7, #6]
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d939      	bls.n	8006fa0 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	3309      	adds	r3, #9
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	021b      	lsls	r3, r3, #8
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	4313      	orrs	r3, r2
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	330a      	adds	r3, #10
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	330b      	adds	r3, #11
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	021b      	lsls	r3, r3, #8
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	330c      	adds	r3, #12
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	330d      	adds	r3, #13
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	021b      	lsls	r3, r3, #8
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	7b9a      	ldrb	r2, [r3, #14]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	7bda      	ldrb	r2, [r3, #15]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	7c1a      	ldrb	r2, [r3, #16]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	7c5a      	ldrb	r2, [r3, #17]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	745a      	strb	r2, [r3, #17]
  }
}
 8006fa0:	bf00      	nop
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08a      	sub	sp, #40	; 0x28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	781a      	ldrb	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	785a      	ldrb	r2, [r3, #1]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	3302      	adds	r3, #2
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	3303      	adds	r3, #3
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	021b      	lsls	r3, r3, #8
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	791a      	ldrb	r2, [r3, #4]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	795a      	ldrb	r2, [r3, #5]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	799a      	ldrb	r2, [r3, #6]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	79da      	ldrb	r2, [r3, #7]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	7a1a      	ldrb	r2, [r3, #8]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007022:	88fb      	ldrh	r3, [r7, #6]
 8007024:	2b09      	cmp	r3, #9
 8007026:	d95f      	bls.n	80070e8 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007028:	2309      	movs	r3, #9
 800702a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800702c:	2300      	movs	r3, #0
 800702e:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007030:	e051      	b.n	80070d6 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007032:	f107 0316 	add.w	r3, r7, #22
 8007036:	4619      	mov	r1, r3
 8007038:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800703a:	f000 f8e8 	bl	800720e <USBH_GetNextDesc>
 800703e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	785b      	ldrb	r3, [r3, #1]
 8007044:	2b04      	cmp	r3, #4
 8007046:	d146      	bne.n	80070d6 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007048:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800704c:	221a      	movs	r2, #26
 800704e:	fb02 f303 	mul.w	r3, r2, r3
 8007052:	3308      	adds	r3, #8
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	3302      	adds	r3, #2
 800705a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800705c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800705e:	69f8      	ldr	r0, [r7, #28]
 8007060:	f000 f846 	bl	80070f0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800706a:	2300      	movs	r3, #0
 800706c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800706e:	e022      	b.n	80070b6 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8007070:	f107 0316 	add.w	r3, r7, #22
 8007074:	4619      	mov	r1, r3
 8007076:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007078:	f000 f8c9 	bl	800720e <USBH_GetNextDesc>
 800707c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	785b      	ldrb	r3, [r3, #1]
 8007082:	2b05      	cmp	r3, #5
 8007084:	d117      	bne.n	80070b6 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007086:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800708a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800708e:	3201      	adds	r2, #1
 8007090:	00d2      	lsls	r2, r2, #3
 8007092:	211a      	movs	r1, #26
 8007094:	fb01 f303 	mul.w	r3, r1, r3
 8007098:	4413      	add	r3, r2
 800709a:	3308      	adds	r3, #8
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	3304      	adds	r3, #4
 80070a2:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 80070a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070a6:	69b8      	ldr	r0, [r7, #24]
 80070a8:	f000 f851 	bl	800714e <USBH_ParseEPDesc>
            ep_ix++;
 80070ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80070b0:	3301      	adds	r3, #1
 80070b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	791b      	ldrb	r3, [r3, #4]
 80070ba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80070be:	429a      	cmp	r2, r3
 80070c0:	d204      	bcs.n	80070cc <USBH_ParseCfgDesc+0x120>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	885a      	ldrh	r2, [r3, #2]
 80070c6:	8afb      	ldrh	r3, [r7, #22]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d8d1      	bhi.n	8007070 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80070cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070d0:	3301      	adds	r3, #1
 80070d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80070d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d804      	bhi.n	80070e8 <USBH_ParseCfgDesc+0x13c>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	885a      	ldrh	r2, [r3, #2]
 80070e2:	8afb      	ldrh	r3, [r7, #22]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d8a4      	bhi.n	8007032 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80070e8:	bf00      	nop
 80070ea:	3728      	adds	r7, #40	; 0x28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	781a      	ldrb	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	785a      	ldrb	r2, [r3, #1]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	789a      	ldrb	r2, [r3, #2]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	78da      	ldrb	r2, [r3, #3]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	791a      	ldrb	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	795a      	ldrb	r2, [r3, #5]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	799a      	ldrb	r2, [r3, #6]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	79da      	ldrb	r2, [r3, #7]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	7a1a      	ldrb	r2, [r3, #8]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	721a      	strb	r2, [r3, #8]
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800714e:	b480      	push	{r7}
 8007150:	b083      	sub	sp, #12
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781a      	ldrb	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	785a      	ldrb	r2, [r3, #1]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	789a      	ldrb	r2, [r3, #2]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	78da      	ldrb	r2, [r3, #3]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	3304      	adds	r3, #4
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b29a      	uxth	r2, r3
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	3305      	adds	r3, #5
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	b29b      	uxth	r3, r3
 8007188:	021b      	lsls	r3, r3, #8
 800718a:	b29b      	uxth	r3, r3
 800718c:	4313      	orrs	r3, r2
 800718e:	b29a      	uxth	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	799a      	ldrb	r2, [r3, #6]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	719a      	strb	r2, [r3, #6]
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	4613      	mov	r3, r2
 80071b4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3301      	adds	r3, #1
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b03      	cmp	r3, #3
 80071be:	d120      	bne.n	8007202 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	1e9a      	subs	r2, r3, #2
 80071c6:	88fb      	ldrh	r3, [r7, #6]
 80071c8:	4293      	cmp	r3, r2
 80071ca:	bf28      	it	cs
 80071cc:	4613      	movcs	r3, r2
 80071ce:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3302      	adds	r3, #2
 80071d4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80071d6:	2300      	movs	r3, #0
 80071d8:	82fb      	strh	r3, [r7, #22]
 80071da:	e00b      	b.n	80071f4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80071dc:	8afb      	ldrh	r3, [r7, #22]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	4413      	add	r3, r2
 80071e2:	781a      	ldrb	r2, [r3, #0]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	3301      	adds	r3, #1
 80071ec:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80071ee:	8afb      	ldrh	r3, [r7, #22]
 80071f0:	3302      	adds	r3, #2
 80071f2:	82fb      	strh	r3, [r7, #22]
 80071f4:	8afa      	ldrh	r2, [r7, #22]
 80071f6:	8abb      	ldrh	r3, [r7, #20]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d3ef      	bcc.n	80071dc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2200      	movs	r2, #0
 8007200:	701a      	strb	r2, [r3, #0]
  }
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800720e:	b480      	push	{r7}
 8007210:	b085      	sub	sp, #20
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	881a      	ldrh	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	b29b      	uxth	r3, r3
 8007222:	4413      	add	r3, r2
 8007224:	b29a      	uxth	r2, r3
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4413      	add	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8007236:	68fb      	ldr	r3, [r7, #12]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	4613      	mov	r3, r2
 8007250:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007252:	2301      	movs	r3, #1
 8007254:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	789b      	ldrb	r3, [r3, #2]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d002      	beq.n	8007264 <USBH_CtlReq+0x20>
 800725e:	2b02      	cmp	r3, #2
 8007260:	d00f      	beq.n	8007282 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8007262:	e034      	b.n	80072ce <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	88fa      	ldrh	r2, [r7, #6]
 800726e:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2201      	movs	r2, #1
 8007274:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2202      	movs	r2, #2
 800727a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800727c:	2301      	movs	r3, #1
 800727e:	75fb      	strb	r3, [r7, #23]
    break;
 8007280:	e025      	b.n	80072ce <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 f828 	bl	80072d8 <USBH_HandleControl>
 8007288:	4603      	mov	r3, r0
 800728a:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d108      	bne.n	80072a4 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2201      	movs	r2, #1
 8007296:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	75fb      	strb	r3, [r7, #23]
    break;
 80072a2:	e013      	b.n	80072cc <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d108      	bne.n	80072bc <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80072b6:	2303      	movs	r3, #3
 80072b8:	75fb      	strb	r3, [r7, #23]
    break;
 80072ba:	e007      	b.n	80072cc <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d104      	bne.n	80072cc <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2201      	movs	r2, #1
 80072c6:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80072c8:	2302      	movs	r3, #2
 80072ca:	75fb      	strb	r3, [r7, #23]
    break;
 80072cc:	bf00      	nop
  }
  return status;
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af02      	add	r7, sp, #8
 80072de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80072e0:	2301      	movs	r3, #1
 80072e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80072e4:	2300      	movs	r3, #0
 80072e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	7e1b      	ldrb	r3, [r3, #24]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	2b0a      	cmp	r3, #10
 80072f0:	f200 814c 	bhi.w	800758c <USBH_HandleControl+0x2b4>
 80072f4:	a201      	add	r2, pc, #4	; (adr r2, 80072fc <USBH_HandleControl+0x24>)
 80072f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fa:	bf00      	nop
 80072fc:	08007329 	.word	0x08007329
 8007300:	08007343 	.word	0x08007343
 8007304:	080073ad 	.word	0x080073ad
 8007308:	080073d3 	.word	0x080073d3
 800730c:	0800740b 	.word	0x0800740b
 8007310:	08007437 	.word	0x08007437
 8007314:	08007489 	.word	0x08007489
 8007318:	080074ab 	.word	0x080074ab
 800731c:	080074e7 	.word	0x080074e7
 8007320:	0800750f 	.word	0x0800750f
 8007324:	0800754d 	.word	0x0800754d
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f103 0110 	add.w	r1, r3, #16
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	795b      	ldrb	r3, [r3, #5]
 8007332:	461a      	mov	r2, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f939 	bl	80075ac <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2202      	movs	r2, #2
 800733e:	761a      	strb	r2, [r3, #24]
    break;
 8007340:	e12f      	b.n	80075a2 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	795b      	ldrb	r3, [r3, #5]
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fcb3 	bl	8007cb4 <USBH_LL_GetURBState>
 800734e:	4603      	mov	r3, r0
 8007350:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007352:	7bbb      	ldrb	r3, [r7, #14]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d11e      	bne.n	8007396 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	7c1b      	ldrb	r3, [r3, #16]
 800735c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007360:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	8adb      	ldrh	r3, [r3, #22]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00a      	beq.n	8007380 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800736a:	7b7b      	ldrb	r3, [r7, #13]
 800736c:	2b80      	cmp	r3, #128	; 0x80
 800736e:	d103      	bne.n	8007378 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2203      	movs	r2, #3
 8007374:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007376:	e10b      	b.n	8007590 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2205      	movs	r2, #5
 800737c:	761a      	strb	r2, [r3, #24]
    break;
 800737e:	e107      	b.n	8007590 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007380:	7b7b      	ldrb	r3, [r7, #13]
 8007382:	2b80      	cmp	r3, #128	; 0x80
 8007384:	d103      	bne.n	800738e <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2209      	movs	r2, #9
 800738a:	761a      	strb	r2, [r3, #24]
    break;
 800738c:	e100      	b.n	8007590 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2207      	movs	r2, #7
 8007392:	761a      	strb	r2, [r3, #24]
    break;
 8007394:	e0fc      	b.n	8007590 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007396:	7bbb      	ldrb	r3, [r7, #14]
 8007398:	2b04      	cmp	r3, #4
 800739a:	d003      	beq.n	80073a4 <USBH_HandleControl+0xcc>
 800739c:	7bbb      	ldrb	r3, [r7, #14]
 800739e:	2b02      	cmp	r3, #2
 80073a0:	f040 80f6 	bne.w	8007590 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	220b      	movs	r2, #11
 80073a8:	761a      	strb	r2, [r3, #24]
    break;
 80073aa:	e0f1      	b.n	8007590 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6899      	ldr	r1, [r3, #8]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	899a      	ldrh	r2, [r3, #12]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	791b      	ldrb	r3, [r3, #4]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f930 	bl	800762a <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2204      	movs	r2, #4
 80073ce:	761a      	strb	r2, [r3, #24]
    break;
 80073d0:	e0e7      	b.n	80075a2 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	791b      	ldrb	r3, [r3, #4]
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fc6b 	bl	8007cb4 <USBH_LL_GetURBState>
 80073de:	4603      	mov	r3, r0
 80073e0:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d102      	bne.n	80073ee <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2209      	movs	r2, #9
 80073ec:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	2b05      	cmp	r3, #5
 80073f2:	d102      	bne.n	80073fa <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 80073f4:	2303      	movs	r3, #3
 80073f6:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80073f8:	e0cc      	b.n	8007594 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	2b04      	cmp	r3, #4
 80073fe:	f040 80c9 	bne.w	8007594 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	220b      	movs	r2, #11
 8007406:	761a      	strb	r2, [r3, #24]
    break;
 8007408:	e0c4      	b.n	8007594 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6899      	ldr	r1, [r3, #8]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	899a      	ldrh	r2, [r3, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	7958      	ldrb	r0, [r3, #5]
 8007416:	2301      	movs	r3, #1
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	4603      	mov	r3, r0
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f8df 	bl	80075e0 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007428:	b29a      	uxth	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2206      	movs	r2, #6
 8007432:	761a      	strb	r2, [r3, #24]
    break;
 8007434:	e0b5      	b.n	80075a2 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	795b      	ldrb	r3, [r3, #5]
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fc39 	bl	8007cb4 <USBH_LL_GetURBState>
 8007442:	4603      	mov	r3, r0
 8007444:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007446:	7bbb      	ldrb	r3, [r7, #14]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d103      	bne.n	8007454 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2207      	movs	r2, #7
 8007450:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007452:	e0a1      	b.n	8007598 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	2b05      	cmp	r3, #5
 8007458:	d105      	bne.n	8007466 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	220c      	movs	r2, #12
 800745e:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007460:	2303      	movs	r3, #3
 8007462:	73fb      	strb	r3, [r7, #15]
    break;
 8007464:	e098      	b.n	8007598 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007466:	7bbb      	ldrb	r3, [r7, #14]
 8007468:	2b02      	cmp	r3, #2
 800746a:	d103      	bne.n	8007474 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2205      	movs	r2, #5
 8007470:	761a      	strb	r2, [r3, #24]
    break;
 8007472:	e091      	b.n	8007598 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	2b04      	cmp	r3, #4
 8007478:	f040 808e 	bne.w	8007598 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	220b      	movs	r2, #11
 8007480:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007482:	2302      	movs	r3, #2
 8007484:	73fb      	strb	r3, [r7, #15]
    break;
 8007486:	e087      	b.n	8007598 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	791b      	ldrb	r3, [r3, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	2100      	movs	r1, #0
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f8ca 	bl	800762a <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800749c:	b29a      	uxth	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2208      	movs	r2, #8
 80074a6:	761a      	strb	r2, [r3, #24]

    break;
 80074a8:	e07b      	b.n	80075a2 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	791b      	ldrb	r3, [r3, #4]
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fbff 	bl	8007cb4 <USBH_LL_GetURBState>
 80074b6:	4603      	mov	r3, r0
 80074b8:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d105      	bne.n	80074cc <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	220d      	movs	r2, #13
 80074c4:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80074ca:	e067      	b.n	800759c <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 80074cc:	7bbb      	ldrb	r3, [r7, #14]
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d103      	bne.n	80074da <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	220b      	movs	r2, #11
 80074d6:	761a      	strb	r2, [r3, #24]
    break;
 80074d8:	e060      	b.n	800759c <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	2b05      	cmp	r3, #5
 80074de:	d15d      	bne.n	800759c <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 80074e0:	2303      	movs	r3, #3
 80074e2:	73fb      	strb	r3, [r7, #15]
    break;
 80074e4:	e05a      	b.n	800759c <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	795a      	ldrb	r2, [r3, #5]
 80074ea:	2301      	movs	r3, #1
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	4613      	mov	r3, r2
 80074f0:	2200      	movs	r2, #0
 80074f2:	2100      	movs	r1, #0
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f873 	bl	80075e0 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007500:	b29a      	uxth	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	220a      	movs	r2, #10
 800750a:	761a      	strb	r2, [r3, #24]
    break;
 800750c:	e049      	b.n	80075a2 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	795b      	ldrb	r3, [r3, #5]
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fbcd 	bl	8007cb4 <USBH_LL_GetURBState>
 800751a:	4603      	mov	r3, r0
 800751c:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800751e:	7bbb      	ldrb	r3, [r7, #14]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d105      	bne.n	8007530 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	220d      	movs	r2, #13
 800752c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800752e:	e037      	b.n	80075a0 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	2b02      	cmp	r3, #2
 8007534:	d103      	bne.n	800753e <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2209      	movs	r2, #9
 800753a:	761a      	strb	r2, [r3, #24]
    break;
 800753c:	e030      	b.n	80075a0 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	2b04      	cmp	r3, #4
 8007542:	d12d      	bne.n	80075a0 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	220b      	movs	r2, #11
 8007548:	761a      	strb	r2, [r3, #24]
    break;
 800754a:	e029      	b.n	80075a0 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	7e5b      	ldrb	r3, [r3, #25]
 8007550:	3301      	adds	r3, #1
 8007552:	b2da      	uxtb	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	765a      	strb	r2, [r3, #25]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	7e5b      	ldrb	r3, [r3, #25]
 800755c:	2b02      	cmp	r3, #2
 800755e:	d809      	bhi.n	8007574 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 faba 	bl	8007ada <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007572:	e016      	b.n	80075a2 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800757a:	2106      	movs	r1, #6
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8007586:	2302      	movs	r3, #2
 8007588:	73fb      	strb	r3, [r7, #15]
    break;
 800758a:	e00a      	b.n	80075a2 <USBH_HandleControl+0x2ca>

  default:
    break;
 800758c:	bf00      	nop
 800758e:	e008      	b.n	80075a2 <USBH_HandleControl+0x2ca>
    break;
 8007590:	bf00      	nop
 8007592:	e006      	b.n	80075a2 <USBH_HandleControl+0x2ca>
    break;
 8007594:	bf00      	nop
 8007596:	e004      	b.n	80075a2 <USBH_HandleControl+0x2ca>
    break;
 8007598:	bf00      	nop
 800759a:	e002      	b.n	80075a2 <USBH_HandleControl+0x2ca>
    break;
 800759c:	bf00      	nop
 800759e:	e000      	b.n	80075a2 <USBH_HandleControl+0x2ca>
    break;
 80075a0:	bf00      	nop
  }
  return status;
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af04      	add	r7, sp, #16
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	4613      	mov	r3, r2
 80075b8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80075ba:	79f9      	ldrb	r1, [r7, #7]
 80075bc:	2300      	movs	r3, #0
 80075be:	9303      	str	r3, [sp, #12]
 80075c0:	2308      	movs	r3, #8
 80075c2:	9302      	str	r3, [sp, #8]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	9301      	str	r3, [sp, #4]
 80075c8:	2300      	movs	r3, #0
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	2300      	movs	r3, #0
 80075ce:	2200      	movs	r2, #0
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 fb3e 	bl	8007c52 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af04      	add	r7, sp, #16
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	4611      	mov	r1, r2
 80075ec:	461a      	mov	r2, r3
 80075ee:	460b      	mov	r3, r1
 80075f0:	80fb      	strh	r3, [r7, #6]
 80075f2:	4613      	mov	r3, r2
 80075f4:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007600:	2300      	movs	r3, #0
 8007602:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007604:	7979      	ldrb	r1, [r7, #5]
 8007606:	7e3b      	ldrb	r3, [r7, #24]
 8007608:	9303      	str	r3, [sp, #12]
 800760a:	88fb      	ldrh	r3, [r7, #6]
 800760c:	9302      	str	r3, [sp, #8]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	9301      	str	r3, [sp, #4]
 8007612:	2301      	movs	r3, #1
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	2300      	movs	r3, #0
 8007618:	2200      	movs	r2, #0
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 fb19 	bl	8007c52 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b088      	sub	sp, #32
 800762e:	af04      	add	r7, sp, #16
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	4611      	mov	r1, r2
 8007636:	461a      	mov	r2, r3
 8007638:	460b      	mov	r3, r1
 800763a:	80fb      	strh	r3, [r7, #6]
 800763c:	4613      	mov	r3, r2
 800763e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007640:	7979      	ldrb	r1, [r7, #5]
 8007642:	2300      	movs	r3, #0
 8007644:	9303      	str	r3, [sp, #12]
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	9302      	str	r3, [sp, #8]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	9301      	str	r3, [sp, #4]
 800764e:	2301      	movs	r3, #1
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	2300      	movs	r3, #0
 8007654:	2201      	movs	r2, #1
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f000 fafb 	bl	8007c52 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800765c:	2300      	movs	r3, #0

}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b088      	sub	sp, #32
 800766a:	af04      	add	r7, sp, #16
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	4611      	mov	r1, r2
 8007672:	461a      	mov	r2, r3
 8007674:	460b      	mov	r3, r1
 8007676:	80fb      	strh	r3, [r7, #6]
 8007678:	4613      	mov	r3, r2
 800767a:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007686:	2300      	movs	r3, #0
 8007688:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800768a:	7979      	ldrb	r1, [r7, #5]
 800768c:	7e3b      	ldrb	r3, [r7, #24]
 800768e:	9303      	str	r3, [sp, #12]
 8007690:	88fb      	ldrh	r3, [r7, #6]
 8007692:	9302      	str	r3, [sp, #8]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	9301      	str	r3, [sp, #4]
 8007698:	2301      	movs	r3, #1
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	2302      	movs	r3, #2
 800769e:	2200      	movs	r2, #0
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 fad6 	bl	8007c52 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b088      	sub	sp, #32
 80076b4:	af04      	add	r7, sp, #16
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	4611      	mov	r1, r2
 80076bc:	461a      	mov	r2, r3
 80076be:	460b      	mov	r3, r1
 80076c0:	80fb      	strh	r3, [r7, #6]
 80076c2:	4613      	mov	r3, r2
 80076c4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80076c6:	7979      	ldrb	r1, [r7, #5]
 80076c8:	2300      	movs	r3, #0
 80076ca:	9303      	str	r3, [sp, #12]
 80076cc:	88fb      	ldrh	r3, [r7, #6]
 80076ce:	9302      	str	r3, [sp, #8]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	9301      	str	r3, [sp, #4]
 80076d4:	2301      	movs	r3, #1
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	2302      	movs	r3, #2
 80076da:	2201      	movs	r2, #1
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 fab8 	bl	8007c52 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af04      	add	r7, sp, #16
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	4608      	mov	r0, r1
 80076f6:	4611      	mov	r1, r2
 80076f8:	461a      	mov	r2, r3
 80076fa:	4603      	mov	r3, r0
 80076fc:	70fb      	strb	r3, [r7, #3]
 80076fe:	460b      	mov	r3, r1
 8007700:	70bb      	strb	r3, [r7, #2]
 8007702:	4613      	mov	r3, r2
 8007704:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007706:	7878      	ldrb	r0, [r7, #1]
 8007708:	78ba      	ldrb	r2, [r7, #2]
 800770a:	78f9      	ldrb	r1, [r7, #3]
 800770c:	8b3b      	ldrh	r3, [r7, #24]
 800770e:	9302      	str	r3, [sp, #8]
 8007710:	7d3b      	ldrb	r3, [r7, #20]
 8007712:	9301      	str	r3, [sp, #4]
 8007714:	7c3b      	ldrb	r3, [r7, #16]
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	4603      	mov	r3, r0
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fa4b 	bl	8007bb6 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007720:	2300      	movs	r3, #0

}
 8007722:	4618      	mov	r0, r3
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b082      	sub	sp, #8
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	460b      	mov	r3, r1
 8007734:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007736:	78fb      	ldrb	r3, [r7, #3]
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fa6a 	bl	8007c14 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007740:	2300      	movs	r3, #0

}
 8007742:	4618      	mov	r0, r3
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	460b      	mov	r3, r1
 8007754:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f831 	bl	80077be <USBH_GetFreePipe>
 800775c:	4603      	mov	r3, r0
 800775e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007760:	89fb      	ldrh	r3, [r7, #14]
 8007762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007766:	4293      	cmp	r3, r2
 8007768:	d007      	beq.n	800777a <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800776a:	78fb      	ldrb	r3, [r7, #3]
 800776c:	89fa      	ldrh	r2, [r7, #14]
 800776e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	32e0      	adds	r2, #224	; 0xe0
 8007776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800777a:	89fb      	ldrh	r3, [r7, #14]
 800777c:	b2db      	uxtb	r3, r3
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007792:	78fb      	ldrb	r3, [r7, #3]
 8007794:	2b0a      	cmp	r3, #10
 8007796:	d80b      	bhi.n	80077b0 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007798:	78fa      	ldrb	r2, [r7, #3]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	32e0      	adds	r2, #224	; 0xe0
 800779e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a2:	78fa      	ldrb	r2, [r7, #3]
 80077a4:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	32e0      	adds	r2, #224	; 0xe0
 80077ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80077be:	b480      	push	{r7}
 80077c0:	b085      	sub	sp, #20
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80077ca:	2300      	movs	r3, #0
 80077cc:	73fb      	strb	r3, [r7, #15]
 80077ce:	e00e      	b.n	80077ee <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80077d0:	7bfa      	ldrb	r2, [r7, #15]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	32e0      	adds	r2, #224	; 0xe0
 80077d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d102      	bne.n	80077e8 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	e007      	b.n	80077f8 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
 80077ea:	3301      	adds	r3, #1
 80077ec:	73fb      	strb	r3, [r7, #15]
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	2b0a      	cmp	r3, #10
 80077f2:	d9ed      	bls.n	80077d0 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 80077f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007808:	2201      	movs	r2, #1
 800780a:	490e      	ldr	r1, [pc, #56]	; (8007844 <MX_USB_HOST_Init+0x40>)
 800780c:	480e      	ldr	r0, [pc, #56]	; (8007848 <MX_USB_HOST_Init+0x44>)
 800780e:	f7fe fdbb 	bl	8006388 <USBH_Init>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007818:	f7f9 f930 	bl	8000a7c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800781c:	490b      	ldr	r1, [pc, #44]	; (800784c <MX_USB_HOST_Init+0x48>)
 800781e:	480a      	ldr	r0, [pc, #40]	; (8007848 <MX_USB_HOST_Init+0x44>)
 8007820:	f7fe fe25 	bl	800646e <USBH_RegisterClass>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800782a:	f7f9 f927 	bl	8000a7c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800782e:	4806      	ldr	r0, [pc, #24]	; (8007848 <MX_USB_HOST_Init+0x44>)
 8007830:	f7fe feaa 	bl	8006588 <USBH_Start>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800783a:	f7f9 f91f 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800783e:	bf00      	nop
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	08007865 	.word	0x08007865
 8007848:	200001f8 	.word	0x200001f8
 800784c:	2000000c 	.word	0x2000000c

08007850 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007854:	4802      	ldr	r0, [pc, #8]	; (8007860 <MX_USB_HOST_Process+0x10>)
 8007856:	f7fe fea7 	bl	80065a8 <USBH_Process>
}
 800785a:	bf00      	nop
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	200001f8 	.word	0x200001f8

08007864 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	460b      	mov	r3, r1
 800786e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	3b01      	subs	r3, #1
 8007874:	2b04      	cmp	r3, #4
 8007876:	d819      	bhi.n	80078ac <USBH_UserProcess+0x48>
 8007878:	a201      	add	r2, pc, #4	; (adr r2, 8007880 <USBH_UserProcess+0x1c>)
 800787a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787e:	bf00      	nop
 8007880:	080078ad 	.word	0x080078ad
 8007884:	0800789d 	.word	0x0800789d
 8007888:	080078ad 	.word	0x080078ad
 800788c:	080078a5 	.word	0x080078a5
 8007890:	08007895 	.word	0x08007895
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007894:	4b09      	ldr	r3, [pc, #36]	; (80078bc <USBH_UserProcess+0x58>)
 8007896:	2203      	movs	r2, #3
 8007898:	701a      	strb	r2, [r3, #0]
  break;
 800789a:	e008      	b.n	80078ae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800789c:	4b07      	ldr	r3, [pc, #28]	; (80078bc <USBH_UserProcess+0x58>)
 800789e:	2202      	movs	r2, #2
 80078a0:	701a      	strb	r2, [r3, #0]
  break;
 80078a2:	e004      	b.n	80078ae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80078a4:	4b05      	ldr	r3, [pc, #20]	; (80078bc <USBH_UserProcess+0x58>)
 80078a6:	2201      	movs	r2, #1
 80078a8:	701a      	strb	r2, [r3, #0]
  break;
 80078aa:	e000      	b.n	80078ae <USBH_UserProcess+0x4a>

  default:
  break;
 80078ac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	200000b4 	.word	0x200000b4

080078c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08a      	sub	sp, #40	; 0x28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078c8:	f107 0314 	add.w	r3, r7, #20
 80078cc:	2200      	movs	r2, #0
 80078ce:	601a      	str	r2, [r3, #0]
 80078d0:	605a      	str	r2, [r3, #4]
 80078d2:	609a      	str	r2, [r3, #8]
 80078d4:	60da      	str	r2, [r3, #12]
 80078d6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078e0:	d147      	bne.n	8007972 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078e2:	2300      	movs	r3, #0
 80078e4:	613b      	str	r3, [r7, #16]
 80078e6:	4b25      	ldr	r3, [pc, #148]	; (800797c <HAL_HCD_MspInit+0xbc>)
 80078e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ea:	4a24      	ldr	r2, [pc, #144]	; (800797c <HAL_HCD_MspInit+0xbc>)
 80078ec:	f043 0301 	orr.w	r3, r3, #1
 80078f0:	6313      	str	r3, [r2, #48]	; 0x30
 80078f2:	4b22      	ldr	r3, [pc, #136]	; (800797c <HAL_HCD_MspInit+0xbc>)
 80078f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	613b      	str	r3, [r7, #16]
 80078fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80078fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007904:	2300      	movs	r3, #0
 8007906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007908:	2300      	movs	r3, #0
 800790a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800790c:	f107 0314 	add.w	r3, r7, #20
 8007910:	4619      	mov	r1, r3
 8007912:	481b      	ldr	r0, [pc, #108]	; (8007980 <HAL_HCD_MspInit+0xc0>)
 8007914:	f7f9 fc6c 	bl	80011f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007918:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800791c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800791e:	2302      	movs	r3, #2
 8007920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007922:	2300      	movs	r3, #0
 8007924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007926:	2300      	movs	r3, #0
 8007928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800792a:	230a      	movs	r3, #10
 800792c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800792e:	f107 0314 	add.w	r3, r7, #20
 8007932:	4619      	mov	r1, r3
 8007934:	4812      	ldr	r0, [pc, #72]	; (8007980 <HAL_HCD_MspInit+0xc0>)
 8007936:	f7f9 fc5b 	bl	80011f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800793a:	4b10      	ldr	r3, [pc, #64]	; (800797c <HAL_HCD_MspInit+0xbc>)
 800793c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800793e:	4a0f      	ldr	r2, [pc, #60]	; (800797c <HAL_HCD_MspInit+0xbc>)
 8007940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007944:	6353      	str	r3, [r2, #52]	; 0x34
 8007946:	2300      	movs	r3, #0
 8007948:	60fb      	str	r3, [r7, #12]
 800794a:	4b0c      	ldr	r3, [pc, #48]	; (800797c <HAL_HCD_MspInit+0xbc>)
 800794c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800794e:	4a0b      	ldr	r2, [pc, #44]	; (800797c <HAL_HCD_MspInit+0xbc>)
 8007950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007954:	6453      	str	r3, [r2, #68]	; 0x44
 8007956:	4b09      	ldr	r3, [pc, #36]	; (800797c <HAL_HCD_MspInit+0xbc>)
 8007958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800795a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007962:	2200      	movs	r2, #0
 8007964:	2100      	movs	r1, #0
 8007966:	2043      	movs	r0, #67	; 0x43
 8007968:	f7f9 fc0b 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800796c:	2043      	movs	r0, #67	; 0x43
 800796e:	f7f9 fc24 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007972:	bf00      	nop
 8007974:	3728      	adds	r7, #40	; 0x28
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	40023800 	.word	0x40023800
 8007980:	40020000 	.word	0x40020000

08007984 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007992:	4618      	mov	r0, r3
 8007994:	f7ff f8b9 	bl	8006b0a <USBH_LL_IncTimer>
}
 8007998:	bf00      	nop
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7ff f8fe 	bl	8006bb0 <USBH_LL_Connect>
}
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7ff f916 	bl	8006bfc <USBH_LL_Disconnect>
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	70fb      	strb	r3, [r7, #3]
 80079e4:	4613      	mov	r3, r2
 80079e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7ff f8ab 	bl	8006b5e <USBH_LL_PortEnabled>
} 
 8007a08:	bf00      	nop
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7ff f8ab 	bl	8006b7a <USBH_LL_PortDisabled>
} 
 8007a24:	bf00      	nop
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d12a      	bne.n	8007a94 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007a3e:	4a18      	ldr	r2, [pc, #96]	; (8007aa0 <USBH_LL_Init+0x74>)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a15      	ldr	r2, [pc, #84]	; (8007aa0 <USBH_LL_Init+0x74>)
 8007a4a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a4e:	4b14      	ldr	r3, [pc, #80]	; (8007aa0 <USBH_LL_Init+0x74>)
 8007a50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007a54:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007a56:	4b12      	ldr	r3, [pc, #72]	; (8007aa0 <USBH_LL_Init+0x74>)
 8007a58:	2208      	movs	r2, #8
 8007a5a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007a5c:	4b10      	ldr	r3, [pc, #64]	; (8007aa0 <USBH_LL_Init+0x74>)
 8007a5e:	2201      	movs	r2, #1
 8007a60:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a62:	4b0f      	ldr	r3, [pc, #60]	; (8007aa0 <USBH_LL_Init+0x74>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007a68:	4b0d      	ldr	r3, [pc, #52]	; (8007aa0 <USBH_LL_Init+0x74>)
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a6e:	4b0c      	ldr	r3, [pc, #48]	; (8007aa0 <USBH_LL_Init+0x74>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007a74:	480a      	ldr	r0, [pc, #40]	; (8007aa0 <USBH_LL_Init+0x74>)
 8007a76:	f7f9 fda1 	bl	80015bc <HAL_HCD_Init>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007a80:	f7f8 fffc 	bl	8000a7c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007a84:	4806      	ldr	r0, [pc, #24]	; (8007aa0 <USBH_LL_Init+0x74>)
 8007a86:	f7fa f99d 	bl	8001dc4 <HAL_HCD_GetCurrentFrame>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff f82c 	bl	8006aec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	200005c4 	.word	0x200005c4

08007aa4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fa f90a 	bl	8001cd4 <HAL_HCD_Start>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 f95c 	bl	8007d84 <USBH_Get_USB_Status>
 8007acc:	4603      	mov	r3, r0
 8007ace:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7fa f912 	bl	8001d1a <HAL_HCD_Stop>
 8007af6:	4603      	mov	r3, r0
 8007af8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 f941 	bl	8007d84 <USBH_Get_USB_Status>
 8007b02:	4603      	mov	r3, r0
 8007b04:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fa f95c 	bl	8001de0 <HAL_HCD_GetCurrentSpeed>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d007      	beq.n	8007b3e <USBH_LL_GetSpeed+0x2e>
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d302      	bcc.n	8007b38 <USBH_LL_GetSpeed+0x28>
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d006      	beq.n	8007b44 <USBH_LL_GetSpeed+0x34>
 8007b36:	e008      	b.n	8007b4a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b3c:	e008      	b.n	8007b50 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	73fb      	strb	r3, [r7, #15]
    break;
 8007b42:	e005      	b.n	8007b50 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007b44:	2302      	movs	r3, #2
 8007b46:	73fb      	strb	r3, [r7, #15]
    break;
 8007b48:	e002      	b.n	8007b50 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b4e:	bf00      	nop
  }
  return  speed;
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fa f8ef 	bl	8001d54 <HAL_HCD_ResetPort>
 8007b76:	4603      	mov	r3, r0
 8007b78:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 f901 	bl	8007d84 <USBH_Get_USB_Status>
 8007b82:	4603      	mov	r3, r0
 8007b84:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ba2:	78fa      	ldrb	r2, [r7, #3]
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fa f8f7 	bl	8001d9a <HAL_HCD_HC_GetXferCount>
 8007bac:	4603      	mov	r3, r0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007bb6:	b590      	push	{r4, r7, lr}
 8007bb8:	b089      	sub	sp, #36	; 0x24
 8007bba:	af04      	add	r7, sp, #16
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	4608      	mov	r0, r1
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	70fb      	strb	r3, [r7, #3]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70bb      	strb	r3, [r7, #2]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007bde:	787c      	ldrb	r4, [r7, #1]
 8007be0:	78ba      	ldrb	r2, [r7, #2]
 8007be2:	78f9      	ldrb	r1, [r7, #3]
 8007be4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007be6:	9302      	str	r3, [sp, #8]
 8007be8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	4623      	mov	r3, r4
 8007bf6:	f7f9 fd43 	bl	8001680 <HAL_HCD_HC_Init>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 f8bf 	bl	8007d84 <USBH_Get_USB_Status>
 8007c06:	4603      	mov	r3, r0
 8007c08:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd90      	pop	{r4, r7, pc}

08007c14 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c2e:	78fa      	ldrb	r2, [r7, #3]
 8007c30:	4611      	mov	r1, r2
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7f9 fdbc 	bl	80017b0 <HAL_HCD_HC_Halt>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 f8a0 	bl	8007d84 <USBH_Get_USB_Status>
 8007c44:	4603      	mov	r3, r0
 8007c46:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007c52:	b590      	push	{r4, r7, lr}
 8007c54:	b089      	sub	sp, #36	; 0x24
 8007c56:	af04      	add	r7, sp, #16
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	4608      	mov	r0, r1
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	461a      	mov	r2, r3
 8007c60:	4603      	mov	r3, r0
 8007c62:	70fb      	strb	r3, [r7, #3]
 8007c64:	460b      	mov	r3, r1
 8007c66:	70bb      	strb	r3, [r7, #2]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007c7a:	787c      	ldrb	r4, [r7, #1]
 8007c7c:	78ba      	ldrb	r2, [r7, #2]
 8007c7e:	78f9      	ldrb	r1, [r7, #3]
 8007c80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c84:	9303      	str	r3, [sp, #12]
 8007c86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007c88:	9302      	str	r3, [sp, #8]
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	9301      	str	r3, [sp, #4]
 8007c8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	4623      	mov	r3, r4
 8007c96:	f7f9 fdaf 	bl	80017f8 <HAL_HCD_HC_SubmitRequest>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f000 f86f 	bl	8007d84 <USBH_Get_USB_Status>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007caa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd90      	pop	{r4, r7, pc}

08007cb4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007cc6:	78fa      	ldrb	r2, [r7, #3]
 8007cc8:	4611      	mov	r1, r2
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fa f850 	bl	8001d70 <HAL_HCD_HC_GetURBState>
 8007cd0:	4603      	mov	r3, r0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d103      	bne.n	8007cf8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 f872 	bl	8007ddc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007cf8:	20c8      	movs	r0, #200	; 0xc8
 8007cfa:	f7f9 f945 	bl	8000f88 <HAL_Delay>
  return USBH_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	70fb      	strb	r3, [r7, #3]
 8007d14:	4613      	mov	r3, r2
 8007d16:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d1e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007d20:	78fa      	ldrb	r2, [r7, #3]
 8007d22:	68f9      	ldr	r1, [r7, #12]
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	00db      	lsls	r3, r3, #3
 8007d2c:	440b      	add	r3, r1
 8007d2e:	333b      	adds	r3, #59	; 0x3b
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00a      	beq.n	8007d4c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007d36:	78fa      	ldrb	r2, [r7, #3]
 8007d38:	68f9      	ldr	r1, [r7, #12]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4413      	add	r3, r2
 8007d40:	00db      	lsls	r3, r3, #3
 8007d42:	440b      	add	r3, r1
 8007d44:	3350      	adds	r3, #80	; 0x50
 8007d46:	78ba      	ldrb	r2, [r7, #2]
 8007d48:	701a      	strb	r2, [r3, #0]
 8007d4a:	e009      	b.n	8007d60 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007d4c:	78fa      	ldrb	r2, [r7, #3]
 8007d4e:	68f9      	ldr	r1, [r7, #12]
 8007d50:	4613      	mov	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	00db      	lsls	r3, r3, #3
 8007d58:	440b      	add	r3, r1
 8007d5a:	3351      	adds	r3, #81	; 0x51
 8007d5c:	78ba      	ldrb	r2, [r7, #2]
 8007d5e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b082      	sub	sp, #8
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7f9 f906 	bl	8000f88 <HAL_Delay>
}
 8007d7c:	bf00      	nop
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d817      	bhi.n	8007dc8 <USBH_Get_USB_Status+0x44>
 8007d98:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <USBH_Get_USB_Status+0x1c>)
 8007d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9e:	bf00      	nop
 8007da0:	08007db1 	.word	0x08007db1
 8007da4:	08007db7 	.word	0x08007db7
 8007da8:	08007dbd 	.word	0x08007dbd
 8007dac:	08007dc3 	.word	0x08007dc3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73fb      	strb	r3, [r7, #15]
    break;
 8007db4:	e00b      	b.n	8007dce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007db6:	2302      	movs	r3, #2
 8007db8:	73fb      	strb	r3, [r7, #15]
    break;
 8007dba:	e008      	b.n	8007dce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007dc0:	e005      	b.n	8007dce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	73fb      	strb	r3, [r7, #15]
    break;
 8007dc6:	e002      	b.n	8007dce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007dc8:	2302      	movs	r3, #2
 8007dca:	73fb      	strb	r3, [r7, #15]
    break;
 8007dcc:	bf00      	nop
  }
  return usb_status;
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	4603      	mov	r3, r0
 8007de4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007dea:	79fb      	ldrb	r3, [r7, #7]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d102      	bne.n	8007df6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8007df0:	2301      	movs	r3, #1
 8007df2:	73fb      	strb	r3, [r7, #15]
 8007df4:	e001      	b.n	8007dfa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007df6:	2300      	movs	r3, #0
 8007df8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	2101      	movs	r1, #1
 8007e00:	4803      	ldr	r0, [pc, #12]	; (8007e10 <MX_DriverVbusFS+0x34>)
 8007e02:	f7f9 fba7 	bl	8001554 <HAL_GPIO_WritePin>
}
 8007e06:	bf00      	nop
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	40020800 	.word	0x40020800

08007e14 <__errno>:
 8007e14:	4b01      	ldr	r3, [pc, #4]	; (8007e1c <__errno+0x8>)
 8007e16:	6818      	ldr	r0, [r3, #0]
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	2000002c 	.word	0x2000002c

08007e20 <__libc_init_array>:
 8007e20:	b570      	push	{r4, r5, r6, lr}
 8007e22:	4e0d      	ldr	r6, [pc, #52]	; (8007e58 <__libc_init_array+0x38>)
 8007e24:	4c0d      	ldr	r4, [pc, #52]	; (8007e5c <__libc_init_array+0x3c>)
 8007e26:	1ba4      	subs	r4, r4, r6
 8007e28:	10a4      	asrs	r4, r4, #2
 8007e2a:	2500      	movs	r5, #0
 8007e2c:	42a5      	cmp	r5, r4
 8007e2e:	d109      	bne.n	8007e44 <__libc_init_array+0x24>
 8007e30:	4e0b      	ldr	r6, [pc, #44]	; (8007e60 <__libc_init_array+0x40>)
 8007e32:	4c0c      	ldr	r4, [pc, #48]	; (8007e64 <__libc_init_array+0x44>)
 8007e34:	f000 f8ea 	bl	800800c <_init>
 8007e38:	1ba4      	subs	r4, r4, r6
 8007e3a:	10a4      	asrs	r4, r4, #2
 8007e3c:	2500      	movs	r5, #0
 8007e3e:	42a5      	cmp	r5, r4
 8007e40:	d105      	bne.n	8007e4e <__libc_init_array+0x2e>
 8007e42:	bd70      	pop	{r4, r5, r6, pc}
 8007e44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e48:	4798      	blx	r3
 8007e4a:	3501      	adds	r5, #1
 8007e4c:	e7ee      	b.n	8007e2c <__libc_init_array+0xc>
 8007e4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e52:	4798      	blx	r3
 8007e54:	3501      	adds	r5, #1
 8007e56:	e7f2      	b.n	8007e3e <__libc_init_array+0x1e>
 8007e58:	08008048 	.word	0x08008048
 8007e5c:	08008048 	.word	0x08008048
 8007e60:	08008048 	.word	0x08008048
 8007e64:	0800804c 	.word	0x0800804c

08007e68 <malloc>:
 8007e68:	4b02      	ldr	r3, [pc, #8]	; (8007e74 <malloc+0xc>)
 8007e6a:	4601      	mov	r1, r0
 8007e6c:	6818      	ldr	r0, [r3, #0]
 8007e6e:	f000 b861 	b.w	8007f34 <_malloc_r>
 8007e72:	bf00      	nop
 8007e74:	2000002c 	.word	0x2000002c

08007e78 <free>:
 8007e78:	4b02      	ldr	r3, [pc, #8]	; (8007e84 <free+0xc>)
 8007e7a:	4601      	mov	r1, r0
 8007e7c:	6818      	ldr	r0, [r3, #0]
 8007e7e:	f000 b80b 	b.w	8007e98 <_free_r>
 8007e82:	bf00      	nop
 8007e84:	2000002c 	.word	0x2000002c

08007e88 <memset>:
 8007e88:	4402      	add	r2, r0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d100      	bne.n	8007e92 <memset+0xa>
 8007e90:	4770      	bx	lr
 8007e92:	f803 1b01 	strb.w	r1, [r3], #1
 8007e96:	e7f9      	b.n	8007e8c <memset+0x4>

08007e98 <_free_r>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	4605      	mov	r5, r0
 8007e9c:	2900      	cmp	r1, #0
 8007e9e:	d045      	beq.n	8007f2c <_free_r+0x94>
 8007ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea4:	1f0c      	subs	r4, r1, #4
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	bfb8      	it	lt
 8007eaa:	18e4      	addlt	r4, r4, r3
 8007eac:	f000 f8ac 	bl	8008008 <__malloc_lock>
 8007eb0:	4a1f      	ldr	r2, [pc, #124]	; (8007f30 <_free_r+0x98>)
 8007eb2:	6813      	ldr	r3, [r2, #0]
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	b933      	cbnz	r3, 8007ec6 <_free_r+0x2e>
 8007eb8:	6063      	str	r3, [r4, #4]
 8007eba:	6014      	str	r4, [r2, #0]
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ec2:	f000 b8a2 	b.w	800800a <__malloc_unlock>
 8007ec6:	42a3      	cmp	r3, r4
 8007ec8:	d90c      	bls.n	8007ee4 <_free_r+0x4c>
 8007eca:	6821      	ldr	r1, [r4, #0]
 8007ecc:	1862      	adds	r2, r4, r1
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	bf04      	itt	eq
 8007ed2:	681a      	ldreq	r2, [r3, #0]
 8007ed4:	685b      	ldreq	r3, [r3, #4]
 8007ed6:	6063      	str	r3, [r4, #4]
 8007ed8:	bf04      	itt	eq
 8007eda:	1852      	addeq	r2, r2, r1
 8007edc:	6022      	streq	r2, [r4, #0]
 8007ede:	6004      	str	r4, [r0, #0]
 8007ee0:	e7ec      	b.n	8007ebc <_free_r+0x24>
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	b10a      	cbz	r2, 8007eec <_free_r+0x54>
 8007ee8:	42a2      	cmp	r2, r4
 8007eea:	d9fa      	bls.n	8007ee2 <_free_r+0x4a>
 8007eec:	6819      	ldr	r1, [r3, #0]
 8007eee:	1858      	adds	r0, r3, r1
 8007ef0:	42a0      	cmp	r0, r4
 8007ef2:	d10b      	bne.n	8007f0c <_free_r+0x74>
 8007ef4:	6820      	ldr	r0, [r4, #0]
 8007ef6:	4401      	add	r1, r0
 8007ef8:	1858      	adds	r0, r3, r1
 8007efa:	4282      	cmp	r2, r0
 8007efc:	6019      	str	r1, [r3, #0]
 8007efe:	d1dd      	bne.n	8007ebc <_free_r+0x24>
 8007f00:	6810      	ldr	r0, [r2, #0]
 8007f02:	6852      	ldr	r2, [r2, #4]
 8007f04:	605a      	str	r2, [r3, #4]
 8007f06:	4401      	add	r1, r0
 8007f08:	6019      	str	r1, [r3, #0]
 8007f0a:	e7d7      	b.n	8007ebc <_free_r+0x24>
 8007f0c:	d902      	bls.n	8007f14 <_free_r+0x7c>
 8007f0e:	230c      	movs	r3, #12
 8007f10:	602b      	str	r3, [r5, #0]
 8007f12:	e7d3      	b.n	8007ebc <_free_r+0x24>
 8007f14:	6820      	ldr	r0, [r4, #0]
 8007f16:	1821      	adds	r1, r4, r0
 8007f18:	428a      	cmp	r2, r1
 8007f1a:	bf04      	itt	eq
 8007f1c:	6811      	ldreq	r1, [r2, #0]
 8007f1e:	6852      	ldreq	r2, [r2, #4]
 8007f20:	6062      	str	r2, [r4, #4]
 8007f22:	bf04      	itt	eq
 8007f24:	1809      	addeq	r1, r1, r0
 8007f26:	6021      	streq	r1, [r4, #0]
 8007f28:	605c      	str	r4, [r3, #4]
 8007f2a:	e7c7      	b.n	8007ebc <_free_r+0x24>
 8007f2c:	bd38      	pop	{r3, r4, r5, pc}
 8007f2e:	bf00      	nop
 8007f30:	200000b8 	.word	0x200000b8

08007f34 <_malloc_r>:
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	1ccd      	adds	r5, r1, #3
 8007f38:	f025 0503 	bic.w	r5, r5, #3
 8007f3c:	3508      	adds	r5, #8
 8007f3e:	2d0c      	cmp	r5, #12
 8007f40:	bf38      	it	cc
 8007f42:	250c      	movcc	r5, #12
 8007f44:	2d00      	cmp	r5, #0
 8007f46:	4606      	mov	r6, r0
 8007f48:	db01      	blt.n	8007f4e <_malloc_r+0x1a>
 8007f4a:	42a9      	cmp	r1, r5
 8007f4c:	d903      	bls.n	8007f56 <_malloc_r+0x22>
 8007f4e:	230c      	movs	r3, #12
 8007f50:	6033      	str	r3, [r6, #0]
 8007f52:	2000      	movs	r0, #0
 8007f54:	bd70      	pop	{r4, r5, r6, pc}
 8007f56:	f000 f857 	bl	8008008 <__malloc_lock>
 8007f5a:	4a21      	ldr	r2, [pc, #132]	; (8007fe0 <_malloc_r+0xac>)
 8007f5c:	6814      	ldr	r4, [r2, #0]
 8007f5e:	4621      	mov	r1, r4
 8007f60:	b991      	cbnz	r1, 8007f88 <_malloc_r+0x54>
 8007f62:	4c20      	ldr	r4, [pc, #128]	; (8007fe4 <_malloc_r+0xb0>)
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	b91b      	cbnz	r3, 8007f70 <_malloc_r+0x3c>
 8007f68:	4630      	mov	r0, r6
 8007f6a:	f000 f83d 	bl	8007fe8 <_sbrk_r>
 8007f6e:	6020      	str	r0, [r4, #0]
 8007f70:	4629      	mov	r1, r5
 8007f72:	4630      	mov	r0, r6
 8007f74:	f000 f838 	bl	8007fe8 <_sbrk_r>
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	d124      	bne.n	8007fc6 <_malloc_r+0x92>
 8007f7c:	230c      	movs	r3, #12
 8007f7e:	6033      	str	r3, [r6, #0]
 8007f80:	4630      	mov	r0, r6
 8007f82:	f000 f842 	bl	800800a <__malloc_unlock>
 8007f86:	e7e4      	b.n	8007f52 <_malloc_r+0x1e>
 8007f88:	680b      	ldr	r3, [r1, #0]
 8007f8a:	1b5b      	subs	r3, r3, r5
 8007f8c:	d418      	bmi.n	8007fc0 <_malloc_r+0x8c>
 8007f8e:	2b0b      	cmp	r3, #11
 8007f90:	d90f      	bls.n	8007fb2 <_malloc_r+0x7e>
 8007f92:	600b      	str	r3, [r1, #0]
 8007f94:	50cd      	str	r5, [r1, r3]
 8007f96:	18cc      	adds	r4, r1, r3
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f000 f836 	bl	800800a <__malloc_unlock>
 8007f9e:	f104 000b 	add.w	r0, r4, #11
 8007fa2:	1d23      	adds	r3, r4, #4
 8007fa4:	f020 0007 	bic.w	r0, r0, #7
 8007fa8:	1ac3      	subs	r3, r0, r3
 8007faa:	d0d3      	beq.n	8007f54 <_malloc_r+0x20>
 8007fac:	425a      	negs	r2, r3
 8007fae:	50e2      	str	r2, [r4, r3]
 8007fb0:	e7d0      	b.n	8007f54 <_malloc_r+0x20>
 8007fb2:	428c      	cmp	r4, r1
 8007fb4:	684b      	ldr	r3, [r1, #4]
 8007fb6:	bf16      	itet	ne
 8007fb8:	6063      	strne	r3, [r4, #4]
 8007fba:	6013      	streq	r3, [r2, #0]
 8007fbc:	460c      	movne	r4, r1
 8007fbe:	e7eb      	b.n	8007f98 <_malloc_r+0x64>
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	6849      	ldr	r1, [r1, #4]
 8007fc4:	e7cc      	b.n	8007f60 <_malloc_r+0x2c>
 8007fc6:	1cc4      	adds	r4, r0, #3
 8007fc8:	f024 0403 	bic.w	r4, r4, #3
 8007fcc:	42a0      	cmp	r0, r4
 8007fce:	d005      	beq.n	8007fdc <_malloc_r+0xa8>
 8007fd0:	1a21      	subs	r1, r4, r0
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f000 f808 	bl	8007fe8 <_sbrk_r>
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d0cf      	beq.n	8007f7c <_malloc_r+0x48>
 8007fdc:	6025      	str	r5, [r4, #0]
 8007fde:	e7db      	b.n	8007f98 <_malloc_r+0x64>
 8007fe0:	200000b8 	.word	0x200000b8
 8007fe4:	200000bc 	.word	0x200000bc

08007fe8 <_sbrk_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4c06      	ldr	r4, [pc, #24]	; (8008004 <_sbrk_r+0x1c>)
 8007fec:	2300      	movs	r3, #0
 8007fee:	4605      	mov	r5, r0
 8007ff0:	4608      	mov	r0, r1
 8007ff2:	6023      	str	r3, [r4, #0]
 8007ff4:	f7f8 feea 	bl	8000dcc <_sbrk>
 8007ff8:	1c43      	adds	r3, r0, #1
 8007ffa:	d102      	bne.n	8008002 <_sbrk_r+0x1a>
 8007ffc:	6823      	ldr	r3, [r4, #0]
 8007ffe:	b103      	cbz	r3, 8008002 <_sbrk_r+0x1a>
 8008000:	602b      	str	r3, [r5, #0]
 8008002:	bd38      	pop	{r3, r4, r5, pc}
 8008004:	20000888 	.word	0x20000888

08008008 <__malloc_lock>:
 8008008:	4770      	bx	lr

0800800a <__malloc_unlock>:
 800800a:	4770      	bx	lr

0800800c <_init>:
 800800c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800e:	bf00      	nop
 8008010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008012:	bc08      	pop	{r3}
 8008014:	469e      	mov	lr, r3
 8008016:	4770      	bx	lr

08008018 <_fini>:
 8008018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801a:	bf00      	nop
 800801c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801e:	bc08      	pop	{r3}
 8008020:	469e      	mov	lr, r3
 8008022:	4770      	bx	lr
