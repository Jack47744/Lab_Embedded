
lab4_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008360  08008360  00018360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800837c  0800837c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800837c  0800837c  0001837c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008384  08008384  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008384  08008384  00018384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008388  08008388  00018388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800838c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000094  08008420  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000890  08008420  00020890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c014  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a22  00000000  00000000  0003c0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001610  00000000  00000000  0003fb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001488  00000000  00000000  00041110  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002473b  00000000  00000000  00042598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013f5b  00000000  00000000  00066cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1fe0  00000000  00000000  0007ac2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014cc0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ec4  00000000  00000000  0014cc8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008348 	.word	0x08008348

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08008348 	.word	0x08008348

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fcf1 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f83d 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f9c7 	bl	8000868 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004da:	f000 f8bb 	bl	8000654 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004de:	f000 f8e7 	bl	80006b0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e2:	f000 f915 	bl	8000710 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e6:	f007 fb2b 	bl	8007b40 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 80004ea:	f000 f947 	bl	800077c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80004ee:	2108      	movs	r1, #8
 80004f0:	4814      	ldr	r0, [pc, #80]	; (8000544 <main+0x7c>)
 80004f2:	f004 f8c7 	bl	8004684 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */
  TIM4->CCR3 = 1;
 80004f6:	4b14      	ldr	r3, [pc, #80]	; (8000548 <main+0x80>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  int pwm = TIM4->CCR3;
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <main+0x80>)
 80004fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000500:	607b      	str	r3, [r7, #4]
	  if(up == 1){
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <main+0x84>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d10b      	bne.n	8000522 <main+0x5a>
		  TIM4->CCR3+=1;
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <main+0x80>)
 800050c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <main+0x80>)
 8000510:	3301      	adds	r3, #1
 8000512:	63d3      	str	r3, [r2, #60]	; 0x3c
		  if(pwm >= 99) up = 0;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b62      	cmp	r3, #98	; 0x62
 8000518:	dd0e      	ble.n	8000538 <main+0x70>
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <main+0x84>)
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	e00a      	b.n	8000538 <main+0x70>
	  }
	  else{
		  TIM4->CCR3-=1;
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <main+0x80>)
 8000524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000526:	4a08      	ldr	r2, [pc, #32]	; (8000548 <main+0x80>)
 8000528:	3b01      	subs	r3, #1
 800052a:	63d3      	str	r3, [r2, #60]	; 0x3c
		  if(pwm <= 1) up = 1;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b01      	cmp	r3, #1
 8000530:	dc02      	bgt.n	8000538 <main+0x70>
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <main+0x84>)
 8000534:	2201      	movs	r2, #1
 8000536:	601a      	str	r2, [r3, #0]
	  }
	  HAL_Delay(10);
 8000538:	200a      	movs	r0, #10
 800053a:	f000 fd2d 	bl	8000f98 <HAL_Delay>



    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800053e:	f007 fb25 	bl	8007b8c <MX_USB_HOST_Process>
  {
 8000542:	e7db      	b.n	80004fc <main+0x34>
 8000544:	200000c4 	.word	0x200000c4
 8000548:	40000800 	.word	0x40000800
 800054c:	20000000 	.word	0x20000000

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b098      	sub	sp, #96	; 0x60
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f007 fe30 	bl	80081c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 031c 	add.w	r3, r7, #28
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	4b31      	ldr	r3, [pc, #196]	; (800064c <SystemClock_Config+0xfc>)
 8000588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058a:	4a30      	ldr	r2, [pc, #192]	; (800064c <SystemClock_Config+0xfc>)
 800058c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000590:	6413      	str	r3, [r2, #64]	; 0x40
 8000592:	4b2e      	ldr	r3, [pc, #184]	; (800064c <SystemClock_Config+0xfc>)
 8000594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	4b2b      	ldr	r3, [pc, #172]	; (8000650 <SystemClock_Config+0x100>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a2a      	ldr	r2, [pc, #168]	; (8000650 <SystemClock_Config+0x100>)
 80005a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ac:	6013      	str	r3, [r2, #0]
 80005ae:	4b28      	ldr	r3, [pc, #160]	; (8000650 <SystemClock_Config+0x100>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ba:	2301      	movs	r3, #1
 80005bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ce:	2308      	movs	r3, #8
 80005d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005dc:	2307      	movs	r3, #7
 80005de:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005e4:	4618      	mov	r0, r3
 80005e6:	f003 f9fd 	bl	80039e4 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005f0:	f000 fa38 	bl	8000a64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000600:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000604:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	2105      	movs	r1, #5
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fc56 	bl	8003ec4 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800061e:	f000 fa21 	bl	8000a64 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000622:	2301      	movs	r3, #1
 8000624:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000626:	23c0      	movs	r3, #192	; 0xc0
 8000628:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800062a:	2302      	movs	r3, #2
 800062c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	4618      	mov	r0, r3
 8000634:	f003 fe24 	bl	8004280 <HAL_RCCEx_PeriphCLKConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800063e:	f000 fa11 	bl	8000a64 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3760      	adds	r7, #96	; 0x60
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_I2C1_Init+0x50>)
 800065a:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <MX_I2C1_Init+0x54>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000660:	4a12      	ldr	r2, [pc, #72]	; (80006ac <MX_I2C1_Init+0x58>)
 8000662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000676:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000692:	f002 fbcf 	bl	8002e34 <HAL_I2C_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f000 f9e2 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000104 	.word	0x20000104
 80006a8:	40005400 	.word	0x40005400
 80006ac:	000186a0 	.word	0x000186a0

080006b0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_I2S3_Init+0x54>)
 80006b6:	4a14      	ldr	r2, [pc, #80]	; (8000708 <MX_I2S3_Init+0x58>)
 80006b8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_I2S3_Init+0x54>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_I2S3_Init+0x54>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_I2S3_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <MX_I2S3_Init+0x54>)
 80006d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_I2S3_Init+0x54>)
 80006d8:	4a0c      	ldr	r2, [pc, #48]	; (800070c <MX_I2S3_Init+0x5c>)
 80006da:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_I2S3_Init+0x54>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_I2S3_Init+0x54>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_I2S3_Init+0x54>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_I2S3_Init+0x54>)
 80006f0:	f002 fcd8 	bl	80030a4 <HAL_I2S_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006fa:	f000 f9b3 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200001b0 	.word	0x200001b0
 8000708:	40003c00 	.word	0x40003c00
 800070c:	00017700 	.word	0x00017700

08000710 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_SPI1_Init+0x64>)
 8000716:	4a18      	ldr	r2, [pc, #96]	; (8000778 <MX_SPI1_Init+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_SPI1_Init+0x64>)
 800071c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_SPI1_Init+0x64>)
 800073c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000740:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_SPI1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_SPI1_Init+0x64>)
 800075c:	220a      	movs	r2, #10
 800075e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_SPI1_Init+0x64>)
 8000762:	f003 fecb 	bl	80044fc <HAL_SPI_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800076c:	f000 f97a 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000158 	.word	0x20000158
 8000778:	40013000 	.word	0x40013000

0800077c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08e      	sub	sp, #56	; 0x38
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]
 80007aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007ac:	4b2c      	ldr	r3, [pc, #176]	; (8000860 <MX_TIM4_Init+0xe4>)
 80007ae:	4a2d      	ldr	r2, [pc, #180]	; (8000864 <MX_TIM4_Init+0xe8>)
 80007b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80007b2:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <MX_TIM4_Init+0xe4>)
 80007b4:	2253      	movs	r2, #83	; 0x53
 80007b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b29      	ldr	r3, [pc, #164]	; (8000860 <MX_TIM4_Init+0xe4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80007be:	4b28      	ldr	r3, [pc, #160]	; (8000860 <MX_TIM4_Init+0xe4>)
 80007c0:	2263      	movs	r2, #99	; 0x63
 80007c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c4:	4b26      	ldr	r3, [pc, #152]	; (8000860 <MX_TIM4_Init+0xe4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ca:	4b25      	ldr	r3, [pc, #148]	; (8000860 <MX_TIM4_Init+0xe4>)
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007d0:	4823      	ldr	r0, [pc, #140]	; (8000860 <MX_TIM4_Init+0xe4>)
 80007d2:	f003 fef7 	bl	80045c4 <HAL_TIM_Base_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80007dc:	f000 f942 	bl	8000a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ea:	4619      	mov	r1, r3
 80007ec:	481c      	ldr	r0, [pc, #112]	; (8000860 <MX_TIM4_Init+0xe4>)
 80007ee:	f004 f84d 	bl	800488c <HAL_TIM_ConfigClockSource>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80007f8:	f000 f934 	bl	8000a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007fc:	4818      	ldr	r0, [pc, #96]	; (8000860 <MX_TIM4_Init+0xe4>)
 80007fe:	f003 ff0c 	bl	800461a <HAL_TIM_PWM_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000808:	f000 f92c 	bl	8000a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000814:	f107 0320 	add.w	r3, r7, #32
 8000818:	4619      	mov	r1, r3
 800081a:	4811      	ldr	r0, [pc, #68]	; (8000860 <MX_TIM4_Init+0xe4>)
 800081c:	f004 fbfe 	bl	800501c <HAL_TIMEx_MasterConfigSynchronization>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000826:	f000 f91d 	bl	8000a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082a:	2360      	movs	r3, #96	; 0x60
 800082c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2208      	movs	r2, #8
 800083e:	4619      	mov	r1, r3
 8000840:	4807      	ldr	r0, [pc, #28]	; (8000860 <MX_TIM4_Init+0xe4>)
 8000842:	f003 ff5d 	bl	8004700 <HAL_TIM_PWM_ConfigChannel>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800084c:	f000 f90a 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <MX_TIM4_Init+0xe4>)
 8000852:	f000 fa51 	bl	8000cf8 <HAL_TIM_MspPostInit>

}
 8000856:	bf00      	nop
 8000858:	3738      	adds	r7, #56	; 0x38
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000c4 	.word	0x200000c4
 8000864:	40000800 	.word	0x40000800

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	; 0x30
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
 8000882:	4b71      	ldr	r3, [pc, #452]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a70      	ldr	r2, [pc, #448]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 8000888:	f043 0310 	orr.w	r3, r3, #16
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b6e      	ldr	r3, [pc, #440]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	61bb      	str	r3, [r7, #24]
 8000898:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	4b6a      	ldr	r3, [pc, #424]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a69      	ldr	r2, [pc, #420]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b67      	ldr	r3, [pc, #412]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b63      	ldr	r3, [pc, #396]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a62      	ldr	r2, [pc, #392]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b60      	ldr	r3, [pc, #384]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b5c      	ldr	r3, [pc, #368]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a5b      	ldr	r2, [pc, #364]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b59      	ldr	r3, [pc, #356]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b55      	ldr	r3, [pc, #340]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a54      	ldr	r2, [pc, #336]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b52      	ldr	r3, [pc, #328]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b4e      	ldr	r3, [pc, #312]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a4d      	ldr	r2, [pc, #308]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b4b      	ldr	r3, [pc, #300]	; (8000a48 <MX_GPIO_Init+0x1e0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2108      	movs	r1, #8
 800092a:	4848      	ldr	r0, [pc, #288]	; (8000a4c <MX_GPIO_Init+0x1e4>)
 800092c:	f000 fe02 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2101      	movs	r1, #1
 8000934:	4846      	ldr	r0, [pc, #280]	; (8000a50 <MX_GPIO_Init+0x1e8>)
 8000936:	f000 fdfd 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f24b 0110 	movw	r1, #45072	; 0xb010
 8000940:	4844      	ldr	r0, [pc, #272]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 8000942:	f000 fdf7 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000946:	2308      	movs	r3, #8
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	483b      	ldr	r0, [pc, #236]	; (8000a4c <MX_GPIO_Init+0x1e4>)
 800095e:	f000 fc4f 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000962:	2301      	movs	r3, #1
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4835      	ldr	r0, [pc, #212]	; (8000a50 <MX_GPIO_Init+0x1e8>)
 800097a:	f000 fc41 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800097e:	2308      	movs	r3, #8
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800098e:	2305      	movs	r3, #5
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	482d      	ldr	r0, [pc, #180]	; (8000a50 <MX_GPIO_Init+0x1e8>)
 800099a:	f000 fc31 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800099e:	2301      	movs	r3, #1
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a2:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <MX_GPIO_Init+0x1f0>)
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	482a      	ldr	r0, [pc, #168]	; (8000a5c <MX_GPIO_Init+0x1f4>)
 80009b2:	f000 fc25 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009b6:	2304      	movs	r3, #4
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4825      	ldr	r0, [pc, #148]	; (8000a60 <MX_GPIO_Init+0x1f8>)
 80009ca:	f000 fc19 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e0:	2305      	movs	r3, #5
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	481d      	ldr	r0, [pc, #116]	; (8000a60 <MX_GPIO_Init+0x1f8>)
 80009ec:	f000 fc08 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD6_Pin|Audio_RST_Pin;
 80009f0:	f24b 0310 	movw	r3, #45072	; 0xb010
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4812      	ldr	r0, [pc, #72]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 8000a0a:	f000 fbf9 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a0e:	2320      	movs	r3, #32
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 8000a22:	f000 fbed 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_GPIO_Init+0x1f0>)
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_GPIO_Init+0x1e4>)
 8000a3a:	f000 fbe1 	bl	8001200 <HAL_GPIO_Init>

}
 8000a3e:	bf00      	nop
 8000a40:	3730      	adds	r7, #48	; 0x30
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40020800 	.word	0x40020800
 8000a54:	40020c00 	.word	0x40020c00
 8000a58:	10120000 	.word	0x10120000
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	40020400 	.word	0x40020400

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a88:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000ab2:	2005      	movs	r0, #5
 8000ab4:	f000 fb62 	bl	800117c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <HAL_I2C_MspInit+0x84>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d12c      	bne.n	8000b40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b02:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b08:	2312      	movs	r3, #18
 8000b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b14:	2304      	movs	r3, #4
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480c      	ldr	r0, [pc, #48]	; (8000b50 <HAL_I2C_MspInit+0x8c>)
 8000b20:	f000 fb6e 	bl	8001200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000b2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b32:	6413      	str	r3, [r2, #64]	; 0x40
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	; 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40005400 	.word	0x40005400
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020400 	.word	0x40020400

08000b54 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a28      	ldr	r2, [pc, #160]	; (8000c14 <HAL_I2S_MspInit+0xc0>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d14a      	bne.n	8000c0c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <HAL_I2S_MspInit+0xc4>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a26      	ldr	r2, [pc, #152]	; (8000c18 <HAL_I2S_MspInit+0xc4>)
 8000b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <HAL_I2S_MspInit+0xc4>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <HAL_I2S_MspInit+0xc4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <HAL_I2S_MspInit+0xc4>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <HAL_I2S_MspInit+0xc4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_I2S_MspInit+0xc4>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <HAL_I2S_MspInit+0xc4>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <HAL_I2S_MspInit+0xc4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bca:	2310      	movs	r3, #16
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bda:	2306      	movs	r3, #6
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <HAL_I2S_MspInit+0xc8>)
 8000be6:	f000 fb0b 	bl	8001200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bea:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4806      	ldr	r0, [pc, #24]	; (8000c20 <HAL_I2S_MspInit+0xcc>)
 8000c08:	f000 fafa 	bl	8001200 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	; 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40003c00 	.word	0x40003c00
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40020800 	.word	0x40020800

08000c24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <HAL_SPI_MspInit+0x84>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12b      	bne.n	8000c9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c7e:	23e0      	movs	r3, #224	; 0xe0
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c8e:	2305      	movs	r3, #5
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <HAL_SPI_MspInit+0x8c>)
 8000c9a:	f000 fab1 	bl	8001200 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40013000 	.word	0x40013000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_TIM_Base_MspInit+0x3c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d10d      	bne.n	8000ce2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_TIM_Base_MspInit+0x40>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <HAL_TIM_Base_MspInit+0x40>)
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <HAL_TIM_Base_MspInit+0x40>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40000800 	.word	0x40000800
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <HAL_TIM_MspPostInit+0x68>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d11e      	bne.n	8000d58 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_TIM_MspPostInit+0x6c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a10      	ldr	r2, [pc, #64]	; (8000d64 <HAL_TIM_MspPostInit+0x6c>)
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_TIM_MspPostInit+0x6c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	4619      	mov	r1, r3
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_TIM_MspPostInit+0x70>)
 8000d54:	f000 fa54 	bl	8001200 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40000800 	.word	0x40000800
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020c00 	.word	0x40020c00

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <MemManage_Handler+0x4>

08000d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc0:	f000 f8ca 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <OTG_FS_IRQHandler+0x10>)
 8000dce:	f000 fe4f 	bl	8001a70 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200005c8 	.word	0x200005c8

08000ddc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <_sbrk+0x50>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x16>
		heap_end = &end;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <_sbrk+0x50>)
 8000dee:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <_sbrk+0x54>)
 8000df0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <_sbrk+0x50>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <_sbrk+0x50>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	466a      	mov	r2, sp
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d907      	bls.n	8000e16 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e06:	f007 f9a3 	bl	8008150 <__errno>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	230c      	movs	r3, #12
 8000e0e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e14:	e006      	b.n	8000e24 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <_sbrk+0x50>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a03      	ldr	r2, [pc, #12]	; (8000e2c <_sbrk+0x50>)
 8000e20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200000b0 	.word	0x200000b0
 8000e30:	20000890 	.word	0x20000890

08000e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <SystemInit+0x28>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3e:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <SystemInit+0x28>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SystemInit+0x28>)
 8000e4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e66:	e003      	b.n	8000e70 <LoopCopyDataInit>

08000e68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e6e:	3104      	adds	r1, #4

08000e70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e70:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e78:	d3f6      	bcc.n	8000e68 <CopyDataInit>
  ldr  r2, =_sbss
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e7c:	e002      	b.n	8000e84 <LoopFillZerobss>

08000e7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e80:	f842 3b04 	str.w	r3, [r2], #4

08000e84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e88:	d3f9      	bcc.n	8000e7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e8a:	f7ff ffd3 	bl	8000e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f007 f965 	bl	800815c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e92:	f7ff fb19 	bl	80004c8 <main>
  bx  lr    
 8000e96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e98:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e9c:	0800838c 	.word	0x0800838c
  ldr  r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ea4:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8000ea8:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8000eac:	20000890 	.word	0x20000890

08000eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <HAL_Init+0x40>)
 8000ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_Init+0x40>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <HAL_Init+0x40>)
 8000ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 f94d 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 f808 	bl	8000ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee8:	f7ff fdc4 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023c00 	.word	0x40023c00

08000ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_InitTick+0x54>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x58>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f965 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00e      	b.n	8000f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b0f      	cmp	r3, #15
 8000f2a:	d80a      	bhi.n	8000f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f34:	f000 f92d 	bl	8001192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f38:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <HAL_InitTick+0x5c>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e000      	b.n	8000f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000004 	.word	0x20000004
 8000f50:	2000000c 	.word	0x2000000c
 8000f54:	20000008 	.word	0x20000008

08000f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x20>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <HAL_IncTick+0x24>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	2000000c 	.word	0x2000000c
 8000f7c:	200001f8 	.word	0x200001f8

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	200001f8 	.word	0x200001f8

08000f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff ffee 	bl	8000f80 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fb0:	d005      	beq.n	8000fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_Delay+0x40>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4413      	add	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fbe:	bf00      	nop
 8000fc0:	f7ff ffde 	bl	8000f80 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8f7      	bhi.n	8000fc0 <HAL_Delay+0x28>
  {
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000000c 	.word	0x2000000c

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4907      	ldr	r1, [pc, #28]	; (8001078 <__NVIC_EnableIRQ+0x38>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	; (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800115c:	f7ff ff8e 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff29 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff3e 	bl	8001024 <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff8e 	bl	80010d0 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff5d 	bl	800107c <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff31 	bl	8001040 <__NVIC_EnableIRQ>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffa2 	bl	8001138 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	e16b      	b.n	80014f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	429a      	cmp	r2, r3
 8001236:	f040 815a 	bne.w	80014ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d00b      	beq.n	800125a <HAL_GPIO_Init+0x5a>
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d007      	beq.n	800125a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800124e:	2b11      	cmp	r3, #17
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b12      	cmp	r3, #18
 8001258:	d130      	bne.n	80012bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001290:	2201      	movs	r2, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	f003 0201 	and.w	r2, r3, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0xfc>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b12      	cmp	r3, #18
 80012fa:	d123      	bne.n	8001344 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	08da      	lsrs	r2, r3, #3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3208      	adds	r2, #8
 8001304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	220f      	movs	r2, #15
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	691a      	ldr	r2, [r3, #16]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	08da      	lsrs	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3208      	adds	r2, #8
 800133e:	69b9      	ldr	r1, [r7, #24]
 8001340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0203 	and.w	r2, r3, #3
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80b4 	beq.w	80014ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <HAL_GPIO_Init+0x308>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a5e      	ldr	r2, [pc, #376]	; (8001508 <HAL_GPIO_Init+0x308>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b5c      	ldr	r3, [pc, #368]	; (8001508 <HAL_GPIO_Init+0x308>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a2:	4a5a      	ldr	r2, [pc, #360]	; (800150c <HAL_GPIO_Init+0x30c>)
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	3302      	adds	r3, #2
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	220f      	movs	r2, #15
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a51      	ldr	r2, [pc, #324]	; (8001510 <HAL_GPIO_Init+0x310>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d02b      	beq.n	8001426 <HAL_GPIO_Init+0x226>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a50      	ldr	r2, [pc, #320]	; (8001514 <HAL_GPIO_Init+0x314>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d025      	beq.n	8001422 <HAL_GPIO_Init+0x222>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4f      	ldr	r2, [pc, #316]	; (8001518 <HAL_GPIO_Init+0x318>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d01f      	beq.n	800141e <HAL_GPIO_Init+0x21e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4e      	ldr	r2, [pc, #312]	; (800151c <HAL_GPIO_Init+0x31c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d019      	beq.n	800141a <HAL_GPIO_Init+0x21a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4d      	ldr	r2, [pc, #308]	; (8001520 <HAL_GPIO_Init+0x320>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d013      	beq.n	8001416 <HAL_GPIO_Init+0x216>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4c      	ldr	r2, [pc, #304]	; (8001524 <HAL_GPIO_Init+0x324>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d00d      	beq.n	8001412 <HAL_GPIO_Init+0x212>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4b      	ldr	r2, [pc, #300]	; (8001528 <HAL_GPIO_Init+0x328>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d007      	beq.n	800140e <HAL_GPIO_Init+0x20e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4a      	ldr	r2, [pc, #296]	; (800152c <HAL_GPIO_Init+0x32c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d101      	bne.n	800140a <HAL_GPIO_Init+0x20a>
 8001406:	2307      	movs	r3, #7
 8001408:	e00e      	b.n	8001428 <HAL_GPIO_Init+0x228>
 800140a:	2308      	movs	r3, #8
 800140c:	e00c      	b.n	8001428 <HAL_GPIO_Init+0x228>
 800140e:	2306      	movs	r3, #6
 8001410:	e00a      	b.n	8001428 <HAL_GPIO_Init+0x228>
 8001412:	2305      	movs	r3, #5
 8001414:	e008      	b.n	8001428 <HAL_GPIO_Init+0x228>
 8001416:	2304      	movs	r3, #4
 8001418:	e006      	b.n	8001428 <HAL_GPIO_Init+0x228>
 800141a:	2303      	movs	r3, #3
 800141c:	e004      	b.n	8001428 <HAL_GPIO_Init+0x228>
 800141e:	2302      	movs	r3, #2
 8001420:	e002      	b.n	8001428 <HAL_GPIO_Init+0x228>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <HAL_GPIO_Init+0x228>
 8001426:	2300      	movs	r3, #0
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	f002 0203 	and.w	r2, r2, #3
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	4093      	lsls	r3, r2
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001438:	4934      	ldr	r1, [pc, #208]	; (800150c <HAL_GPIO_Init+0x30c>)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	3302      	adds	r3, #2
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001446:	4b3a      	ldr	r3, [pc, #232]	; (8001530 <HAL_GPIO_Init+0x330>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800146a:	4a31      	ldr	r2, [pc, #196]	; (8001530 <HAL_GPIO_Init+0x330>)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001470:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <HAL_GPIO_Init+0x330>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001494:	4a26      	ldr	r2, [pc, #152]	; (8001530 <HAL_GPIO_Init+0x330>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <HAL_GPIO_Init+0x330>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014be:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <HAL_GPIO_Init+0x330>)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <HAL_GPIO_Init+0x330>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e8:	4a11      	ldr	r2, [pc, #68]	; (8001530 <HAL_GPIO_Init+0x330>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3301      	adds	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	f67f ae90 	bls.w	800121c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014fc:	bf00      	nop
 80014fe:	3724      	adds	r7, #36	; 0x24
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40023800 	.word	0x40023800
 800150c:	40013800 	.word	0x40013800
 8001510:	40020000 	.word	0x40020000
 8001514:	40020400 	.word	0x40020400
 8001518:	40020800 	.word	0x40020800
 800151c:	40020c00 	.word	0x40020c00
 8001520:	40021000 	.word	0x40021000
 8001524:	40021400 	.word	0x40021400
 8001528:	40021800 	.word	0x40021800
 800152c:	40021c00 	.word	0x40021c00
 8001530:	40013c00 	.word	0x40013c00

08001534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
 8001540:	4613      	mov	r3, r2
 8001542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001550:	e003      	b.n	800155a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	041a      	lsls	r2, r3, #16
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	619a      	str	r2, [r3, #24]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001568:	b08f      	sub	sp, #60	; 0x3c
 800156a:	af0a      	add	r7, sp, #40	; 0x28
 800156c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e054      	b.n	8001622 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d106      	bne.n	8001598 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f006 fb32 	bl	8007bfc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2203      	movs	r2, #3
 800159c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 fe1e 	bl	80051f8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	687e      	ldr	r6, [r7, #4]
 80015c4:	466d      	mov	r5, sp
 80015c6:	f106 0410 	add.w	r4, r6, #16
 80015ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80015da:	1d33      	adds	r3, r6, #4
 80015dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015de:	6838      	ldr	r0, [r7, #0]
 80015e0:	f003 fd98 	bl	8005114 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2101      	movs	r1, #1
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fe15 	bl	800521a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	687e      	ldr	r6, [r7, #4]
 80015f8:	466d      	mov	r5, sp
 80015fa:	f106 0410 	add.w	r4, r6, #16
 80015fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001606:	e894 0003 	ldmia.w	r4, {r0, r1}
 800160a:	e885 0003 	stmia.w	r5, {r0, r1}
 800160e:	1d33      	adds	r3, r6, #4
 8001610:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001612:	6838      	ldr	r0, [r7, #0]
 8001614:	f003 ff28 	bl	8005468 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800162a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800162a:	b590      	push	{r4, r7, lr}
 800162c:	b089      	sub	sp, #36	; 0x24
 800162e:	af04      	add	r7, sp, #16
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	4608      	mov	r0, r1
 8001634:	4611      	mov	r1, r2
 8001636:	461a      	mov	r2, r3
 8001638:	4603      	mov	r3, r0
 800163a:	70fb      	strb	r3, [r7, #3]
 800163c:	460b      	mov	r3, r1
 800163e:	70bb      	strb	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_HCD_HC_Init+0x28>
 800164e:	2302      	movs	r3, #2
 8001650:	e07f      	b.n	8001752 <HAL_HCD_HC_Init+0x128>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800165a:	78fa      	ldrb	r2, [r7, #3]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	440b      	add	r3, r1
 8001668:	333d      	adds	r3, #61	; 0x3d
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800166e:	78fa      	ldrb	r2, [r7, #3]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	3338      	adds	r3, #56	; 0x38
 800167e:	787a      	ldrb	r2, [r7, #1]
 8001680:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001682:	78fa      	ldrb	r2, [r7, #3]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	3340      	adds	r3, #64	; 0x40
 8001692:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001694:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	440b      	add	r3, r1
 80016a4:	3339      	adds	r3, #57	; 0x39
 80016a6:	78fa      	ldrb	r2, [r7, #3]
 80016a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016aa:	78fa      	ldrb	r2, [r7, #3]
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	440b      	add	r3, r1
 80016b8:	333f      	adds	r3, #63	; 0x3f
 80016ba:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80016c0:	78fa      	ldrb	r2, [r7, #3]
 80016c2:	78bb      	ldrb	r3, [r7, #2]
 80016c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016c8:	b2d8      	uxtb	r0, r3
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	333a      	adds	r3, #58	; 0x3a
 80016d8:	4602      	mov	r2, r0
 80016da:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80016dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	da0a      	bge.n	80016fa <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016e4:	78fa      	ldrb	r2, [r7, #3]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	333b      	adds	r3, #59	; 0x3b
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
 80016f8:	e009      	b.n	800170e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016fa:	78fa      	ldrb	r2, [r7, #3]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	440b      	add	r3, r1
 8001708:	333b      	adds	r3, #59	; 0x3b
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	333c      	adds	r3, #60	; 0x3c
 800171e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001722:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	787c      	ldrb	r4, [r7, #1]
 800172a:	78ba      	ldrb	r2, [r7, #2]
 800172c:	78f9      	ldrb	r1, [r7, #3]
 800172e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001730:	9302      	str	r3, [sp, #8]
 8001732:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	f897 3020 	ldrb.w	r3, [r7, #32]
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	4623      	mov	r3, r4
 8001740:	f004 f814 	bl	800576c <USB_HC_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bd90      	pop	{r4, r7, pc}

0800175a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	460b      	mov	r3, r1
 8001764:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_HCD_HC_Halt+0x1e>
 8001774:	2302      	movs	r3, #2
 8001776:	e00f      	b.n	8001798 <HAL_HCD_HC_Halt+0x3e>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	78fa      	ldrb	r2, [r7, #3]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f004 fa4e 	bl	8005c2a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	4608      	mov	r0, r1
 80017aa:	4611      	mov	r1, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	4603      	mov	r3, r0
 80017b0:	70fb      	strb	r3, [r7, #3]
 80017b2:	460b      	mov	r3, r1
 80017b4:	70bb      	strb	r3, [r7, #2]
 80017b6:	4613      	mov	r3, r2
 80017b8:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80017ba:	78fa      	ldrb	r2, [r7, #3]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	333b      	adds	r3, #59	; 0x3b
 80017ca:	78ba      	ldrb	r2, [r7, #2]
 80017cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	333f      	adds	r3, #63	; 0x3f
 80017de:	787a      	ldrb	r2, [r7, #1]
 80017e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017e2:	7c3b      	ldrb	r3, [r7, #16]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10a      	bne.n	80017fe <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017e8:	78fa      	ldrb	r2, [r7, #3]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	440b      	add	r3, r1
 80017f6:	3342      	adds	r3, #66	; 0x42
 80017f8:	2203      	movs	r2, #3
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	e009      	b.n	8001812 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017fe:	78fa      	ldrb	r2, [r7, #3]
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	440b      	add	r3, r1
 800180c:	3342      	adds	r3, #66	; 0x42
 800180e:	2202      	movs	r2, #2
 8001810:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001812:	787b      	ldrb	r3, [r7, #1]
 8001814:	2b03      	cmp	r3, #3
 8001816:	f200 80d6 	bhi.w	80019c6 <HAL_HCD_HC_SubmitRequest+0x226>
 800181a:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <HAL_HCD_HC_SubmitRequest+0x80>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	08001831 	.word	0x08001831
 8001824:	080019b1 	.word	0x080019b1
 8001828:	0800189d 	.word	0x0800189d
 800182c:	08001927 	.word	0x08001927
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001830:	7c3b      	ldrb	r3, [r7, #16]
 8001832:	2b01      	cmp	r3, #1
 8001834:	f040 80c9 	bne.w	80019ca <HAL_HCD_HC_SubmitRequest+0x22a>
 8001838:	78bb      	ldrb	r3, [r7, #2]
 800183a:	2b00      	cmp	r3, #0
 800183c:	f040 80c5 	bne.w	80019ca <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001840:	8b3b      	ldrh	r3, [r7, #24]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001846:	78fa      	ldrb	r2, [r7, #3]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	440b      	add	r3, r1
 8001854:	3351      	adds	r3, #81	; 0x51
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800185a:	78fa      	ldrb	r2, [r7, #3]
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	3351      	adds	r3, #81	; 0x51
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10a      	bne.n	8001886 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001870:	78fa      	ldrb	r2, [r7, #3]
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
 800187e:	3342      	adds	r3, #66	; 0x42
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001884:	e0a1      	b.n	80019ca <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001886:	78fa      	ldrb	r2, [r7, #3]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	440b      	add	r3, r1
 8001894:	3342      	adds	r3, #66	; 0x42
 8001896:	2202      	movs	r2, #2
 8001898:	701a      	strb	r2, [r3, #0]
      break;
 800189a:	e096      	b.n	80019ca <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800189c:	78bb      	ldrb	r3, [r7, #2]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d120      	bne.n	80018e4 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018a2:	78fa      	ldrb	r2, [r7, #3]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	440b      	add	r3, r1
 80018b0:	3351      	adds	r3, #81	; 0x51
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10a      	bne.n	80018ce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b8:	78fa      	ldrb	r2, [r7, #3]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	440b      	add	r3, r1
 80018c6:	3342      	adds	r3, #66	; 0x42
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018cc:	e07e      	b.n	80019cc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ce:	78fa      	ldrb	r2, [r7, #3]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	440b      	add	r3, r1
 80018dc:	3342      	adds	r3, #66	; 0x42
 80018de:	2202      	movs	r2, #2
 80018e0:	701a      	strb	r2, [r3, #0]
      break;
 80018e2:	e073      	b.n	80019cc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	3350      	adds	r3, #80	; 0x50
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10a      	bne.n	8001910 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018fa:	78fa      	ldrb	r2, [r7, #3]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	440b      	add	r3, r1
 8001908:	3342      	adds	r3, #66	; 0x42
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
      break;
 800190e:	e05d      	b.n	80019cc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	3342      	adds	r3, #66	; 0x42
 8001920:	2202      	movs	r2, #2
 8001922:	701a      	strb	r2, [r3, #0]
      break;
 8001924:	e052      	b.n	80019cc <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001926:	78bb      	ldrb	r3, [r7, #2]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d120      	bne.n	800196e <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800192c:	78fa      	ldrb	r2, [r7, #3]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	440b      	add	r3, r1
 800193a:	3351      	adds	r3, #81	; 0x51
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10a      	bne.n	8001958 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	3342      	adds	r3, #66	; 0x42
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001956:	e039      	b.n	80019cc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	440b      	add	r3, r1
 8001966:	3342      	adds	r3, #66	; 0x42
 8001968:	2202      	movs	r2, #2
 800196a:	701a      	strb	r2, [r3, #0]
      break;
 800196c:	e02e      	b.n	80019cc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	440b      	add	r3, r1
 800197c:	3350      	adds	r3, #80	; 0x50
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10a      	bne.n	800199a <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001984:	78fa      	ldrb	r2, [r7, #3]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	440b      	add	r3, r1
 8001992:	3342      	adds	r3, #66	; 0x42
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
      break;
 8001998:	e018      	b.n	80019cc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	440b      	add	r3, r1
 80019a8:	3342      	adds	r3, #66	; 0x42
 80019aa:	2202      	movs	r2, #2
 80019ac:	701a      	strb	r2, [r3, #0]
      break;
 80019ae:	e00d      	b.n	80019cc <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	440b      	add	r3, r1
 80019be:	3342      	adds	r3, #66	; 0x42
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
      break;
 80019c4:	e002      	b.n	80019cc <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80019c6:	bf00      	nop
 80019c8:	e000      	b.n	80019cc <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80019ca:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	440b      	add	r3, r1
 80019da:	3344      	adds	r3, #68	; 0x44
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	8b39      	ldrh	r1, [r7, #24]
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4403      	add	r3, r0
 80019f0:	3348      	adds	r3, #72	; 0x48
 80019f2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	335c      	adds	r3, #92	; 0x5c
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	440b      	add	r3, r1
 8001a16:	334c      	adds	r3, #76	; 0x4c
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	440b      	add	r3, r1
 8001a2a:	3339      	adds	r3, #57	; 0x39
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	440b      	add	r3, r1
 8001a3e:	335d      	adds	r3, #93	; 0x5d
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	78fa      	ldrb	r2, [r7, #3]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	3338      	adds	r3, #56	; 0x38
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	18d1      	adds	r1, r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f003 ff8e 	bl	8005980 <USB_HC_StartXfer>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop

08001a70 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 fcab 	bl	80053e2 <USB_GetMode>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	f040 80f1 	bne.w	8001c76 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f003 fc8f 	bl	80053bc <USB_ReadInterrupts>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 80e7 	beq.w	8001c74 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f003 fc86 	bl	80053bc <USB_ReadInterrupts>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001aba:	d104      	bne.n	8001ac6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ac4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 fc76 	bl	80053bc <USB_ReadInterrupts>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ada:	d104      	bne.n	8001ae6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ae4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fc66 	bl	80053bc <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001af6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001afa:	d104      	bne.n	8001b06 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 fc56 	bl	80053bc <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d103      	bne.n	8001b22 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fc48 	bl	80053bc <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b36:	d117      	bne.n	8001b68 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001b46:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001b4a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f006 f8d3 	bl	8007cf8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2101      	movs	r1, #1
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 fd41 	bl	80055e0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 fc25 	bl	80053bc <USB_ReadInterrupts>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b7c:	d102      	bne.n	8001b84 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f001 f8c8 	bl	8002d14 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 fc17 	bl	80053bc <USB_ReadInterrupts>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d106      	bne.n	8001ba6 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f006 f891 	bl	8007cc0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f003 fc06 	bl	80053bc <USB_ReadInterrupts>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bba:	d138      	bne.n	8001c2e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f004 f821 	bl	8005c08 <USB_HC_ReadInterrupt>
 8001bc6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	e025      	b.n	8001c1a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d018      	beq.n	8001c14 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	015a      	lsls	r2, r3, #5
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bf8:	d106      	bne.n	8001c08 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f8cf 	bl	8001da4 <HCD_HC_IN_IRQHandler>
 8001c06:	e005      	b.n	8001c14 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 fc5f 	bl	80024d2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d3d4      	bcc.n	8001bce <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 fbc2 	bl	80053bc <USB_ReadInterrupts>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b10      	cmp	r3, #16
 8001c40:	d101      	bne.n	8001c46 <HAL_HCD_IRQHandler+0x1d6>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <HAL_HCD_IRQHandler+0x1d8>
 8001c46:	2300      	movs	r3, #0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d014      	beq.n	8001c76 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699a      	ldr	r2, [r3, #24]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0210 	bic.w	r2, r2, #16
 8001c5a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 ffad 	bl	8002bbc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	699a      	ldr	r2, [r3, #24]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0210 	orr.w	r2, r2, #16
 8001c70:	619a      	str	r2, [r3, #24]
 8001c72:	e000      	b.n	8001c76 <HAL_HCD_IRQHandler+0x206>
      return;
 8001c74:	bf00      	nop
    }
  }
}
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_HCD_Start+0x16>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e013      	b.n	8001cba <HAL_HCD_Start+0x3e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 fa99 	bl	80051d6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 fcfc 	bl	80056a8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_HCD_Stop+0x16>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e00d      	b.n	8001cf4 <HAL_HCD_Stop+0x32>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f004 f8db 	bl	8005ea0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fca3 	bl	8005654 <USB_ResetPort>
 8001d0e:	4603      	mov	r3, r0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	440b      	add	r3, r1
 8001d32:	335c      	adds	r3, #92	; 0x5c
 8001d34:	781b      	ldrb	r3, [r3, #0]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d4e:	78fa      	ldrb	r2, [r7, #3]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	334c      	adds	r3, #76	; 0x4c
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 fce5 	bl	8005748 <USB_GetCurrentFrame>
 8001d7e:	4603      	mov	r3, r0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 fcc0 	bl	800571a <USB_GetHostSpeed>
 8001d9a:	4603      	mov	r3, r0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	015a      	lsls	r2, r3, #5
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d119      	bne.n	8001e08 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	015a      	lsls	r2, r3, #5
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de0:	461a      	mov	r2, r3
 8001de2:	2304      	movs	r3, #4
 8001de4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	0151      	lsls	r1, r2, #5
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	440a      	add	r2, r1
 8001dfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	60d3      	str	r3, [r2, #12]
 8001e06:	e095      	b.n	8001f34 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	d109      	bne.n	8001e32 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	6093      	str	r3, [r2, #8]
 8001e30:	e080      	b.n	8001f34 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d134      	bne.n	8001eb2 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	0151      	lsls	r1, r2, #5
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	440a      	add	r2, r1
 8001e5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e62:	f043 0302 	orr.w	r3, r3, #2
 8001e66:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	440b      	add	r3, r1
 8001e76:	335d      	adds	r3, #93	; 0x5d
 8001e78:	2205      	movs	r2, #5
 8001e7a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2310      	movs	r3, #16
 8001e8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2308      	movs	r3, #8
 8001e9e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 febd 	bl	8005c2a <USB_HC_Halt>
 8001eb0:	e040      	b.n	8001f34 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec8:	d134      	bne.n	8001f34 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	0151      	lsls	r1, r2, #5
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	440a      	add	r2, r1
 8001ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 fe98 	bl	8005c2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	461a      	mov	r2, r3
 8001f08:	2310      	movs	r3, #16
 8001f0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	335d      	adds	r3, #93	; 0x5d
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	015a      	lsls	r2, r3, #5
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f32:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	015a      	lsls	r2, r3, #5
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f4a:	d122      	bne.n	8001f92 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	0151      	lsls	r1, r2, #5
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	440a      	add	r2, r1
 8001f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f66:	f043 0302 	orr.w	r3, r3, #2
 8001f6a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 fe57 	bl	8005c2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f88:	461a      	mov	r2, r3
 8001f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f90:	e29b      	b.n	80024ca <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	f040 80c1 	bne.w	800212c <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d01b      	beq.n	8001fea <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	3348      	adds	r3, #72	; 0x48
 8001fc2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	0159      	lsls	r1, r3, #5
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	440b      	add	r3, r1
 8001fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001fd6:	1ad1      	subs	r1, r2, r3
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4403      	add	r3, r0
 8001fe6:	334c      	adds	r3, #76	; 0x4c
 8001fe8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	440b      	add	r3, r1
 8001ff8:	335d      	adds	r3, #93	; 0x5d
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	440b      	add	r3, r1
 800200c:	3358      	adds	r3, #88	; 0x58
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4413      	add	r3, r2
 800201a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201e:	461a      	mov	r2, r3
 8002020:	2301      	movs	r3, #1
 8002022:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	333f      	adds	r3, #63	; 0x3f
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	440b      	add	r3, r1
 8002048:	333f      	adds	r3, #63	; 0x3f
 800204a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800204c:	2b02      	cmp	r3, #2
 800204e:	d121      	bne.n	8002094 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	0151      	lsls	r1, r2, #5
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	440a      	add	r2, r1
 8002066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800206a:	f043 0302 	orr.w	r3, r3, #2
 800206e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	4611      	mov	r1, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f003 fdd5 	bl	8005c2a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	015a      	lsls	r2, r3, #5
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4413      	add	r3, r2
 8002088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208c:	461a      	mov	r2, r3
 800208e:	2310      	movs	r3, #16
 8002090:	6093      	str	r3, [r2, #8]
 8002092:	e034      	b.n	80020fe <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	440b      	add	r3, r1
 80020a2:	333f      	adds	r3, #63	; 0x3f
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d129      	bne.n	80020fe <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	0151      	lsls	r1, r2, #5
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	440a      	add	r2, r1
 80020c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020c8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	440b      	add	r3, r1
 80020d8:	335c      	adds	r3, #92	; 0x5c
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	b2d8      	uxtb	r0, r3
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	440b      	add	r3, r1
 80020f0:	335c      	adds	r3, #92	; 0x5c
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	4601      	mov	r1, r0
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f005 fe0b 	bl	8007d14 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	3350      	adds	r3, #80	; 0x50
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	f083 0301 	eor.w	r3, r3, #1
 8002114:	b2d8      	uxtb	r0, r3
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	440b      	add	r3, r1
 8002124:	3350      	adds	r3, #80	; 0x50
 8002126:	4602      	mov	r2, r0
 8002128:	701a      	strb	r2, [r3, #0]
}
 800212a:	e1ce      	b.n	80024ca <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b02      	cmp	r3, #2
 8002140:	f040 80f1 	bne.w	8002326 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	0151      	lsls	r1, r2, #5
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	440a      	add	r2, r1
 800215a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800215e:	f023 0302 	bic.w	r3, r3, #2
 8002162:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	335d      	adds	r3, #93	; 0x5d
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d10a      	bne.n	8002190 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	335c      	adds	r3, #92	; 0x5c
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	e0b0      	b.n	80022f2 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	335d      	adds	r3, #93	; 0x5d
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b05      	cmp	r3, #5
 80021a4:	d10a      	bne.n	80021bc <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	440b      	add	r3, r1
 80021b4:	335c      	adds	r3, #92	; 0x5c
 80021b6:	2205      	movs	r2, #5
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	e09a      	b.n	80022f2 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	335d      	adds	r3, #93	; 0x5d
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d00a      	beq.n	80021e8 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	440b      	add	r3, r1
 80021e0:	335d      	adds	r3, #93	; 0x5d
 80021e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d156      	bne.n	8002296 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	440b      	add	r3, r1
 80021f6:	3358      	adds	r3, #88	; 0x58
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	1c59      	adds	r1, r3, #1
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4403      	add	r3, r0
 800220a:	3358      	adds	r3, #88	; 0x58
 800220c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	440b      	add	r3, r1
 800221c:	3358      	adds	r3, #88	; 0x58
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d914      	bls.n	800224e <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	3358      	adds	r3, #88	; 0x58
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	335c      	adds	r3, #92	; 0x5c
 8002248:	2204      	movs	r2, #4
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	e009      	b.n	8002262 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	440b      	add	r3, r1
 800225c:	335c      	adds	r3, #92	; 0x5c
 800225e:	2202      	movs	r2, #2
 8002260:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002278:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002280:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4413      	add	r3, r2
 800228a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228e:	461a      	mov	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	e02d      	b.n	80022f2 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	440b      	add	r3, r1
 80022a4:	335d      	adds	r3, #93	; 0x5d
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d122      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	335c      	adds	r3, #92	; 0x5c
 80022bc:	2202      	movs	r2, #2
 80022be:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022d6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022de:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ec:	461a      	mov	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	461a      	mov	r2, r3
 8002300:	2302      	movs	r3, #2
 8002302:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	b2d8      	uxtb	r0, r3
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	440b      	add	r3, r1
 8002316:	335c      	adds	r3, #92	; 0x5c
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	4601      	mov	r1, r0
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f005 fcf8 	bl	8007d14 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002324:	e0d1      	b.n	80024ca <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4413      	add	r3, r2
 800232e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002338:	2b80      	cmp	r3, #128	; 0x80
 800233a:	d13e      	bne.n	80023ba <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	0151      	lsls	r1, r2, #5
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	440a      	add	r2, r1
 8002352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	440b      	add	r3, r1
 800236a:	3358      	adds	r3, #88	; 0x58
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1c59      	adds	r1, r3, #1
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4403      	add	r3, r0
 800237e:	3358      	adds	r3, #88	; 0x58
 8002380:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	440b      	add	r3, r1
 8002390:	335d      	adds	r3, #93	; 0x5d
 8002392:	2206      	movs	r2, #6
 8002394:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f003 fc42 	bl	8005c2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b2:	461a      	mov	r2, r3
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	6093      	str	r3, [r2, #8]
}
 80023b8:	e087      	b.n	80024ca <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d17c      	bne.n	80024ca <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	440b      	add	r3, r1
 80023de:	333f      	adds	r3, #63	; 0x3f
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d122      	bne.n	800242c <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	440b      	add	r3, r1
 80023f4:	3358      	adds	r3, #88	; 0x58
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4413      	add	r3, r2
 8002402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	0151      	lsls	r1, r2, #5
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	440a      	add	r2, r1
 8002410:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f003 fc00 	bl	8005c2a <USB_HC_Halt>
 800242a:	e045      	b.n	80024b8 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	440b      	add	r3, r1
 800243a:	333f      	adds	r3, #63	; 0x3f
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	333f      	adds	r3, #63	; 0x3f
 8002452:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002454:	2b02      	cmp	r3, #2
 8002456:	d12f      	bne.n	80024b8 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	3358      	adds	r3, #88	; 0x58
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d121      	bne.n	80024b8 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	440b      	add	r3, r1
 8002482:	335d      	adds	r3, #93	; 0x5d
 8002484:	2203      	movs	r2, #3
 8002486:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4413      	add	r3, r2
 8002490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	0151      	lsls	r1, r2, #5
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	440a      	add	r2, r1
 800249e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024a2:	f043 0302 	orr.w	r3, r3, #2
 80024a6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	4611      	mov	r1, r2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 fbb9 	bl	8005c2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c4:	461a      	mov	r2, r3
 80024c6:	2310      	movs	r3, #16
 80024c8:	6093      	str	r3, [r2, #8]
}
 80024ca:	bf00      	nop
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d119      	bne.n	8002536 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4413      	add	r3, r2
 800250a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250e:	461a      	mov	r2, r3
 8002510:	2304      	movs	r3, #4
 8002512:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	0151      	lsls	r1, r2, #5
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	440a      	add	r2, r1
 800252a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800252e:	f043 0302 	orr.w	r3, r3, #2
 8002532:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002534:	e33e      	b.n	8002bb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4413      	add	r3, r2
 800253e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b20      	cmp	r3, #32
 800254a:	d141      	bne.n	80025d0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	461a      	mov	r2, r3
 800255a:	2320      	movs	r3, #32
 800255c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	440b      	add	r3, r1
 800256c:	333d      	adds	r3, #61	; 0x3d
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b01      	cmp	r3, #1
 8002572:	f040 831f 	bne.w	8002bb4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	440b      	add	r3, r1
 8002584:	333d      	adds	r3, #61	; 0x3d
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	440b      	add	r3, r1
 8002598:	335c      	adds	r3, #92	; 0x5c
 800259a:	2202      	movs	r2, #2
 800259c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	0151      	lsls	r1, r2, #5
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	440a      	add	r2, r1
 80025b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025b8:	f043 0302 	orr.w	r3, r3, #2
 80025bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f003 fb2e 	bl	8005c2a <USB_HC_Halt>
}
 80025ce:	e2f1      	b.n	8002bb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b40      	cmp	r3, #64	; 0x40
 80025e4:	d13f      	bne.n	8002666 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	335d      	adds	r3, #93	; 0x5d
 80025f6:	2204      	movs	r2, #4
 80025f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	440b      	add	r3, r1
 8002608:	333d      	adds	r3, #61	; 0x3d
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	440b      	add	r3, r1
 800261c:	3358      	adds	r3, #88	; 0x58
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4413      	add	r3, r2
 800262a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	0151      	lsls	r1, r2, #5
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	440a      	add	r2, r1
 8002638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f003 faec 	bl	8005c2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	461a      	mov	r2, r3
 8002660:	2340      	movs	r3, #64	; 0x40
 8002662:	6093      	str	r3, [r2, #8]
}
 8002664:	e2a6      	b.n	8002bb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800267c:	d122      	bne.n	80026c4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	0151      	lsls	r1, r2, #5
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	440a      	add	r2, r1
 8002694:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f003 fabe 	bl	8005c2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	461a      	mov	r2, r3
 80026bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c0:	6093      	str	r3, [r2, #8]
}
 80026c2:	e277      	b.n	8002bb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d135      	bne.n	8002746 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	440b      	add	r3, r1
 80026e8:	3358      	adds	r3, #88	; 0x58
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	0151      	lsls	r1, r2, #5
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	440a      	add	r2, r1
 8002704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fa86 	bl	8005c2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4413      	add	r3, r2
 8002726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272a:	461a      	mov	r2, r3
 800272c:	2301      	movs	r3, #1
 800272e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	440b      	add	r3, r1
 800273e:	335d      	adds	r3, #93	; 0x5d
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
}
 8002744:	e236      	b.n	8002bb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b08      	cmp	r3, #8
 800275a:	d12b      	bne.n	80027b4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	461a      	mov	r2, r3
 800276a:	2308      	movs	r3, #8
 800276c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4413      	add	r3, r2
 8002776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	0151      	lsls	r1, r2, #5
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	440a      	add	r2, r1
 8002784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f003 fa46 	bl	8005c2a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	440b      	add	r3, r1
 80027ac:	335d      	adds	r3, #93	; 0x5d
 80027ae:	2205      	movs	r2, #5
 80027b0:	701a      	strb	r2, [r3, #0]
}
 80027b2:	e1ff      	b.n	8002bb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b10      	cmp	r3, #16
 80027c8:	d155      	bne.n	8002876 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	440b      	add	r3, r1
 80027d8:	3358      	adds	r3, #88	; 0x58
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	440b      	add	r3, r1
 80027ec:	335d      	adds	r3, #93	; 0x5d
 80027ee:	2203      	movs	r2, #3
 80027f0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	440b      	add	r3, r1
 8002800:	333d      	adds	r3, #61	; 0x3d
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d114      	bne.n	8002832 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	440b      	add	r3, r1
 8002816:	333c      	adds	r3, #60	; 0x3c
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	333d      	adds	r3, #61	; 0x3d
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4413      	add	r3, r2
 800283a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	0151      	lsls	r1, r2, #5
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	440a      	add	r2, r1
 8002848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800284c:	f043 0302 	orr.w	r3, r3, #2
 8002850:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f003 f9e4 	bl	8005c2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286e:	461a      	mov	r2, r3
 8002870:	2310      	movs	r3, #16
 8002872:	6093      	str	r3, [r2, #8]
}
 8002874:	e19e      	b.n	8002bb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4413      	add	r3, r2
 800287e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002888:	2b80      	cmp	r3, #128	; 0x80
 800288a:	d12b      	bne.n	80028e4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	0151      	lsls	r1, r2, #5
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	440a      	add	r2, r1
 80028a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028a6:	f043 0302 	orr.w	r3, r3, #2
 80028aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f003 f9b7 	bl	8005c2a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	440b      	add	r3, r1
 80028ca:	335d      	adds	r3, #93	; 0x5d
 80028cc:	2206      	movs	r2, #6
 80028ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	461a      	mov	r2, r3
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	6093      	str	r3, [r2, #8]
}
 80028e2:	e167      	b.n	8002bb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fa:	d135      	bne.n	8002968 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	0151      	lsls	r1, r2, #5
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	440a      	add	r2, r1
 8002912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002916:	f043 0302 	orr.w	r3, r3, #2
 800291a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f003 f97f 	bl	8005c2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	461a      	mov	r2, r3
 800293a:	2310      	movs	r3, #16
 800293c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4413      	add	r3, r2
 8002946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294a:	461a      	mov	r2, r3
 800294c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002950:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	335d      	adds	r3, #93	; 0x5d
 8002962:	2208      	movs	r2, #8
 8002964:	701a      	strb	r2, [r3, #0]
}
 8002966:	e125      	b.n	8002bb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4413      	add	r3, r2
 8002970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b02      	cmp	r3, #2
 800297c:	f040 811a 	bne.w	8002bb4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4413      	add	r3, r2
 8002988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	0151      	lsls	r1, r2, #5
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	440a      	add	r2, r1
 8002996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800299a:	f023 0302 	bic.w	r3, r3, #2
 800299e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	440b      	add	r3, r1
 80029ae:	335d      	adds	r3, #93	; 0x5d
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d137      	bne.n	8002a26 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	335c      	adds	r3, #92	; 0x5c
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	440b      	add	r3, r1
 80029d8:	333f      	adds	r3, #63	; 0x3f
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d00b      	beq.n	80029f8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	440b      	add	r3, r1
 80029ee:	333f      	adds	r3, #63	; 0x3f
 80029f0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	f040 80c5 	bne.w	8002b82 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	440b      	add	r3, r1
 8002a06:	3351      	adds	r3, #81	; 0x51
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	f083 0301 	eor.w	r3, r3, #1
 8002a0e:	b2d8      	uxtb	r0, r3
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3351      	adds	r3, #81	; 0x51
 8002a20:	4602      	mov	r2, r0
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	e0ad      	b.n	8002b82 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	440b      	add	r3, r1
 8002a34:	335d      	adds	r3, #93	; 0x5d
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d10a      	bne.n	8002a52 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	440b      	add	r3, r1
 8002a4a:	335c      	adds	r3, #92	; 0x5c
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e097      	b.n	8002b82 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	440b      	add	r3, r1
 8002a60:	335d      	adds	r3, #93	; 0x5d
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d10a      	bne.n	8002a7e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	440b      	add	r3, r1
 8002a76:	335c      	adds	r3, #92	; 0x5c
 8002a78:	2202      	movs	r2, #2
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	e081      	b.n	8002b82 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	335d      	adds	r3, #93	; 0x5d
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b05      	cmp	r3, #5
 8002a92:	d10a      	bne.n	8002aaa <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	335c      	adds	r3, #92	; 0x5c
 8002aa4:	2205      	movs	r2, #5
 8002aa6:	701a      	strb	r2, [r3, #0]
 8002aa8:	e06b      	b.n	8002b82 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	335d      	adds	r3, #93	; 0x5d
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b06      	cmp	r3, #6
 8002abe:	d00a      	beq.n	8002ad6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	335d      	adds	r3, #93	; 0x5d
 8002ad0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d155      	bne.n	8002b82 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3358      	adds	r3, #88	; 0x58
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	1c59      	adds	r1, r3, #1
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4403      	add	r3, r0
 8002af8:	3358      	adds	r3, #88	; 0x58
 8002afa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	3358      	adds	r3, #88	; 0x58
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d914      	bls.n	8002b3c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	440b      	add	r3, r1
 8002b20:	3358      	adds	r3, #88	; 0x58
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	440b      	add	r3, r1
 8002b34:	335c      	adds	r3, #92	; 0x5c
 8002b36:	2204      	movs	r2, #4
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e009      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	335c      	adds	r3, #92	; 0x5c
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b66:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b6e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2302      	movs	r3, #2
 8002b92:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	b2d8      	uxtb	r0, r3
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	335c      	adds	r3, #92	; 0x5c
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	4601      	mov	r1, r0
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f005 f8b0 	bl	8007d14 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bb4:	bf00      	nop
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08a      	sub	sp, #40	; 0x28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	0c5b      	lsrs	r3, r3, #17
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bf0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d003      	beq.n	8002c00 <HCD_RXQLVL_IRQHandler+0x44>
 8002bf8:	2b05      	cmp	r3, #5
 8002bfa:	f000 8082 	beq.w	8002d02 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002bfe:	e083      	b.n	8002d08 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d07f      	beq.n	8002d06 <HCD_RXQLVL_IRQHandler+0x14a>
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	440b      	add	r3, r1
 8002c14:	3344      	adds	r3, #68	; 0x44
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d074      	beq.n	8002d06 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3344      	adds	r3, #68	; 0x44
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	b292      	uxth	r2, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	f002 fb97 	bl	800536a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	440b      	add	r3, r1
 8002c4a:	3344      	adds	r3, #68	; 0x44
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	18d1      	adds	r1, r2, r3
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4403      	add	r3, r0
 8002c60:	3344      	adds	r3, #68	; 0x44
 8002c62:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	334c      	adds	r3, #76	; 0x4c
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	18d1      	adds	r1, r2, r3
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4403      	add	r3, r0
 8002c88:	334c      	adds	r3, #76	; 0x4c
 8002c8a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c98:	691a      	ldr	r2, [r3, #16]
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HCD_RXQLVL_IRQHandler+0x154>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d031      	beq.n	8002d06 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cb8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cc0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3350      	adds	r3, #80	; 0x50
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	f083 0301 	eor.w	r3, r3, #1
 8002cea:	b2d8      	uxtb	r0, r3
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3350      	adds	r3, #80	; 0x50
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	701a      	strb	r2, [r3, #0]
      break;
 8002d00:	e001      	b.n	8002d06 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002d02:	bf00      	nop
 8002d04:	e000      	b.n	8002d08 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002d06:	bf00      	nop
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3728      	adds	r7, #40	; 0x28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	1ff80000 	.word	0x1ff80000

08002d14 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d40:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d113      	bne.n	8002d74 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d10a      	bne.n	8002d6c <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002d64:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f004 ffb8 	bl	8007cdc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f043 0302 	orr.w	r3, r3, #2
 8002d72:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d147      	bne.n	8002e0e <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f043 0308 	orr.w	r3, r3, #8
 8002d84:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d129      	bne.n	8002de4 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d113      	bne.n	8002dc0 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002da2:	d106      	bne.n	8002db2 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2102      	movs	r1, #2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f002 fc18 	bl	80055e0 <USB_InitFSLSPClkSel>
 8002db0:	e011      	b.n	8002dd6 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2101      	movs	r1, #1
 8002db8:	4618      	mov	r0, r3
 8002dba:	f002 fc11 	bl	80055e0 <USB_InitFSLSPClkSel>
 8002dbe:	e00a      	b.n	8002dd6 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d106      	bne.n	8002dd6 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002dd4:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f004 ffaa 	bl	8007d30 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f004 ff7d 	bl	8007cdc <HAL_HCD_Connect_Callback>
 8002de2:	e014      	b.n	8002e0e <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f004 ffb1 	bl	8007d4c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002df8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002dfc:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	699a      	ldr	r2, [r3, #24]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002e0c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	d103      	bne.n	8002e20 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f043 0320 	orr.w	r3, r3, #32
 8002e1e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e26:	461a      	mov	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e11f      	b.n	8003086 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fd fe32 	bl	8000ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2224      	movs	r2, #36	; 0x24
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e98:	f001 f9de 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 8002e9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4a7b      	ldr	r2, [pc, #492]	; (8003090 <HAL_I2C_Init+0x25c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d807      	bhi.n	8002eb8 <HAL_I2C_Init+0x84>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4a7a      	ldr	r2, [pc, #488]	; (8003094 <HAL_I2C_Init+0x260>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	bf94      	ite	ls
 8002eb0:	2301      	movls	r3, #1
 8002eb2:	2300      	movhi	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e006      	b.n	8002ec6 <HAL_I2C_Init+0x92>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a77      	ldr	r2, [pc, #476]	; (8003098 <HAL_I2C_Init+0x264>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	bf94      	ite	ls
 8002ec0:	2301      	movls	r3, #1
 8002ec2:	2300      	movhi	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e0db      	b.n	8003086 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a72      	ldr	r2, [pc, #456]	; (800309c <HAL_I2C_Init+0x268>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	0c9b      	lsrs	r3, r3, #18
 8002ed8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4a64      	ldr	r2, [pc, #400]	; (8003090 <HAL_I2C_Init+0x25c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d802      	bhi.n	8002f08 <HAL_I2C_Init+0xd4>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3301      	adds	r3, #1
 8002f06:	e009      	b.n	8002f1c <HAL_I2C_Init+0xe8>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	4a63      	ldr	r2, [pc, #396]	; (80030a0 <HAL_I2C_Init+0x26c>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	099b      	lsrs	r3, r3, #6
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4956      	ldr	r1, [pc, #344]	; (8003090 <HAL_I2C_Init+0x25c>)
 8002f38:	428b      	cmp	r3, r1
 8002f3a:	d80d      	bhi.n	8002f58 <HAL_I2C_Init+0x124>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1e59      	subs	r1, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	bf38      	it	cc
 8002f54:	2304      	movcc	r3, #4
 8002f56:	e04f      	b.n	8002ff8 <HAL_I2C_Init+0x1c4>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d111      	bne.n	8002f84 <HAL_I2C_Init+0x150>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1e58      	subs	r0, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	440b      	add	r3, r1
 8002f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	e012      	b.n	8002faa <HAL_I2C_Init+0x176>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1e58      	subs	r0, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	0099      	lsls	r1, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Init+0x17e>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e022      	b.n	8002ff8 <HAL_I2C_Init+0x1c4>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_I2C_Init+0x1a4>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1e58      	subs	r0, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6859      	ldr	r1, [r3, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	440b      	add	r3, r1
 8002fc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fcc:	3301      	adds	r3, #1
 8002fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd6:	e00f      	b.n	8002ff8 <HAL_I2C_Init+0x1c4>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1e58      	subs	r0, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6859      	ldr	r1, [r3, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	0099      	lsls	r1, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	6809      	ldr	r1, [r1, #0]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003026:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6911      	ldr	r1, [r2, #16]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68d2      	ldr	r2, [r2, #12]
 8003032:	4311      	orrs	r1, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	430b      	orrs	r3, r1
 800303a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	000186a0 	.word	0x000186a0
 8003094:	001e847f 	.word	0x001e847f
 8003098:	003d08ff 	.word	0x003d08ff
 800309c:	431bde83 	.word	0x431bde83
 80030a0:	10624dd3 	.word	0x10624dd3

080030a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e128      	b.n	8003308 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a90      	ldr	r2, [pc, #576]	; (8003310 <HAL_I2S_Init+0x26c>)
 80030ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7fd fd3f 	bl	8000b54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2202      	movs	r2, #2
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030ec:	f023 030f 	bic.w	r3, r3, #15
 80030f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2202      	movs	r2, #2
 80030f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d060      	beq.n	80031c4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d102      	bne.n	8003110 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800310a:	2310      	movs	r3, #16
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	e001      	b.n	8003114 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003110:	2320      	movs	r3, #32
 8003112:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b20      	cmp	r3, #32
 800311a:	d802      	bhi.n	8003122 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003122:	2001      	movs	r0, #1
 8003124:	f001 f98e 	bl	8004444 <HAL_RCCEx_GetPeriphCLKFreq>
 8003128:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003132:	d125      	bne.n	8003180 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d010      	beq.n	800315e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	fbb2 f2f3 	udiv	r2, r2, r3
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	461a      	mov	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	3305      	adds	r3, #5
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	e01f      	b.n	800319e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	fbb2 f2f3 	udiv	r2, r2, r3
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	461a      	mov	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	fbb2 f3f3 	udiv	r3, r2, r3
 800317a:	3305      	adds	r3, #5
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	e00e      	b.n	800319e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	fbb2 f2f3 	udiv	r2, r2, r3
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	461a      	mov	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	fbb2 f3f3 	udiv	r3, r2, r3
 800319a:	3305      	adds	r3, #5
 800319c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4a5c      	ldr	r2, [pc, #368]	; (8003314 <HAL_I2S_Init+0x270>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	08db      	lsrs	r3, r3, #3
 80031a8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	085b      	lsrs	r3, r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	e003      	b.n	80031cc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031c4:	2302      	movs	r3, #2
 80031c6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d902      	bls.n	80031d8 <HAL_I2S_Init+0x134>
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	2bff      	cmp	r3, #255	; 0xff
 80031d6:	d907      	bls.n	80031e8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031dc:	f043 0210 	orr.w	r2, r3, #16
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e08f      	b.n	8003308 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	ea42 0103 	orr.w	r1, r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69fa      	ldr	r2, [r7, #28]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003206:	f023 030f 	bic.w	r3, r3, #15
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6851      	ldr	r1, [r2, #4]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6892      	ldr	r2, [r2, #8]
 8003212:	4311      	orrs	r1, r2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	68d2      	ldr	r2, [r2, #12]
 8003218:	4311      	orrs	r1, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6992      	ldr	r2, [r2, #24]
 800321e:	430a      	orrs	r2, r1
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800322a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d161      	bne.n	80032f8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a38      	ldr	r2, [pc, #224]	; (8003318 <HAL_I2S_Init+0x274>)
 8003238:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a37      	ldr	r2, [pc, #220]	; (800331c <HAL_I2S_Init+0x278>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d101      	bne.n	8003248 <HAL_I2S_Init+0x1a4>
 8003244:	4b36      	ldr	r3, [pc, #216]	; (8003320 <HAL_I2S_Init+0x27c>)
 8003246:	e001      	b.n	800324c <HAL_I2S_Init+0x1a8>
 8003248:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	4932      	ldr	r1, [pc, #200]	; (800331c <HAL_I2S_Init+0x278>)
 8003254:	428a      	cmp	r2, r1
 8003256:	d101      	bne.n	800325c <HAL_I2S_Init+0x1b8>
 8003258:	4a31      	ldr	r2, [pc, #196]	; (8003320 <HAL_I2S_Init+0x27c>)
 800325a:	e001      	b.n	8003260 <HAL_I2S_Init+0x1bc>
 800325c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003260:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003264:	f023 030f 	bic.w	r3, r3, #15
 8003268:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a2b      	ldr	r2, [pc, #172]	; (800331c <HAL_I2S_Init+0x278>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d101      	bne.n	8003278 <HAL_I2S_Init+0x1d4>
 8003274:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <HAL_I2S_Init+0x27c>)
 8003276:	e001      	b.n	800327c <HAL_I2S_Init+0x1d8>
 8003278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800327c:	2202      	movs	r2, #2
 800327e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a25      	ldr	r2, [pc, #148]	; (800331c <HAL_I2S_Init+0x278>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d101      	bne.n	800328e <HAL_I2S_Init+0x1ea>
 800328a:	4b25      	ldr	r3, [pc, #148]	; (8003320 <HAL_I2S_Init+0x27c>)
 800328c:	e001      	b.n	8003292 <HAL_I2S_Init+0x1ee>
 800328e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800329e:	d003      	beq.n	80032a8 <HAL_I2S_Init+0x204>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d103      	bne.n	80032b0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	e001      	b.n	80032b4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032b0:	2300      	movs	r3, #0
 80032b2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	b299      	uxth	r1, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80032ca:	4303      	orrs	r3, r0
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	430b      	orrs	r3, r1
 80032d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80032d2:	4313      	orrs	r3, r2
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	897b      	ldrh	r3, [r7, #10]
 80032d8:	4313      	orrs	r3, r2
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032e0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a0d      	ldr	r2, [pc, #52]	; (800331c <HAL_I2S_Init+0x278>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d101      	bne.n	80032f0 <HAL_I2S_Init+0x24c>
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <HAL_I2S_Init+0x27c>)
 80032ee:	e001      	b.n	80032f4 <HAL_I2S_Init+0x250>
 80032f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032f4:	897a      	ldrh	r2, [r7, #10]
 80032f6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	0800341b 	.word	0x0800341b
 8003314:	cccccccd 	.word	0xcccccccd
 8003318:	08003531 	.word	0x08003531
 800331c:	40003800 	.word	0x40003800
 8003320:	40003400 	.word	0x40003400

08003324 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	881a      	ldrh	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	1c9a      	adds	r2, r3, #2
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10e      	bne.n	80033b4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033a4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff ffb8 	bl	8003324 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	b292      	uxth	r2, r2
 80033d0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	1c9a      	adds	r2, r3, #2
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10e      	bne.n	8003412 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003402:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff ff93 	bl	8003338 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b04      	cmp	r3, #4
 8003434:	d13a      	bne.n	80034ac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d109      	bne.n	8003454 <I2S_IRQHandler+0x3a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b40      	cmp	r3, #64	; 0x40
 800344c:	d102      	bne.n	8003454 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff ffb4 	bl	80033bc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d126      	bne.n	80034ac <I2S_IRQHandler+0x92>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b20      	cmp	r3, #32
 800346a:	d11f      	bne.n	80034ac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800347a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f043 0202 	orr.w	r2, r3, #2
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ff50 	bl	800334c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d136      	bne.n	8003526 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d109      	bne.n	80034d6 <I2S_IRQHandler+0xbc>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034cc:	2b80      	cmp	r3, #128	; 0x80
 80034ce:	d102      	bne.n	80034d6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ff45 	bl	8003360 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d122      	bne.n	8003526 <I2S_IRQHandler+0x10c>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d11b      	bne.n	8003526 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034fc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	f043 0204 	orr.w	r2, r3, #4
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff ff13 	bl	800334c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003526:	bf00      	nop
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4aa2      	ldr	r2, [pc, #648]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d101      	bne.n	800354e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800354a:	4ba2      	ldr	r3, [pc, #648]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800354c:	e001      	b.n	8003552 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800354e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a9b      	ldr	r2, [pc, #620]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d101      	bne.n	800356c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003568:	4b9a      	ldr	r3, [pc, #616]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800356a:	e001      	b.n	8003570 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800356c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357c:	d004      	beq.n	8003588 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f040 8099 	bne.w	80036ba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b02      	cmp	r3, #2
 8003590:	d107      	bne.n	80035a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f925 	bl	80037ec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d107      	bne.n	80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f9c8 	bl	800394c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c2:	2b40      	cmp	r3, #64	; 0x40
 80035c4:	d13a      	bne.n	800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d035      	beq.n	800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a7e      	ldr	r2, [pc, #504]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d101      	bne.n	80035de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80035da:	4b7e      	ldr	r3, [pc, #504]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035dc:	e001      	b.n	80035e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80035de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4979      	ldr	r1, [pc, #484]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035ea:	428b      	cmp	r3, r1
 80035ec:	d101      	bne.n	80035f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80035ee:	4b79      	ldr	r3, [pc, #484]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035f0:	e001      	b.n	80035f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80035f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800360a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	f043 0202 	orr.w	r2, r3, #2
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff fe88 	bl	800334c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b08      	cmp	r3, #8
 8003644:	f040 80be 	bne.w	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 80b8 	beq.w	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003662:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a59      	ldr	r2, [pc, #356]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d101      	bne.n	8003672 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800366e:	4b59      	ldr	r3, [pc, #356]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003670:	e001      	b.n	8003676 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4954      	ldr	r1, [pc, #336]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800367e:	428b      	cmp	r3, r1
 8003680:	d101      	bne.n	8003686 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003682:	4b54      	ldr	r3, [pc, #336]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003684:	e001      	b.n	800368a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003686:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800368e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003690:	2300      	movs	r3, #0
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	f043 0204 	orr.w	r2, r3, #4
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff fe4a 	bl	800334c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036b8:	e084      	b.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d107      	bne.n	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8be 	bl	8003850 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d107      	bne.n	80036ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f8fd 	bl	80038e8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f4:	2b40      	cmp	r3, #64	; 0x40
 80036f6:	d12f      	bne.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d02a      	beq.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003710:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a2e      	ldr	r2, [pc, #184]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d101      	bne.n	8003720 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800371c:	4b2d      	ldr	r3, [pc, #180]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800371e:	e001      	b.n	8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003720:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4929      	ldr	r1, [pc, #164]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800372c:	428b      	cmp	r3, r1
 800372e:	d101      	bne.n	8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003730:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003732:	e001      	b.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003734:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003738:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800373c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f043 0202 	orr.w	r2, r3, #2
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff fdfa 	bl	800334c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b08      	cmp	r3, #8
 8003760:	d131      	bne.n	80037c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d02c      	beq.n	80037c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d101      	bne.n	800377a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003776:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003778:	e001      	b.n	800377e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800377a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4912      	ldr	r1, [pc, #72]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003786:	428b      	cmp	r3, r1
 8003788:	d101      	bne.n	800378e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800378a:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800378c:	e001      	b.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800378e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003792:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003796:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037a6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b4:	f043 0204 	orr.w	r2, r3, #4
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff fdc5 	bl	800334c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037c2:	e000      	b.n	80037c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037c4:	bf00      	nop
}
 80037c6:	bf00      	nop
 80037c8:	3720      	adds	r7, #32
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40003800 	.word	0x40003800
 80037d4:	40003400 	.word	0x40003400

080037d8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	1c99      	adds	r1, r3, #2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6251      	str	r1, [r2, #36]	; 0x24
 80037fe:	881a      	ldrh	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d113      	bne.n	8003846 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800382c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d106      	bne.n	8003846 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff ffc9 	bl	80037d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	1c99      	adds	r1, r3, #2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6251      	str	r1, [r2, #36]	; 0x24
 8003862:	8819      	ldrh	r1, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1d      	ldr	r2, [pc, #116]	; (80038e0 <I2SEx_TxISR_I2SExt+0x90>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <I2SEx_TxISR_I2SExt+0x22>
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <I2SEx_TxISR_I2SExt+0x94>)
 8003870:	e001      	b.n	8003876 <I2SEx_TxISR_I2SExt+0x26>
 8003872:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003876:	460a      	mov	r2, r1
 8003878:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d121      	bne.n	80038d6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a12      	ldr	r2, [pc, #72]	; (80038e0 <I2SEx_TxISR_I2SExt+0x90>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d101      	bne.n	80038a0 <I2SEx_TxISR_I2SExt+0x50>
 800389c:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <I2SEx_TxISR_I2SExt+0x94>)
 800389e:	e001      	b.n	80038a4 <I2SEx_TxISR_I2SExt+0x54>
 80038a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	490d      	ldr	r1, [pc, #52]	; (80038e0 <I2SEx_TxISR_I2SExt+0x90>)
 80038ac:	428b      	cmp	r3, r1
 80038ae:	d101      	bne.n	80038b4 <I2SEx_TxISR_I2SExt+0x64>
 80038b0:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <I2SEx_TxISR_I2SExt+0x94>)
 80038b2:	e001      	b.n	80038b8 <I2SEx_TxISR_I2SExt+0x68>
 80038b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d106      	bne.n	80038d6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff ff81 	bl	80037d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40003800 	.word	0x40003800
 80038e4:	40003400 	.word	0x40003400

080038e8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68d8      	ldr	r0, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	1c99      	adds	r1, r3, #2
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003900:	b282      	uxth	r2, r0
 8003902:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d113      	bne.n	8003944 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800392a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff ff4a 	bl	80037d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a20      	ldr	r2, [pc, #128]	; (80039dc <I2SEx_RxISR_I2SExt+0x90>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d101      	bne.n	8003962 <I2SEx_RxISR_I2SExt+0x16>
 800395e:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <I2SEx_RxISR_I2SExt+0x94>)
 8003960:	e001      	b.n	8003966 <I2SEx_RxISR_I2SExt+0x1a>
 8003962:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003966:	68d8      	ldr	r0, [r3, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	1c99      	adds	r1, r3, #2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003972:	b282      	uxth	r2, r0
 8003974:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d121      	bne.n	80039d2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a12      	ldr	r2, [pc, #72]	; (80039dc <I2SEx_RxISR_I2SExt+0x90>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d101      	bne.n	800399c <I2SEx_RxISR_I2SExt+0x50>
 8003998:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <I2SEx_RxISR_I2SExt+0x94>)
 800399a:	e001      	b.n	80039a0 <I2SEx_RxISR_I2SExt+0x54>
 800399c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	490d      	ldr	r1, [pc, #52]	; (80039dc <I2SEx_RxISR_I2SExt+0x90>)
 80039a8:	428b      	cmp	r3, r1
 80039aa:	d101      	bne.n	80039b0 <I2SEx_RxISR_I2SExt+0x64>
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <I2SEx_RxISR_I2SExt+0x94>)
 80039ae:	e001      	b.n	80039b4 <I2SEx_RxISR_I2SExt+0x68>
 80039b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039b8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d106      	bne.n	80039d2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff ff03 	bl	80037d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40003800 	.word	0x40003800
 80039e0:	40003400 	.word	0x40003400

080039e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e25b      	b.n	8003eae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d075      	beq.n	8003aee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a02:	4ba3      	ldr	r3, [pc, #652]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d00c      	beq.n	8003a28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a0e:	4ba0      	ldr	r3, [pc, #640]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d112      	bne.n	8003a40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a1a:	4b9d      	ldr	r3, [pc, #628]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a26:	d10b      	bne.n	8003a40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a28:	4b99      	ldr	r3, [pc, #612]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d05b      	beq.n	8003aec <HAL_RCC_OscConfig+0x108>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d157      	bne.n	8003aec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e236      	b.n	8003eae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a48:	d106      	bne.n	8003a58 <HAL_RCC_OscConfig+0x74>
 8003a4a:	4b91      	ldr	r3, [pc, #580]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a90      	ldr	r2, [pc, #576]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e01d      	b.n	8003a94 <HAL_RCC_OscConfig+0xb0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x98>
 8003a62:	4b8b      	ldr	r3, [pc, #556]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a8a      	ldr	r2, [pc, #552]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	4b88      	ldr	r3, [pc, #544]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a87      	ldr	r2, [pc, #540]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCC_OscConfig+0xb0>
 8003a7c:	4b84      	ldr	r3, [pc, #528]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a83      	ldr	r2, [pc, #524]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	4b81      	ldr	r3, [pc, #516]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a80      	ldr	r2, [pc, #512]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d013      	beq.n	8003ac4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fd fa70 	bl	8000f80 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7fd fa6c 	bl	8000f80 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	; 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e1fb      	b.n	8003eae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	4b76      	ldr	r3, [pc, #472]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0xc0>
 8003ac2:	e014      	b.n	8003aee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fa5c 	bl	8000f80 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003acc:	f7fd fa58 	bl	8000f80 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	; 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e1e7      	b.n	8003eae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ade:	4b6c      	ldr	r3, [pc, #432]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0xe8>
 8003aea:	e000      	b.n	8003aee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d063      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003afa:	4b65      	ldr	r3, [pc, #404]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00b      	beq.n	8003b1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b06:	4b62      	ldr	r3, [pc, #392]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d11c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b12:	4b5f      	ldr	r3, [pc, #380]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d116      	bne.n	8003b4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1e:	4b5c      	ldr	r3, [pc, #368]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_RCC_OscConfig+0x152>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d001      	beq.n	8003b36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e1bb      	b.n	8003eae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b36:	4b56      	ldr	r3, [pc, #344]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4952      	ldr	r1, [pc, #328]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4a:	e03a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b54:	4b4f      	ldr	r3, [pc, #316]	; (8003c94 <HAL_RCC_OscConfig+0x2b0>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5a:	f7fd fa11 	bl	8000f80 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b62:	f7fd fa0d 	bl	8000f80 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e19c      	b.n	8003eae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b74:	4b46      	ldr	r3, [pc, #280]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b80:	4b43      	ldr	r3, [pc, #268]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4940      	ldr	r1, [pc, #256]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	600b      	str	r3, [r1, #0]
 8003b94:	e015      	b.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b96:	4b3f      	ldr	r3, [pc, #252]	; (8003c94 <HAL_RCC_OscConfig+0x2b0>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fd f9f0 	bl	8000f80 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba4:	f7fd f9ec 	bl	8000f80 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e17b      	b.n	8003eae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb6:	4b36      	ldr	r3, [pc, #216]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d030      	beq.n	8003c30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d016      	beq.n	8003c04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd6:	4b30      	ldr	r3, [pc, #192]	; (8003c98 <HAL_RCC_OscConfig+0x2b4>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bdc:	f7fd f9d0 	bl	8000f80 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be4:	f7fd f9cc 	bl	8000f80 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e15b      	b.n	8003eae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf6:	4b26      	ldr	r3, [pc, #152]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0x200>
 8003c02:	e015      	b.n	8003c30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c04:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <HAL_RCC_OscConfig+0x2b4>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0a:	f7fd f9b9 	bl	8000f80 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c12:	f7fd f9b5 	bl	8000f80 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e144      	b.n	8003eae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c24:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f0      	bne.n	8003c12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 80a0 	beq.w	8003d7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c42:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10f      	bne.n	8003c6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	4a0e      	ldr	r2, [pc, #56]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCC_OscConfig+0x2b8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d121      	bne.n	8003cbe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <HAL_RCC_OscConfig+0x2b8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a07      	ldr	r2, [pc, #28]	; (8003c9c <HAL_RCC_OscConfig+0x2b8>)
 8003c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c86:	f7fd f97b 	bl	8000f80 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8c:	e011      	b.n	8003cb2 <HAL_RCC_OscConfig+0x2ce>
 8003c8e:	bf00      	nop
 8003c90:	40023800 	.word	0x40023800
 8003c94:	42470000 	.word	0x42470000
 8003c98:	42470e80 	.word	0x42470e80
 8003c9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca0:	f7fd f96e 	bl	8000f80 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e0fd      	b.n	8003eae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb2:	4b81      	ldr	r3, [pc, #516]	; (8003eb8 <HAL_RCC_OscConfig+0x4d4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d106      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x2f0>
 8003cc6:	4b7d      	ldr	r3, [pc, #500]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	4a7c      	ldr	r2, [pc, #496]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd2:	e01c      	b.n	8003d0e <HAL_RCC_OscConfig+0x32a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b05      	cmp	r3, #5
 8003cda:	d10c      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x312>
 8003cdc:	4b77      	ldr	r3, [pc, #476]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce0:	4a76      	ldr	r2, [pc, #472]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003ce2:	f043 0304 	orr.w	r3, r3, #4
 8003ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce8:	4b74      	ldr	r3, [pc, #464]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cec:	4a73      	ldr	r2, [pc, #460]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf4:	e00b      	b.n	8003d0e <HAL_RCC_OscConfig+0x32a>
 8003cf6:	4b71      	ldr	r3, [pc, #452]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	4a70      	ldr	r2, [pc, #448]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	6713      	str	r3, [r2, #112]	; 0x70
 8003d02:	4b6e      	ldr	r3, [pc, #440]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	4a6d      	ldr	r2, [pc, #436]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003d08:	f023 0304 	bic.w	r3, r3, #4
 8003d0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d015      	beq.n	8003d42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d16:	f7fd f933 	bl	8000f80 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d1e:	f7fd f92f 	bl	8000f80 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e0bc      	b.n	8003eae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d34:	4b61      	ldr	r3, [pc, #388]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0ee      	beq.n	8003d1e <HAL_RCC_OscConfig+0x33a>
 8003d40:	e014      	b.n	8003d6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d42:	f7fd f91d 	bl	8000f80 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d48:	e00a      	b.n	8003d60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d4a:	f7fd f919 	bl	8000f80 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e0a6      	b.n	8003eae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d60:	4b56      	ldr	r3, [pc, #344]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1ee      	bne.n	8003d4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d105      	bne.n	8003d7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d72:	4b52      	ldr	r3, [pc, #328]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	4a51      	ldr	r2, [pc, #324]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8092 	beq.w	8003eac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d88:	4b4c      	ldr	r3, [pc, #304]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 030c 	and.w	r3, r3, #12
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d05c      	beq.n	8003e4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d141      	bne.n	8003e20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9c:	4b48      	ldr	r3, [pc, #288]	; (8003ec0 <HAL_RCC_OscConfig+0x4dc>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da2:	f7fd f8ed 	bl	8000f80 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003daa:	f7fd f8e9 	bl	8000f80 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e078      	b.n	8003eae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbc:	4b3f      	ldr	r3, [pc, #252]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1f0      	bne.n	8003daa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	019b      	lsls	r3, r3, #6
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	3b01      	subs	r3, #1
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	061b      	lsls	r3, r3, #24
 8003dec:	4933      	ldr	r1, [pc, #204]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003df2:	4b33      	ldr	r3, [pc, #204]	; (8003ec0 <HAL_RCC_OscConfig+0x4dc>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fd f8c2 	bl	8000f80 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fd f8be 	bl	8000f80 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e04d      	b.n	8003eae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e12:	4b2a      	ldr	r3, [pc, #168]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x41c>
 8003e1e:	e045      	b.n	8003eac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e20:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <HAL_RCC_OscConfig+0x4dc>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e26:	f7fd f8ab 	bl	8000f80 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e2e:	f7fd f8a7 	bl	8000f80 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e036      	b.n	8003eae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e40:	4b1e      	ldr	r3, [pc, #120]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f0      	bne.n	8003e2e <HAL_RCC_OscConfig+0x44a>
 8003e4c:	e02e      	b.n	8003eac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e029      	b.n	8003eae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e5a:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <HAL_RCC_OscConfig+0x4d8>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d11c      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d115      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e82:	4013      	ands	r3, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d10d      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d106      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40007000 	.word	0x40007000
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	42470060 	.word	0x42470060

08003ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0cc      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b68      	ldr	r3, [pc, #416]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d90c      	bls.n	8003f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b65      	ldr	r3, [pc, #404]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b63      	ldr	r3, [pc, #396]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0b8      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d020      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f18:	4b59      	ldr	r3, [pc, #356]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	4a58      	ldr	r2, [pc, #352]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f30:	4b53      	ldr	r3, [pc, #332]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a52      	ldr	r2, [pc, #328]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3c:	4b50      	ldr	r3, [pc, #320]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	494d      	ldr	r1, [pc, #308]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d044      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d107      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f62:	4b47      	ldr	r3, [pc, #284]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d119      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e07f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d003      	beq.n	8003f82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d107      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f82:	4b3f      	ldr	r3, [pc, #252]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e06f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f92:	4b3b      	ldr	r3, [pc, #236]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e067      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fa2:	4b37      	ldr	r3, [pc, #220]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f023 0203 	bic.w	r2, r3, #3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4934      	ldr	r1, [pc, #208]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb4:	f7fc ffe4 	bl	8000f80 <HAL_GetTick>
 8003fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fbc:	f7fc ffe0 	bl	8000f80 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e04f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd2:	4b2b      	ldr	r3, [pc, #172]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 020c 	and.w	r2, r3, #12
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d1eb      	bne.n	8003fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe4:	4b25      	ldr	r3, [pc, #148]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d20c      	bcs.n	800400c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff2:	4b22      	ldr	r3, [pc, #136]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffa:	4b20      	ldr	r3, [pc, #128]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d001      	beq.n	800400c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e032      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004018:	4b19      	ldr	r3, [pc, #100]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4916      	ldr	r1, [pc, #88]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d009      	beq.n	800404a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	490e      	ldr	r1, [pc, #56]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800404a:	f000 f821 	bl	8004090 <HAL_RCC_GetSysClockFreq>
 800404e:	4601      	mov	r1, r0
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	4a0a      	ldr	r2, [pc, #40]	; (8004084 <HAL_RCC_ClockConfig+0x1c0>)
 800405c:	5cd3      	ldrb	r3, [r2, r3]
 800405e:	fa21 f303 	lsr.w	r3, r1, r3
 8004062:	4a09      	ldr	r2, [pc, #36]	; (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <HAL_RCC_ClockConfig+0x1c8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fc ff44 	bl	8000ef8 <HAL_InitTick>

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023c00 	.word	0x40023c00
 8004080:	40023800 	.word	0x40023800
 8004084:	08008364 	.word	0x08008364
 8004088:	20000004 	.word	0x20000004
 800408c:	20000008 	.word	0x20000008

08004090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	607b      	str	r3, [r7, #4]
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	2300      	movs	r3, #0
 80040a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a6:	4b63      	ldr	r3, [pc, #396]	; (8004234 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d007      	beq.n	80040c2 <HAL_RCC_GetSysClockFreq+0x32>
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d008      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x38>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f040 80b4 	bne.w	8004224 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040bc:	4b5e      	ldr	r3, [pc, #376]	; (8004238 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040be:	60bb      	str	r3, [r7, #8]
       break;
 80040c0:	e0b3      	b.n	800422a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040c2:	4b5e      	ldr	r3, [pc, #376]	; (800423c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80040c4:	60bb      	str	r3, [r7, #8]
      break;
 80040c6:	e0b0      	b.n	800422a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c8:	4b5a      	ldr	r3, [pc, #360]	; (8004234 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040d2:	4b58      	ldr	r3, [pc, #352]	; (8004234 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d04a      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040de:	4b55      	ldr	r3, [pc, #340]	; (8004234 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	099b      	lsrs	r3, r3, #6
 80040e4:	f04f 0400 	mov.w	r4, #0
 80040e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	ea03 0501 	and.w	r5, r3, r1
 80040f4:	ea04 0602 	and.w	r6, r4, r2
 80040f8:	4629      	mov	r1, r5
 80040fa:	4632      	mov	r2, r6
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	f04f 0400 	mov.w	r4, #0
 8004104:	0154      	lsls	r4, r2, #5
 8004106:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800410a:	014b      	lsls	r3, r1, #5
 800410c:	4619      	mov	r1, r3
 800410e:	4622      	mov	r2, r4
 8004110:	1b49      	subs	r1, r1, r5
 8004112:	eb62 0206 	sbc.w	r2, r2, r6
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	f04f 0400 	mov.w	r4, #0
 800411e:	0194      	lsls	r4, r2, #6
 8004120:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004124:	018b      	lsls	r3, r1, #6
 8004126:	1a5b      	subs	r3, r3, r1
 8004128:	eb64 0402 	sbc.w	r4, r4, r2
 800412c:	f04f 0100 	mov.w	r1, #0
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	00e2      	lsls	r2, r4, #3
 8004136:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800413a:	00d9      	lsls	r1, r3, #3
 800413c:	460b      	mov	r3, r1
 800413e:	4614      	mov	r4, r2
 8004140:	195b      	adds	r3, r3, r5
 8004142:	eb44 0406 	adc.w	r4, r4, r6
 8004146:	f04f 0100 	mov.w	r1, #0
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	0262      	lsls	r2, r4, #9
 8004150:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004154:	0259      	lsls	r1, r3, #9
 8004156:	460b      	mov	r3, r1
 8004158:	4614      	mov	r4, r2
 800415a:	4618      	mov	r0, r3
 800415c:	4621      	mov	r1, r4
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f04f 0400 	mov.w	r4, #0
 8004164:	461a      	mov	r2, r3
 8004166:	4623      	mov	r3, r4
 8004168:	f7fc f82e 	bl	80001c8 <__aeabi_uldivmod>
 800416c:	4603      	mov	r3, r0
 800416e:	460c      	mov	r4, r1
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	e049      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004174:	4b2f      	ldr	r3, [pc, #188]	; (8004234 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	099b      	lsrs	r3, r3, #6
 800417a:	f04f 0400 	mov.w	r4, #0
 800417e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	ea03 0501 	and.w	r5, r3, r1
 800418a:	ea04 0602 	and.w	r6, r4, r2
 800418e:	4629      	mov	r1, r5
 8004190:	4632      	mov	r2, r6
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	f04f 0400 	mov.w	r4, #0
 800419a:	0154      	lsls	r4, r2, #5
 800419c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041a0:	014b      	lsls	r3, r1, #5
 80041a2:	4619      	mov	r1, r3
 80041a4:	4622      	mov	r2, r4
 80041a6:	1b49      	subs	r1, r1, r5
 80041a8:	eb62 0206 	sbc.w	r2, r2, r6
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	f04f 0400 	mov.w	r4, #0
 80041b4:	0194      	lsls	r4, r2, #6
 80041b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041ba:	018b      	lsls	r3, r1, #6
 80041bc:	1a5b      	subs	r3, r3, r1
 80041be:	eb64 0402 	sbc.w	r4, r4, r2
 80041c2:	f04f 0100 	mov.w	r1, #0
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	00e2      	lsls	r2, r4, #3
 80041cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041d0:	00d9      	lsls	r1, r3, #3
 80041d2:	460b      	mov	r3, r1
 80041d4:	4614      	mov	r4, r2
 80041d6:	195b      	adds	r3, r3, r5
 80041d8:	eb44 0406 	adc.w	r4, r4, r6
 80041dc:	f04f 0100 	mov.w	r1, #0
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	02a2      	lsls	r2, r4, #10
 80041e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80041ea:	0299      	lsls	r1, r3, #10
 80041ec:	460b      	mov	r3, r1
 80041ee:	4614      	mov	r4, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	4621      	mov	r1, r4
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f04f 0400 	mov.w	r4, #0
 80041fa:	461a      	mov	r2, r3
 80041fc:	4623      	mov	r3, r4
 80041fe:	f7fb ffe3 	bl	80001c8 <__aeabi_uldivmod>
 8004202:	4603      	mov	r3, r0
 8004204:	460c      	mov	r4, r1
 8004206:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004208:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	0c1b      	lsrs	r3, r3, #16
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	3301      	adds	r3, #1
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	60bb      	str	r3, [r7, #8]
      break;
 8004222:	e002      	b.n	800422a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004224:	4b04      	ldr	r3, [pc, #16]	; (8004238 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004226:	60bb      	str	r3, [r7, #8]
      break;
 8004228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800422a:	68bb      	ldr	r3, [r7, #8]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004234:	40023800 	.word	0x40023800
 8004238:	00f42400 	.word	0x00f42400
 800423c:	007a1200 	.word	0x007a1200

08004240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <HAL_RCC_GetHCLKFreq+0x14>)
 8004246:	681b      	ldr	r3, [r3, #0]
}
 8004248:	4618      	mov	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000004 	.word	0x20000004

08004258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800425c:	f7ff fff0 	bl	8004240 <HAL_RCC_GetHCLKFreq>
 8004260:	4601      	mov	r1, r0
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	0a9b      	lsrs	r3, r3, #10
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	4a03      	ldr	r2, [pc, #12]	; (800427c <HAL_RCC_GetPCLK1Freq+0x24>)
 800426e:	5cd3      	ldrb	r3, [r2, r3]
 8004270:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004274:	4618      	mov	r0, r3
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40023800 	.word	0x40023800
 800427c:	08008374 	.word	0x08008374

08004280 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d105      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d035      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042a8:	4b62      	ldr	r3, [pc, #392]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042ae:	f7fc fe67 	bl	8000f80 <HAL_GetTick>
 80042b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042b4:	e008      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042b6:	f7fc fe63 	bl	8000f80 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e0b0      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042c8:	4b5b      	ldr	r3, [pc, #364]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1f0      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	019a      	lsls	r2, r3, #6
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	071b      	lsls	r3, r3, #28
 80042e0:	4955      	ldr	r1, [pc, #340]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042e8:	4b52      	ldr	r3, [pc, #328]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042ee:	f7fc fe47 	bl	8000f80 <HAL_GetTick>
 80042f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042f4:	e008      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042f6:	f7fc fe43 	bl	8000f80 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e090      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004308:	4b4b      	ldr	r3, [pc, #300]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0f0      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 8083 	beq.w	8004428 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	4b44      	ldr	r3, [pc, #272]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	4a43      	ldr	r2, [pc, #268]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800432c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004330:	6413      	str	r3, [r2, #64]	; 0x40
 8004332:	4b41      	ldr	r3, [pc, #260]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800433e:	4b3f      	ldr	r3, [pc, #252]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a3e      	ldr	r2, [pc, #248]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004348:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800434a:	f7fc fe19 	bl	8000f80 <HAL_GetTick>
 800434e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004350:	e008      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004352:	f7fc fe15 	bl	8000f80 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e062      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004364:	4b35      	ldr	r3, [pc, #212]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004370:	4b31      	ldr	r3, [pc, #196]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004378:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d02f      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	429a      	cmp	r2, r3
 800438c:	d028      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800438e:	4b2a      	ldr	r3, [pc, #168]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004396:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004398:	4b29      	ldr	r3, [pc, #164]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800439e:	4b28      	ldr	r3, [pc, #160]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043a4:	4a24      	ldr	r2, [pc, #144]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043aa:	4b23      	ldr	r3, [pc, #140]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d114      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043b6:	f7fc fde3 	bl	8000f80 <HAL_GetTick>
 80043ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043bc:	e00a      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043be:	f7fc fddf 	bl	8000f80 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e02a      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d4:	4b18      	ldr	r3, [pc, #96]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0ee      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ec:	d10d      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80043ee:	4b12      	ldr	r3, [pc, #72]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004402:	490d      	ldr	r1, [pc, #52]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004404:	4313      	orrs	r3, r2
 8004406:	608b      	str	r3, [r1, #8]
 8004408:	e005      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800440a:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004410:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004414:	6093      	str	r3, [r2, #8]
 8004416:	4b08      	ldr	r3, [pc, #32]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004418:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004422:	4905      	ldr	r1, [pc, #20]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004424:	4313      	orrs	r3, r2
 8004426:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	42470068 	.word	0x42470068
 8004438:	40023800 	.word	0x40023800
 800443c:	40007000 	.word	0x40007000
 8004440:	42470e40 	.word	0x42470e40

08004444 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d13d      	bne.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004462:	4b22      	ldr	r3, [pc, #136]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800446a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d004      	beq.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004472:	2b01      	cmp	r3, #1
 8004474:	d12f      	bne.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004476:	4b1e      	ldr	r3, [pc, #120]	; (80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004478:	617b      	str	r3, [r7, #20]
          break;
 800447a:	e02f      	b.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800447c:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004488:	d108      	bne.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800448a:	4b18      	ldr	r3, [pc, #96]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004492:	4a18      	ldr	r2, [pc, #96]	; (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004494:	fbb2 f3f3 	udiv	r3, r2, r3
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	e007      	b.n	80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800449c:	4b13      	ldr	r3, [pc, #76]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a4:	4a14      	ldr	r2, [pc, #80]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044aa:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044b2:	099b      	lsrs	r3, r3, #6
 80044b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	fb02 f303 	mul.w	r3, r2, r3
 80044be:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80044c0:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c6:	0f1b      	lsrs	r3, r3, #28
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d2:	617b      	str	r3, [r7, #20]
          break;
 80044d4:	e002      	b.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	617b      	str	r3, [r7, #20]
          break;
 80044da:	bf00      	nop
        }
      }
      break;
 80044dc:	bf00      	nop
    }
  }
  return frequency;
 80044de:	697b      	ldr	r3, [r7, #20]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	40023800 	.word	0x40023800
 80044f0:	00bb8000 	.word	0x00bb8000
 80044f4:	007a1200 	.word	0x007a1200
 80044f8:	00f42400 	.word	0x00f42400

080044fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e056      	b.n	80045bc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d106      	bne.n	800452e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7fc fb7b 	bl	8000c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004544:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	ea42 0103 	orr.w	r1, r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	0c1b      	lsrs	r3, r3, #16
 800458c:	f003 0104 	and.w	r1, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69da      	ldr	r2, [r3, #28]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e01d      	b.n	8004612 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc fb62 	bl	8000cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f000 f9fa 	bl	80049fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e01d      	b.n	8004668 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d106      	bne.n	8004646 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f815 	bl	8004670 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3304      	adds	r3, #4
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f000 f9cf 	bl	80049fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2201      	movs	r2, #1
 8004694:	6839      	ldr	r1, [r7, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f000 fc9a 	bl	8004fd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <HAL_TIM_PWM_Start+0x74>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d004      	beq.n	80046b0 <HAL_TIM_PWM_Start+0x2c>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a14      	ldr	r2, [pc, #80]	; (80046fc <HAL_TIM_PWM_Start+0x78>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d101      	bne.n	80046b4 <HAL_TIM_PWM_Start+0x30>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <HAL_TIM_PWM_Start+0x32>
 80046b4:	2300      	movs	r3, #0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d007      	beq.n	80046ca <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b06      	cmp	r3, #6
 80046da:	d007      	beq.n	80046ec <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40010000 	.word	0x40010000
 80046fc:	40010400 	.word	0x40010400

08004700 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004716:	2302      	movs	r3, #2
 8004718:	e0b4      	b.n	8004884 <HAL_TIM_PWM_ConfigChannel+0x184>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2202      	movs	r2, #2
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b0c      	cmp	r3, #12
 800472e:	f200 809f 	bhi.w	8004870 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004732:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	0800476d 	.word	0x0800476d
 800473c:	08004871 	.word	0x08004871
 8004740:	08004871 	.word	0x08004871
 8004744:	08004871 	.word	0x08004871
 8004748:	080047ad 	.word	0x080047ad
 800474c:	08004871 	.word	0x08004871
 8004750:	08004871 	.word	0x08004871
 8004754:	08004871 	.word	0x08004871
 8004758:	080047ef 	.word	0x080047ef
 800475c:	08004871 	.word	0x08004871
 8004760:	08004871 	.word	0x08004871
 8004764:	08004871 	.word	0x08004871
 8004768:	0800482f 	.word	0x0800482f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 f9e2 	bl	8004b3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0208 	orr.w	r2, r2, #8
 8004786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0204 	bic.w	r2, r2, #4
 8004796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6999      	ldr	r1, [r3, #24]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	619a      	str	r2, [r3, #24]
      break;
 80047aa:	e062      	b.n	8004872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fa32 	bl	8004c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6999      	ldr	r1, [r3, #24]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	021a      	lsls	r2, r3, #8
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	619a      	str	r2, [r3, #24]
      break;
 80047ec:	e041      	b.n	8004872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fa87 	bl	8004d08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0208 	orr.w	r2, r2, #8
 8004808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0204 	bic.w	r2, r2, #4
 8004818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69d9      	ldr	r1, [r3, #28]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	61da      	str	r2, [r3, #28]
      break;
 800482c:	e021      	b.n	8004872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fadb 	bl	8004df0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69d9      	ldr	r1, [r3, #28]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	021a      	lsls	r2, r3, #8
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	61da      	str	r2, [r3, #28]
      break;
 800486e:	e000      	b.n	8004872 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004870:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_TIM_ConfigClockSource+0x18>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e0a6      	b.n	80049f2 <HAL_TIM_ConfigClockSource+0x166>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d067      	beq.n	80049ac <HAL_TIM_ConfigClockSource+0x120>
 80048dc:	2b40      	cmp	r3, #64	; 0x40
 80048de:	d80b      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x6c>
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d073      	beq.n	80049cc <HAL_TIM_ConfigClockSource+0x140>
 80048e4:	2b10      	cmp	r3, #16
 80048e6:	d802      	bhi.n	80048ee <HAL_TIM_ConfigClockSource+0x62>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d06f      	beq.n	80049cc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80048ec:	e078      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	d06c      	beq.n	80049cc <HAL_TIM_ConfigClockSource+0x140>
 80048f2:	2b30      	cmp	r3, #48	; 0x30
 80048f4:	d06a      	beq.n	80049cc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80048f6:	e073      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048f8:	2b70      	cmp	r3, #112	; 0x70
 80048fa:	d00d      	beq.n	8004918 <HAL_TIM_ConfigClockSource+0x8c>
 80048fc:	2b70      	cmp	r3, #112	; 0x70
 80048fe:	d804      	bhi.n	800490a <HAL_TIM_ConfigClockSource+0x7e>
 8004900:	2b50      	cmp	r3, #80	; 0x50
 8004902:	d033      	beq.n	800496c <HAL_TIM_ConfigClockSource+0xe0>
 8004904:	2b60      	cmp	r3, #96	; 0x60
 8004906:	d041      	beq.n	800498c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004908:	e06a      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800490a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490e:	d066      	beq.n	80049de <HAL_TIM_ConfigClockSource+0x152>
 8004910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004914:	d017      	beq.n	8004946 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004916:	e063      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6818      	ldr	r0, [r3, #0]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6899      	ldr	r1, [r3, #8]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f000 fb32 	bl	8004f90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800493a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	609a      	str	r2, [r3, #8]
      break;
 8004944:	e04c      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6899      	ldr	r1, [r3, #8]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f000 fb1b 	bl	8004f90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004968:	609a      	str	r2, [r3, #8]
      break;
 800496a:	e039      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	6859      	ldr	r1, [r3, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	461a      	mov	r2, r3
 800497a:	f000 fa8f 	bl	8004e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2150      	movs	r1, #80	; 0x50
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fae8 	bl	8004f5a <TIM_ITRx_SetConfig>
      break;
 800498a:	e029      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	6859      	ldr	r1, [r3, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	461a      	mov	r2, r3
 800499a:	f000 faae 	bl	8004efa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2160      	movs	r1, #96	; 0x60
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fad8 	bl	8004f5a <TIM_ITRx_SetConfig>
      break;
 80049aa:	e019      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	461a      	mov	r2, r3
 80049ba:	f000 fa6f 	bl	8004e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2140      	movs	r1, #64	; 0x40
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fac8 	bl	8004f5a <TIM_ITRx_SetConfig>
      break;
 80049ca:	e009      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4619      	mov	r1, r3
 80049d6:	4610      	mov	r0, r2
 80049d8:	f000 fabf 	bl	8004f5a <TIM_ITRx_SetConfig>
      break;
 80049dc:	e000      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80049de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a40      	ldr	r2, [pc, #256]	; (8004b10 <TIM_Base_SetConfig+0x114>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d013      	beq.n	8004a3c <TIM_Base_SetConfig+0x40>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a1a:	d00f      	beq.n	8004a3c <TIM_Base_SetConfig+0x40>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a3d      	ldr	r2, [pc, #244]	; (8004b14 <TIM_Base_SetConfig+0x118>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00b      	beq.n	8004a3c <TIM_Base_SetConfig+0x40>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a3c      	ldr	r2, [pc, #240]	; (8004b18 <TIM_Base_SetConfig+0x11c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d007      	beq.n	8004a3c <TIM_Base_SetConfig+0x40>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a3b      	ldr	r2, [pc, #236]	; (8004b1c <TIM_Base_SetConfig+0x120>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d003      	beq.n	8004a3c <TIM_Base_SetConfig+0x40>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a3a      	ldr	r2, [pc, #232]	; (8004b20 <TIM_Base_SetConfig+0x124>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d108      	bne.n	8004a4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a2f      	ldr	r2, [pc, #188]	; (8004b10 <TIM_Base_SetConfig+0x114>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d02b      	beq.n	8004aae <TIM_Base_SetConfig+0xb2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a5c:	d027      	beq.n	8004aae <TIM_Base_SetConfig+0xb2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a2c      	ldr	r2, [pc, #176]	; (8004b14 <TIM_Base_SetConfig+0x118>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d023      	beq.n	8004aae <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a2b      	ldr	r2, [pc, #172]	; (8004b18 <TIM_Base_SetConfig+0x11c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d01f      	beq.n	8004aae <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a2a      	ldr	r2, [pc, #168]	; (8004b1c <TIM_Base_SetConfig+0x120>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d01b      	beq.n	8004aae <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a29      	ldr	r2, [pc, #164]	; (8004b20 <TIM_Base_SetConfig+0x124>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d017      	beq.n	8004aae <TIM_Base_SetConfig+0xb2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a28      	ldr	r2, [pc, #160]	; (8004b24 <TIM_Base_SetConfig+0x128>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <TIM_Base_SetConfig+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a27      	ldr	r2, [pc, #156]	; (8004b28 <TIM_Base_SetConfig+0x12c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00f      	beq.n	8004aae <TIM_Base_SetConfig+0xb2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a26      	ldr	r2, [pc, #152]	; (8004b2c <TIM_Base_SetConfig+0x130>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00b      	beq.n	8004aae <TIM_Base_SetConfig+0xb2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a25      	ldr	r2, [pc, #148]	; (8004b30 <TIM_Base_SetConfig+0x134>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d007      	beq.n	8004aae <TIM_Base_SetConfig+0xb2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a24      	ldr	r2, [pc, #144]	; (8004b34 <TIM_Base_SetConfig+0x138>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d003      	beq.n	8004aae <TIM_Base_SetConfig+0xb2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a23      	ldr	r2, [pc, #140]	; (8004b38 <TIM_Base_SetConfig+0x13c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d108      	bne.n	8004ac0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <TIM_Base_SetConfig+0x114>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d003      	beq.n	8004af4 <TIM_Base_SetConfig+0xf8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a0c      	ldr	r2, [pc, #48]	; (8004b20 <TIM_Base_SetConfig+0x124>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d103      	bne.n	8004afc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	691a      	ldr	r2, [r3, #16]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	615a      	str	r2, [r3, #20]
}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40010000 	.word	0x40010000
 8004b14:	40000400 	.word	0x40000400
 8004b18:	40000800 	.word	0x40000800
 8004b1c:	40000c00 	.word	0x40000c00
 8004b20:	40010400 	.word	0x40010400
 8004b24:	40014000 	.word	0x40014000
 8004b28:	40014400 	.word	0x40014400
 8004b2c:	40014800 	.word	0x40014800
 8004b30:	40001800 	.word	0x40001800
 8004b34:	40001c00 	.word	0x40001c00
 8004b38:	40002000 	.word	0x40002000

08004b3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f023 0201 	bic.w	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0303 	bic.w	r3, r3, #3
 8004b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f023 0302 	bic.w	r3, r3, #2
 8004b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a20      	ldr	r2, [pc, #128]	; (8004c14 <TIM_OC1_SetConfig+0xd8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_OC1_SetConfig+0x64>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a1f      	ldr	r2, [pc, #124]	; (8004c18 <TIM_OC1_SetConfig+0xdc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d10c      	bne.n	8004bba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f023 0308 	bic.w	r3, r3, #8
 8004ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f023 0304 	bic.w	r3, r3, #4
 8004bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a15      	ldr	r2, [pc, #84]	; (8004c14 <TIM_OC1_SetConfig+0xd8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d003      	beq.n	8004bca <TIM_OC1_SetConfig+0x8e>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a14      	ldr	r2, [pc, #80]	; (8004c18 <TIM_OC1_SetConfig+0xdc>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d111      	bne.n	8004bee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	621a      	str	r2, [r3, #32]
}
 8004c08:	bf00      	nop
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40010400 	.word	0x40010400

08004c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f023 0210 	bic.w	r2, r3, #16
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	021b      	lsls	r3, r3, #8
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f023 0320 	bic.w	r3, r3, #32
 8004c66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a22      	ldr	r2, [pc, #136]	; (8004d00 <TIM_OC2_SetConfig+0xe4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d003      	beq.n	8004c84 <TIM_OC2_SetConfig+0x68>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a21      	ldr	r2, [pc, #132]	; (8004d04 <TIM_OC2_SetConfig+0xe8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d10d      	bne.n	8004ca0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a17      	ldr	r2, [pc, #92]	; (8004d00 <TIM_OC2_SetConfig+0xe4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_OC2_SetConfig+0x94>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a16      	ldr	r2, [pc, #88]	; (8004d04 <TIM_OC2_SetConfig+0xe8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d113      	bne.n	8004cd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40010000 	.word	0x40010000
 8004d04:	40010400 	.word	0x40010400

08004d08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0303 	bic.w	r3, r3, #3
 8004d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a21      	ldr	r2, [pc, #132]	; (8004de8 <TIM_OC3_SetConfig+0xe0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d003      	beq.n	8004d6e <TIM_OC3_SetConfig+0x66>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a20      	ldr	r2, [pc, #128]	; (8004dec <TIM_OC3_SetConfig+0xe4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d10d      	bne.n	8004d8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	021b      	lsls	r3, r3, #8
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a16      	ldr	r2, [pc, #88]	; (8004de8 <TIM_OC3_SetConfig+0xe0>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d003      	beq.n	8004d9a <TIM_OC3_SetConfig+0x92>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a15      	ldr	r2, [pc, #84]	; (8004dec <TIM_OC3_SetConfig+0xe4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d113      	bne.n	8004dc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	621a      	str	r2, [r3, #32]
}
 8004ddc:	bf00      	nop
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	40010000 	.word	0x40010000
 8004dec:	40010400 	.word	0x40010400

08004df0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	031b      	lsls	r3, r3, #12
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a12      	ldr	r2, [pc, #72]	; (8004e94 <TIM_OC4_SetConfig+0xa4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d003      	beq.n	8004e58 <TIM_OC4_SetConfig+0x68>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a11      	ldr	r2, [pc, #68]	; (8004e98 <TIM_OC4_SetConfig+0xa8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d109      	bne.n	8004e6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	019b      	lsls	r3, r3, #6
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	621a      	str	r2, [r3, #32]
}
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40010000 	.word	0x40010000
 8004e98:	40010400 	.word	0x40010400

08004e9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	f023 0201 	bic.w	r2, r3, #1
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f023 030a 	bic.w	r3, r3, #10
 8004ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	621a      	str	r2, [r3, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b087      	sub	sp, #28
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f023 0210 	bic.w	r2, r3, #16
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	031b      	lsls	r3, r3, #12
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	621a      	str	r2, [r3, #32]
}
 8004f4e:	bf00      	nop
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f043 0307 	orr.w	r3, r3, #7
 8004f7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	609a      	str	r2, [r3, #8]
}
 8004f84:	bf00      	nop
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004faa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	021a      	lsls	r2, r3, #8
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	609a      	str	r2, [r3, #8]
}
 8004fc4:	bf00      	nop
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a1a      	ldr	r2, [r3, #32]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	401a      	ands	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a1a      	ldr	r2, [r3, #32]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	fa01 f303 	lsl.w	r3, r1, r3
 8005008:	431a      	orrs	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	621a      	str	r2, [r3, #32]
}
 800500e:	bf00      	nop
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005030:	2302      	movs	r3, #2
 8005032:	e05a      	b.n	80050ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a21      	ldr	r2, [pc, #132]	; (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d022      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005080:	d01d      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1d      	ldr	r2, [pc, #116]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d018      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1b      	ldr	r2, [pc, #108]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a1a      	ldr	r2, [pc, #104]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00e      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a18      	ldr	r2, [pc, #96]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d009      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a17      	ldr	r2, [pc, #92]	; (800510c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d004      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a15      	ldr	r2, [pc, #84]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d10c      	bne.n	80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40000400 	.word	0x40000400
 8005100:	40000800 	.word	0x40000800
 8005104:	40000c00 	.word	0x40000c00
 8005108:	40010400 	.word	0x40010400
 800510c:	40014000 	.word	0x40014000
 8005110:	40001800 	.word	0x40001800

08005114 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005114:	b084      	sub	sp, #16
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	f107 001c 	add.w	r0, r7, #28
 8005122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	2b01      	cmp	r3, #1
 800512a:	d122      	bne.n	8005172 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005156:	2b01      	cmp	r3, #1
 8005158:	d105      	bne.n	8005166 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f94a 	bl	8005400 <USB_CoreReset>
 800516c:	4603      	mov	r3, r0
 800516e:	73fb      	strb	r3, [r7, #15]
 8005170:	e01a      	b.n	80051a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f93e 	bl	8005400 <USB_CoreReset>
 8005184:	4603      	mov	r3, r0
 8005186:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	639a      	str	r2, [r3, #56]	; 0x38
 800519a:	e005      	b.n	80051a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d10b      	bne.n	80051c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f043 0206 	orr.w	r2, r3, #6
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f043 0220 	orr.w	r2, r3, #32
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051d2:	b004      	add	sp, #16
 80051d4:	4770      	bx	lr

080051d6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f043 0201 	orr.w	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f023 0201 	bic.w	r2, r3, #1
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b082      	sub	sp, #8
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d106      	bne.n	8005246 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60da      	str	r2, [r3, #12]
 8005244:	e00b      	b.n	800525e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005246:	78fb      	ldrb	r3, [r7, #3]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d106      	bne.n	800525a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	60da      	str	r2, [r3, #12]
 8005258:	e001      	b.n	800525e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e003      	b.n	8005266 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800525e:	2032      	movs	r0, #50	; 0x32
 8005260:	f7fb fe9a 	bl	8000f98 <HAL_Delay>

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	019b      	lsls	r3, r3, #6
 8005282:	f043 0220 	orr.w	r2, r3, #32
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3301      	adds	r3, #1
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4a09      	ldr	r2, [pc, #36]	; (80052b8 <USB_FlushTxFifo+0x48>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d901      	bls.n	800529c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e006      	b.n	80052aa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d0f0      	beq.n	800528a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	00030d40 	.word	0x00030d40

080052bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2210      	movs	r2, #16
 80052cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	3301      	adds	r3, #1
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4a09      	ldr	r2, [pc, #36]	; (80052fc <USB_FlushRxFifo+0x40>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d901      	bls.n	80052e0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e006      	b.n	80052ee <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	d0f0      	beq.n	80052ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	00030d40 	.word	0x00030d40

08005300 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005300:	b480      	push	{r7}
 8005302:	b089      	sub	sp, #36	; 0x24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	4611      	mov	r1, r2
 800530c:	461a      	mov	r2, r3
 800530e:	460b      	mov	r3, r1
 8005310:	71fb      	strb	r3, [r7, #7]
 8005312:	4613      	mov	r3, r2
 8005314:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800531e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005322:	2b00      	cmp	r3, #0
 8005324:	d11a      	bne.n	800535c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005326:	88bb      	ldrh	r3, [r7, #4]
 8005328:	3303      	adds	r3, #3
 800532a:	089b      	lsrs	r3, r3, #2
 800532c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800532e:	2300      	movs	r3, #0
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	e00f      	b.n	8005354 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	031a      	lsls	r2, r3, #12
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	4413      	add	r3, r2
 800533c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005340:	461a      	mov	r2, r3
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	3304      	adds	r3, #4
 800534c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	3301      	adds	r3, #1
 8005352:	61bb      	str	r3, [r7, #24]
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	429a      	cmp	r2, r3
 800535a:	d3eb      	bcc.n	8005334 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3724      	adds	r7, #36	; 0x24
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800536a:	b480      	push	{r7}
 800536c:	b089      	sub	sp, #36	; 0x24
 800536e:	af00      	add	r7, sp, #0
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	4613      	mov	r3, r2
 8005376:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005380:	88fb      	ldrh	r3, [r7, #6]
 8005382:	3303      	adds	r3, #3
 8005384:	089b      	lsrs	r3, r3, #2
 8005386:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005388:	2300      	movs	r3, #0
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	e00b      	b.n	80053a6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	601a      	str	r2, [r3, #0]
    pDest++;
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	3304      	adds	r3, #4
 800539e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	3301      	adds	r3, #1
 80053a4:	61bb      	str	r3, [r7, #24]
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d3ef      	bcc.n	800538e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80053ae:	69fb      	ldr	r3, [r7, #28]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3724      	adds	r7, #36	; 0x24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4013      	ands	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053d4:	68fb      	ldr	r3, [r7, #12]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f003 0301 	and.w	r3, r3, #1
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
	...

08005400 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3301      	adds	r3, #1
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4a13      	ldr	r2, [pc, #76]	; (8005464 <USB_CoreReset+0x64>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e01b      	b.n	8005456 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	daf2      	bge.n	800540c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f043 0201 	orr.w	r2, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3301      	adds	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4a09      	ldr	r2, [pc, #36]	; (8005464 <USB_CoreReset+0x64>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d901      	bls.n	8005448 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e006      	b.n	8005456 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b01      	cmp	r3, #1
 8005452:	d0f0      	beq.n	8005436 <USB_CoreReset+0x36>

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	00030d40 	.word	0x00030d40

08005468 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005468:	b084      	sub	sp, #16
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	f107 001c 	add.w	r0, r7, #28
 8005476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005484:	461a      	mov	r2, r3
 8005486:	2300      	movs	r3, #0
 8005488:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d018      	beq.n	80054ec <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d10a      	bne.n	80054d6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054ce:	f043 0304 	orr.w	r3, r3, #4
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	e014      	b.n	8005500 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054e4:	f023 0304 	bic.w	r3, r3, #4
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	e009      	b.n	8005500 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054fa:	f023 0304 	bic.w	r3, r3, #4
 80054fe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005500:	2110      	movs	r1, #16
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7ff feb4 	bl	8005270 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff fed7 	bl	80052bc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	e015      	b.n	8005540 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4413      	add	r3, r2
 800551c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005520:	461a      	mov	r2, r3
 8005522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005526:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4413      	add	r3, r2
 8005530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005534:	461a      	mov	r2, r3
 8005536:	2300      	movs	r3, #0
 8005538:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	429a      	cmp	r2, r3
 8005546:	d3e5      	bcc.n	8005514 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005548:	2101      	movs	r1, #1
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f8ac 	bl	80056a8 <USB_DriveVbus>

  HAL_Delay(200U);
 8005550:	20c8      	movs	r0, #200	; 0xc8
 8005552:	f7fb fd21 	bl	8000f98 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005562:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00b      	beq.n	8005588 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005576:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a14      	ldr	r2, [pc, #80]	; (80055cc <USB_HostInit+0x164>)
 800557c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <USB_HostInit+0x168>)
 8005582:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005586:	e009      	b.n	800559c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2280      	movs	r2, #128	; 0x80
 800558c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a10      	ldr	r2, [pc, #64]	; (80055d4 <USB_HostInit+0x16c>)
 8005592:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a10      	ldr	r2, [pc, #64]	; (80055d8 <USB_HostInit+0x170>)
 8005598:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d105      	bne.n	80055ae <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f043 0210 	orr.w	r2, r3, #16
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699a      	ldr	r2, [r3, #24]
 80055b2:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <USB_HostInit+0x174>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055c6:	b004      	add	sp, #16
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	01000200 	.word	0x01000200
 80055d0:	00e00300 	.word	0x00e00300
 80055d4:	00600080 	.word	0x00600080
 80055d8:	004000e0 	.word	0x004000e0
 80055dc:	a3200008 	.word	0xa3200008

080055e0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055fe:	f023 0303 	bic.w	r3, r3, #3
 8005602:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	68f9      	ldr	r1, [r7, #12]
 8005614:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005618:	4313      	orrs	r3, r2
 800561a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d107      	bne.n	8005632 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005628:	461a      	mov	r2, r3
 800562a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800562e:	6053      	str	r3, [r2, #4]
 8005630:	e009      	b.n	8005646 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	2b02      	cmp	r3, #2
 8005636:	d106      	bne.n	8005646 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800563e:	461a      	mov	r2, r3
 8005640:	f241 7370 	movw	r3, #6000	; 0x1770
 8005644:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005674:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800567e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005682:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005684:	2064      	movs	r0, #100	; 0x64
 8005686:	f7fb fc87 	bl	8000f98 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005692:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005696:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005698:	200a      	movs	r0, #10
 800569a:	f7fb fc7d 	bl	8000f98 <HAL_Delay>

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80056cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <USB_DriveVbus+0x44>
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d106      	bne.n	80056ec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056ea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f6:	d109      	bne.n	800570c <USB_DriveVbus+0x64>
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800570a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800571a:	b480      	push	{r7}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	0c5b      	lsrs	r3, r3, #17
 8005738:	f003 0303 	and.w	r3, r3, #3
}
 800573c:	4618      	mov	r0, r3
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	b29b      	uxth	r3, r3
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	4608      	mov	r0, r1
 8005776:	4611      	mov	r1, r2
 8005778:	461a      	mov	r2, r3
 800577a:	4603      	mov	r3, r0
 800577c:	70fb      	strb	r3, [r7, #3]
 800577e:	460b      	mov	r3, r1
 8005780:	70bb      	strb	r3, [r7, #2]
 8005782:	4613      	mov	r3, r2
 8005784:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800578e:	78fb      	ldrb	r3, [r7, #3]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	4413      	add	r3, r2
 8005796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579a:	461a      	mov	r2, r3
 800579c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80057a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d87e      	bhi.n	80058a8 <USB_HC_Init+0x13c>
 80057aa:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <USB_HC_Init+0x44>)
 80057ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b0:	080057c1 	.word	0x080057c1
 80057b4:	0800586b 	.word	0x0800586b
 80057b8:	080057c1 	.word	0x080057c1
 80057bc:	0800582d 	.word	0x0800582d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057cc:	461a      	mov	r2, r3
 80057ce:	f240 439d 	movw	r3, #1181	; 0x49d
 80057d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80057d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	da10      	bge.n	80057fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057dc:	78fb      	ldrb	r3, [r7, #3]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	78fa      	ldrb	r2, [r7, #3]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057fa:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80057fc:	e057      	b.n	80058ae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005806:	2b00      	cmp	r3, #0
 8005808:	d051      	beq.n	80058ae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	4413      	add	r3, r2
 8005812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	78fa      	ldrb	r2, [r7, #3]
 800581a:	0151      	lsls	r1, r2, #5
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	440a      	add	r2, r1
 8005820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005824:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005828:	60d3      	str	r3, [r2, #12]
      break;
 800582a:	e040      	b.n	80058ae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4413      	add	r3, r2
 8005834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005838:	461a      	mov	r2, r3
 800583a:	f240 639d 	movw	r3, #1693	; 0x69d
 800583e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005840:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005844:	2b00      	cmp	r3, #0
 8005846:	da34      	bge.n	80058b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005848:	78fb      	ldrb	r3, [r7, #3]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4413      	add	r3, r2
 8005850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	78fa      	ldrb	r2, [r7, #3]
 8005858:	0151      	lsls	r1, r2, #5
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	440a      	add	r2, r1
 800585e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005866:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005868:	e023      	b.n	80058b2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800586a:	78fb      	ldrb	r3, [r7, #3]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4413      	add	r3, r2
 8005872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005876:	461a      	mov	r2, r3
 8005878:	f240 2325 	movw	r3, #549	; 0x225
 800587c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800587e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005882:	2b00      	cmp	r3, #0
 8005884:	da17      	bge.n	80058b6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005886:	78fb      	ldrb	r3, [r7, #3]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	4413      	add	r3, r2
 800588e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	78fa      	ldrb	r2, [r7, #3]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	440a      	add	r2, r1
 800589c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80058a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80058a6:	e006      	b.n	80058b6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	75fb      	strb	r3, [r7, #23]
      break;
 80058ac:	e004      	b.n	80058b8 <USB_HC_Init+0x14c>
      break;
 80058ae:	bf00      	nop
 80058b0:	e002      	b.n	80058b8 <USB_HC_Init+0x14c>
      break;
 80058b2:	bf00      	nop
 80058b4:	e000      	b.n	80058b8 <USB_HC_Init+0x14c>
      break;
 80058b6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058be:	699a      	ldr	r2, [r3, #24]
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	2101      	movs	r1, #1
 80058c8:	fa01 f303 	lsl.w	r3, r1, r3
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058d2:	4313      	orrs	r3, r2
 80058d4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80058e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	da03      	bge.n	80058f2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80058ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	e001      	b.n	80058f6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80058f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d103      	bne.n	8005906 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	e001      	b.n	800590a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800590a:	787b      	ldrb	r3, [r7, #1]
 800590c:	059b      	lsls	r3, r3, #22
 800590e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005912:	78bb      	ldrb	r3, [r7, #2]
 8005914:	02db      	lsls	r3, r3, #11
 8005916:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800591a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800591c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005920:	049b      	lsls	r3, r3, #18
 8005922:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005926:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005928:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800592a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800592e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	0159      	lsls	r1, r3, #5
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	440b      	add	r3, r1
 800593c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005940:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005946:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005948:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800594c:	2b03      	cmp	r3, #3
 800594e:	d10f      	bne.n	8005970 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4413      	add	r3, r2
 8005958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	78fa      	ldrb	r2, [r7, #3]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	440a      	add	r2, r1
 8005966:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800596a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800596e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005970:	7dfb      	ldrb	r3, [r7, #23]
}
 8005972:	4618      	mov	r0, r3
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop

08005980 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08c      	sub	sp, #48	; 0x30
 8005984:	af02      	add	r7, sp, #8
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	4613      	mov	r3, r2
 800598c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	785b      	ldrb	r3, [r3, #1]
 8005996:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800599c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d028      	beq.n	80059fc <USB_HC_StartXfer+0x7c>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	791b      	ldrb	r3, [r3, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d124      	bne.n	80059fc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10b      	bne.n	80059d0 <USB_HC_StartXfer+0x50>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	795b      	ldrb	r3, [r3, #5]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d107      	bne.n	80059d0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	4619      	mov	r1, r3
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fa2e 	bl	8005e28 <USB_DoPing>
      return HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	e112      	b.n	8005bf6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d112      	bne.n	80059fc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	6a3a      	ldr	r2, [r7, #32]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059f0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80059f4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2200      	movs	r2, #0
 80059fa:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d018      	beq.n	8005a36 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	8912      	ldrh	r2, [r2, #8]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	8912      	ldrh	r2, [r2, #8]
 8005a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a18:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005a1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a1c:	8b7b      	ldrh	r3, [r7, #26]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d90b      	bls.n	8005a3a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005a22:	8b7b      	ldrh	r3, [r7, #26]
 8005a24:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005a26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	8912      	ldrh	r2, [r2, #8]
 8005a2c:	fb02 f203 	mul.w	r2, r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	611a      	str	r2, [r3, #16]
 8005a34:	e001      	b.n	8005a3a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005a36:	2301      	movs	r3, #1
 8005a38:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	78db      	ldrb	r3, [r3, #3]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d006      	beq.n	8005a50 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005a42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	8912      	ldrh	r2, [r2, #8]
 8005a48:	fb02 f203 	mul.w	r2, r2, r3
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a5a:	04d9      	lsls	r1, r3, #19
 8005a5c:	4b68      	ldr	r3, [pc, #416]	; (8005c00 <USB_HC_StartXfer+0x280>)
 8005a5e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a60:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	7a9b      	ldrb	r3, [r3, #10]
 8005a66:	075b      	lsls	r3, r3, #29
 8005a68:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a6c:	69f9      	ldr	r1, [r7, #28]
 8005a6e:	0148      	lsls	r0, r1, #5
 8005a70:	6a39      	ldr	r1, [r7, #32]
 8005a72:	4401      	add	r1, r0
 8005a74:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a78:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a7a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a7c:	79fb      	ldrb	r3, [r7, #7]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d009      	beq.n	8005a96 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	68d9      	ldr	r1, [r3, #12]
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a92:	460a      	mov	r2, r1
 8005a94:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bf0c      	ite	eq
 8005aa6:	2301      	moveq	r3, #1
 8005aa8:	2300      	movne	r3, #0
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	6a3a      	ldr	r2, [r7, #32]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ac8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005acc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	7e7b      	ldrb	r3, [r7, #25]
 8005ade:	075b      	lsls	r3, r3, #29
 8005ae0:	69f9      	ldr	r1, [r7, #28]
 8005ae2:	0148      	lsls	r0, r1, #5
 8005ae4:	6a39      	ldr	r1, [r7, #32]
 8005ae6:	4401      	add	r1, r0
 8005ae8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005aec:	4313      	orrs	r3, r2
 8005aee:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a41      	ldr	r2, [pc, #260]	; (8005c04 <USB_HC_StartXfer+0x284>)
 8005b00:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b02:	4b40      	ldr	r3, [pc, #256]	; (8005c04 <USB_HC_StartXfer+0x284>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b0a:	4a3e      	ldr	r2, [pc, #248]	; (8005c04 <USB_HC_StartXfer+0x284>)
 8005b0c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	78db      	ldrb	r3, [r3, #3]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d006      	beq.n	8005b24 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005b16:	4b3b      	ldr	r3, [pc, #236]	; (8005c04 <USB_HC_StartXfer+0x284>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1e:	4a39      	ldr	r2, [pc, #228]	; (8005c04 <USB_HC_StartXfer+0x284>)
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	e005      	b.n	8005b30 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005b24:	4b37      	ldr	r3, [pc, #220]	; (8005c04 <USB_HC_StartXfer+0x284>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b2c:	4a35      	ldr	r2, [pc, #212]	; (8005c04 <USB_HC_StartXfer+0x284>)
 8005b2e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b30:	4b34      	ldr	r3, [pc, #208]	; (8005c04 <USB_HC_StartXfer+0x284>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b38:	4a32      	ldr	r2, [pc, #200]	; (8005c04 <USB_HC_StartXfer+0x284>)
 8005b3a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b48:	461a      	mov	r2, r3
 8005b4a:	4b2e      	ldr	r3, [pc, #184]	; (8005c04 <USB_HC_StartXfer+0x284>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005b50:	79fb      	ldrb	r3, [r7, #7]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d14e      	bne.n	8005bf4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	78db      	ldrb	r3, [r3, #3]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d14a      	bne.n	8005bf4 <USB_HC_StartXfer+0x274>
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d046      	beq.n	8005bf4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	79db      	ldrb	r3, [r3, #7]
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d830      	bhi.n	8005bd0 <USB_HC_StartXfer+0x250>
 8005b6e:	a201      	add	r2, pc, #4	; (adr r2, 8005b74 <USB_HC_StartXfer+0x1f4>)
 8005b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b74:	08005b85 	.word	0x08005b85
 8005b78:	08005ba9 	.word	0x08005ba9
 8005b7c:	08005b85 	.word	0x08005b85
 8005b80:	08005ba9 	.word	0x08005ba9
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	3303      	adds	r3, #3
 8005b8a:	089b      	lsrs	r3, r3, #2
 8005b8c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005b8e:	8afa      	ldrh	r2, [r7, #22]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d91c      	bls.n	8005bd4 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	f043 0220 	orr.w	r2, r3, #32
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	619a      	str	r2, [r3, #24]
          }
          break;
 8005ba6:	e015      	b.n	8005bd4 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	3303      	adds	r3, #3
 8005bae:	089b      	lsrs	r3, r3, #2
 8005bb0:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005bb2:	8afa      	ldrh	r2, [r7, #22]
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d90a      	bls.n	8005bd8 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	619a      	str	r2, [r3, #24]
          }
          break;
 8005bce:	e003      	b.n	8005bd8 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005bd0:	bf00      	nop
 8005bd2:	e002      	b.n	8005bda <USB_HC_StartXfer+0x25a>
          break;
 8005bd4:	bf00      	nop
 8005bd6:	e000      	b.n	8005bda <USB_HC_StartXfer+0x25a>
          break;
 8005bd8:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	68d9      	ldr	r1, [r3, #12]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	785a      	ldrb	r2, [r3, #1]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	b298      	uxth	r0, r3
 8005be8:	2300      	movs	r3, #0
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	4603      	mov	r3, r0
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f7ff fb86 	bl	8005300 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3728      	adds	r7, #40	; 0x28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	1ff80000 	.word	0x1ff80000
 8005c04:	200000b4 	.word	0x200000b4

08005c08 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	b29b      	uxth	r3, r3
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b087      	sub	sp, #28
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	460b      	mov	r3, r1
 8005c34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005c3a:	78fb      	ldrb	r3, [r7, #3]
 8005c3c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	0c9b      	lsrs	r3, r3, #18
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <USB_HC_Halt+0x3a>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d16c      	bne.n	8005d3e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c82:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d143      	bne.n	8005d18 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005caa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	0151      	lsls	r1, r2, #5
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	440a      	add	r2, r1
 8005cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	0151      	lsls	r1, r2, #5
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	440a      	add	r2, r1
 8005ce6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cee:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cfc:	d81d      	bhi.n	8005d3a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d14:	d0ec      	beq.n	8005cf0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d16:	e080      	b.n	8005e1a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d36:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d38:	e06f      	b.n	8005e1a <USB_HC_Halt+0x1f0>
          break;
 8005d3a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d3c:	e06d      	b.n	8005e1a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	0151      	lsls	r1, r2, #5
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	440a      	add	r2, r1
 8005d54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d5c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d143      	bne.n	8005df6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d8c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005da8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dac:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dcc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dda:	d81d      	bhi.n	8005e18 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df2:	d0ec      	beq.n	8005dce <USB_HC_Halt+0x1a4>
 8005df4:	e011      	b.n	8005e1a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	0151      	lsls	r1, r2, #5
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	e000      	b.n	8005e1a <USB_HC_Halt+0x1f0>
          break;
 8005e18:	bf00      	nop
    }
  }

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	04da      	lsls	r2, r3, #19
 8005e44:	4b15      	ldr	r3, [pc, #84]	; (8005e9c <USB_DoPing+0x74>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e58:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e70:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e78:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e86:	461a      	mov	r2, r3
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	1ff80000 	.word	0x1ff80000

08005ea0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7ff f9a1 	bl	80051f8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005eb6:	2110      	movs	r1, #16
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff f9d9 	bl	8005270 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff f9fc 	bl	80052bc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	613b      	str	r3, [r7, #16]
 8005ec8:	e01f      	b.n	8005f0a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ee0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ee8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ef0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efe:	461a      	mov	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	3301      	adds	r3, #1
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2b0f      	cmp	r3, #15
 8005f0e:	d9dc      	bls.n	8005eca <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005f10:	2300      	movs	r3, #0
 8005f12:	613b      	str	r3, [r7, #16]
 8005f14:	e034      	b.n	8005f80 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f2c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f34:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f3c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	3301      	adds	r3, #1
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f5c:	d80c      	bhi.n	8005f78 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f74:	d0ec      	beq.n	8005f50 <USB_StopHost+0xb0>
 8005f76:	e000      	b.n	8005f7a <USB_StopHost+0xda>
        break;
 8005f78:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	2b0f      	cmp	r3, #15
 8005f84:	d9c7      	bls.n	8005f16 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f92:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f9a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff f91a 	bl	80051d6 <USB_EnableGlobalInt>

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005fac:	b590      	push	{r4, r7, lr}
 8005fae:	b089      	sub	sp, #36	; 0x24
 8005fb0:	af04      	add	r7, sp, #16
 8005fb2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005fb8:	2301      	movs	r3, #1
 8005fba:	2202      	movs	r2, #2
 8005fbc:	2102      	movs	r1, #2
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fc3a 	bl	8006838 <USBH_FindInterface>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005fc8:	7bbb      	ldrb	r3, [r7, #14]
 8005fca:	2bff      	cmp	r3, #255	; 0xff
 8005fcc:	f000 812a 	beq.w	8006224 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005fd0:	7bbb      	ldrb	r3, [r7, #14]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fc13 	bl	8006800 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005fe0:	2050      	movs	r0, #80	; 0x50
 8005fe2:	f002 f8df 	bl	80081a4 <malloc>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005ff4:	7bbb      	ldrb	r3, [r7, #14]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	211a      	movs	r1, #26
 8005ffa:	fb01 f303 	mul.w	r3, r1, r3
 8005ffe:	4413      	add	r3, r2
 8006000:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	b25b      	sxtb	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	da15      	bge.n	8006038 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800600c:	7bbb      	ldrb	r3, [r7, #14]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	211a      	movs	r1, #26
 8006012:	fb01 f303 	mul.w	r3, r1, r3
 8006016:	4413      	add	r3, r2
 8006018:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800601c:	781a      	ldrb	r2, [r3, #0]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006022:	7bbb      	ldrb	r3, [r7, #14]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	211a      	movs	r1, #26
 8006028:	fb01 f303 	mul.w	r3, r1, r3
 800602c:	4413      	add	r3, r2
 800602e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006032:	881a      	ldrh	r2, [r3, #0]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	785b      	ldrb	r3, [r3, #1]
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f001 fd21 	bl	8007a86 <USBH_AllocPipe>
 8006044:	4603      	mov	r3, r0
 8006046:	461a      	mov	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	7819      	ldrb	r1, [r3, #0]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	7858      	ldrb	r0, [r3, #1]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	8952      	ldrh	r2, [r2, #10]
 8006064:	9202      	str	r2, [sp, #8]
 8006066:	2203      	movs	r2, #3
 8006068:	9201      	str	r2, [sp, #4]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	4623      	mov	r3, r4
 800606e:	4602      	mov	r2, r0
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 fcd9 	bl	8007a28 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2200      	movs	r2, #0
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f001 ffe0 	bl	8008044 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006084:	2300      	movs	r3, #0
 8006086:	2200      	movs	r2, #0
 8006088:	210a      	movs	r1, #10
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fbd4 	bl	8006838 <USBH_FindInterface>
 8006090:	4603      	mov	r3, r0
 8006092:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006094:	7bbb      	ldrb	r3, [r7, #14]
 8006096:	2bff      	cmp	r3, #255	; 0xff
 8006098:	f000 80c4 	beq.w	8006224 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800609c:	7bbb      	ldrb	r3, [r7, #14]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	211a      	movs	r1, #26
 80060a2:	fb01 f303 	mul.w	r3, r1, r3
 80060a6:	4413      	add	r3, r2
 80060a8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	b25b      	sxtb	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	da16      	bge.n	80060e2 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060b4:	7bbb      	ldrb	r3, [r7, #14]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	211a      	movs	r1, #26
 80060ba:	fb01 f303 	mul.w	r3, r1, r3
 80060be:	4413      	add	r3, r2
 80060c0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80060c4:	781a      	ldrb	r2, [r3, #0]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060ca:	7bbb      	ldrb	r3, [r7, #14]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	211a      	movs	r1, #26
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80060da:	881a      	ldrh	r2, [r3, #0]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	835a      	strh	r2, [r3, #26]
 80060e0:	e015      	b.n	800610e <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060e2:	7bbb      	ldrb	r3, [r7, #14]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	211a      	movs	r1, #26
 80060e8:	fb01 f303 	mul.w	r3, r1, r3
 80060ec:	4413      	add	r3, r2
 80060ee:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80060f2:	781a      	ldrb	r2, [r3, #0]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060f8:	7bbb      	ldrb	r3, [r7, #14]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	211a      	movs	r1, #26
 80060fe:	fb01 f303 	mul.w	r3, r1, r3
 8006102:	4413      	add	r3, r2
 8006104:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006108:	881a      	ldrh	r2, [r3, #0]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800610e:	7bbb      	ldrb	r3, [r7, #14]
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	211a      	movs	r1, #26
 8006114:	fb01 f303 	mul.w	r3, r1, r3
 8006118:	4413      	add	r3, r2
 800611a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	b25b      	sxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	da16      	bge.n	8006154 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006126:	7bbb      	ldrb	r3, [r7, #14]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	211a      	movs	r1, #26
 800612c:	fb01 f303 	mul.w	r3, r1, r3
 8006130:	4413      	add	r3, r2
 8006132:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006136:	781a      	ldrb	r2, [r3, #0]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800613c:	7bbb      	ldrb	r3, [r7, #14]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	211a      	movs	r1, #26
 8006142:	fb01 f303 	mul.w	r3, r1, r3
 8006146:	4413      	add	r3, r2
 8006148:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800614c:	881a      	ldrh	r2, [r3, #0]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	835a      	strh	r2, [r3, #26]
 8006152:	e015      	b.n	8006180 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006154:	7bbb      	ldrb	r3, [r7, #14]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	211a      	movs	r1, #26
 800615a:	fb01 f303 	mul.w	r3, r1, r3
 800615e:	4413      	add	r3, r2
 8006160:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006164:	781a      	ldrb	r2, [r3, #0]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800616a:	7bbb      	ldrb	r3, [r7, #14]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	211a      	movs	r1, #26
 8006170:	fb01 f303 	mul.w	r3, r1, r3
 8006174:	4413      	add	r3, r2
 8006176:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800617a:	881a      	ldrh	r2, [r3, #0]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	7b9b      	ldrb	r3, [r3, #14]
 8006184:	4619      	mov	r1, r3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f001 fc7d 	bl	8007a86 <USBH_AllocPipe>
 800618c:	4603      	mov	r3, r0
 800618e:	461a      	mov	r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	7bdb      	ldrb	r3, [r3, #15]
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 fc73 	bl	8007a86 <USBH_AllocPipe>
 80061a0:	4603      	mov	r3, r0
 80061a2:	461a      	mov	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	7b59      	ldrb	r1, [r3, #13]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	7b98      	ldrb	r0, [r3, #14]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	8b12      	ldrh	r2, [r2, #24]
 80061c0:	9202      	str	r2, [sp, #8]
 80061c2:	2202      	movs	r2, #2
 80061c4:	9201      	str	r2, [sp, #4]
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	4623      	mov	r3, r4
 80061ca:	4602      	mov	r2, r0
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f001 fc2b 	bl	8007a28 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	7b19      	ldrb	r1, [r3, #12]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	7bd8      	ldrb	r0, [r3, #15]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	8b52      	ldrh	r2, [r2, #26]
 80061ea:	9202      	str	r2, [sp, #8]
 80061ec:	2202      	movs	r2, #2
 80061ee:	9201      	str	r2, [sp, #4]
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	4623      	mov	r3, r4
 80061f4:	4602      	mov	r2, r0
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f001 fc16 	bl	8007a28 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	7b5b      	ldrb	r3, [r3, #13]
 8006208:	2200      	movs	r2, #0
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f001 ff19 	bl	8008044 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	7b1b      	ldrb	r3, [r3, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f001 ff12 	bl	8008044 <USBH_LL_SetToggle>
      status = USBH_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006224:	7bfb      	ldrb	r3, [r7, #15]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	bd90      	pop	{r4, r7, pc}

0800622e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00e      	beq.n	8006266 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f001 fc09 	bl	8007a66 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f001 fc31 	bl	8007ac2 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	7b1b      	ldrb	r3, [r3, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00e      	beq.n	800628c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	7b1b      	ldrb	r3, [r3, #12]
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 fbf6 	bl	8007a66 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	7b1b      	ldrb	r3, [r3, #12]
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f001 fc1e 	bl	8007ac2 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	7b5b      	ldrb	r3, [r3, #13]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00e      	beq.n	80062b2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	7b5b      	ldrb	r3, [r3, #13]
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 fbe3 	bl	8007a66 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	7b5b      	ldrb	r3, [r3, #13]
 80062a4:	4619      	mov	r1, r3
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 fc0b 	bl	8007ac2 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00b      	beq.n	80062d6 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f001 ff74 	bl	80081b4 <free>
    phost->pActiveClass->pData = 0U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062d2:	2200      	movs	r2, #0
 80062d4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80062e8:	2302      	movs	r3, #2
 80062ea:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	3340      	adds	r3, #64	; 0x40
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f8b2 	bl	8006466 <GetLineCoding>
 8006302:	4603      	mov	r3, r0
 8006304:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8006306:	7bfb      	ldrb	r3, [r7, #15]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d105      	bne.n	8006318 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006312:	2102      	movs	r1, #2
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	4798      	blx	r3
  }
  return status;
 8006318:	7bfb      	ldrb	r3, [r7, #15]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800632c:	2301      	movs	r3, #1
 800632e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006344:	2b04      	cmp	r3, #4
 8006346:	d877      	bhi.n	8006438 <USBH_CDC_Process+0x114>
 8006348:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <USBH_CDC_Process+0x2c>)
 800634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634e:	bf00      	nop
 8006350:	08006365 	.word	0x08006365
 8006354:	0800636b 	.word	0x0800636b
 8006358:	0800639b 	.word	0x0800639b
 800635c:	0800640f 	.word	0x0800640f
 8006360:	0800641d 	.word	0x0800641d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	73fb      	strb	r3, [r7, #15]
    break;
 8006368:	e06d      	b.n	8006446 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800636e:	4619      	mov	r1, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f897 	bl	80064a4 <SetLineCoding>
 8006376:	4603      	mov	r3, r0
 8006378:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800637a:	7bbb      	ldrb	r3, [r7, #14]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d104      	bne.n	800638a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006388:	e058      	b.n	800643c <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800638a:	7bbb      	ldrb	r3, [r7, #14]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d055      	beq.n	800643c <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2204      	movs	r2, #4
 8006394:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006398:	e050      	b.n	800643c <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	3340      	adds	r3, #64	; 0x40
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f860 	bl	8006466 <GetLineCoding>
 80063a6:	4603      	mov	r3, r0
 80063a8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80063aa:	7bbb      	ldrb	r3, [r7, #14]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d126      	bne.n	80063fe <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c2:	791b      	ldrb	r3, [r3, #4]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d13b      	bne.n	8006440 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d2:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d133      	bne.n	8006440 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e2:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d12b      	bne.n	8006440 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f0:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d124      	bne.n	8006440 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f95a 	bl	80066b0 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80063fc:	e020      	b.n	8006440 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d01d      	beq.n	8006440 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2204      	movs	r2, #4
 8006408:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800640c:	e018      	b.n	8006440 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f867 	bl	80064e2 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f8dc 	bl	80065d2 <CDC_ProcessReception>
    break;
 800641a:	e014      	b.n	8006446 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800641c:	2100      	movs	r1, #0
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fece 	bl	80071c0 <USBH_ClrFeature>
 8006424:	4603      	mov	r3, r0
 8006426:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8006428:	7bbb      	ldrb	r3, [r7, #14]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10a      	bne.n	8006444 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8006436:	e005      	b.n	8006444 <USBH_CDC_Process+0x120>

  default:
    break;
 8006438:	bf00      	nop
 800643a:	e004      	b.n	8006446 <USBH_CDC_Process+0x122>
    break;
 800643c:	bf00      	nop
 800643e:	e002      	b.n	8006446 <USBH_CDC_Process+0x122>
    break;
 8006440:	bf00      	nop
 8006442:	e000      	b.n	8006446 <USBH_CDC_Process+0x122>
    break;
 8006444:	bf00      	nop

  }

  return status;
 8006446:	7bfb      	ldrb	r3, [r7, #15]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b082      	sub	sp, #8
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	22a1      	movs	r2, #161	; 0xa1
 8006474:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2221      	movs	r2, #33	; 0x21
 800647a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2207      	movs	r2, #7
 800648c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2207      	movs	r2, #7
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 f873 	bl	8007580 <USBH_CtlReq>
 800649a:	4603      	mov	r3, r0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2221      	movs	r2, #33	; 0x21
 80064b2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2207      	movs	r2, #7
 80064ca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2207      	movs	r2, #7
 80064d0:	4619      	mov	r1, r3
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f001 f854 	bl	8007580 <USBH_CtlReq>
 80064d8:	4603      	mov	r3, r0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b086      	sub	sp, #24
 80064e6:	af02      	add	r7, sp, #8
 80064e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80064f4:	2300      	movs	r3, #0
 80064f6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d002      	beq.n	8006508 <CDC_ProcessTransmission+0x26>
 8006502:	2b02      	cmp	r3, #2
 8006504:	d025      	beq.n	8006552 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8006506:	e060      	b.n	80065ca <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	8b12      	ldrh	r2, [r2, #24]
 8006510:	4293      	cmp	r3, r2
 8006512:	d90c      	bls.n	800652e <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	69d9      	ldr	r1, [r3, #28]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8b1a      	ldrh	r2, [r3, #24]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	7b58      	ldrb	r0, [r3, #13]
 8006520:	2301      	movs	r3, #1
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	4603      	mov	r3, r0
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 fa3b 	bl	80079a2 <USBH_BulkSendData>
 800652c:	e00c      	b.n	8006548 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	7b58      	ldrb	r0, [r3, #13]
 800653c:	2301      	movs	r3, #1
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	4603      	mov	r3, r0
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 fa2d 	bl	80079a2 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006550:	e03b      	b.n	80065ca <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	7b5b      	ldrb	r3, [r3, #13]
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 fd49 	bl	8007ff0 <USBH_LL_GetURBState>
 800655e:	4603      	mov	r3, r0
 8006560:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006562:	7afb      	ldrb	r3, [r7, #11]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d128      	bne.n	80065ba <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	8b12      	ldrh	r2, [r2, #24]
 8006570:	4293      	cmp	r3, r2
 8006572:	d90e      	bls.n	8006592 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	8b12      	ldrh	r2, [r2, #24]
 800657c:	1a9a      	subs	r2, r3, r2
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	8b12      	ldrh	r2, [r2, #24]
 800658a:	441a      	add	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	61da      	str	r2, [r3, #28]
 8006590:	e002      	b.n	8006598 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659c:	2b00      	cmp	r3, #0
 800659e:	d004      	beq.n	80065aa <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80065a8:	e00e      	b.n	80065c8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f868 	bl	8006688 <USBH_CDC_TransmitCallback>
    break;
 80065b8:	e006      	b.n	80065c8 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 80065ba:	7afb      	ldrb	r3, [r7, #11]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d103      	bne.n	80065c8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80065c8:	bf00      	nop
  }
}
 80065ca:	bf00      	nop
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b086      	sub	sp, #24
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80065e4:	2300      	movs	r3, #0
 80065e6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d002      	beq.n	80065f8 <CDC_ProcessReception+0x26>
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	d00e      	beq.n	8006614 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80065f6:	e043      	b.n	8006680 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	6a19      	ldr	r1, [r3, #32]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	8b5a      	ldrh	r2, [r3, #26]
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	7b1b      	ldrb	r3, [r3, #12]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 f9f1 	bl	80079ec <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2204      	movs	r2, #4
 800660e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006612:	e035      	b.n	8006680 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	7b1b      	ldrb	r3, [r3, #12]
 8006618:	4619      	mov	r1, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f001 fce8 	bl	8007ff0 <USBH_LL_GetURBState>
 8006620:	4603      	mov	r3, r0
 8006622:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006624:	7cfb      	ldrb	r3, [r7, #19]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d129      	bne.n	800667e <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	7b1b      	ldrb	r3, [r3, #12]
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 fc4b 	bl	8007ecc <USBH_LL_GetLastXferSize>
 8006636:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	429a      	cmp	r2, r3
 8006640:	d016      	beq.n	8006670 <CDC_ProcessReception+0x9e>
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	8b5b      	ldrh	r3, [r3, #26]
 8006646:	461a      	mov	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4293      	cmp	r3, r2
 800664c:	d910      	bls.n	8006670 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1ad2      	subs	r2, r2, r3
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	6a1a      	ldr	r2, [r3, #32]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	441a      	add	r2, r3
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2203      	movs	r2, #3
 800666a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800666e:	e006      	b.n	800667e <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f80f 	bl	800669c <USBH_CDC_ReceiveCallback>
    break;
 800667e:	bf00      	nop
  }
}
 8006680:	bf00      	nop
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]

}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]

}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]

}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	4613      	mov	r3, r2
 80066d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80066d8:	2302      	movs	r3, #2
 80066da:	e019      	b.n	8006710 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	79fa      	ldrb	r2, [r7, #7]
 80066e0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f80f 	bl	8006718 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f001 fb2d 	bl	8007d68 <USBH_LL_Init>

  return USBH_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006724:	e008      	b.n	8006738 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	32e0      	adds	r2, #224	; 0xe0
 800672c:	2100      	movs	r1, #0
 800672e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3301      	adds	r3, #1
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b0e      	cmp	r3, #14
 800673c:	d9f3      	bls.n	8006726 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]
 8006742:	e009      	b.n	8006758 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800674e:	2200      	movs	r2, #0
 8006750:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	3301      	adds	r3, #1
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800675e:	d3f1      	bcc.n	8006744 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2240      	movs	r2, #64	; 0x40
 8006784:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b085      	sub	sp, #20
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d017      	beq.n	80067ee <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10f      	bne.n	80067e8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067ce:	1c59      	adds	r1, r3, #1
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	33dc      	adds	r3, #220	; 0xdc
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	73fb      	strb	r3, [r7, #15]
 80067e6:	e004      	b.n	80067f2 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80067e8:	2302      	movs	r3, #2
 80067ea:	73fb      	strb	r3, [r7, #15]
 80067ec:	e001      	b.n	80067f2 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80067ee:	2302      	movs	r3, #2
 80067f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006816:	78fa      	ldrb	r2, [r7, #3]
 8006818:	429a      	cmp	r2, r3
 800681a:	d204      	bcs.n	8006826 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	78fa      	ldrb	r2, [r7, #3]
 8006820:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006824:	e001      	b.n	800682a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006826:	2302      	movs	r3, #2
 8006828:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800682a:	7bfb      	ldrb	r3, [r7, #15]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	4608      	mov	r0, r1
 8006842:	4611      	mov	r1, r2
 8006844:	461a      	mov	r2, r3
 8006846:	4603      	mov	r3, r0
 8006848:	70fb      	strb	r3, [r7, #3]
 800684a:	460b      	mov	r3, r1
 800684c:	70bb      	strb	r3, [r7, #2]
 800684e:	4613      	mov	r3, r2
 8006850:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006856:	2300      	movs	r3, #0
 8006858:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006860:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006862:	e025      	b.n	80068b0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006864:	7dfb      	ldrb	r3, [r7, #23]
 8006866:	221a      	movs	r2, #26
 8006868:	fb02 f303 	mul.w	r3, r2, r3
 800686c:	3308      	adds	r3, #8
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4413      	add	r3, r2
 8006872:	3302      	adds	r3, #2
 8006874:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	795b      	ldrb	r3, [r3, #5]
 800687a:	78fa      	ldrb	r2, [r7, #3]
 800687c:	429a      	cmp	r2, r3
 800687e:	d002      	beq.n	8006886 <USBH_FindInterface+0x4e>
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	2bff      	cmp	r3, #255	; 0xff
 8006884:	d111      	bne.n	80068aa <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800688a:	78ba      	ldrb	r2, [r7, #2]
 800688c:	429a      	cmp	r2, r3
 800688e:	d002      	beq.n	8006896 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006890:	78bb      	ldrb	r3, [r7, #2]
 8006892:	2bff      	cmp	r3, #255	; 0xff
 8006894:	d109      	bne.n	80068aa <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800689a:	787a      	ldrb	r2, [r7, #1]
 800689c:	429a      	cmp	r2, r3
 800689e:	d002      	beq.n	80068a6 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80068a0:	787b      	ldrb	r3, [r7, #1]
 80068a2:	2bff      	cmp	r3, #255	; 0xff
 80068a4:	d101      	bne.n	80068aa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
 80068a8:	e006      	b.n	80068b8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
 80068ac:	3301      	adds	r3, #1
 80068ae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d9d6      	bls.n	8006864 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80068b6:	23ff      	movs	r3, #255	; 0xff
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	371c      	adds	r7, #28
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 fa87 	bl	8007de0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80068d2:	2101      	movs	r1, #1
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 fb9e 	bl	8008016 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af04      	add	r7, sp, #16
 80068ea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80068ec:	2302      	movs	r3, #2
 80068ee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 faec 	bl	8006ed2 <USBH_IsPortEnabled>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10c      	bne.n	800691a <USBH_Process+0x36>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d007      	beq.n	800691a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b03      	cmp	r3, #3
 8006912:	d002      	beq.n	800691a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2203      	movs	r2, #3
 8006918:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b0b      	cmp	r3, #11
 8006922:	f200 814c 	bhi.w	8006bbe <USBH_Process+0x2da>
 8006926:	a201      	add	r2, pc, #4	; (adr r2, 800692c <USBH_Process+0x48>)
 8006928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692c:	0800695d 	.word	0x0800695d
 8006930:	0800697f 	.word	0x0800697f
 8006934:	08006993 	.word	0x08006993
 8006938:	08006b99 	.word	0x08006b99
 800693c:	08006bbf 	.word	0x08006bbf
 8006940:	08006a21 	.word	0x08006a21
 8006944:	08006b4f 	.word	0x08006b4f
 8006948:	08006a51 	.word	0x08006a51
 800694c:	08006a71 	.word	0x08006a71
 8006950:	08006a91 	.word	0x08006a91
 8006954:	08006abf 	.word	0x08006abf
 8006958:	08006b81 	.word	0x08006b81
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 812c 	beq.w	8006bc2 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006970:	20c8      	movs	r0, #200	; 0xc8
 8006972:	f001 fb9a 	bl	80080aa <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f001 fa8d 	bl	8007e96 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800697c:	e121      	b.n	8006bc2 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006984:	2b01      	cmp	r3, #1
 8006986:	f040 811e 	bne.w	8006bc6 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2202      	movs	r2, #2
 800698e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006990:	e119      	b.n	8006bc6 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006992:	2064      	movs	r0, #100	; 0x64
 8006994:	f001 fb89 	bl	80080aa <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f001 fa57 	bl	8007e4c <USBH_LL_GetSpeed>
 800699e:	4603      	mov	r3, r0
 80069a0:	461a      	mov	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2205      	movs	r2, #5
 80069ac:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80069ae:	2100      	movs	r1, #0
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 f868 	bl	8007a86 <USBH_AllocPipe>
 80069b6:	4603      	mov	r3, r0
 80069b8:	461a      	mov	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80069be:	2180      	movs	r1, #128	; 0x80
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f001 f860 	bl	8007a86 <USBH_AllocPipe>
 80069c6:	4603      	mov	r3, r0
 80069c8:	461a      	mov	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	7919      	ldrb	r1, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80069e2:	b292      	uxth	r2, r2
 80069e4:	9202      	str	r2, [sp, #8]
 80069e6:	2200      	movs	r2, #0
 80069e8:	9201      	str	r2, [sp, #4]
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	4603      	mov	r3, r0
 80069ee:	2280      	movs	r2, #128	; 0x80
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 f819 	bl	8007a28 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	7959      	ldrb	r1, [r3, #5]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006a0a:	b292      	uxth	r2, r2
 8006a0c:	9202      	str	r2, [sp, #8]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	9201      	str	r2, [sp, #4]
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	4603      	mov	r3, r0
 8006a16:	2200      	movs	r2, #0
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 f805 	bl	8007a28 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006a1e:	e0e3      	b.n	8006be8 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f8e7 	bl	8006bf4 <USBH_HandleEnum>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f040 80ce 	bne.w	8006bca <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d103      	bne.n	8006a48 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2208      	movs	r2, #8
 8006a44:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006a46:	e0c0      	b.n	8006bca <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2207      	movs	r2, #7
 8006a4c:	701a      	strb	r2, [r3, #0]
    break;
 8006a4e:	e0bc      	b.n	8006bca <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 80b9 	beq.w	8006bce <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006a62:	2101      	movs	r1, #1
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2208      	movs	r2, #8
 8006a6c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006a6e:	e0ae      	b.n	8006bce <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fb59 	bl	8007132 <USBH_SetCfg>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f040 80a5 	bne.w	8006bd2 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2209      	movs	r2, #9
 8006a8c:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006a8e:	e0a0      	b.n	8006bd2 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00b      	beq.n	8006ab6 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fb69 	bl	8007178 <USBH_SetFeature>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f040 8094 	bne.w	8006bd6 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	220a      	movs	r2, #10
 8006ab2:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006ab4:	e08f      	b.n	8006bd6 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	220a      	movs	r2, #10
 8006aba:	701a      	strb	r2, [r3, #0]
    break;
 8006abc:	e08b      	b.n	8006bd6 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 8088 	beq.w	8006bda <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	73fb      	strb	r3, [r7, #15]
 8006ad6:	e017      	b.n	8006b08 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	33dc      	adds	r3, #220	; 0xdc
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	791a      	ldrb	r2, [r3, #4]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d108      	bne.n	8006b02 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	33dc      	adds	r3, #220	; 0xdc
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
 8006b04:	3301      	adds	r3, #1
 8006b06:	73fb      	strb	r3, [r7, #15]
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0e4      	beq.n	8006ad8 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d016      	beq.n	8006b46 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	4798      	blx	r3
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d109      	bne.n	8006b3e <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2206      	movs	r2, #6
 8006b2e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b36:	2103      	movs	r1, #3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006b3c:	e04d      	b.n	8006bda <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	220d      	movs	r2, #13
 8006b42:	701a      	strb	r2, [r3, #0]
    break;
 8006b44:	e049      	b.n	8006bda <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	220d      	movs	r2, #13
 8006b4a:	701a      	strb	r2, [r3, #0]
    break;
 8006b4c:	e045      	b.n	8006bda <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00f      	beq.n	8006b78 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	4798      	blx	r3
 8006b64:	4603      	mov	r3, r0
 8006b66:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d136      	bne.n	8006bde <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	220b      	movs	r2, #11
 8006b74:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8006b76:	e032      	b.n	8006bde <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	220d      	movs	r2, #13
 8006b7c:	701a      	strb	r2, [r3, #0]
    break;
 8006b7e:	e02e      	b.n	8006bde <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d02b      	beq.n	8006be2 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
    }
    break;
 8006b96:	e024      	b.n	8006be2 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff fdbd 	bl	8006718 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d01e      	beq.n	8006be6 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8006bbc:	e013      	b.n	8006be6 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8006bbe:	bf00      	nop
 8006bc0:	e012      	b.n	8006be8 <USBH_Process+0x304>
    break;
 8006bc2:	bf00      	nop
 8006bc4:	e010      	b.n	8006be8 <USBH_Process+0x304>
    break;
 8006bc6:	bf00      	nop
 8006bc8:	e00e      	b.n	8006be8 <USBH_Process+0x304>
    break;
 8006bca:	bf00      	nop
 8006bcc:	e00c      	b.n	8006be8 <USBH_Process+0x304>
    break;
 8006bce:	bf00      	nop
 8006bd0:	e00a      	b.n	8006be8 <USBH_Process+0x304>
    break;
 8006bd2:	bf00      	nop
 8006bd4:	e008      	b.n	8006be8 <USBH_Process+0x304>
    break;
 8006bd6:	bf00      	nop
 8006bd8:	e006      	b.n	8006be8 <USBH_Process+0x304>
    break;
 8006bda:	bf00      	nop
 8006bdc:	e004      	b.n	8006be8 <USBH_Process+0x304>
    break;
 8006bde:	bf00      	nop
 8006be0:	e002      	b.n	8006be8 <USBH_Process+0x304>
    break;
 8006be2:	bf00      	nop
 8006be4:	e000      	b.n	8006be8 <USBH_Process+0x304>
    break;
 8006be6:	bf00      	nop
  }
 return USBH_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop

08006bf4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b088      	sub	sp, #32
 8006bf8:	af04      	add	r7, sp, #16
 8006bfa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	785b      	ldrb	r3, [r3, #1]
 8006c04:	2b07      	cmp	r3, #7
 8006c06:	f200 80f8 	bhi.w	8006dfa <USBH_HandleEnum+0x206>
 8006c0a:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <USBH_HandleEnum+0x1c>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c31 	.word	0x08006c31
 8006c14:	08006ca3 	.word	0x08006ca3
 8006c18:	08006cbb 	.word	0x08006cbb
 8006c1c:	08006d31 	.word	0x08006d31
 8006c20:	08006d47 	.word	0x08006d47
 8006c24:	08006d63 	.word	0x08006d63
 8006c28:	08006d97 	.word	0x08006d97
 8006c2c:	08006dcb 	.word	0x08006dcb
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006c30:	2108      	movs	r1, #8
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f9ad 	bl	8006f92 <USBH_Get_DevDesc>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f040 80df 	bne.w	8006dfe <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	7919      	ldrb	r1, [r3, #4]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006c64:	b292      	uxth	r2, r2
 8006c66:	9202      	str	r2, [sp, #8]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	9201      	str	r2, [sp, #4]
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2280      	movs	r2, #128	; 0x80
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fed8 	bl	8007a28 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	7959      	ldrb	r1, [r3, #5]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006c8c:	b292      	uxth	r2, r2
 8006c8e:	9202      	str	r2, [sp, #8]
 8006c90:	2200      	movs	r2, #0
 8006c92:	9201      	str	r2, [sp, #4]
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	4603      	mov	r3, r0
 8006c98:	2200      	movs	r2, #0
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fec4 	bl	8007a28 <USBH_OpenPipe>

    }
    break;
 8006ca0:	e0ad      	b.n	8006dfe <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8006ca2:	2112      	movs	r1, #18
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f974 	bl	8006f92 <USBH_Get_DevDesc>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f040 80a8 	bne.w	8006e02 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	705a      	strb	r2, [r3, #1]

    }
    break;
 8006cb8:	e0a3      	b.n	8006e02 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8006cba:	2101      	movs	r1, #1
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fa14 	bl	80070ea <USBH_SetAddress>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f040 809e 	bne.w	8006e06 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8006cca:	2002      	movs	r0, #2
 8006ccc:	f001 f9ed 	bl	80080aa <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2203      	movs	r2, #3
 8006cdc:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	7919      	ldrb	r1, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006cf2:	b292      	uxth	r2, r2
 8006cf4:	9202      	str	r2, [sp, #8]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	9201      	str	r2, [sp, #4]
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2280      	movs	r2, #128	; 0x80
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fe91 	bl	8007a28 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	7959      	ldrb	r1, [r3, #5]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006d1a:	b292      	uxth	r2, r2
 8006d1c:	9202      	str	r2, [sp, #8]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	9201      	str	r2, [sp, #4]
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	4603      	mov	r3, r0
 8006d26:	2200      	movs	r2, #0
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fe7d 	bl	8007a28 <USBH_OpenPipe>
    }
    break;
 8006d2e:	e06a      	b.n	8006e06 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8006d30:	2109      	movs	r1, #9
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f955 	bl	8006fe2 <USBH_Get_CfgDesc>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d165      	bne.n	8006e0a <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2204      	movs	r2, #4
 8006d42:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006d44:	e061      	b.n	8006e0a <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f947 	bl	8006fe2 <USBH_Get_CfgDesc>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d159      	bne.n	8006e0e <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2205      	movs	r2, #5
 8006d5e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006d60:	e055      	b.n	8006e0e <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d010      	beq.n	8006d8e <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006d78:	23ff      	movs	r3, #255	; 0xff
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f955 	bl	800702a <USBH_Get_StringDesc>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d145      	bne.n	8006e12 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2206      	movs	r2, #6
 8006d8a:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006d8c:	e041      	b.n	8006e12 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2206      	movs	r2, #6
 8006d92:	705a      	strb	r2, [r3, #1]
    break;
 8006d94:	e03d      	b.n	8006e12 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d010      	beq.n	8006dc2 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006dac:	23ff      	movs	r3, #255	; 0xff
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f93b 	bl	800702a <USBH_Get_StringDesc>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d12d      	bne.n	8006e16 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2207      	movs	r2, #7
 8006dbe:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006dc0:	e029      	b.n	8006e16 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2207      	movs	r2, #7
 8006dc6:	705a      	strb	r2, [r3, #1]
    break;
 8006dc8:	e025      	b.n	8006e16 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00f      	beq.n	8006df4 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006de0:	23ff      	movs	r3, #255	; 0xff
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f921 	bl	800702a <USBH_Get_StringDesc>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d115      	bne.n	8006e1a <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006df2:	e012      	b.n	8006e1a <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	73fb      	strb	r3, [r7, #15]
    break;
 8006df8:	e00f      	b.n	8006e1a <USBH_HandleEnum+0x226>

  default:
    break;
 8006dfa:	bf00      	nop
 8006dfc:	e00e      	b.n	8006e1c <USBH_HandleEnum+0x228>
    break;
 8006dfe:	bf00      	nop
 8006e00:	e00c      	b.n	8006e1c <USBH_HandleEnum+0x228>
    break;
 8006e02:	bf00      	nop
 8006e04:	e00a      	b.n	8006e1c <USBH_HandleEnum+0x228>
    break;
 8006e06:	bf00      	nop
 8006e08:	e008      	b.n	8006e1c <USBH_HandleEnum+0x228>
    break;
 8006e0a:	bf00      	nop
 8006e0c:	e006      	b.n	8006e1c <USBH_HandleEnum+0x228>
    break;
 8006e0e:	bf00      	nop
 8006e10:	e004      	b.n	8006e1c <USBH_HandleEnum+0x228>
    break;
 8006e12:	bf00      	nop
 8006e14:	e002      	b.n	8006e1c <USBH_HandleEnum+0x228>
    break;
 8006e16:	bf00      	nop
 8006e18:	e000      	b.n	8006e1c <USBH_HandleEnum+0x228>
    break;
 8006e1a:	bf00      	nop
  }
  return Status;
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop

08006e28 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b082      	sub	sp, #8
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f804 	bl	8006e6a <USBH_HandleSof>
}
 8006e62:	bf00      	nop
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b0b      	cmp	r3, #11
 8006e7a:	d10a      	bne.n	8006e92 <USBH_HandleSof+0x28>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d005      	beq.n	8006e92 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	4798      	blx	r3
  }
}
 8006e92:	bf00      	nop
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006eaa:	bf00      	nop
}
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006ec6:	bf00      	nop
}
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10f      	bne.n	8006f1e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00e      	beq.n	8006f2e <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f16:	2104      	movs	r1, #4
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
 8006f1c:	e007      	b.n	8006f2e <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d102      	bne.n	8006f2e <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 ff68 	bl	8007e16 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	791b      	ldrb	r3, [r3, #4]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fdb8 	bl	8007ac2 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	795b      	ldrb	r3, [r3, #5]
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fdb2 	bl	8007ac2 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f76:	2105      	movs	r1, #5
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 ff2f 	bl	8007de0 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2203      	movs	r2, #3
 8006f86:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b086      	sub	sp, #24
 8006f96:	af02      	add	r7, sp, #8
 8006f98:	6078      	str	r0, [r7, #4]
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006fa4:	78fb      	ldrb	r3, [r7, #3]
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	4613      	mov	r3, r2
 8006fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f864 	bl	8007080 <USBH_GetDescriptor>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	73fb      	strb	r3, [r7, #15]
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f203 3022 	addw	r0, r3, #802	; 0x322
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006fce:	78fa      	ldrb	r2, [r7, #3]
 8006fd0:	b292      	uxth	r2, r2
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	f000 f918 	bl	8007208 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b086      	sub	sp, #24
 8006fe6:	af02      	add	r7, sp, #8
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	460b      	mov	r3, r1
 8006fec:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	331c      	adds	r3, #28
 8006ff2:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8006ff4:	887b      	ldrh	r3, [r7, #2]
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ffe:	2100      	movs	r1, #0
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f83d 	bl	8007080 <USBH_GetDescriptor>
 8007006:	4603      	mov	r3, r0
 8007008:	72fb      	strb	r3, [r7, #11]
 800700a:	7afb      	ldrb	r3, [r7, #11]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d107      	bne.n	8007020 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007016:	887a      	ldrh	r2, [r7, #2]
 8007018:	68f9      	ldr	r1, [r7, #12]
 800701a:	4618      	mov	r0, r3
 800701c:	f000 f964 	bl	80072e8 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007020:	7afb      	ldrb	r3, [r7, #11]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b088      	sub	sp, #32
 800702e:	af02      	add	r7, sp, #8
 8007030:	60f8      	str	r0, [r7, #12]
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	461a      	mov	r2, r3
 8007036:	460b      	mov	r3, r1
 8007038:	72fb      	strb	r3, [r7, #11]
 800703a:	4613      	mov	r3, r2
 800703c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800703e:	7afb      	ldrb	r3, [r7, #11]
 8007040:	b29b      	uxth	r3, r3
 8007042:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007046:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800704e:	893b      	ldrh	r3, [r7, #8]
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	460b      	mov	r3, r1
 8007054:	2100      	movs	r1, #0
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 f812 	bl	8007080 <USBH_GetDescriptor>
 800705c:	4603      	mov	r3, r0
 800705e:	75fb      	strb	r3, [r7, #23]
 8007060:	7dfb      	ldrb	r3, [r7, #23]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d107      	bne.n	8007076 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800706c:	893a      	ldrh	r2, [r7, #8]
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	4618      	mov	r0, r3
 8007072:	f000 fa37 	bl	80074e4 <USBH_ParseStringDesc>
  }
  return status;
 8007076:	7dfb      	ldrb	r3, [r7, #23]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	607b      	str	r3, [r7, #4]
 800708a:	460b      	mov	r3, r1
 800708c:	72fb      	strb	r3, [r7, #11]
 800708e:	4613      	mov	r3, r2
 8007090:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	789b      	ldrb	r3, [r3, #2]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d11c      	bne.n	80070d4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800709a:	7afb      	ldrb	r3, [r7, #11]
 800709c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2206      	movs	r2, #6
 80070aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	893a      	ldrh	r2, [r7, #8]
 80070b0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80070b2:	893b      	ldrh	r3, [r7, #8]
 80070b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80070b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070bc:	d104      	bne.n	80070c8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f240 4209 	movw	r2, #1033	; 0x409
 80070c4:	829a      	strh	r2, [r3, #20]
 80070c6:	e002      	b.n	80070ce <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8b3a      	ldrh	r2, [r7, #24]
 80070d2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 80070d4:	8b3b      	ldrh	r3, [r7, #24]
 80070d6:	461a      	mov	r2, r3
 80070d8:	6879      	ldr	r1, [r7, #4]
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 fa50 	bl	8007580 <USBH_CtlReq>
 80070e0:	4603      	mov	r3, r0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b082      	sub	sp, #8
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	460b      	mov	r3, r1
 80070f4:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	789b      	ldrb	r3, [r3, #2]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d10f      	bne.n	800711e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2205      	movs	r2, #5
 8007108:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800710a:	78fb      	ldrb	r3, [r7, #3]
 800710c:	b29a      	uxth	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800711e:	2200      	movs	r2, #0
 8007120:	2100      	movs	r1, #0
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fa2c 	bl	8007580 <USBH_CtlReq>
 8007128:	4603      	mov	r3, r0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	460b      	mov	r3, r1
 800713c:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	789b      	ldrb	r3, [r3, #2]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d10e      	bne.n	8007164 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2209      	movs	r2, #9
 8007150:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	887a      	ldrh	r2, [r7, #2]
 8007156:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8007164:	2200      	movs	r2, #0
 8007166:	2100      	movs	r1, #0
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fa09 	bl	8007580 <USBH_CtlReq>
 800716e:	4603      	mov	r3, r0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	789b      	ldrb	r3, [r3, #2]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d10f      	bne.n	80071ac <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2203      	movs	r2, #3
 8007196:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007198:	78fb      	ldrb	r3, [r7, #3]
 800719a:	b29a      	uxth	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80071ac:	2200      	movs	r2, #0
 80071ae:	2100      	movs	r1, #0
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f9e5 	bl	8007580 <USBH_CtlReq>
 80071b6:	4603      	mov	r3, r0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	789b      	ldrb	r3, [r3, #2]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d10f      	bne.n	80071f4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2202      	movs	r2, #2
 80071d8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80071e6:	78fb      	ldrb	r3, [r7, #3]
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80071f4:	2200      	movs	r2, #0
 80071f6:	2100      	movs	r1, #0
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f9c1 	bl	8007580 <USBH_CtlReq>
 80071fe:	4603      	mov	r3, r0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	4613      	mov	r3, r2
 8007214:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	781a      	ldrb	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	785a      	ldrb	r2, [r3, #1]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	3302      	adds	r3, #2
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	b29a      	uxth	r2, r3
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	3303      	adds	r3, #3
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	021b      	lsls	r3, r3, #8
 8007238:	b29b      	uxth	r3, r3
 800723a:	4313      	orrs	r3, r2
 800723c:	b29a      	uxth	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	791a      	ldrb	r2, [r3, #4]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	795a      	ldrb	r2, [r3, #5]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	799a      	ldrb	r2, [r3, #6]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	79da      	ldrb	r2, [r3, #7]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007262:	88fb      	ldrh	r3, [r7, #6]
 8007264:	2b08      	cmp	r3, #8
 8007266:	d939      	bls.n	80072dc <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	3308      	adds	r3, #8
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	b29a      	uxth	r2, r3
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	3309      	adds	r3, #9
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	b29b      	uxth	r3, r3
 8007278:	021b      	lsls	r3, r3, #8
 800727a:	b29b      	uxth	r3, r3
 800727c:	4313      	orrs	r3, r2
 800727e:	b29a      	uxth	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	330a      	adds	r3, #10
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	b29a      	uxth	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	330b      	adds	r3, #11
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	b29b      	uxth	r3, r3
 8007294:	021b      	lsls	r3, r3, #8
 8007296:	b29b      	uxth	r3, r3
 8007298:	4313      	orrs	r3, r2
 800729a:	b29a      	uxth	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	330c      	adds	r3, #12
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	330d      	adds	r3, #13
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	021b      	lsls	r3, r3, #8
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	4313      	orrs	r3, r2
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	7b9a      	ldrb	r2, [r3, #14]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	7bda      	ldrb	r2, [r3, #15]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	7c1a      	ldrb	r2, [r3, #16]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	7c5a      	ldrb	r2, [r3, #17]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	745a      	strb	r2, [r3, #17]
  }
}
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08a      	sub	sp, #40	; 0x28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	4613      	mov	r3, r2
 80072f4:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	781a      	ldrb	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	785a      	ldrb	r2, [r3, #1]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	3302      	adds	r3, #2
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	b29a      	uxth	r2, r3
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	3303      	adds	r3, #3
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	b29b      	uxth	r3, r3
 800732a:	021b      	lsls	r3, r3, #8
 800732c:	b29b      	uxth	r3, r3
 800732e:	4313      	orrs	r3, r2
 8007330:	b29a      	uxth	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	791a      	ldrb	r2, [r3, #4]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	795a      	ldrb	r2, [r3, #5]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	799a      	ldrb	r2, [r3, #6]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	79da      	ldrb	r2, [r3, #7]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	7a1a      	ldrb	r2, [r3, #8]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800735e:	88fb      	ldrh	r3, [r7, #6]
 8007360:	2b09      	cmp	r3, #9
 8007362:	d95f      	bls.n	8007424 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007364:	2309      	movs	r3, #9
 8007366:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007368:	2300      	movs	r3, #0
 800736a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800736c:	e051      	b.n	8007412 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800736e:	f107 0316 	add.w	r3, r7, #22
 8007372:	4619      	mov	r1, r3
 8007374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007376:	f000 f8e8 	bl	800754a <USBH_GetNextDesc>
 800737a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	785b      	ldrb	r3, [r3, #1]
 8007380:	2b04      	cmp	r3, #4
 8007382:	d146      	bne.n	8007412 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007384:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007388:	221a      	movs	r2, #26
 800738a:	fb02 f303 	mul.w	r3, r2, r3
 800738e:	3308      	adds	r3, #8
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	4413      	add	r3, r2
 8007394:	3302      	adds	r3, #2
 8007396:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800739a:	69f8      	ldr	r0, [r7, #28]
 800739c:	f000 f846 	bl	800742c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80073aa:	e022      	b.n	80073f2 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80073ac:	f107 0316 	add.w	r3, r7, #22
 80073b0:	4619      	mov	r1, r3
 80073b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073b4:	f000 f8c9 	bl	800754a <USBH_GetNextDesc>
 80073b8:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	785b      	ldrb	r3, [r3, #1]
 80073be:	2b05      	cmp	r3, #5
 80073c0:	d117      	bne.n	80073f2 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80073c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073c6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80073ca:	3201      	adds	r2, #1
 80073cc:	00d2      	lsls	r2, r2, #3
 80073ce:	211a      	movs	r1, #26
 80073d0:	fb01 f303 	mul.w	r3, r1, r3
 80073d4:	4413      	add	r3, r2
 80073d6:	3308      	adds	r3, #8
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	4413      	add	r3, r2
 80073dc:	3304      	adds	r3, #4
 80073de:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 80073e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073e2:	69b8      	ldr	r0, [r7, #24]
 80073e4:	f000 f851 	bl	800748a <USBH_ParseEPDesc>
            ep_ix++;
 80073e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80073ec:	3301      	adds	r3, #1
 80073ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	791b      	ldrb	r3, [r3, #4]
 80073f6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d204      	bcs.n	8007408 <USBH_ParseCfgDesc+0x120>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	885a      	ldrh	r2, [r3, #2]
 8007402:	8afb      	ldrh	r3, [r7, #22]
 8007404:	429a      	cmp	r2, r3
 8007406:	d8d1      	bhi.n	80073ac <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007408:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800740c:	3301      	adds	r3, #1
 800740e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007412:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007416:	2b01      	cmp	r3, #1
 8007418:	d804      	bhi.n	8007424 <USBH_ParseCfgDesc+0x13c>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	885a      	ldrh	r2, [r3, #2]
 800741e:	8afb      	ldrh	r3, [r7, #22]
 8007420:	429a      	cmp	r2, r3
 8007422:	d8a4      	bhi.n	800736e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007424:	bf00      	nop
 8007426:	3728      	adds	r7, #40	; 0x28
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781a      	ldrb	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	785a      	ldrb	r2, [r3, #1]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	789a      	ldrb	r2, [r3, #2]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	78da      	ldrb	r2, [r3, #3]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	791a      	ldrb	r2, [r3, #4]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	795a      	ldrb	r2, [r3, #5]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	799a      	ldrb	r2, [r3, #6]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	79da      	ldrb	r2, [r3, #7]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	7a1a      	ldrb	r2, [r3, #8]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	721a      	strb	r2, [r3, #8]
}
 800747e:	bf00      	nop
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781a      	ldrb	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	785a      	ldrb	r2, [r3, #1]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	789a      	ldrb	r2, [r3, #2]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	78da      	ldrb	r2, [r3, #3]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	3304      	adds	r3, #4
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	3305      	adds	r3, #5
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	021b      	lsls	r3, r3, #8
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	4313      	orrs	r3, r2
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	799a      	ldrb	r2, [r3, #6]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	719a      	strb	r2, [r3, #6]
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	4613      	mov	r3, r2
 80074f0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3301      	adds	r3, #1
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d120      	bne.n	800753e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	1e9a      	subs	r2, r3, #2
 8007502:	88fb      	ldrh	r3, [r7, #6]
 8007504:	4293      	cmp	r3, r2
 8007506:	bf28      	it	cs
 8007508:	4613      	movcs	r3, r2
 800750a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3302      	adds	r3, #2
 8007510:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007512:	2300      	movs	r3, #0
 8007514:	82fb      	strh	r3, [r7, #22]
 8007516:	e00b      	b.n	8007530 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007518:	8afb      	ldrh	r3, [r7, #22]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4413      	add	r3, r2
 800751e:	781a      	ldrb	r2, [r3, #0]
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	3301      	adds	r3, #1
 8007528:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800752a:	8afb      	ldrh	r3, [r7, #22]
 800752c:	3302      	adds	r3, #2
 800752e:	82fb      	strh	r3, [r7, #22]
 8007530:	8afa      	ldrh	r2, [r7, #22]
 8007532:	8abb      	ldrh	r3, [r7, #20]
 8007534:	429a      	cmp	r2, r3
 8007536:	d3ef      	bcc.n	8007518 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2200      	movs	r2, #0
 800753c:	701a      	strb	r2, [r3, #0]
  }
}
 800753e:	bf00      	nop
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800754a:	b480      	push	{r7}
 800754c:	b085      	sub	sp, #20
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	881a      	ldrh	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	b29b      	uxth	r3, r3
 800755e:	4413      	add	r3, r2
 8007560:	b29a      	uxth	r2, r3
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4413      	add	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8007572:	68fb      	ldr	r3, [r7, #12]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	4613      	mov	r3, r2
 800758c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800758e:	2301      	movs	r3, #1
 8007590:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	789b      	ldrb	r3, [r3, #2]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d002      	beq.n	80075a0 <USBH_CtlReq+0x20>
 800759a:	2b02      	cmp	r3, #2
 800759c:	d00f      	beq.n	80075be <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 800759e:	e034      	b.n	800760a <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	88fa      	ldrh	r2, [r7, #6]
 80075aa:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2201      	movs	r2, #1
 80075b0:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2202      	movs	r2, #2
 80075b6:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 80075b8:	2301      	movs	r3, #1
 80075ba:	75fb      	strb	r3, [r7, #23]
    break;
 80075bc:	e025      	b.n	800760a <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 f828 	bl	8007614 <USBH_HandleControl>
 80075c4:	4603      	mov	r3, r0
 80075c6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d108      	bne.n	80075e0 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2201      	movs	r2, #1
 80075d2:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	75fb      	strb	r3, [r7, #23]
    break;
 80075de:	e013      	b.n	8007608 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 80075e0:	7dfb      	ldrb	r3, [r7, #23]
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d108      	bne.n	80075f8 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2201      	movs	r2, #1
 80075ea:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80075f2:	2303      	movs	r3, #3
 80075f4:	75fb      	strb	r3, [r7, #23]
    break;
 80075f6:	e007      	b.n	8007608 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 80075f8:	7dfb      	ldrb	r3, [r7, #23]
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d104      	bne.n	8007608 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2201      	movs	r2, #1
 8007602:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007604:	2302      	movs	r3, #2
 8007606:	75fb      	strb	r3, [r7, #23]
    break;
 8007608:	bf00      	nop
  }
  return status;
 800760a:	7dfb      	ldrb	r3, [r7, #23]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3718      	adds	r7, #24
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af02      	add	r7, sp, #8
 800761a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800761c:	2301      	movs	r3, #1
 800761e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007620:	2300      	movs	r3, #0
 8007622:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	7e1b      	ldrb	r3, [r3, #24]
 8007628:	3b01      	subs	r3, #1
 800762a:	2b0a      	cmp	r3, #10
 800762c:	f200 814c 	bhi.w	80078c8 <USBH_HandleControl+0x2b4>
 8007630:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <USBH_HandleControl+0x24>)
 8007632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007636:	bf00      	nop
 8007638:	08007665 	.word	0x08007665
 800763c:	0800767f 	.word	0x0800767f
 8007640:	080076e9 	.word	0x080076e9
 8007644:	0800770f 	.word	0x0800770f
 8007648:	08007747 	.word	0x08007747
 800764c:	08007773 	.word	0x08007773
 8007650:	080077c5 	.word	0x080077c5
 8007654:	080077e7 	.word	0x080077e7
 8007658:	08007823 	.word	0x08007823
 800765c:	0800784b 	.word	0x0800784b
 8007660:	08007889 	.word	0x08007889
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f103 0110 	add.w	r1, r3, #16
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	795b      	ldrb	r3, [r3, #5]
 800766e:	461a      	mov	r2, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f939 	bl	80078e8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2202      	movs	r2, #2
 800767a:	761a      	strb	r2, [r3, #24]
    break;
 800767c:	e12f      	b.n	80078de <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	795b      	ldrb	r3, [r3, #5]
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fcb3 	bl	8007ff0 <USBH_LL_GetURBState>
 800768a:	4603      	mov	r3, r0
 800768c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800768e:	7bbb      	ldrb	r3, [r7, #14]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d11e      	bne.n	80076d2 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	7c1b      	ldrb	r3, [r3, #16]
 8007698:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800769c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	8adb      	ldrh	r3, [r3, #22]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 80076a6:	7b7b      	ldrb	r3, [r7, #13]
 80076a8:	2b80      	cmp	r3, #128	; 0x80
 80076aa:	d103      	bne.n	80076b4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2203      	movs	r2, #3
 80076b0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80076b2:	e10b      	b.n	80078cc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2205      	movs	r2, #5
 80076b8:	761a      	strb	r2, [r3, #24]
    break;
 80076ba:	e107      	b.n	80078cc <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 80076bc:	7b7b      	ldrb	r3, [r7, #13]
 80076be:	2b80      	cmp	r3, #128	; 0x80
 80076c0:	d103      	bne.n	80076ca <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2209      	movs	r2, #9
 80076c6:	761a      	strb	r2, [r3, #24]
    break;
 80076c8:	e100      	b.n	80078cc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2207      	movs	r2, #7
 80076ce:	761a      	strb	r2, [r3, #24]
    break;
 80076d0:	e0fc      	b.n	80078cc <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80076d2:	7bbb      	ldrb	r3, [r7, #14]
 80076d4:	2b04      	cmp	r3, #4
 80076d6:	d003      	beq.n	80076e0 <USBH_HandleControl+0xcc>
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
 80076da:	2b02      	cmp	r3, #2
 80076dc:	f040 80f6 	bne.w	80078cc <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	220b      	movs	r2, #11
 80076e4:	761a      	strb	r2, [r3, #24]
    break;
 80076e6:	e0f1      	b.n	80078cc <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6899      	ldr	r1, [r3, #8]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	899a      	ldrh	r2, [r3, #12]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	791b      	ldrb	r3, [r3, #4]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f930 	bl	8007966 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2204      	movs	r2, #4
 800770a:	761a      	strb	r2, [r3, #24]
    break;
 800770c:	e0e7      	b.n	80078de <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	791b      	ldrb	r3, [r3, #4]
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fc6b 	bl	8007ff0 <USBH_LL_GetURBState>
 800771a:	4603      	mov	r3, r0
 800771c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800771e:	7bbb      	ldrb	r3, [r7, #14]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d102      	bne.n	800772a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2209      	movs	r2, #9
 8007728:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	2b05      	cmp	r3, #5
 800772e:	d102      	bne.n	8007736 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007730:	2303      	movs	r3, #3
 8007732:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007734:	e0cc      	b.n	80078d0 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007736:	7bbb      	ldrb	r3, [r7, #14]
 8007738:	2b04      	cmp	r3, #4
 800773a:	f040 80c9 	bne.w	80078d0 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	220b      	movs	r2, #11
 8007742:	761a      	strb	r2, [r3, #24]
    break;
 8007744:	e0c4      	b.n	80078d0 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6899      	ldr	r1, [r3, #8]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	899a      	ldrh	r2, [r3, #12]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	7958      	ldrb	r0, [r3, #5]
 8007752:	2301      	movs	r3, #1
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	4603      	mov	r3, r0
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f8df 	bl	800791c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007764:	b29a      	uxth	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2206      	movs	r2, #6
 800776e:	761a      	strb	r2, [r3, #24]
    break;
 8007770:	e0b5      	b.n	80078de <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	795b      	ldrb	r3, [r3, #5]
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fc39 	bl	8007ff0 <USBH_LL_GetURBState>
 800777e:	4603      	mov	r3, r0
 8007780:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007782:	7bbb      	ldrb	r3, [r7, #14]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d103      	bne.n	8007790 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2207      	movs	r2, #7
 800778c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800778e:	e0a1      	b.n	80078d4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	2b05      	cmp	r3, #5
 8007794:	d105      	bne.n	80077a2 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	220c      	movs	r2, #12
 800779a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800779c:	2303      	movs	r3, #3
 800779e:	73fb      	strb	r3, [r7, #15]
    break;
 80077a0:	e098      	b.n	80078d4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d103      	bne.n	80077b0 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2205      	movs	r2, #5
 80077ac:	761a      	strb	r2, [r3, #24]
    break;
 80077ae:	e091      	b.n	80078d4 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	f040 808e 	bne.w	80078d4 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	220b      	movs	r2, #11
 80077bc:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 80077be:	2302      	movs	r3, #2
 80077c0:	73fb      	strb	r3, [r7, #15]
    break;
 80077c2:	e087      	b.n	80078d4 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	791b      	ldrb	r3, [r3, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	2100      	movs	r1, #0
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f8ca 	bl	8007966 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80077d8:	b29a      	uxth	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2208      	movs	r2, #8
 80077e2:	761a      	strb	r2, [r3, #24]

    break;
 80077e4:	e07b      	b.n	80078de <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	791b      	ldrb	r3, [r3, #4]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fbff 	bl	8007ff0 <USBH_LL_GetURBState>
 80077f2:	4603      	mov	r3, r0
 80077f4:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80077f6:	7bbb      	ldrb	r3, [r7, #14]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d105      	bne.n	8007808 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	220d      	movs	r2, #13
 8007800:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007806:	e067      	b.n	80078d8 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007808:	7bbb      	ldrb	r3, [r7, #14]
 800780a:	2b04      	cmp	r3, #4
 800780c:	d103      	bne.n	8007816 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	220b      	movs	r2, #11
 8007812:	761a      	strb	r2, [r3, #24]
    break;
 8007814:	e060      	b.n	80078d8 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007816:	7bbb      	ldrb	r3, [r7, #14]
 8007818:	2b05      	cmp	r3, #5
 800781a:	d15d      	bne.n	80078d8 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800781c:	2303      	movs	r3, #3
 800781e:	73fb      	strb	r3, [r7, #15]
    break;
 8007820:	e05a      	b.n	80078d8 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	795a      	ldrb	r2, [r3, #5]
 8007826:	2301      	movs	r3, #1
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	4613      	mov	r3, r2
 800782c:	2200      	movs	r2, #0
 800782e:	2100      	movs	r1, #0
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f873 	bl	800791c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800783c:	b29a      	uxth	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	220a      	movs	r2, #10
 8007846:	761a      	strb	r2, [r3, #24]
    break;
 8007848:	e049      	b.n	80078de <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	795b      	ldrb	r3, [r3, #5]
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fbcd 	bl	8007ff0 <USBH_LL_GetURBState>
 8007856:	4603      	mov	r3, r0
 8007858:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800785a:	7bbb      	ldrb	r3, [r7, #14]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d105      	bne.n	800786c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	220d      	movs	r2, #13
 8007868:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800786a:	e037      	b.n	80078dc <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800786c:	7bbb      	ldrb	r3, [r7, #14]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d103      	bne.n	800787a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2209      	movs	r2, #9
 8007876:	761a      	strb	r2, [r3, #24]
    break;
 8007878:	e030      	b.n	80078dc <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	2b04      	cmp	r3, #4
 800787e:	d12d      	bne.n	80078dc <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	220b      	movs	r2, #11
 8007884:	761a      	strb	r2, [r3, #24]
    break;
 8007886:	e029      	b.n	80078dc <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	7e5b      	ldrb	r3, [r3, #25]
 800788c:	3301      	adds	r3, #1
 800788e:	b2da      	uxtb	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	765a      	strb	r2, [r3, #25]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	7e5b      	ldrb	r3, [r3, #25]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d809      	bhi.n	80078b0 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 faba 	bl	8007e16 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80078ae:	e016      	b.n	80078de <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80078b6:	2106      	movs	r1, #6
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80078c2:	2302      	movs	r3, #2
 80078c4:	73fb      	strb	r3, [r7, #15]
    break;
 80078c6:	e00a      	b.n	80078de <USBH_HandleControl+0x2ca>

  default:
    break;
 80078c8:	bf00      	nop
 80078ca:	e008      	b.n	80078de <USBH_HandleControl+0x2ca>
    break;
 80078cc:	bf00      	nop
 80078ce:	e006      	b.n	80078de <USBH_HandleControl+0x2ca>
    break;
 80078d0:	bf00      	nop
 80078d2:	e004      	b.n	80078de <USBH_HandleControl+0x2ca>
    break;
 80078d4:	bf00      	nop
 80078d6:	e002      	b.n	80078de <USBH_HandleControl+0x2ca>
    break;
 80078d8:	bf00      	nop
 80078da:	e000      	b.n	80078de <USBH_HandleControl+0x2ca>
    break;
 80078dc:	bf00      	nop
  }
  return status;
 80078de:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b088      	sub	sp, #32
 80078ec:	af04      	add	r7, sp, #16
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	4613      	mov	r3, r2
 80078f4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80078f6:	79f9      	ldrb	r1, [r7, #7]
 80078f8:	2300      	movs	r3, #0
 80078fa:	9303      	str	r3, [sp, #12]
 80078fc:	2308      	movs	r3, #8
 80078fe:	9302      	str	r3, [sp, #8]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	9301      	str	r3, [sp, #4]
 8007904:	2300      	movs	r3, #0
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	2300      	movs	r3, #0
 800790a:	2200      	movs	r2, #0
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 fb3e 	bl	8007f8e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af04      	add	r7, sp, #16
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	4611      	mov	r1, r2
 8007928:	461a      	mov	r2, r3
 800792a:	460b      	mov	r3, r1
 800792c:	80fb      	strh	r3, [r7, #6]
 800792e:	4613      	mov	r3, r2
 8007930:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007940:	7979      	ldrb	r1, [r7, #5]
 8007942:	7e3b      	ldrb	r3, [r7, #24]
 8007944:	9303      	str	r3, [sp, #12]
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	9302      	str	r3, [sp, #8]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	9301      	str	r3, [sp, #4]
 800794e:	2301      	movs	r3, #1
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	2300      	movs	r3, #0
 8007954:	2200      	movs	r2, #0
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 fb19 	bl	8007f8e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b088      	sub	sp, #32
 800796a:	af04      	add	r7, sp, #16
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	4611      	mov	r1, r2
 8007972:	461a      	mov	r2, r3
 8007974:	460b      	mov	r3, r1
 8007976:	80fb      	strh	r3, [r7, #6]
 8007978:	4613      	mov	r3, r2
 800797a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800797c:	7979      	ldrb	r1, [r7, #5]
 800797e:	2300      	movs	r3, #0
 8007980:	9303      	str	r3, [sp, #12]
 8007982:	88fb      	ldrh	r3, [r7, #6]
 8007984:	9302      	str	r3, [sp, #8]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	9301      	str	r3, [sp, #4]
 800798a:	2301      	movs	r3, #1
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	2300      	movs	r3, #0
 8007990:	2201      	movs	r2, #1
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 fafb 	bl	8007f8e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007998:	2300      	movs	r3, #0

}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b088      	sub	sp, #32
 80079a6:	af04      	add	r7, sp, #16
 80079a8:	60f8      	str	r0, [r7, #12]
 80079aa:	60b9      	str	r1, [r7, #8]
 80079ac:	4611      	mov	r1, r2
 80079ae:	461a      	mov	r2, r3
 80079b0:	460b      	mov	r3, r1
 80079b2:	80fb      	strh	r3, [r7, #6]
 80079b4:	4613      	mov	r3, r2
 80079b6:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80079c6:	7979      	ldrb	r1, [r7, #5]
 80079c8:	7e3b      	ldrb	r3, [r7, #24]
 80079ca:	9303      	str	r3, [sp, #12]
 80079cc:	88fb      	ldrh	r3, [r7, #6]
 80079ce:	9302      	str	r3, [sp, #8]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	9301      	str	r3, [sp, #4]
 80079d4:	2301      	movs	r3, #1
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	2302      	movs	r3, #2
 80079da:	2200      	movs	r2, #0
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 fad6 	bl	8007f8e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b088      	sub	sp, #32
 80079f0:	af04      	add	r7, sp, #16
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	4611      	mov	r1, r2
 80079f8:	461a      	mov	r2, r3
 80079fa:	460b      	mov	r3, r1
 80079fc:	80fb      	strh	r3, [r7, #6]
 80079fe:	4613      	mov	r3, r2
 8007a00:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007a02:	7979      	ldrb	r1, [r7, #5]
 8007a04:	2300      	movs	r3, #0
 8007a06:	9303      	str	r3, [sp, #12]
 8007a08:	88fb      	ldrh	r3, [r7, #6]
 8007a0a:	9302      	str	r3, [sp, #8]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	9301      	str	r3, [sp, #4]
 8007a10:	2301      	movs	r3, #1
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	2302      	movs	r3, #2
 8007a16:	2201      	movs	r2, #1
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 fab8 	bl	8007f8e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af04      	add	r7, sp, #16
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	4608      	mov	r0, r1
 8007a32:	4611      	mov	r1, r2
 8007a34:	461a      	mov	r2, r3
 8007a36:	4603      	mov	r3, r0
 8007a38:	70fb      	strb	r3, [r7, #3]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	70bb      	strb	r3, [r7, #2]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007a42:	7878      	ldrb	r0, [r7, #1]
 8007a44:	78ba      	ldrb	r2, [r7, #2]
 8007a46:	78f9      	ldrb	r1, [r7, #3]
 8007a48:	8b3b      	ldrh	r3, [r7, #24]
 8007a4a:	9302      	str	r3, [sp, #8]
 8007a4c:	7d3b      	ldrb	r3, [r7, #20]
 8007a4e:	9301      	str	r3, [sp, #4]
 8007a50:	7c3b      	ldrb	r3, [r7, #16]
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	4603      	mov	r3, r0
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fa4b 	bl	8007ef2 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007a5c:	2300      	movs	r3, #0

}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007a72:	78fb      	ldrb	r3, [r7, #3]
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fa6a 	bl	8007f50 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007a7c:	2300      	movs	r3, #0

}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b084      	sub	sp, #16
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	460b      	mov	r3, r1
 8007a90:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f831 	bl	8007afa <USBH_GetFreePipe>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007a9c:	89fb      	ldrh	r3, [r7, #14]
 8007a9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d007      	beq.n	8007ab6 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007aa6:	78fb      	ldrb	r3, [r7, #3]
 8007aa8:	89fa      	ldrh	r2, [r7, #14]
 8007aaa:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	32e0      	adds	r2, #224	; 0xe0
 8007ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007ab6:	89fb      	ldrh	r3, [r7, #14]
 8007ab8:	b2db      	uxtb	r3, r3
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007ace:	78fb      	ldrb	r3, [r7, #3]
 8007ad0:	2b0a      	cmp	r3, #10
 8007ad2:	d80b      	bhi.n	8007aec <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007ad4:	78fa      	ldrb	r2, [r7, #3]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	32e0      	adds	r2, #224	; 0xe0
 8007ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ade:	78fa      	ldrb	r2, [r7, #3]
 8007ae0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	32e0      	adds	r2, #224	; 0xe0
 8007ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b085      	sub	sp, #20
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007b06:	2300      	movs	r3, #0
 8007b08:	73fb      	strb	r3, [r7, #15]
 8007b0a:	e00e      	b.n	8007b2a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007b0c:	7bfa      	ldrb	r2, [r7, #15]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	32e0      	adds	r2, #224	; 0xe0
 8007b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d102      	bne.n	8007b24 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	e007      	b.n	8007b34 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	3301      	adds	r3, #1
 8007b28:	73fb      	strb	r3, [r7, #15]
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	2b0a      	cmp	r3, #10
 8007b2e:	d9ed      	bls.n	8007b0c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007b44:	2201      	movs	r2, #1
 8007b46:	490e      	ldr	r1, [pc, #56]	; (8007b80 <MX_USB_HOST_Init+0x40>)
 8007b48:	480e      	ldr	r0, [pc, #56]	; (8007b84 <MX_USB_HOST_Init+0x44>)
 8007b4a:	f7fe fdbb 	bl	80066c4 <USBH_Init>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007b54:	f7f8 ff86 	bl	8000a64 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007b58:	490b      	ldr	r1, [pc, #44]	; (8007b88 <MX_USB_HOST_Init+0x48>)
 8007b5a:	480a      	ldr	r0, [pc, #40]	; (8007b84 <MX_USB_HOST_Init+0x44>)
 8007b5c:	f7fe fe25 	bl	80067aa <USBH_RegisterClass>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007b66:	f7f8 ff7d 	bl	8000a64 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007b6a:	4806      	ldr	r0, [pc, #24]	; (8007b84 <MX_USB_HOST_Init+0x44>)
 8007b6c:	f7fe feaa 	bl	80068c4 <USBH_Start>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007b76:	f7f8 ff75 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007b7a:	bf00      	nop
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	08007ba1 	.word	0x08007ba1
 8007b84:	200001fc 	.word	0x200001fc
 8007b88:	20000010 	.word	0x20000010

08007b8c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007b90:	4802      	ldr	r0, [pc, #8]	; (8007b9c <MX_USB_HOST_Process+0x10>)
 8007b92:	f7fe fea7 	bl	80068e4 <USBH_Process>
}
 8007b96:	bf00      	nop
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	200001fc 	.word	0x200001fc

08007ba0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007bac:	78fb      	ldrb	r3, [r7, #3]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d819      	bhi.n	8007be8 <USBH_UserProcess+0x48>
 8007bb4:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <USBH_UserProcess+0x1c>)
 8007bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bba:	bf00      	nop
 8007bbc:	08007be9 	.word	0x08007be9
 8007bc0:	08007bd9 	.word	0x08007bd9
 8007bc4:	08007be9 	.word	0x08007be9
 8007bc8:	08007be1 	.word	0x08007be1
 8007bcc:	08007bd1 	.word	0x08007bd1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007bd0:	4b09      	ldr	r3, [pc, #36]	; (8007bf8 <USBH_UserProcess+0x58>)
 8007bd2:	2203      	movs	r2, #3
 8007bd4:	701a      	strb	r2, [r3, #0]
  break;
 8007bd6:	e008      	b.n	8007bea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007bd8:	4b07      	ldr	r3, [pc, #28]	; (8007bf8 <USBH_UserProcess+0x58>)
 8007bda:	2202      	movs	r2, #2
 8007bdc:	701a      	strb	r2, [r3, #0]
  break;
 8007bde:	e004      	b.n	8007bea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007be0:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <USBH_UserProcess+0x58>)
 8007be2:	2201      	movs	r2, #1
 8007be4:	701a      	strb	r2, [r3, #0]
  break;
 8007be6:	e000      	b.n	8007bea <USBH_UserProcess+0x4a>

  default:
  break;
 8007be8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	200000b8 	.word	0x200000b8

08007bfc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08a      	sub	sp, #40	; 0x28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c04:	f107 0314 	add.w	r3, r7, #20
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	605a      	str	r2, [r3, #4]
 8007c0e:	609a      	str	r2, [r3, #8]
 8007c10:	60da      	str	r2, [r3, #12]
 8007c12:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c1c:	d147      	bne.n	8007cae <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c1e:	2300      	movs	r3, #0
 8007c20:	613b      	str	r3, [r7, #16]
 8007c22:	4b25      	ldr	r3, [pc, #148]	; (8007cb8 <HAL_HCD_MspInit+0xbc>)
 8007c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c26:	4a24      	ldr	r2, [pc, #144]	; (8007cb8 <HAL_HCD_MspInit+0xbc>)
 8007c28:	f043 0301 	orr.w	r3, r3, #1
 8007c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c2e:	4b22      	ldr	r3, [pc, #136]	; (8007cb8 <HAL_HCD_MspInit+0xbc>)
 8007c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	613b      	str	r3, [r7, #16]
 8007c38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007c3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c40:	2300      	movs	r3, #0
 8007c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c44:	2300      	movs	r3, #0
 8007c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007c48:	f107 0314 	add.w	r3, r7, #20
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	481b      	ldr	r0, [pc, #108]	; (8007cbc <HAL_HCD_MspInit+0xc0>)
 8007c50:	f7f9 fad6 	bl	8001200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007c54:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c62:	2300      	movs	r3, #0
 8007c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c66:	230a      	movs	r3, #10
 8007c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c6a:	f107 0314 	add.w	r3, r7, #20
 8007c6e:	4619      	mov	r1, r3
 8007c70:	4812      	ldr	r0, [pc, #72]	; (8007cbc <HAL_HCD_MspInit+0xc0>)
 8007c72:	f7f9 fac5 	bl	8001200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c76:	4b10      	ldr	r3, [pc, #64]	; (8007cb8 <HAL_HCD_MspInit+0xbc>)
 8007c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7a:	4a0f      	ldr	r2, [pc, #60]	; (8007cb8 <HAL_HCD_MspInit+0xbc>)
 8007c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c80:	6353      	str	r3, [r2, #52]	; 0x34
 8007c82:	2300      	movs	r3, #0
 8007c84:	60fb      	str	r3, [r7, #12]
 8007c86:	4b0c      	ldr	r3, [pc, #48]	; (8007cb8 <HAL_HCD_MspInit+0xbc>)
 8007c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8a:	4a0b      	ldr	r2, [pc, #44]	; (8007cb8 <HAL_HCD_MspInit+0xbc>)
 8007c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c90:	6453      	str	r3, [r2, #68]	; 0x44
 8007c92:	4b09      	ldr	r3, [pc, #36]	; (8007cb8 <HAL_HCD_MspInit+0xbc>)
 8007c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c9a:	60fb      	str	r3, [r7, #12]
 8007c9c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	2043      	movs	r0, #67	; 0x43
 8007ca4:	f7f9 fa75 	bl	8001192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ca8:	2043      	movs	r0, #67	; 0x43
 8007caa:	f7f9 fa8e 	bl	80011ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007cae:	bf00      	nop
 8007cb0:	3728      	adds	r7, #40	; 0x28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	40023800 	.word	0x40023800
 8007cbc:	40020000 	.word	0x40020000

08007cc0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7ff f8b9 	bl	8006e46 <USBH_LL_IncTimer>
}
 8007cd4:	bf00      	nop
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7ff f8fe 	bl	8006eec <USBH_LL_Connect>
}
 8007cf0:	bf00      	nop
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7ff f916 	bl	8006f38 <USBH_LL_Disconnect>
}
 8007d0c:	bf00      	nop
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
 8007d20:	4613      	mov	r3, r2
 8007d22:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff f8ab 	bl	8006e9a <USBH_LL_PortEnabled>
} 
 8007d44:	bf00      	nop
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7ff f8ab 	bl	8006eb6 <USBH_LL_PortDisabled>
} 
 8007d60:	bf00      	nop
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d12a      	bne.n	8007dd0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007d7a:	4a18      	ldr	r2, [pc, #96]	; (8007ddc <USBH_LL_Init+0x74>)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a15      	ldr	r2, [pc, #84]	; (8007ddc <USBH_LL_Init+0x74>)
 8007d86:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d8a:	4b14      	ldr	r3, [pc, #80]	; (8007ddc <USBH_LL_Init+0x74>)
 8007d8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d90:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007d92:	4b12      	ldr	r3, [pc, #72]	; (8007ddc <USBH_LL_Init+0x74>)
 8007d94:	2208      	movs	r2, #8
 8007d96:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007d98:	4b10      	ldr	r3, [pc, #64]	; (8007ddc <USBH_LL_Init+0x74>)
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d9e:	4b0f      	ldr	r3, [pc, #60]	; (8007ddc <USBH_LL_Init+0x74>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007da4:	4b0d      	ldr	r3, [pc, #52]	; (8007ddc <USBH_LL_Init+0x74>)
 8007da6:	2202      	movs	r2, #2
 8007da8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007daa:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <USBH_LL_Init+0x74>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007db0:	480a      	ldr	r0, [pc, #40]	; (8007ddc <USBH_LL_Init+0x74>)
 8007db2:	f7f9 fbd8 	bl	8001566 <HAL_HCD_Init>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007dbc:	f7f8 fe52 	bl	8000a64 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007dc0:	4806      	ldr	r0, [pc, #24]	; (8007ddc <USBH_LL_Init+0x74>)
 8007dc2:	f7f9 ffd3 	bl	8001d6c <HAL_HCD_GetCurrentFrame>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7ff f82c 	bl	8006e28 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	200005c8 	.word	0x200005c8

08007de0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7f9 ff40 	bl	8001c7c <HAL_HCD_Start>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 f95c 	bl	80080c0 <USBH_Get_USB_Status>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007e0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b084      	sub	sp, #16
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7f9 ff48 	bl	8001cc2 <HAL_HCD_Stop>
 8007e32:	4603      	mov	r3, r0
 8007e34:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 f941 	bl	80080c0 <USBH_Get_USB_Status>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007e42:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007e54:	2301      	movs	r3, #1
 8007e56:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7f9 ff92 	bl	8001d88 <HAL_HCD_GetCurrentSpeed>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d007      	beq.n	8007e7a <USBH_LL_GetSpeed+0x2e>
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d302      	bcc.n	8007e74 <USBH_LL_GetSpeed+0x28>
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d006      	beq.n	8007e80 <USBH_LL_GetSpeed+0x34>
 8007e72:	e008      	b.n	8007e86 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73fb      	strb	r3, [r7, #15]
    break;
 8007e78:	e008      	b.n	8007e8c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e7e:	e005      	b.n	8007e8c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007e80:	2302      	movs	r3, #2
 8007e82:	73fb      	strb	r3, [r7, #15]
    break;
 8007e84:	e002      	b.n	8007e8c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007e86:	2301      	movs	r3, #1
 8007e88:	73fb      	strb	r3, [r7, #15]
    break;
 8007e8a:	bf00      	nop
  }
  return  speed;
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b084      	sub	sp, #16
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7f9 ff25 	bl	8001cfc <HAL_HCD_ResetPort>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 f901 	bl	80080c0 <USBH_Get_USB_Status>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ede:	78fa      	ldrb	r2, [r7, #3]
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7f9 ff2d 	bl	8001d42 <HAL_HCD_HC_GetXferCount>
 8007ee8:	4603      	mov	r3, r0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007ef2:	b590      	push	{r4, r7, lr}
 8007ef4:	b089      	sub	sp, #36	; 0x24
 8007ef6:	af04      	add	r7, sp, #16
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	4608      	mov	r0, r1
 8007efc:	4611      	mov	r1, r2
 8007efe:	461a      	mov	r2, r3
 8007f00:	4603      	mov	r3, r0
 8007f02:	70fb      	strb	r3, [r7, #3]
 8007f04:	460b      	mov	r3, r1
 8007f06:	70bb      	strb	r3, [r7, #2]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007f1a:	787c      	ldrb	r4, [r7, #1]
 8007f1c:	78ba      	ldrb	r2, [r7, #2]
 8007f1e:	78f9      	ldrb	r1, [r7, #3]
 8007f20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f22:	9302      	str	r3, [sp, #8]
 8007f24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007f28:	9301      	str	r3, [sp, #4]
 8007f2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	4623      	mov	r3, r4
 8007f32:	f7f9 fb7a 	bl	800162a <HAL_HCD_HC_Init>
 8007f36:	4603      	mov	r3, r0
 8007f38:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 f8bf 	bl	80080c0 <USBH_Get_USB_Status>
 8007f42:	4603      	mov	r3, r0
 8007f44:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007f46:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd90      	pop	{r4, r7, pc}

08007f50 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f6a:	78fa      	ldrb	r2, [r7, #3]
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7f9 fbf3 	bl	800175a <HAL_HCD_HC_Halt>
 8007f74:	4603      	mov	r3, r0
 8007f76:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 f8a0 	bl	80080c0 <USBH_Get_USB_Status>
 8007f80:	4603      	mov	r3, r0
 8007f82:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007f8e:	b590      	push	{r4, r7, lr}
 8007f90:	b089      	sub	sp, #36	; 0x24
 8007f92:	af04      	add	r7, sp, #16
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	4608      	mov	r0, r1
 8007f98:	4611      	mov	r1, r2
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	70fb      	strb	r3, [r7, #3]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70bb      	strb	r3, [r7, #2]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007fb6:	787c      	ldrb	r4, [r7, #1]
 8007fb8:	78ba      	ldrb	r2, [r7, #2]
 8007fba:	78f9      	ldrb	r1, [r7, #3]
 8007fbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007fc0:	9303      	str	r3, [sp, #12]
 8007fc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007fc4:	9302      	str	r3, [sp, #8]
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	9301      	str	r3, [sp, #4]
 8007fca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	4623      	mov	r3, r4
 8007fd2:	f7f9 fbe5 	bl	80017a0 <HAL_HCD_HC_SubmitRequest>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 f86f 	bl	80080c0 <USBH_Get_USB_Status>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd90      	pop	{r4, r7, pc}

08007ff0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	4611      	mov	r1, r2
 8008006:	4618      	mov	r0, r3
 8008008:	f7f9 fe86 	bl	8001d18 <HAL_HCD_HC_GetURBState>
 800800c:	4603      	mov	r3, r0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b082      	sub	sp, #8
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	460b      	mov	r3, r1
 8008020:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008028:	2b01      	cmp	r3, #1
 800802a:	d103      	bne.n	8008034 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	4618      	mov	r0, r3
 8008030:	f000 f872 	bl	8008118 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008034:	20c8      	movs	r0, #200	; 0xc8
 8008036:	f7f8 ffaf 	bl	8000f98 <HAL_Delay>
  return USBH_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	70fb      	strb	r3, [r7, #3]
 8008050:	4613      	mov	r3, r2
 8008052:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800805a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800805c:	78fa      	ldrb	r2, [r7, #3]
 800805e:	68f9      	ldr	r1, [r7, #12]
 8008060:	4613      	mov	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	00db      	lsls	r3, r3, #3
 8008068:	440b      	add	r3, r1
 800806a:	333b      	adds	r3, #59	; 0x3b
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00a      	beq.n	8008088 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008072:	78fa      	ldrb	r2, [r7, #3]
 8008074:	68f9      	ldr	r1, [r7, #12]
 8008076:	4613      	mov	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	440b      	add	r3, r1
 8008080:	3350      	adds	r3, #80	; 0x50
 8008082:	78ba      	ldrb	r2, [r7, #2]
 8008084:	701a      	strb	r2, [r3, #0]
 8008086:	e009      	b.n	800809c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008088:	78fa      	ldrb	r2, [r7, #3]
 800808a:	68f9      	ldr	r1, [r7, #12]
 800808c:	4613      	mov	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	00db      	lsls	r3, r3, #3
 8008094:	440b      	add	r3, r1
 8008096:	3351      	adds	r3, #81	; 0x51
 8008098:	78ba      	ldrb	r2, [r7, #2]
 800809a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b082      	sub	sp, #8
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7f8 ff70 	bl	8000f98 <HAL_Delay>
}
 80080b8:	bf00      	nop
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	d817      	bhi.n	8008104 <USBH_Get_USB_Status+0x44>
 80080d4:	a201      	add	r2, pc, #4	; (adr r2, 80080dc <USBH_Get_USB_Status+0x1c>)
 80080d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080da:	bf00      	nop
 80080dc:	080080ed 	.word	0x080080ed
 80080e0:	080080f3 	.word	0x080080f3
 80080e4:	080080f9 	.word	0x080080f9
 80080e8:	080080ff 	.word	0x080080ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	73fb      	strb	r3, [r7, #15]
    break;
 80080f0:	e00b      	b.n	800810a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80080f2:	2302      	movs	r3, #2
 80080f4:	73fb      	strb	r3, [r7, #15]
    break;
 80080f6:	e008      	b.n	800810a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80080f8:	2301      	movs	r3, #1
 80080fa:	73fb      	strb	r3, [r7, #15]
    break;
 80080fc:	e005      	b.n	800810a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80080fe:	2302      	movs	r3, #2
 8008100:	73fb      	strb	r3, [r7, #15]
    break;
 8008102:	e002      	b.n	800810a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008104:	2302      	movs	r3, #2
 8008106:	73fb      	strb	r3, [r7, #15]
    break;
 8008108:	bf00      	nop
  }
  return usb_status;
 800810a:	7bfb      	ldrb	r3, [r7, #15]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	4603      	mov	r3, r0
 8008120:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8008122:	79fb      	ldrb	r3, [r7, #7]
 8008124:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008126:	79fb      	ldrb	r3, [r7, #7]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d102      	bne.n	8008132 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800812c:	2301      	movs	r3, #1
 800812e:	73fb      	strb	r3, [r7, #15]
 8008130:	e001      	b.n	8008136 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	461a      	mov	r2, r3
 800813a:	2101      	movs	r1, #1
 800813c:	4803      	ldr	r0, [pc, #12]	; (800814c <MX_DriverVbusFS+0x34>)
 800813e:	f7f9 f9f9 	bl	8001534 <HAL_GPIO_WritePin>
}
 8008142:	bf00      	nop
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	40020800 	.word	0x40020800

08008150 <__errno>:
 8008150:	4b01      	ldr	r3, [pc, #4]	; (8008158 <__errno+0x8>)
 8008152:	6818      	ldr	r0, [r3, #0]
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	20000030 	.word	0x20000030

0800815c <__libc_init_array>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	4e0d      	ldr	r6, [pc, #52]	; (8008194 <__libc_init_array+0x38>)
 8008160:	4c0d      	ldr	r4, [pc, #52]	; (8008198 <__libc_init_array+0x3c>)
 8008162:	1ba4      	subs	r4, r4, r6
 8008164:	10a4      	asrs	r4, r4, #2
 8008166:	2500      	movs	r5, #0
 8008168:	42a5      	cmp	r5, r4
 800816a:	d109      	bne.n	8008180 <__libc_init_array+0x24>
 800816c:	4e0b      	ldr	r6, [pc, #44]	; (800819c <__libc_init_array+0x40>)
 800816e:	4c0c      	ldr	r4, [pc, #48]	; (80081a0 <__libc_init_array+0x44>)
 8008170:	f000 f8ea 	bl	8008348 <_init>
 8008174:	1ba4      	subs	r4, r4, r6
 8008176:	10a4      	asrs	r4, r4, #2
 8008178:	2500      	movs	r5, #0
 800817a:	42a5      	cmp	r5, r4
 800817c:	d105      	bne.n	800818a <__libc_init_array+0x2e>
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008184:	4798      	blx	r3
 8008186:	3501      	adds	r5, #1
 8008188:	e7ee      	b.n	8008168 <__libc_init_array+0xc>
 800818a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800818e:	4798      	blx	r3
 8008190:	3501      	adds	r5, #1
 8008192:	e7f2      	b.n	800817a <__libc_init_array+0x1e>
 8008194:	08008384 	.word	0x08008384
 8008198:	08008384 	.word	0x08008384
 800819c:	08008384 	.word	0x08008384
 80081a0:	08008388 	.word	0x08008388

080081a4 <malloc>:
 80081a4:	4b02      	ldr	r3, [pc, #8]	; (80081b0 <malloc+0xc>)
 80081a6:	4601      	mov	r1, r0
 80081a8:	6818      	ldr	r0, [r3, #0]
 80081aa:	f000 b861 	b.w	8008270 <_malloc_r>
 80081ae:	bf00      	nop
 80081b0:	20000030 	.word	0x20000030

080081b4 <free>:
 80081b4:	4b02      	ldr	r3, [pc, #8]	; (80081c0 <free+0xc>)
 80081b6:	4601      	mov	r1, r0
 80081b8:	6818      	ldr	r0, [r3, #0]
 80081ba:	f000 b80b 	b.w	80081d4 <_free_r>
 80081be:	bf00      	nop
 80081c0:	20000030 	.word	0x20000030

080081c4 <memset>:
 80081c4:	4402      	add	r2, r0
 80081c6:	4603      	mov	r3, r0
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d100      	bne.n	80081ce <memset+0xa>
 80081cc:	4770      	bx	lr
 80081ce:	f803 1b01 	strb.w	r1, [r3], #1
 80081d2:	e7f9      	b.n	80081c8 <memset+0x4>

080081d4 <_free_r>:
 80081d4:	b538      	push	{r3, r4, r5, lr}
 80081d6:	4605      	mov	r5, r0
 80081d8:	2900      	cmp	r1, #0
 80081da:	d045      	beq.n	8008268 <_free_r+0x94>
 80081dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081e0:	1f0c      	subs	r4, r1, #4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	bfb8      	it	lt
 80081e6:	18e4      	addlt	r4, r4, r3
 80081e8:	f000 f8ac 	bl	8008344 <__malloc_lock>
 80081ec:	4a1f      	ldr	r2, [pc, #124]	; (800826c <_free_r+0x98>)
 80081ee:	6813      	ldr	r3, [r2, #0]
 80081f0:	4610      	mov	r0, r2
 80081f2:	b933      	cbnz	r3, 8008202 <_free_r+0x2e>
 80081f4:	6063      	str	r3, [r4, #4]
 80081f6:	6014      	str	r4, [r2, #0]
 80081f8:	4628      	mov	r0, r5
 80081fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081fe:	f000 b8a2 	b.w	8008346 <__malloc_unlock>
 8008202:	42a3      	cmp	r3, r4
 8008204:	d90c      	bls.n	8008220 <_free_r+0x4c>
 8008206:	6821      	ldr	r1, [r4, #0]
 8008208:	1862      	adds	r2, r4, r1
 800820a:	4293      	cmp	r3, r2
 800820c:	bf04      	itt	eq
 800820e:	681a      	ldreq	r2, [r3, #0]
 8008210:	685b      	ldreq	r3, [r3, #4]
 8008212:	6063      	str	r3, [r4, #4]
 8008214:	bf04      	itt	eq
 8008216:	1852      	addeq	r2, r2, r1
 8008218:	6022      	streq	r2, [r4, #0]
 800821a:	6004      	str	r4, [r0, #0]
 800821c:	e7ec      	b.n	80081f8 <_free_r+0x24>
 800821e:	4613      	mov	r3, r2
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	b10a      	cbz	r2, 8008228 <_free_r+0x54>
 8008224:	42a2      	cmp	r2, r4
 8008226:	d9fa      	bls.n	800821e <_free_r+0x4a>
 8008228:	6819      	ldr	r1, [r3, #0]
 800822a:	1858      	adds	r0, r3, r1
 800822c:	42a0      	cmp	r0, r4
 800822e:	d10b      	bne.n	8008248 <_free_r+0x74>
 8008230:	6820      	ldr	r0, [r4, #0]
 8008232:	4401      	add	r1, r0
 8008234:	1858      	adds	r0, r3, r1
 8008236:	4282      	cmp	r2, r0
 8008238:	6019      	str	r1, [r3, #0]
 800823a:	d1dd      	bne.n	80081f8 <_free_r+0x24>
 800823c:	6810      	ldr	r0, [r2, #0]
 800823e:	6852      	ldr	r2, [r2, #4]
 8008240:	605a      	str	r2, [r3, #4]
 8008242:	4401      	add	r1, r0
 8008244:	6019      	str	r1, [r3, #0]
 8008246:	e7d7      	b.n	80081f8 <_free_r+0x24>
 8008248:	d902      	bls.n	8008250 <_free_r+0x7c>
 800824a:	230c      	movs	r3, #12
 800824c:	602b      	str	r3, [r5, #0]
 800824e:	e7d3      	b.n	80081f8 <_free_r+0x24>
 8008250:	6820      	ldr	r0, [r4, #0]
 8008252:	1821      	adds	r1, r4, r0
 8008254:	428a      	cmp	r2, r1
 8008256:	bf04      	itt	eq
 8008258:	6811      	ldreq	r1, [r2, #0]
 800825a:	6852      	ldreq	r2, [r2, #4]
 800825c:	6062      	str	r2, [r4, #4]
 800825e:	bf04      	itt	eq
 8008260:	1809      	addeq	r1, r1, r0
 8008262:	6021      	streq	r1, [r4, #0]
 8008264:	605c      	str	r4, [r3, #4]
 8008266:	e7c7      	b.n	80081f8 <_free_r+0x24>
 8008268:	bd38      	pop	{r3, r4, r5, pc}
 800826a:	bf00      	nop
 800826c:	200000bc 	.word	0x200000bc

08008270 <_malloc_r>:
 8008270:	b570      	push	{r4, r5, r6, lr}
 8008272:	1ccd      	adds	r5, r1, #3
 8008274:	f025 0503 	bic.w	r5, r5, #3
 8008278:	3508      	adds	r5, #8
 800827a:	2d0c      	cmp	r5, #12
 800827c:	bf38      	it	cc
 800827e:	250c      	movcc	r5, #12
 8008280:	2d00      	cmp	r5, #0
 8008282:	4606      	mov	r6, r0
 8008284:	db01      	blt.n	800828a <_malloc_r+0x1a>
 8008286:	42a9      	cmp	r1, r5
 8008288:	d903      	bls.n	8008292 <_malloc_r+0x22>
 800828a:	230c      	movs	r3, #12
 800828c:	6033      	str	r3, [r6, #0]
 800828e:	2000      	movs	r0, #0
 8008290:	bd70      	pop	{r4, r5, r6, pc}
 8008292:	f000 f857 	bl	8008344 <__malloc_lock>
 8008296:	4a21      	ldr	r2, [pc, #132]	; (800831c <_malloc_r+0xac>)
 8008298:	6814      	ldr	r4, [r2, #0]
 800829a:	4621      	mov	r1, r4
 800829c:	b991      	cbnz	r1, 80082c4 <_malloc_r+0x54>
 800829e:	4c20      	ldr	r4, [pc, #128]	; (8008320 <_malloc_r+0xb0>)
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	b91b      	cbnz	r3, 80082ac <_malloc_r+0x3c>
 80082a4:	4630      	mov	r0, r6
 80082a6:	f000 f83d 	bl	8008324 <_sbrk_r>
 80082aa:	6020      	str	r0, [r4, #0]
 80082ac:	4629      	mov	r1, r5
 80082ae:	4630      	mov	r0, r6
 80082b0:	f000 f838 	bl	8008324 <_sbrk_r>
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	d124      	bne.n	8008302 <_malloc_r+0x92>
 80082b8:	230c      	movs	r3, #12
 80082ba:	6033      	str	r3, [r6, #0]
 80082bc:	4630      	mov	r0, r6
 80082be:	f000 f842 	bl	8008346 <__malloc_unlock>
 80082c2:	e7e4      	b.n	800828e <_malloc_r+0x1e>
 80082c4:	680b      	ldr	r3, [r1, #0]
 80082c6:	1b5b      	subs	r3, r3, r5
 80082c8:	d418      	bmi.n	80082fc <_malloc_r+0x8c>
 80082ca:	2b0b      	cmp	r3, #11
 80082cc:	d90f      	bls.n	80082ee <_malloc_r+0x7e>
 80082ce:	600b      	str	r3, [r1, #0]
 80082d0:	50cd      	str	r5, [r1, r3]
 80082d2:	18cc      	adds	r4, r1, r3
 80082d4:	4630      	mov	r0, r6
 80082d6:	f000 f836 	bl	8008346 <__malloc_unlock>
 80082da:	f104 000b 	add.w	r0, r4, #11
 80082de:	1d23      	adds	r3, r4, #4
 80082e0:	f020 0007 	bic.w	r0, r0, #7
 80082e4:	1ac3      	subs	r3, r0, r3
 80082e6:	d0d3      	beq.n	8008290 <_malloc_r+0x20>
 80082e8:	425a      	negs	r2, r3
 80082ea:	50e2      	str	r2, [r4, r3]
 80082ec:	e7d0      	b.n	8008290 <_malloc_r+0x20>
 80082ee:	428c      	cmp	r4, r1
 80082f0:	684b      	ldr	r3, [r1, #4]
 80082f2:	bf16      	itet	ne
 80082f4:	6063      	strne	r3, [r4, #4]
 80082f6:	6013      	streq	r3, [r2, #0]
 80082f8:	460c      	movne	r4, r1
 80082fa:	e7eb      	b.n	80082d4 <_malloc_r+0x64>
 80082fc:	460c      	mov	r4, r1
 80082fe:	6849      	ldr	r1, [r1, #4]
 8008300:	e7cc      	b.n	800829c <_malloc_r+0x2c>
 8008302:	1cc4      	adds	r4, r0, #3
 8008304:	f024 0403 	bic.w	r4, r4, #3
 8008308:	42a0      	cmp	r0, r4
 800830a:	d005      	beq.n	8008318 <_malloc_r+0xa8>
 800830c:	1a21      	subs	r1, r4, r0
 800830e:	4630      	mov	r0, r6
 8008310:	f000 f808 	bl	8008324 <_sbrk_r>
 8008314:	3001      	adds	r0, #1
 8008316:	d0cf      	beq.n	80082b8 <_malloc_r+0x48>
 8008318:	6025      	str	r5, [r4, #0]
 800831a:	e7db      	b.n	80082d4 <_malloc_r+0x64>
 800831c:	200000bc 	.word	0x200000bc
 8008320:	200000c0 	.word	0x200000c0

08008324 <_sbrk_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	4c06      	ldr	r4, [pc, #24]	; (8008340 <_sbrk_r+0x1c>)
 8008328:	2300      	movs	r3, #0
 800832a:	4605      	mov	r5, r0
 800832c:	4608      	mov	r0, r1
 800832e:	6023      	str	r3, [r4, #0]
 8008330:	f7f8 fd54 	bl	8000ddc <_sbrk>
 8008334:	1c43      	adds	r3, r0, #1
 8008336:	d102      	bne.n	800833e <_sbrk_r+0x1a>
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	b103      	cbz	r3, 800833e <_sbrk_r+0x1a>
 800833c:	602b      	str	r3, [r5, #0]
 800833e:	bd38      	pop	{r3, r4, r5, pc}
 8008340:	2000088c 	.word	0x2000088c

08008344 <__malloc_lock>:
 8008344:	4770      	bx	lr

08008346 <__malloc_unlock>:
 8008346:	4770      	bx	lr

08008348 <_init>:
 8008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834a:	bf00      	nop
 800834c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834e:	bc08      	pop	{r3}
 8008350:	469e      	mov	lr, r3
 8008352:	4770      	bx	lr

08008354 <_fini>:
 8008354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008356:	bf00      	nop
 8008358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800835a:	bc08      	pop	{r3}
 800835c:	469e      	mov	lr, r3
 800835e:	4770      	bx	lr
